var cmJson = (function (exports) {
  'use strict';

  // These are filled with ranges (rangeFrom[i] up to but not including
  // rangeTo[i]) of code points that count as extending characters.
  let rangeFrom = [], rangeTo = []

  ;(() => {
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    for (let i = 0, n = 0; i < numbers.length; i++)
      (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
  })();

  function isExtendingChar(code) {
    if (code < 768) return false
    for (let from = 0, to = rangeFrom.length;;) {
      let mid = (from + to) >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true
      if (from == to) return false
    }
  }

  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF
  }

  const ZWJ = 0x200d;

  function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
  }

  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt$1(str, pos);
    pos += codePointSize$1(prev);
    while (pos < str.length) {
      let next = codePointAt$1(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize$1(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
        if (countBefore % 2 == 0) break
        else pos += 2;
      } else {
        break
      }
    }
    return pos
  }

  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found
      pos--;
    }
    return 0
  }

  function codePointAt$1(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow$1(code1)) return code0
    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
  }

  function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
  function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
  function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

  /**
  The data structure for documents. @nonabstract
  */
  class Text {
      /**
      Get the line description around the given position.
      */
      lineAt(pos) {
          if (pos < 0 || pos > this.length)
              throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n) {
          if (n < 1 || n > this.lines)
              throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
          return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(0, from, parts, 2 /* Open.To */);
          if (text.length)
              text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
          this.decompose(to, this.length, parts, 1 /* Open.From */);
          return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
          return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from, to = this.length) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(from, to, parts, 0);
          return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
          if (other == this)
              return true;
          if (other.length != this.length || other.lines != this.lines)
              return false;
          let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
          let a = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start, pos = start;;) {
              a.next(skip);
              b.next(skip);
              skip = 0;
              if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                  return false;
              pos += a.value.length;
              if (a.done || pos >= end)
                  return true;
          }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) { return new RawTextCursor(this, dir); }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from, to) {
          let inner;
          if (from == null) {
              inner = this.iter();
          }
          else {
              if (to == null)
                  to = this.lines + 1;
              let start = this.line(from).from;
              inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
      toString() { return this.sliceString(0); }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
      }
      /**
      @internal
      */
      constructor() { }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text) {
          if (text.length == 0)
              throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
              return Text.empty;
          return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
  }
  // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  class TextLeaf extends Text {
      constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
      }
      get lines() { return this.text.length; }
      get children() { return null; }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let string = this.text[i], end = offset + string.length;
              if ((isLine ? line : end) >= target)
                  return new Line(offset, end, line, string);
              offset = end + 1;
              line++;
          }
      }
      decompose(from, to, target, open) {
          let text = from <= 0 && to >= this.length ? this
              : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
          if (open & 1 /* Open.From */) {
              let prev = target.pop();
              let joined = appendText(text.text, prev.text.slice(), 0, text.length);
              if (joined.length <= 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(joined, prev.length + text.length));
              }
              else {
                  let mid = joined.length >> 1;
                  target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
              }
          }
          else {
              target.push(text);
          }
      }
      replace(from, to, text) {
          if (!(text instanceof TextLeaf))
              return super.replace(from, to, text);
          [from, to] = clip(this, from, to);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
          let newLen = this.length + text.length - (to - from);
          if (lines.length <= 32 /* Tree.Branch */)
              return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
              let line = this.text[i], end = pos + line.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += line.slice(Math.max(0, from - pos), to - pos);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let line of this.text)
              target.push(line);
      }
      scanIdentical() { return 0; }
      static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
              part.push(line);
              len += line.length + 1;
              if (part.length == 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(part, len));
                  part = [];
                  len = -1;
              }
          }
          if (len > -1)
              target.push(new TextLeaf(part, len));
          return target;
      }
  }
  // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  class TextNode extends Text {
      constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
              this.lines += child.lines;
      }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
              if ((isLine ? endLine : end) >= target)
                  return child.lineInner(target, isLine, line, offset);
              offset = end + 1;
              line = endLine + 1;
          }
      }
      decompose(from, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (from <= end && to >= pos) {
                  let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                  if (pos >= from && end <= to && !childOpen)
                      target.push(child);
                  else
                      child.decompose(from - pos, to - pos, target, childOpen);
              }
              pos = end + 1;
          }
      }
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          if (text.lines < this.lines)
              for (let i = 0, pos = 0; i < this.children.length; i++) {
                  let child = this.children[i], end = pos + child.length;
                  // Fast path: if the change only affects one child and the
                  // child's size remains in the acceptable range, only update
                  // that child
                  if (from >= pos && to <= end) {
                      let updated = child.replace(from - pos, to - pos, text);
                      let totalLines = this.lines - child.lines + updated.lines;
                      if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                          updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                          let copy = this.children.slice();
                          copy[i] = updated;
                          return new TextNode(copy, this.length - (to - from) + text.length);
                      }
                      return super.replace(pos, end, updated);
                  }
                  pos = end + 1;
              }
          return super.replace(from, to, text);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += child.sliceString(from - pos, to - pos, lineSep);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let child of this.children)
              child.flatten(target);
      }
      scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
              return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
              : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (;; iA += dir, iB += dir) {
              if (iA == eA || iB == eB)
                  return length;
              let chA = this.children[iA], chB = other.children[iB];
              if (chA != chB)
                  return length + chA.scanIdentical(chB, dir);
              length += chA.length + 1;
          }
      }
      static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
          let lines = 0;
          for (let ch of children)
              lines += ch.lines;
          if (lines < 32 /* Tree.Branch */) {
              let flat = [];
              for (let ch of children)
                  ch.flatten(flat);
              return new TextLeaf(flat, length);
          }
          let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add(child) {
              let last;
              if (child.lines > maxChunk && child instanceof TextNode) {
                  for (let node of child.children)
                      add(node);
              }
              else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                  flush();
                  chunked.push(child);
              }
              else if (child instanceof TextLeaf && currentLines &&
                  (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                  child.lines + last.lines <= 32 /* Tree.Branch */) {
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
              }
              else {
                  if (currentLines + child.lines > chunk)
                      flush();
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk.push(child);
              }
          }
          function flush() {
              if (currentLines == 0)
                  return;
              chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
              currentLen = -1;
              currentLines = currentChunk.length = 0;
          }
          for (let child of children)
              add(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
  }
  Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
      let length = -1;
      for (let line of text)
          length += line.length + 1;
      return length;
  }
  function appendText(text, target, from = 0, to = 1e9) {
      for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
          let line = text[i], end = pos + line.length;
          if (end >= from) {
              if (end > to)
                  line = line.slice(0, to - pos);
              if (pos < from)
                  line = line.slice(from - pos);
              if (first) {
                  target[target.length - 1] += line;
                  first = false;
              }
              else
                  target.push(line);
          }
          pos = end + 1;
      }
      return target;
  }
  function sliceText(text, from, to) {
      return appendText(text, [""], from, to);
  }
  class RawTextCursor {
      constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
      }
      nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (;;) {
              let last = this.nodes.length - 1;
              let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
              let size = top instanceof TextLeaf ? top.text.length : top.children.length;
              if (offset == (dir > 0 ? size : 0)) {
                  if (last == 0) {
                      this.done = true;
                      this.value = "";
                      return this;
                  }
                  if (dir > 0)
                      this.offsets[last - 1]++;
                  this.nodes.pop();
                  this.offsets.pop();
              }
              else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                  this.offsets[last] += dir;
                  if (skip == 0) {
                      this.lineBreak = true;
                      this.value = "\n";
                      return this;
                  }
                  skip--;
              }
              else if (top instanceof TextLeaf) {
                  // Move to the next string
                  let next = top.text[offset + (dir < 0 ? -1 : 0)];
                  this.offsets[last] += dir;
                  if (next.length > Math.max(0, skip)) {
                      this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                      return this;
                  }
                  skip -= next.length;
              }
              else {
                  let next = top.children[offset + (dir < 0 ? -1 : 0)];
                  if (skip > next.length) {
                      skip -= next.length;
                      this.offsets[last] += dir;
                  }
                  else {
                      if (dir < 0)
                          this.offsets[last]--;
                      this.nodes.push(next);
                      this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                  }
              }
          }
      }
      next(skip = 0) {
          if (skip < 0) {
              this.nextInner(-skip, (-this.dir));
              skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
      }
  }
  class PartialTextCursor {
      constructor(text, start, end) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
      }
      nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
              this.value = "";
              this.done = true;
              return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
              skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
      }
      next(skip = 0) {
          if (skip < 0)
              skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
              skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
  }
  class LineCursor {
      constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
      }
      next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done && this.afterBreak) {
              this.value = "";
              this.afterBreak = false;
          }
          else if (done) {
              this.done = true;
              this.value = "";
          }
          else if (lineBreak) {
              if (this.afterBreak) {
                  this.value = "";
              }
              else {
                  this.afterBreak = true;
                  this.next();
              }
          }
          else {
              this.value = value;
              this.afterBreak = false;
          }
          return this;
      }
      get lineBreak() { return false; }
  }
  if (typeof Symbol != "undefined") {
      Text.prototype[Symbol.iterator] = function () { return this.iter(); };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
          LineCursor.prototype[Symbol.iterator] = function () { return this; };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  class Line {
      /**
      @internal
      */
      constructor(
      /**
      The position of the start of the line.
      */
      from, 
      /**
      The position at the end of the line (_before_ the line break,
      or at the end of document for the last line).
      */
      to, 
      /**
      This line's line number (1-based).
      */
      number, 
      /**
      The line's content.
      */
      text) {
          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() { return this.to - this.from; }
  }
  function clip(text, from, to) {
      from = Math.max(0, Math.min(text.length, from));
      return [from, Math.max(from, Math.min(text.length, to))];
  }

  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
      return findClusterBreak$1(str, pos, forward, includeExtending);
  }
  function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
  function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh(code0) || pos + 1 == str.length)
          return code0;
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow(code1))
          return code0;
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint$2(code) {
      if (code <= 0xffff)
          return String.fromCharCode(code);
      code -= 0x10000;
      return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up in a JavaScript string.
  */
  function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

  const DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/(function (MapMode) {
      /**
      Map a position to a valid new position, even when its context
      was deleted.
      */
      MapMode[MapMode["Simple"] = 0] = "Simple";
      /**
      Return null if deletion happens across the position.
      */
      MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
      /**
      Return null if the character _before_ the position is deleted.
      */
      MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
      /**
      Return null if the character _after_ the position is deleted.
      */
      MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode})(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  class ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      sections) {
          this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
              result += this.sections[i];
          return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
              let ins = this.sections[i + 1];
              result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0) {
                  f(posA, posB, len);
                  posB += len;
              }
              else {
                  posB += ins;
              }
              posA += len;
          }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0)
                  sections.push(len, ins);
              else
                  sections.push(ins, len);
          }
          return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
      mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
      mapPos(pos, assoc = -1, mode = MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
              if (ins < 0) {
                  if (endA > pos)
                      return posB + (pos - posA);
                  posB += len;
              }
              else {
                  if (mode != MapMode.Simple && endA >= pos &&
                      (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                          mode == MapMode.TrackBefore && posA < pos ||
                          mode == MapMode.TrackAfter && endA > pos))
                      return null;
                  if (endA > pos || endA == pos && assoc < 0 && !len)
                      return pos == posA || assoc < 0 ? posB : posB + ins;
                  posB += ins;
              }
              posA = endA;
          }
          if (pos > posA)
              throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from, to = from) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
              let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
              if (ins >= 0 && pos <= to && end >= from)
                  return pos < from && end > to ? "cover" : true;
              pos = end;
          }
          return false;
      }
      /**
      @internal
      */
      toString() {
          let result = "";
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() { return this.sections; }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
              throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json);
      }
      /**
      @internal
      */
      static create(sections) { return new ChangeDesc(sections); }
  }
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  class ChangeSet extends ChangeDesc {
      constructor(sections, 
      /**
      @internal
      */
      inserted) {
          super(sections);
          this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc) {
          if (this.length != doc.length)
              throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
          return doc;
      }
      mapDesc(other, before = false) { return mapSet(this, other, before, true); }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
              let len = sections[i], ins = sections[i + 1];
              if (ins >= 0) {
                  sections[i] = ins;
                  sections[i + 1] = len;
                  let index = i >> 1;
                  while (inserted.length < index)
                      inserted.push(Text.empty);
                  inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
              }
              pos += len;
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() { return ChangeDesc.create(this.sections); }
      /**
      @internal
      */
      filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done: for (let i = 0, pos = 0;;) {
              let next = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next || pos == next && iter.len == 0) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, next - pos);
                  addSection(filteredSections, len, -1);
                  let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                  addSection(resultSections, len, ins);
                  if (ins > 0)
                      addInsert(resultInserted, resultSections, iter.text);
                  iter.forward(len);
                  pos += len;
              }
              let end = ranges[i++];
              while (pos < end) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, end - pos);
                  addSection(resultSections, len, -1);
                  addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                  iter.forward(len);
                  pos += len;
              }
          }
          return { changes: new ChangeSet(resultSections, resultInserted),
              filtered: ChangeDesc.create(filteredSections) };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
              let len = this.sections[i], ins = this.sections[i + 1];
              if (ins < 0)
                  parts.push(len);
              else if (ins == 0)
                  parts.push([len]);
              else
                  parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
              if (!force && !sections.length)
                  return;
              if (pos < length)
                  addSection(sections, length - pos, -1);
              let set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
          }
          function process(spec) {
              if (Array.isArray(spec)) {
                  for (let sub of spec)
                      process(sub);
              }
              else if (spec instanceof ChangeSet) {
                  if (spec.length != length)
                      throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                  flush();
                  total = total ? total.compose(spec.map(total)) : spec;
              }
              else {
                  let { from, to = from, insert } = spec;
                  if (from > to || from < 0 || to > length)
                      throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                  let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                  let insLen = insText.length;
                  if (from == to && insLen == 0)
                      return;
                  if (from < pos)
                      flush();
                  if (from > pos)
                      addSection(sections, from - pos, -1);
                  addSection(sections, to - from, insLen);
                  addInsert(inserted, sections, insText);
                  pos = to;
              }
          }
          process(changes);
          flush(!total);
          return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json))
              throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json.length; i++) {
              let part = json[i];
              if (typeof part == "number") {
                  sections.push(part, -1);
              }
              else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                  throw new RangeError("Invalid JSON representation of ChangeSet");
              }
              else if (part.length == 1) {
                  sections.push(part[0], 0);
              }
              else {
                  while (inserted.length < i)
                      inserted.push(Text.empty);
                  inserted[i] = Text.of(part.slice(1));
                  sections.push(part[0], inserted[i].length);
              }
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
          return new ChangeSet(sections, inserted);
      }
  }
  function addSection(sections, len, ins, forceJoin = false) {
      if (len == 0 && ins <= 0)
          return;
      let last = sections.length - 2;
      if (last >= 0 && ins <= 0 && ins == sections[last + 1])
          sections[last] += len;
      else if (last >= 0 && len == 0 && sections[last] == 0)
          sections[last + 1] += ins;
      else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
      }
      else
          sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
      if (value.length == 0)
          return;
      let index = (sections.length - 2) >> 1;
      if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
      }
      else {
          while (values.length < index)
              values.push(Text.empty);
          values.push(value);
      }
  }
  function iterChanges(desc, f, individual) {
      let inserted = desc.inserted;
      for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
          let len = desc.sections[i++], ins = desc.sections[i++];
          if (ins < 0) {
              posA += len;
              posB += len;
          }
          else {
              let endA = posA, endB = posB, text = Text.empty;
              for (;;) {
                  endA += len;
                  endB += ins;
                  if (ins && inserted)
                      text = text.append(inserted[(i - 2) >> 1]);
                  if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                      break;
                  len = desc.sections[i++];
                  ins = desc.sections[i++];
              }
              f(posA, endA, posB, endB, text);
              posA = endA;
              posB = endB;
          }
      }
  }
  function mapSet(setA, setB, before, mkSet = false) {
      // Produce a copy of setA that applies to the document after setB
      // has been applied (assuming both start at the same document).
      let sections = [], insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      // Iterate over both sets in parallel. inserted tracks, for changes
      // in A that have to be processed piece-by-piece, whether their
      // content has been inserted already, and refers to the section
      // index.
      for (let inserted = -1;;) {
          if (a.done && b.len || b.done && a.len) {
              throw new Error("Mismatched change set lengths");
          }
          else if (a.ins == -1 && b.ins == -1) {
              // Move across ranges skipped by both sets.
              let len = Math.min(a.len, b.len);
              addSection(sections, len, -1);
              a.forward(len);
              b.forward(len);
          }
          else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
              // If there's a change in B that comes before the next change in
              // A (ordered by start pos, then len, then before flag), skip
              // that (and process any changes in A it covers).
              let len = b.len;
              addSection(sections, b.ins, -1);
              while (len) {
                  let piece = Math.min(a.len, len);
                  if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                      addSection(sections, 0, a.ins);
                      if (insert)
                          addInsert(insert, sections, a.text);
                      inserted = a.i;
                  }
                  a.forward(piece);
                  len -= piece;
              }
              b.next();
          }
          else if (a.ins >= 0) {
              // Process the part of a change in A up to the start of the next
              // non-deletion change in B (if overlapping).
              let len = 0, left = a.len;
              while (left) {
                  if (b.ins == -1) {
                      let piece = Math.min(left, b.len);
                      len += piece;
                      left -= piece;
                      b.forward(piece);
                  }
                  else if (b.ins == 0 && b.len < left) {
                      left -= b.len;
                      b.next();
                  }
                  else {
                      break;
                  }
              }
              addSection(sections, len, inserted < a.i ? a.ins : 0);
              if (insert && inserted < a.i)
                  addInsert(insert, sections, a.text);
              inserted = a.i;
              a.forward(a.len - left);
          }
          else if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else {
              throw new Error("Mismatched change set lengths");
          }
      }
  }
  function composeSets(setA, setB, mkSet = false) {
      let sections = [];
      let insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      for (let open = false;;) {
          if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else if (a.ins == 0) { // Deletion in A
              addSection(sections, a.len, 0, open);
              a.next();
          }
          else if (b.len == 0 && !b.done) { // Insertion in B
              addSection(sections, 0, b.ins, open);
              if (insert)
                  addInsert(insert, sections, b.text);
              b.next();
          }
          else if (a.done || b.done) {
              throw new Error("Mismatched change set lengths");
          }
          else {
              let len = Math.min(a.len2, b.len), sectionLen = sections.length;
              if (a.ins == -1) {
                  let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                  addSection(sections, len, insB, open);
                  if (insert && insB)
                      addInsert(insert, sections, b.text);
              }
              else if (b.ins == -1) {
                  addSection(sections, a.off ? 0 : a.len, len, open);
                  if (insert)
                      addInsert(insert, sections, a.textBit(len));
              }
              else {
                  addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                  if (insert && !b.off)
                      addInsert(insert, sections, b.text);
              }
              open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
              a.forward2(len);
              b.forward(len);
          }
      }
  }
  class SectionIter {
      constructor(set) {
          this.set = set;
          this.i = 0;
          this.next();
      }
      next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
          }
          else {
              this.len = 0;
              this.ins = -2;
          }
          this.off = 0;
      }
      get done() { return this.ins == -2; }
      get len2() { return this.ins < 0 ? this.len : this.ins; }
      get text() {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length ? Text.empty : inserted[index];
      }
      textBit(len) {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length && !len ? Text.empty
              : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
      forward(len) {
          if (len == this.len)
              this.next();
          else {
              this.len -= len;
              this.off += len;
          }
      }
      forward2(len) {
          if (this.ins == -1)
              this.forward(len);
          else if (len == this.ins)
              this.next();
          else {
              this.ins -= len;
              this.off += len;
          }
      }
  }

  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  class SelectionRange {
      constructor(
      /**
      The lower boundary of the range.
      */
      from, 
      /**
      The upper boundary of the range.
      */
      to, flags) {
          this.from = from;
          this.to = to;
          this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() { return this.from == this.to; }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
          let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
          return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
          let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
          return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
          let from, to;
          if (this.empty) {
              from = to = change.mapPos(this.from, assoc);
          }
          else {
              from = change.mapPos(this.from, 1);
              to = change.mapPos(this.to, -1);
          }
          return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from, to = from) {
          if (from <= this.anchor && to >= this.anchor)
              return EditorSelection.range(from, to);
          let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
          return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other, includeAssoc = false) {
          return this.anchor == other.anchor && this.head == other.head &&
              (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() { return { anchor: this.anchor, head: this.head }; }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json) {
          if (!json || typeof json.anchor != "number" || typeof json.head != "number")
              throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
      static create(from, to, flags) {
          return new SelectionRange(from, to, flags);
      }
  }
  /**
  An editor selection holds one or more selection ranges.
  */
  class EditorSelection {
      constructor(
      /**
      The ranges in the selection, sorted by position. Ranges cannot
      overlap (but they may touch, if they aren't empty).
      */
      ranges, 
      /**
      The index of the _main_ range in the selection (which is
      usually the range that was added last).
      */
      mainIndex) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
          if (change.empty)
              return this;
          return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
      eq(other, includeAssoc = false) {
          if (this.ranges.length != other.ranges.length ||
              this.mainIndex != other.mainIndex)
              return false;
          for (let i = 0; i < this.ranges.length; i++)
              if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                  return false;
          return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() { return this.ranges[this.mainIndex]; }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
          return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json) {
          if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
              throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
              throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
              let range = ranges[i];
              if (range.empty ? range.from <= pos : range.from < pos)
                  return EditorSelection.normalized(ranges.slice(), mainIndex);
              pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
              ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn, bidiLevel) {
          let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
          return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
              : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
          let main = ranges[mainIndex];
          ranges.sort((a, b) => a.from - b.from);
          mainIndex = ranges.indexOf(main);
          for (let i = 1; i < ranges.length; i++) {
              let range = ranges[i], prev = ranges[i - 1];
              if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                  let from = prev.from, to = Math.max(range.to, prev.to);
                  if (i <= mainIndex)
                      mainIndex--;
                  ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
              }
          }
          return new EditorSelection(ranges, mainIndex);
      }
  }
  function checkSelection(selection, docLength) {
      for (let range of selection.ranges)
          if (range.to > docLength)
              throw new RangeError("Selection points outside of document");
  }

  let nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

  Note that `Facet` instances can be used anywhere where
  [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
  */
  class Facet {
      constructor(
      /**
      @internal
      */
      combine, 
      /**
      @internal
      */
      compareInput, 
      /**
      @internal
      */
      compare, isStatic, enables) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          /**
          @internal
          */
          this.id = nextID++;
          this.default = combine([]);
          this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Returns a facet reader for this facet, which can be used to
      [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
      */
      get reader() { return this; }
      /**
      Define a new facet.
      */
      static define(config = {}) {
          return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
          return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
      from(field, get) {
          if (!get)
              get = x => x;
          return this.compute([field], state => get(state.field(field)));
      }
  }
  function sameArray$1(a, b) {
      return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  class FacetProvider {
      constructor(dependencies, facet, type, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
      }
      dynamicSlot(addresses) {
          var _a;
          let getter = this.value;
          let compare = this.facet.compareInput;
          let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
              if (dep == "doc")
                  depDoc = true;
              else if (dep == "selection")
                  depSel = true;
              else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                  depAddrs.push(addresses[dep.id]);
          }
          return {
              create(state) {
                  state.values[idx] = getter(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update(state, tr) {
                  if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                      let newVal = getter(state);
                      if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                          state.values[idx] = newVal;
                          return 1 /* SlotStatus.Changed */;
                      }
                  }
                  return 0;
              },
              reconfigure: (state, oldState) => {
                  let newVal, oldAddr = oldState.config.address[id];
                  if (oldAddr != null) {
                      let oldVal = getAddr(oldState, oldAddr);
                      if (this.dependencies.every(dep => {
                          return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                              dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                      }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                          state.values[idx] = oldVal;
                          return 0;
                      }
                  }
                  else {
                      newVal = getter(state);
                  }
                  state.values[idx] = newVal;
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
  }
  function compareArray(a, b, compare) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!compare(a[i], b[i]))
              return false;
      return true;
  }
  function ensureAll(state, addrs) {
      let changed = false;
      for (let addr of addrs)
          if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
              changed = true;
      return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
      let providerAddrs = providers.map(p => addresses[p.id]);
      let providerTypes = providers.map(p => p.type);
      let dynamic = providerAddrs.filter(p => !(p & 1));
      let idx = addresses[facet.id] >> 1;
      function get(state) {
          let values = [];
          for (let i = 0; i < providerAddrs.length; i++) {
              let value = getAddr(state, providerAddrs[i]);
              if (providerTypes[i] == 2 /* Provider.Multi */)
                  for (let val of value)
                      values.push(val);
              else
                  values.push(value);
          }
          return facet.combine(values);
      }
      return {
          create(state) {
              for (let addr of providerAddrs)
                  ensureAddr(state, addr);
              state.values[idx] = get(state);
              return 1 /* SlotStatus.Changed */;
          },
          update(state, tr) {
              if (!ensureAll(state, dynamic))
                  return 0;
              let value = get(state);
              if (facet.compare(value, state.values[idx]))
                  return 0;
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          },
          reconfigure(state, oldState) {
              let depChanged = ensureAll(state, providerAddrs);
              let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
              if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              let value = get(state);
              if (facet.compare(value, oldValue)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          }
      };
  }
  const initField = /*@__PURE__*/Facet.define({ static: true });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  class StateField {
      constructor(
      /**
      @internal
      */
      id, createF, updateF, compareF, 
      /**
      @internal
      */
      spec) {
          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */
          this.provides = undefined;
      }
      /**
      Define a state field.
      */
      static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
          if (config.provide)
              field.provides = config.provide(field);
          return field;
      }
      create(state) {
          let init = state.facet(initField).find(i => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return {
              create: (state) => {
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update: (state, tr) => {
                  let oldVal = state.values[idx];
                  let value = this.updateF(oldVal, tr);
                  if (this.compareF(oldVal, value))
                      return 0;
                  state.values[idx] = value;
                  return 1 /* SlotStatus.Changed */;
              },
              reconfigure: (state, oldState) => {
                  let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
                  if ((reInit = init.find(i => i.field == this)) && reInit != oldInit.find(i => i.field == this)) {
                      state.values[idx] = reInit.create(state);
                      return 1 /* SlotStatus.Changed */;
                  }
                  if (oldState.config.address[this.id] != null) {
                      state.values[idx] = oldState.field(this);
                      return 0;
                  }
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create) {
          return [this, initField.of({ field: this, create })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() { return this; }
  }
  const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
      return (ext) => new PrecExtension(ext, value);
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  const Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /*@__PURE__*/prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /*@__PURE__*/prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /*@__PURE__*/prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /*@__PURE__*/prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  class PrecExtension {
      constructor(inner, prec) {
          this.inner = inner;
          this.prec = prec;
      }
  }
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  class Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) { return new CompartmentInstance(this, ext); }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content) {
          return Compartment.reconfigure.of({ compartment: this, extension: content });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
          return state.config.compartments.get(this);
      }
  }
  class CompartmentInstance {
      constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
      }
  }
  class Configuration {
      constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.facets = facets;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
              this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
      }
      staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base, compartments, oldState) {
          let fields = [];
          let facets = Object.create(null);
          let newCompartments = new Map();
          for (let ext of flatten(base, compartments, newCompartments)) {
              if (ext instanceof StateField)
                  fields.push(ext);
              else
                  (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          for (let field of fields) {
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(a => field.slot(a));
          }
          let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
          for (let id in facets) {
              let providers = facets[id], facet = providers[0].facet;
              let oldProviders = oldFacets && oldFacets[id] || [];
              if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                  address[facet.id] = (staticValues.length << 1) | 1;
                  if (sameArray$1(oldProviders, providers)) {
                      staticValues.push(oldState.facet(facet));
                  }
                  else {
                      let value = facet.combine(providers.map(p => p.value));
                      staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                  }
              }
              else {
                  for (let p of providers) {
                      if (p.type == 0 /* Provider.Static */) {
                          address[p.id] = (staticValues.length << 1) | 1;
                          staticValues.push(p.value);
                      }
                      else {
                          address[p.id] = dynamicSlots.length << 1;
                          dynamicSlots.push(a => p.dynamicSlot(a));
                      }
                  }
                  address[facet.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
              }
          }
          let dynamic = dynamicSlots.map(f => f(address));
          return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
  }
  function flatten(extension, compartments, newCompartments) {
      let result = [[], [], [], [], []];
      let seen = new Map();
      function inner(ext, prec) {
          let known = seen.get(ext);
          if (known != null) {
              if (known <= prec)
                  return;
              let found = result[known].indexOf(ext);
              if (found > -1)
                  result[known].splice(found, 1);
              if (ext instanceof CompartmentInstance)
                  newCompartments.delete(ext.compartment);
          }
          seen.set(ext, prec);
          if (Array.isArray(ext)) {
              for (let e of ext)
                  inner(e, prec);
          }
          else if (ext instanceof CompartmentInstance) {
              if (newCompartments.has(ext.compartment))
                  throw new RangeError(`Duplicate use of compartment in extensions`);
              let content = compartments.get(ext.compartment) || ext.inner;
              newCompartments.set(ext.compartment, content);
              inner(content, prec);
          }
          else if (ext instanceof PrecExtension) {
              inner(ext.inner, ext.prec);
          }
          else if (ext instanceof StateField) {
              result[prec].push(ext);
              if (ext.provides)
                  inner(ext.provides, prec);
          }
          else if (ext instanceof FacetProvider) {
              result[prec].push(ext);
              if (ext.facet.extensions)
                  inner(ext.facet.extensions, Prec_.default);
          }
          else {
              let content = ext.extension;
              if (!content)
                  throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
              inner(content, prec);
          }
      }
      inner(extension, Prec_.default);
      return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
      if (addr & 1)
          return 2 /* SlotStatus.Computed */;
      let idx = addr >> 1;
      let status = state.status[idx];
      if (status == 4 /* SlotStatus.Computing */)
          throw new Error("Cyclic dependency between fields and/or facets");
      if (status & 2 /* SlotStatus.Computed */)
          return status;
      state.status[idx] = 4 /* SlotStatus.Computing */;
      let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
      return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
      return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }

  const languageData = /*@__PURE__*/Facet.define();
  const allowMultipleSelections = /*@__PURE__*/Facet.define({
      combine: values => values.some(v => v),
      static: true
  });
  const lineSeparator = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : undefined,
      static: true
  });
  const changeFilter = /*@__PURE__*/Facet.define();
  const transactionFilter = /*@__PURE__*/Facet.define();
  const transactionExtender = /*@__PURE__*/Facet.define();
  const readOnly = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : false
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  class Annotation {
      /**
      @internal
      */
      constructor(
      /**
      The annotation type.
      */
      type, 
      /**
      The value of this annotation.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() { return new AnnotationType(); }
  }
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  class AnnotationType {
      /**
      Create an instance of this annotation.
      */
      of(value) { return new Annotation(this, value); }
  }
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  class StateEffectType {
      /**
      @internal
      */
      constructor(
      // The `any` types in these function types are there to work
      // around TypeScript issue #37631, where the type guard on
      // `StateEffect.is` mysteriously stops working when these properly
      // have type `Value`.
      /**
      @internal
      */
      map) {
          this.map = map;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) { return new StateEffect(this, value); }
  }
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  class StateEffect {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      type, 
      /**
      The value of this effect.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type) { return this.type == type; }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
      static define(spec = {}) {
          return new StateEffectType(spec.map || (v => v));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
          if (!effects.length)
              return effects;
          let result = [];
          for (let effect of effects) {
              let mapped = effect.map(mapping);
              if (mapped)
                  result.push(mapped);
          }
          return result;
      }
  }
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  class Transaction {
      constructor(
      /**
      The state from which the transaction starts.
      */
      startState, 
      /**
      The document changes made by this transaction.
      */
      changes, 
      /**
      The selection set by this transaction, or undefined if it
      doesn't explicitly set a selection.
      */
      selection, 
      /**
      The effects added to the transaction.
      */
      effects, 
      /**
      @internal
      */
      annotations, 
      /**
      Whether the selection should be scrolled into view after this
      transaction is dispatched.
      */
      scrollIntoView) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */
          this._doc = null;
          /**
          @internal
          */
          this._state = null;
          if (selection)
              checkSelection(selection, changes.newLength);
          if (!annotations.some((a) => a.type == Transaction.time))
              this.annotations = annotations.concat(Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState, changes, selection, effects, annotations, scrollIntoView) {
          return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
          if (!this._state)
              this.startState.applyTransaction(this);
          return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type) {
          for (let ann of this.annotations)
              if (ann.type == type)
                  return ann.value;
          return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() { return !this.changes.empty; }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() { return this.startState.config != this.state.config; }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
  }
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
      let result = [];
      for (let iA = 0, iB = 0;;) {
          let from, to;
          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
              from = a[iA++];
              to = a[iA++];
          }
          else if (iB < b.length) {
              from = b[iB++];
              to = b[iB++];
          }
          else
              return result;
          if (!result.length || result[result.length - 1] < from)
              result.push(from, to);
          else if (result[result.length - 1] < to)
              result[result.length - 1] = to;
      }
  }
  function mergeTransaction(a, b, sequential) {
      var _a;
      let mapForA, mapForB, changes;
      if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
      }
      else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
      }
      return {
          changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
      };
  }
  function resolveTransactionInner(state, spec, docSize) {
      let sel = spec.selection, annotations = asArray$1(spec.annotations);
      if (spec.userEvent)
          annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
      return {
          changes: spec.changes instanceof ChangeSet ? spec.changes
              : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray$1(spec.effects),
          annotations,
          scrollIntoView: !!spec.scrollIntoView
      };
  }
  function resolveTransaction(state, specs, filter) {
      let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
      if (specs.length && specs[0].filter === false)
          filter = false;
      for (let i = 1; i < specs.length; i++) {
          if (specs[i].filter === false)
              filter = false;
          let seq = !!specs[i].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
      }
      let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
      return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
      let state = tr.startState;
      // Change filters
      let result = true;
      for (let filter of state.facet(changeFilter)) {
          let value = filter(tr);
          if (value === false) {
              result = false;
              break;
          }
          if (Array.isArray(value))
              result = result === true ? value : joinRanges(result, value);
      }
      if (result !== true) {
          let changes, back;
          if (result === false) {
              back = tr.changes.invertedDesc;
              changes = ChangeSet.empty(state.doc.length);
          }
          else {
              let filtered = tr.changes.filter(result);
              changes = filtered.changes;
              back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
          }
          tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
      }
      // Transaction filters
      let filters = state.facet(transactionFilter);
      for (let i = filters.length - 1; i >= 0; i--) {
          let filtered = filters[i](tr);
          if (filtered instanceof Transaction)
              tr = filtered;
          else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
              tr = filtered[0];
          else
              tr = resolveTransaction(state, asArray$1(filtered), false);
      }
      return tr;
  }
  function extendTransaction(tr) {
      let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
      for (let i = extenders.length - 1; i >= 0; i--) {
          let extension = extenders[i](tr);
          if (extension && Object.keys(extension).length)
              spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
      }
      return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  const none$2 = [];
  function asArray$1(value) {
      return value == null ? none$2 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/(function (CharCategory) {
      /**
      Word characters.
      */
      CharCategory[CharCategory["Word"] = 0] = "Word";
      /**
      Whitespace.
      */
      CharCategory[CharCategory["Space"] = 1] = "Space";
      /**
      Anything else.
      */
      CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory})(CharCategory || (CharCategory = {}));
  const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  let wordChar;
  try {
      wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  }
  catch (_) { }
  function hasWordChar(str) {
      if (wordChar)
          return wordChar.test(str);
      for (let i = 0; i < str.length; i++) {
          let ch = str[i];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
              return true;
      }
      return false;
  }
  function makeCategorizer(wordChars) {
      return (char) => {
          if (!/\S/.test(char))
              return CharCategory.Space;
          if (hasWordChar(char))
              return CharCategory.Word;
          for (let i = 0; i < wordChars.length; i++)
              if (char.indexOf(wordChars[i]) > -1)
                  return CharCategory.Word;
          return CharCategory.Other;
      };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  class EditorState {
      constructor(
      /**
      @internal
      */
      config, 
      /**
      The current document.
      */
      doc, 
      /**
      The current selection.
      */
      selection, 
      /**
      @internal
      */
      values, computeSlot, tr) {
          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          this.status = config.statusTemplate.slice();
          this.computeSlot = computeSlot;
          // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state
          if (tr)
              tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
              ensureAddr(this, i << 1);
          this.computeSlot = null;
      }
      field(field, require = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
              if (require)
                  throw new RangeError("Field is not present in this state");
              return undefined;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
          return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
          let conf = this.config, { base, compartments } = conf;
          for (let effect of tr.effects) {
              if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                      compartments = new Map;
                      conf.compartments.forEach((val, key) => compartments.set(key, val));
                      conf = null;
                  }
                  compartments.set(effect.value.compartment, effect.value.extension);
              }
              else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
              }
              else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray$1(base).concat(effect.value);
              }
          }
          let startValues;
          if (!conf) {
              conf = Configuration.resolve(base, compartments, this);
              let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
              startValues = intermediateState.values;
          }
          else {
              startValues = tr.startState.values.slice();
          }
          let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
          new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text) {
          if (typeof text == "string")
              text = this.toText(text);
          return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
              range: EditorSelection.cursor(range.from + text.length) }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray$1(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
              let result = f(sel.ranges[i]);
              let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
              for (let j = 0; j < i; j++)
                  ranges[j] = ranges[j].map(newMapped);
              let mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
          }
          return {
              changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects
          };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
          if (spec instanceof ChangeSet)
              return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string) {
          return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from = 0, to = this.doc.length) {
          return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
              return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
          let result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
          };
          if (fields)
              for (let prop in fields) {
                  let value = fields[prop];
                  if (value instanceof StateField && this.config.address[value.id] != null)
                      result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
              }
          return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json, config = {}, fields) {
          if (!json || typeof json.doc != "string")
              throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
              for (let prop in fields) {
                  if (Object.prototype.hasOwnProperty.call(json, prop)) {
                      let field = fields[prop], value = json[prop];
                      fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                  }
              }
          return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config = {}) {
          let configuration = Configuration.resolve(config.extensions || [], new Map);
          let doc = config.doc instanceof Text ? config.doc
              : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0)
              : config.selection instanceof EditorSelection ? config.selection
                  : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc.length);
          if (!configuration.staticFacet(allowMultipleSelections))
              selection = selection.asSingle();
          return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() { return this.facet(EditorState.tabSize); }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() { return this.facet(readOnly); }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase, ...insert) {
          for (let map of this.facet(EditorState.phrases))
              if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                  phrase = map[phrase];
                  break;
              }
          if (insert.length)
              phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                  if (i == "$")
                      return "$";
                  let n = +(i || 1);
                  return !n || n > insert.length ? m : insert[n - 1];
              });
          return phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name, pos, side = -1) {
          let values = [];
          for (let provider of this.facet(languageData)) {
              for (let result of provider(this, pos, side)) {
                  if (Object.prototype.hasOwnProperty.call(result, name))
                      values.push(result[name]);
              }
          }
          return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos) {
          let { text, from, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start = pos - from, end = pos - from;
          while (start > 0) {
              let prev = findClusterBreak(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word)
                  break;
              start = prev;
          }
          while (end < length) {
              let next = findClusterBreak(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word)
                  break;
              end = next;
          }
          return start == end ? null : EditorSelection.range(start + from, end + from);
      }
  }
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : 4
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
      compare(a, b) {
          let kA = Object.keys(a), kB = Object.keys(b);
          return kA.length == kB.length && kA.every(k => a[k] == b[k]);
      }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
  combine = {}) {
      let result = {};
      for (let config of configs)
          for (let key of Object.keys(config)) {
              let value = config[key], current = result[key];
              if (current === undefined)
                  result[key] = value;
              else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, key))
                  result[key] = combine[key](current, value);
              else
                  throw new Error("Config merge conflict for field " + key);
          }
      for (let key in defaults)
          if (result[key] === undefined)
              result[key] = defaults[key];
      return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  class RangeValue {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) { return this == other; }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from, to = from) { return Range$1.create(from, to, this); }
  }
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  let Range$1 = class Range {
      constructor(
      /**
      The range's start position.
      */
      from, 
      /**
      Its end position.
      */
      to, 
      /**
      The value associated with this range.
      */
      value) {
          this.from = from;
          this.to = to;
          this.value = value;
      }
      /**
      @internal
      */
      static create(from, to, value) {
          return new Range(from, to, value);
      }
  };
  function cmpRange(a, b) {
      return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  class Chunk {
      constructor(from, to, value, 
      // Chunks are marked with the largest point that occurs
      // in them (or -1 for no points), so that scans that are
      // only interested in points (such as the
      // heightmap-related logic) can skip range-only chunks.
      maxPoint) {
          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
      }
      get length() { return this.to[this.to.length - 1]; }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos, side, end, startAt = 0) {
          let arr = end ? this.to : this.from;
          for (let lo = startAt, hi = arr.length;;) {
              if (lo == hi)
                  return lo;
              let mid = (lo + hi) >> 1;
              let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
              if (mid == lo)
                  return diff >= 0 ? lo : hi;
              if (diff >= 0)
                  hi = mid;
              else
                  lo = mid + 1;
          }
      }
      between(offset, from, to, f) {
          for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
              if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                  return false;
      }
      map(offset, changes) {
          let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
              let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
              if (curFrom == curTo) {
                  let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                  if (mapped == null)
                      continue;
                  newFrom = newTo = mapped;
                  if (val.startSide != val.endSide) {
                      newTo = changes.mapPos(curFrom, val.endSide);
                      if (newTo < newFrom)
                          continue;
                  }
              }
              else {
                  newFrom = changes.mapPos(curFrom, val.startSide);
                  newTo = changes.mapPos(curTo, val.endSide);
                  if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                      continue;
              }
              if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                  continue;
              if (newPos < 0)
                  newPos = newFrom;
              if (val.point)
                  maxPoint = Math.max(maxPoint, newTo - newFrom);
              value.push(val);
              from.push(newFrom - newPos);
              to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
      }
  }
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  class RangeSet {
      constructor(
      /**
      @internal
      */
      chunkPos, 
      /**
      @internal
      */
      chunk, 
      /**
      @internal
      */
      nextLayer, 
      /**
      @internal
      */
      maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
          return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
          if (this.isEmpty)
              return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
              size += chunk.value.length;
          return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
          let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add.length == 0 && !filter)
              return this;
          if (sort)
              add = add.slice().sort(cmpRange);
          if (this.isEmpty)
              return add.length ? RangeSet.of(add) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add.length) {
              if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                  let range = add[i++];
                  if (!builder.addInner(range.from, range.to, range.value))
                      spill.push(range);
              }
              else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                  (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                  (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                  builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                  cur.nextChunk();
              }
              else {
                  if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                      if (!builder.addInner(cur.from, cur.to, cur.value))
                          spill.push(Range$1.create(cur.from, cur.to, cur.value));
                  }
                  cur.next();
              }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
              : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
          if (changes.empty || this.isEmpty)
              return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              let touch = changes.touchesRange(start, start + chunk.length);
              if (touch === false) {
                  maxPoint = Math.max(maxPoint, chunk.maxPoint);
                  chunks.push(chunk);
                  chunkPos.push(changes.mapPos(start));
              }
              else if (touch === true) {
                  let { mapped, pos } = chunk.map(start, changes);
                  if (mapped) {
                      maxPoint = Math.max(maxPoint, mapped.maxPoint);
                      chunks.push(mapped);
                      chunkPos.push(pos);
                  }
              }
          }
          let next = this.nextLayer.map(changes);
          return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from, to, f) {
          if (this.isEmpty)
              return;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              if (to >= start && from <= start + chunk.length &&
                  chunk.between(start, from - start, to - start, f) === false)
                  return;
          }
          this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from = 0) {
          return HeapCursor.from([this]).goto(from);
      }
      /**
      @internal
      */
      get isEmpty() { return this.nextLayer == this; }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from = 0) {
          return HeapCursor.from(sets).goto(from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, 
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration.
      */
      textDiff, comparator, 
      /**
      Can be used to ignore all non-point ranges, and points below
      the given size. When -1, all ranges are compared.
      */
      minPointSize = -1) {
          let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a, b, textDiff);
          let sideA = new SpanCursor(a, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
              compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from = 0, to) {
          if (to == null)
              to = 1000000000 /* C.Far */ - 1;
          let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
          let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
          if (a.length != b.length)
              return false;
          if (!a.length)
              return true;
          let sharedChunks = findSharedChunks(a, b);
          let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
          for (;;) {
              if (sideA.to != sideB.to ||
                  !sameValues(sideA.active, sideB.active) ||
                  sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                  return false;
              if (sideA.to > to)
                  return true;
              sideA.next();
              sideB.next();
          }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from, to, iterator, 
      /**
      When given and greater than -1, only points of at least this
      size are taken into account.
      */
      minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
          let openRanges = cursor.openStart;
          for (;;) {
              let curTo = Math.min(cursor.to, to);
              if (cursor.point) {
                  let active = cursor.activeForPoint(cursor.to);
                  let openCount = cursor.pointFrom < from ? active.length + 1
                      : cursor.point.startSide < 0 ? active.length
                          : Math.min(active.length, openRanges);
                  iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                  openRanges = Math.min(cursor.openEnd(curTo), active.length);
              }
              else if (curTo > pos) {
                  iterator.span(pos, curTo, cursor.active, openRanges);
                  openRanges = cursor.openEnd(curTo);
              }
              if (cursor.to > to)
                  return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
              pos = cursor.to;
              cursor.next();
          }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
              build.add(range.from, range.to, range.value);
          return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
      static join(sets) {
          if (!sets.length)
              return RangeSet.empty;
          let result = sets[sets.length - 1];
          for (let i = sets.length - 2; i >= 0; i--) {
              for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                  result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
          }
          return result;
      }
  }
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
      if (ranges.length > 1)
          for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
              let cur = ranges[i];
              if (cmpRange(prev, cur) > 0)
                  return ranges.slice().sort(cmpRange);
              prev = cur;
          }
      return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  class RangeSetBuilder {
      finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
              this.from = [];
              this.to = [];
              this.value = [];
          }
      }
      /**
      Create an empty builder.
      */
      constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1000000000 /* C.Far */;
          this.lastTo = -1000000000 /* C.Far */;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from, to, value) {
          if (!this.addInner(from, to, value))
              (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
      }
      /**
      @internal
      */
      addInner(from, to, value) {
          let diff = from - this.lastTo || value.startSide - this.last.endSide;
          if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
              throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff < 0)
              return false;
          if (this.from.length == 250 /* C.ChunkSize */)
              this.finishChunk(true);
          if (this.chunkStart < 0)
              this.chunkStart = from;
          this.from.push(from - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
              this.maxPoint = Math.max(this.maxPoint, to - from);
          return true;
      }
      /**
      @internal
      */
      addChunk(from, chunk) {
          if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
              return false;
          if (this.from.length)
              this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from;
          this.lastTo = chunk.to[last] + from;
          return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() { return this.finishInner(RangeSet.empty); }
      /**
      @internal
      */
      finishInner(next) {
          if (this.from.length)
              this.finishChunk(false);
          if (this.chunks.length == 0)
              return next;
          let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
          this.from = null; // Make sure further `add` calls produce errors
          return result;
      }
  }
  function findSharedChunks(a, b, textDiff) {
      let inA = new Map();
      for (let set of a)
          for (let i = 0; i < set.chunk.length; i++)
              if (set.chunk[i].maxPoint <= 0)
                  inA.set(set.chunk[i], set.chunkPos[i]);
      let shared = new Set();
      for (let set of b)
          for (let i = 0; i < set.chunk.length; i++) {
              let known = inA.get(set.chunk[i]);
              if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                  !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                  shared.add(set.chunk[i]);
          }
      return shared;
  }
  class LayerCursor {
      constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      get endSide() { return this.value ? this.value.endSide : 0; }
      goto(pos, side = -1000000000 /* C.Far */) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
      }
      gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
              let next = this.layer.chunk[this.chunkIndex];
              if (!(this.skip && this.skip.has(next) ||
                  this.layer.chunkEnd(this.chunkIndex) < pos ||
                  next.maxPoint < this.minPoint))
                  break;
              this.chunkIndex++;
              forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
              let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
              if (!forward || this.rangeIndex < rangeIndex)
                  this.setRangeIndex(rangeIndex);
          }
          this.next();
      }
      forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
              this.gotoInner(pos, side, true);
      }
      next() {
          for (;;) {
              if (this.chunkIndex == this.layer.chunk.length) {
                  this.from = this.to = 1000000000 /* C.Far */;
                  this.value = null;
                  break;
              }
              else {
                  let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                  let from = chunkPos + chunk.from[this.rangeIndex];
                  this.from = from;
                  this.to = chunkPos + chunk.to[this.rangeIndex];
                  this.value = chunk.value[this.rangeIndex];
                  this.setRangeIndex(this.rangeIndex + 1);
                  if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                      break;
              }
          }
      }
      setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
              this.chunkIndex++;
              if (this.skip) {
                  while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                      this.chunkIndex++;
              }
              this.rangeIndex = 0;
          }
          else {
              this.rangeIndex = index;
          }
      }
      nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
      }
      compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
              this.to - other.to || this.endSide - other.endSide;
      }
  }
  class HeapCursor {
      constructor(heap) {
          this.heap = heap;
      }
      static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
              for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                  if (cur.maxPoint >= minPoint)
                      heap.push(new LayerCursor(cur, skip, minPoint, i));
              }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      goto(pos, side = -1000000000 /* C.Far */) {
          for (let cur of this.heap)
              cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          this.next();
          return this;
      }
      forward(pos, side) {
          for (let cur of this.heap)
              cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
              this.next();
      }
      next() {
          if (this.heap.length == 0) {
              this.from = this.to = 1000000000 /* C.Far */;
              this.value = null;
              this.rank = -1;
          }
          else {
              let top = this.heap[0];
              this.from = top.from;
              this.to = top.to;
              this.value = top.value;
              this.rank = top.rank;
              if (top.value)
                  top.next();
              heapBubble(this.heap, 0);
          }
      }
  }
  function heapBubble(heap, index) {
      for (let cur = heap[index];;) {
          let childIndex = (index << 1) + 1;
          if (childIndex >= heap.length)
              break;
          let child = heap[childIndex];
          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
              child = heap[childIndex + 1];
              childIndex++;
          }
          if (cur.compare(child) < 0)
              break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
      }
  }
  class SpanCursor {
      constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          // A currently active point range, if any
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1000000000 /* C.Far */;
          this.endSide = 0;
          // The amount of open active ranges at the start of the iterator.
          // Not including points.
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos, side = -1000000000 /* C.Far */) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
      }
      forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
              this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
      }
      removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          // Organize active marks by rank first, then by size
          while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
              i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
              insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
          let from = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null;
          for (;;) {
              let a = this.minActive;
              if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                  if (this.activeTo[a] > from) {
                      this.to = this.activeTo[a];
                      this.endSide = this.active[a].endSide;
                      break;
                  }
                  this.removeActive(a);
                  if (trackOpen)
                      remove(trackOpen, a);
              }
              else if (!this.cursor.value) {
                  this.to = this.endSide = 1000000000 /* C.Far */;
                  break;
              }
              else if (this.cursor.from > from) {
                  this.to = this.cursor.from;
                  this.endSide = this.cursor.startSide;
                  break;
              }
              else {
                  let nextVal = this.cursor.value;
                  if (!nextVal.point) { // Opening a range
                      this.addActive(trackOpen);
                      this.cursor.next();
                  }
                  else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                      // Ignore any non-empty points that end precisely at the end of the prev point
                      this.cursor.next();
                  }
                  else { // New point
                      this.point = nextVal;
                      this.pointFrom = this.cursor.from;
                      this.pointRank = this.cursor.rank;
                      this.to = this.cursor.to;
                      this.endSide = nextVal.endSide;
                      this.cursor.next();
                      this.forward(this.to, this.endSide);
                      break;
                  }
              }
          }
          if (trackOpen) {
              this.openStart = 0;
              for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                  this.openStart++;
          }
      }
      activeForPoint(to) {
          if (!this.active.length)
              return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
              if (this.activeRank[i] < this.pointRank)
                  break;
              if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                  active.push(this.active[i]);
          }
          return active.reverse();
      }
      openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
              open++;
          return open;
      }
  }
  function compare(a, startA, b, startB, length, comparator) {
      a.goto(startA);
      b.goto(startB);
      let endB = startB + length;
      let pos = startB, dPos = startB - startA;
      for (;;) {
          let dEnd = (a.to + dPos) - b.to, diff = dEnd || a.endSide - b.endSide;
          let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
          if (a.point || b.point) {
              if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                  sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                  comparator.comparePoint(pos, clipEnd, a.point, b.point);
          }
          else {
              if (clipEnd > pos && !sameValues(a.active, b.active))
                  comparator.compareRange(pos, clipEnd, a.active, b.active);
          }
          if (end > endB)
              break;
          if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
              comparator.boundChange(end);
          pos = end;
          if (diff <= 0)
              a.next();
          if (diff >= 0)
              b.next();
      }
  }
  function sameValues(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (a[i] != b[i] && !a[i].eq(b[i]))
              return false;
      return true;
  }
  function remove(array, index) {
      for (let i = index, e = array.length - 1; i < e; i++)
          array[i] = array[i + 1];
      array.pop();
  }
  function insert(array, index, value) {
      for (let i = array.length - 1; i >= index; i--)
          array[i + 1] = array[i];
      array[index] = value;
  }
  function findMinIndex(value, array) {
      let found = -1, foundPos = 1000000000 /* C.Far */;
      for (let i = 0; i < array.length; i++)
          if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
              found = i;
              foundPos = array[i];
          }
      return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize, to = string.length) {
      let n = 0;
      for (let i = 0; i < to && i < string.length;) {
          if (string.charCodeAt(i) == 9) {
              n += tabSize - (n % tabSize);
              i++;
          }
          else {
              n++;
              i = findClusterBreak(string, i);
          }
      }
      return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
      for (let i = 0, n = 0;;) {
          if (n >= col)
              return i;
          if (i == string.length)
              break;
          n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
          i = findClusterBreak(string, i);
      }
      return strict === true ? -1 : string.length;
  }

  const C = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {finish} = options || {};

      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
      }

      function render(selectors, spec, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";")
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                   value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                      " {" + local.join(" ") + "}");
        }
      }

      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() { return this.rules.join("\n") }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36)
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  }

  let adoptedSet = new Map; //<Document, StyleSet>

  class StyleSet {
    constructor(root, nonce) {
      let doc = root.ownerDocument || root, win = doc.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc);
        if (adopted) return root[SET] = adopted
        this.sheet = new win.CSSStyleSheet;
        adoptedSet.set(doc, this);
      } else {
        this.styleTag = doc.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }

    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i], index = this.modules.indexOf(mod);
        if (index < j && index > -1) { // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }

      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }

    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base$1 = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base$1[48 + i] = base$1[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base$1[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base$1[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code$1 in base$1) if (!shift.hasOwnProperty(code$1)) shift[code$1] = base$1[code$1];

  function keyName(event) {
    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
    // On IE, shift effect is never included in `.key`.
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base$1)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);
        else if (value != null) elt[name] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add(elt, arguments[i]);
    return elt
  }

  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) ; else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child)
    }
  }

  function getSelection(root) {
      let target;
      // Browsers differ on whether shadow roots have a getSelection
      // method. If it exists, use that, otherwise, call it on the
      // document.
      if (root.nodeType == 11) { // Shadow root
          target = root.getSelection ? root : root.ownerDocument;
      }
      else {
          target = root;
      }
      return target.getSelection();
  }
  function contains(dom, node) {
      return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
      if (!selection.anchorNode)
          return false;
      try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
      }
      catch (_) {
          return false;
      }
  }
  function clientRectsFor(dom) {
      if (dom.nodeType == 3)
          return textRange(dom, 0, dom.nodeValue.length).getClientRects();
      else if (dom.nodeType == 1)
          return dom.getClientRects();
      else
          return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
      return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
          scanFor(node, off, targetNode, targetOff, 1)) : false;
  }
  function domIndex(node) {
      for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node)
              return index;
      }
  }
  function isBlockElement(node) {
      return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
          if (node == targetNode && off == targetOff)
              return true;
          if (off == (dir < 0 ? 0 : maxOffset(node))) {
              if (node.nodeName == "DIV")
                  return false;
              let parent = node.parentNode;
              if (!parent || parent.nodeType != 1)
                  return false;
              off = domIndex(node) + (dir < 0 ? 0 : 1);
              node = parent;
          }
          else if (node.nodeType == 1) {
              node = node.childNodes[off + (dir < 0 ? -1 : 0)];
              if (node.nodeType == 1 && node.contentEditable == "false")
                  return false;
              off = dir < 0 ? maxOffset(node) : 0;
          }
          else {
              return false;
          }
      }
  }
  function maxOffset(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
      let x = left ? rect.left : rect.right;
      return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
      let vp = win.visualViewport;
      if (vp)
          return {
              left: 0, right: vp.width,
              top: 0, bottom: vp.height
          };
      return { left: 0, right: win.innerWidth,
          top: 0, bottom: win.innerHeight };
  }
  function getScale(elt, rect) {
      let scaleX = rect.width / elt.offsetWidth;
      let scaleY = rect.height / elt.offsetHeight;
      if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
          scaleX = 1;
      if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
          scaleY = 1;
      return { scaleX, scaleY };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      for (let cur = dom, stop = false; cur && !stop;) {
          if (cur.nodeType == 1) { // Element
              let bounding, top = cur == doc.body;
              let scaleX = 1, scaleY = 1;
              if (top) {
                  bounding = windowRect(win);
              }
              else {
                  if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                      stop = true;
                  if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                      cur = cur.assignedSlot || cur.parentNode;
                      continue;
                  }
                  let rect = cur.getBoundingClientRect();
                  ({ scaleX, scaleY } = getScale(cur, rect));
                  // Make sure scrollbar width isn't included in the rectangle
                  bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                      top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
              }
              let moveX = 0, moveY = 0;
              if (y == "nearest") {
                  if (rect.top < bounding.top) {
                      moveY = rect.top - (bounding.top + yMargin);
                      if (side > 0 && rect.bottom > bounding.bottom + moveY)
                          moveY = rect.bottom - bounding.bottom + yMargin;
                  }
                  else if (rect.bottom > bounding.bottom) {
                      moveY = rect.bottom - bounding.bottom + yMargin;
                      if (side < 0 && (rect.top - moveY) < bounding.top)
                          moveY = rect.top - (bounding.top + yMargin);
                  }
              }
              else {
                  let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                  let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                      y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                          rect.bottom - boundingHeight + yMargin;
                  moveY = targetTop - bounding.top;
              }
              if (x == "nearest") {
                  if (rect.left < bounding.left) {
                      moveX = rect.left - (bounding.left + xMargin);
                      if (side > 0 && rect.right > bounding.right + moveX)
                          moveX = rect.right - bounding.right + xMargin;
                  }
                  else if (rect.right > bounding.right) {
                      moveX = rect.right - bounding.right + xMargin;
                      if (side < 0 && rect.left < bounding.left + moveX)
                          moveX = rect.left - (bounding.left + xMargin);
                  }
              }
              else {
                  let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                      (x == "start") == ltr ? rect.left - xMargin :
                          rect.right - (bounding.right - bounding.left) + xMargin;
                  moveX = targetLeft - bounding.left;
              }
              if (moveX || moveY) {
                  if (top) {
                      win.scrollBy(moveX, moveY);
                  }
                  else {
                      let movedX = 0, movedY = 0;
                      if (moveY) {
                          let start = cur.scrollTop;
                          cur.scrollTop += moveY / scaleY;
                          movedY = (cur.scrollTop - start) * scaleY;
                      }
                      if (moveX) {
                          let start = cur.scrollLeft;
                          cur.scrollLeft += moveX / scaleX;
                          movedX = (cur.scrollLeft - start) * scaleX;
                      }
                      rect = { left: rect.left - movedX, top: rect.top - movedY,
                          right: rect.right - movedX, bottom: rect.bottom - movedY };
                      if (movedX && Math.abs(movedX - moveX) < 1)
                          x = "nearest";
                      if (movedY && Math.abs(movedY - moveY) < 1)
                          y = "nearest";
                  }
              }
              if (top)
                  break;
              if (rect.top < bounding.top || rect.bottom > bounding.bottom ||
                  rect.left < bounding.left || rect.right > bounding.right)
                  rect = { left: Math.max(rect.left, bounding.left), right: Math.min(rect.right, bounding.right),
                      top: Math.max(rect.top, bounding.top), bottom: Math.min(rect.bottom, bounding.bottom) };
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) { // A shadow root
              cur = cur.host;
          }
          else {
              break;
          }
      }
  }
  function scrollableParents(dom) {
      let doc = dom.ownerDocument, x, y;
      for (let cur = dom.parentNode; cur;) {
          if (cur == doc.body || (x && y)) {
              break;
          }
          else if (cur.nodeType == 1) {
              if (!y && cur.scrollHeight > cur.clientHeight)
                  y = cur;
              if (!x && cur.scrollWidth > cur.clientWidth)
                  x = cur;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) {
              cur = cur.host;
          }
          else {
              break;
          }
      }
      return { x, y };
  }
  class DOMSelectionState {
      constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
      }
      eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
              this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
          let { anchorNode, focusNode } = range;
          // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
          this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
      }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
      if (dom.setActive)
          return dom.setActive(); // in IE
      if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
      let stack = [];
      for (let cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument)
              break;
      }
      dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
              preventScrollSupported = { preventScroll: true };
              return true;
          }
      } : undefined);
      if (!preventScrollSupported) {
          preventScrollSupported = false;
          for (let i = 0; i < stack.length;) {
              let elt = stack[i++], top = stack[i++], left = stack[i++];
              if (elt.scrollTop != top)
                  elt.scrollTop = top;
              if (elt.scrollLeft != left)
                  elt.scrollLeft = left;
          }
      }
  }
  let scratchRange;
  function textRange(node, from, to = from) {
      let range = scratchRange || (scratchRange = document.createRange());
      range.setEnd(node, to);
      range.setStart(node, from);
      return range;
  }
  function dispatchKey(elt, name, code, mods) {
      let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
      if (mods)
          ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
      let down = new KeyboardEvent("keydown", options);
      down.synthetic = true;
      elt.dispatchEvent(down);
      let up = new KeyboardEvent("keyup", options);
      up.synthetic = true;
      elt.dispatchEvent(up);
      return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
      while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
              return node;
          node = node.assignedSlot || node.parentNode;
      }
      return null;
  }
  function clearAttributes(node) {
      while (node.attributes.length)
          node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
      let node = selection.focusNode, offset = selection.focusOffset;
      if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
          return false;
      // Safari can report bogus offsets (#1152)
      offset = Math.min(offset, maxOffset(node));
      for (;;) {
          if (offset) {
              if (node.nodeType != 1)
                  return false;
              let prev = node.childNodes[offset - 1];
              if (prev.contentEditable == "false")
                  offset--;
              else {
                  node = prev;
                  offset = maxOffset(node);
              }
          }
          else if (node == doc) {
              return true;
          }
          else {
              offset = domIndex(node);
              node = node.parentNode;
          }
      }
  }
  function isScrolledToBottom(elt) {
      return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset > 0) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset > 0) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset - 1];
              offset = maxOffset(node);
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node);
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }
  function textNodeAfter(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset < node.nodeValue.length) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset < node.childNodes.length) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset];
              offset = 0;
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node) + 1;
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }

  class DOMPos {
      constructor(node, offset, precise = true) {
          this.node = node;
          this.offset = offset;
          this.precise = precise;
      }
      static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
      static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
  }
  const noChildren = [];
  class ContentView {
      constructor() {
          this.parent = null;
          this.dom = null;
          this.flags = 2 /* ViewFlag.NodeDirty */;
      }
      get overrideDOMText() { return null; }
      get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
          return this.posAtStart + this.length;
      }
      posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
              if (child == view)
                  return pos;
              pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
          return this.posBefore(view) + view.length;
      }
      sync(view, track) {
          if (this.flags & 2 /* ViewFlag.NodeDirty */) {
              let parent = this.dom;
              let prev = null, next;
              for (let child of this.children) {
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                          let contentView = ContentView.get(next);
                          if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                              child.reuseDOM(next);
                      }
                      child.sync(view, track);
                      child.flags &= ~7 /* ViewFlag.Dirty */;
                  }
                  next = prev ? prev.nextSibling : parent.firstChild;
                  if (track && !track.written && track.node == parent && next != child.dom)
                      track.written = true;
                  if (child.dom.parentNode == parent) {
                      while (next && next != child.dom)
                          next = rm$1(next);
                  }
                  else {
                      parent.insertBefore(child.dom, next);
                  }
                  prev = child.dom;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (next && track && track.node == parent)
                  track.written = true;
              while (next)
                  next = rm$1(next);
          }
          else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
              for (let child of this.children)
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      child.sync(view, track);
                      child.flags &= ~7 /* ViewFlag.Dirty */;
                  }
          }
      }
      reuseDOM(_dom) { }
      localPosFromDOM(node, offset) {
          let after;
          if (node == this.dom) {
              after = this.dom.childNodes[offset];
          }
          else {
              let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
              for (;;) {
                  let parent = node.parentNode;
                  if (parent == this.dom)
                      break;
                  if (bias == 0 && parent.firstChild != parent.lastChild) {
                      if (node == parent.firstChild)
                          bias = -1;
                      else
                          bias = 1;
                  }
                  node = parent;
              }
              if (bias < 0)
                  after = node;
              else
                  after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
              return 0;
          while (after && !ContentView.get(after))
              after = after.nextSibling;
          if (!after)
              return this.length;
          for (let i = 0, pos = 0;; i++) {
              let child = this.children[i];
              if (child.dom == after)
                  return pos;
              pos += child.length + child.breakAfter;
          }
      }
      domBoundsAround(from, to, offset = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos < from && end > to)
                  return child.domBoundsAround(from, to, pos);
              if (end >= from && fromI == -1) {
                  fromI = i;
                  fromStart = pos;
              }
              if (pos > to && child.dom.parentNode == this.dom) {
                  toI = i;
                  toEnd = prevEnd;
                  break;
              }
              prevEnd = end;
              pos = end + child.breakAfter;
          }
          return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
      }
      markDirty(andParent = false) {
          this.flags |= 2 /* ViewFlag.NodeDirty */;
          this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
              if (childList)
                  parent.flags |= 2 /* ViewFlag.NodeDirty */;
              if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                  return;
              parent.flags |= 1 /* ViewFlag.ChildDirty */;
              childList = false;
          }
      }
      setParent(parent) {
          if (this.parent != parent) {
              this.parent = parent;
              if (this.flags & 7 /* ViewFlag.Dirty */)
                  this.markParentsDirty(true);
          }
      }
      setDOM(dom) {
          if (this.dom == dom)
              return;
          if (this.dom)
              this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
      }
      get rootView() {
          for (let v = this;;) {
              let parent = v.parent;
              if (!parent)
                  return v;
              v = parent;
          }
      }
      replaceChildren(from, to, children = noChildren) {
          this.markDirty();
          for (let i = from; i < to; i++) {
              let child = this.children[i];
              if (child.parent == this && children.indexOf(child) < 0)
                  child.destroy();
          }
          if (children.length < 250)
              this.children.splice(from, to - from, ...children);
          else
              this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
          for (let i = 0; i < children.length; i++)
              children[i].setParent(this);
      }
      ignoreMutation(_rec) { return false; }
      ignoreEvent(_event) { return false; }
      childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
      }
      childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
      }
      toString() {
          let name = this.constructor.name.replace("View", "");
          return name + (this.children.length ? "(" + this.children.join() + ")" :
              this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
              (this.breakAfter ? "#" : "");
      }
      static get(node) { return node.cmView; }
      get isEditable() { return true; }
      get isWidget() { return false; }
      get isHidden() { return false; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          return false;
      }
      become(other) { return false; }
      canReuseDOM(other) {
          return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() { return 0; }
      destroy() {
          for (let child of this.children)
              if (child.parent == this)
                  child.destroy();
          this.parent = null;
      }
  }
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
  }
  class ChildCursor {
      constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
      }
      findPos(pos, bias = 1) {
          for (;;) {
              if (pos > this.pos || pos == this.pos &&
                  (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                  this.off = pos - this.pos;
                  return this;
              }
              let next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
          }
      }
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
      let { children } = parent;
      let before = children.length ? children[fromI] : null;
      let last = insert.length ? insert[insert.length - 1] : null;
      let breakAtEnd = last ? last.breakAfter : breakAtStart;
      // Change within a single child
      if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
          before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
          return;
      if (toI < children.length) {
          let after = children[toI];
          // Make sure the end of the child after the update is preserved in `after`
          if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
              // If we're splitting a child, separate part of it to avoid that
              // being mangled when updating the child before the update.
              if (fromI == toI) {
                  after = after.split(toOff);
                  toOff = 0;
              }
              // If the element after the replacement should be merged with
              // the last replacing element, update `content`
              if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                  insert[insert.length - 1] = after;
              }
              else {
                  // Remove the start of the after element, if necessary, and
                  // add it to `content`.
                  if (toOff || after.children.length && !after.children[0].length)
                      after.merge(0, toOff, null, false, 0, openEnd);
                  insert.push(after);
              }
          }
          else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
              // The element at `toI` is entirely covered by this range.
              // Preserve its line break, if any.
              if (last)
                  last.breakAfter = 1;
              else
                  breakAtStart = 1;
          }
          // Since we've handled the next element from the current elements
          // now, make sure `toI` points after that.
          toI++;
      }
      if (before) {
          before.breakAfter = breakAtStart;
          if (fromOff > 0) {
              if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                  before.breakAfter = insert.shift().breakAfter;
              }
              else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                  before.merge(fromOff, before.length, null, false, openStart, 0);
              }
              fromI++;
          }
      }
      // Try to merge widgets on the boundaries of the replacement
      while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
              toI--;
              insert.pop();
              openEnd = insert.length ? 0 : openStart;
          }
          else if (children[fromI].become(insert[0])) {
              fromI++;
              insert.shift();
              openStart = insert.length ? 0 : openEnd;
          }
          else {
              break;
          }
      }
      if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
          children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
          fromI--;
      if (fromI < toI || insert.length)
          parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
      let cur = parent.childCursor();
      let { i: toI, off: toOff } = cur.findPos(to, 1);
      let { i: fromI, off: fromOff } = cur.findPos(from, -1);
      let dLen = from - to;
      for (let view of insert)
          dLen += view.length;
      parent.length += dLen;
      replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }

  let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
  const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
  const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  const ie = !!(ie_upto10 || ie_11up || ie_edge);
  const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
  const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
  const webkit = "webkitFontSmoothing" in doc.documentElement.style;
  const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
  const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
      mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
      windows: /*@__PURE__*//Win/.test(nav.platform),
      linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
      ie,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /*@__PURE__*//Android\b/.test(nav.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };

  const MaxJoinLen = 256;
  class TextView extends ContentView {
      constructor(text) {
          super();
          this.text = text;
      }
      get length() { return this.text.length; }
      createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(view, track) {
          if (!this.dom)
              this.createDOM();
          if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom)
                  track.written = true;
              this.dom.nodeValue = this.text;
          }
      }
      reuseDOM(dom) {
          if (dom.nodeType == 3)
              this.createDOM(dom);
      }
      merge(from, to, source) {
          if ((this.flags & 8 /* ViewFlag.Composition */) ||
              source && (!(source instanceof TextView) ||
                  this.length - (to - from) + source.length > MaxJoinLen ||
                  (source.flags & 8 /* ViewFlag.Composition */)))
              return false;
          this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = new TextView(this.text.slice(from));
          this.text = this.text.slice(0, from);
          this.markDirty();
          result.flags |= this.flags & 8 /* ViewFlag.Composition */;
          return result;
      }
      localPosFromDOM(node, offset) {
          return node == this.dom ? offset : offset ? this.text.length : 0;
      }
      domAtPos(pos) { return new DOMPos(this.dom, pos); }
      domBoundsAround(_from, _to, offset) {
          return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
      }
  }
  class MarkView extends ContentView {
      constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch of children)
              ch.setParent(this);
      }
      setAttrs(dom) {
          clearAttributes(dom);
          if (this.mark.class)
              dom.className = this.mark.class;
          if (this.mark.attrs)
              for (let name in this.mark.attrs)
                  dom.setAttribute(name, this.mark.attrs[name]);
          return dom;
      }
      canReuseDOM(other) {
          return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      reuseDOM(node) {
          if (node.nodeName == this.mark.tagName.toUpperCase()) {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          if (!this.dom)
              this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
              this.setAttrs(this.dom);
          super.sync(view, track);
      }
      merge(from, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
              (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
              return false;
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt of this.children) {
              let end = off + elt.length;
              if (end > from)
                  result.push(off < from ? elt.split(from - off) : elt);
              if (detachFrom < 0 && off >= from)
                  detachFrom = i;
              off = end;
              i++;
          }
          let length = this.length - from;
          this.length = from;
          if (detachFrom > -1) {
              this.children.length = detachFrom;
              this.markDirty();
          }
          return new MarkView(this.mark, result, length);
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
      }
  }
  function textCoords(text, pos, side) {
      let length = text.nodeValue.length;
      if (pos > length)
          pos = length;
      let from = pos, to = pos, flatten = 0;
      if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
              if (pos) {
                  from--;
                  flatten = 1;
              } // FIXME this is wrong in RTL text
              else if (to < length) {
                  to++;
                  flatten = -1;
              }
          }
      }
      else {
          if (side < 0)
              from--;
          else if (to < length)
              to++;
      }
      let rects = textRange(text, from, to).getClientRects();
      if (!rects.length)
          return null;
      let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
      if (browser.safari && !flatten && rect.width == 0)
          rect = Array.prototype.find.call(rects, r => r.width) || rect;
      return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  class WidgetView extends ContentView {
      static create(widget, length, side) {
          return new WidgetView(widget, length, side);
      }
      constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
          this.prevWidget = null;
      }
      split(from) {
          let result = WidgetView.create(this.widget, this.length - from, this.side);
          this.length -= from;
          return result;
      }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      getSide() { return this.side; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      become(other) {
          if (other instanceof WidgetView && other.side == this.side &&
              this.widget.constructor == other.widget.constructor) {
              if (!this.widget.compare(other.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get overrideDOMText() {
          if (this.length == 0)
              return Text.empty;
          let top = this;
          while (top.parent)
              top = top.parent;
          let { view } = top, text = view && view.state.doc, start = this.posAtStart;
          return text ? text.slice(start, start + this.length) : Text.empty;
      }
      domAtPos(pos) {
          return (this.length ? pos == 0 : this.side > 0)
              ? DOMPos.before(this.dom)
              : DOMPos.after(this.dom, pos == this.length);
      }
      domBoundsAround() { return null; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
              return null;
          let fromBack = this.side ? this.side < 0 : pos > 0;
          for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
              rect = rects[i];
              if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                  break;
          }
          return flattenRect(rect, !fromBack);
      }
      get isEditable() { return false; }
      get isWidget() { return true; }
      get isHidden() { return this.widget.isHidden; }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
  }
  // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  class WidgetBufferView extends ContentView {
      constructor(side) {
          super();
          this.side = side;
      }
      get length() { return 0; }
      merge() { return false; }
      become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
      }
      split() { return new WidgetBufferView(this.side); }
      sync() {
          if (!this.dom) {
              let dom = document.createElement("img");
              dom.className = "cm-widgetBuffer";
              dom.setAttribute("aria-hidden", "true");
              this.setDOM(dom);
          }
      }
      getSide() { return this.side; }
      domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
      localPosFromDOM() { return 0; }
      domBoundsAround() { return null; }
      coordsAt(pos) {
          return this.dom.getBoundingClientRect();
      }
      get overrideDOMText() {
          return Text.empty;
      }
      get isHidden() { return true; }
  }
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
      let dom = parent.dom, { children } = parent, i = 0;
      for (let off = 0; i < children.length; i++) {
          let child = children[i], end = off + child.length;
          if (end == off && child.getSide() <= 0)
              continue;
          if (pos > off && pos < end && child.dom.parentNode == dom)
              return child.domAtPos(pos - off);
          if (pos <= off)
              break;
          off = end;
      }
      for (let j = i; j > 0; j--) {
          let prev = children[j - 1];
          if (prev.dom.parentNode == dom)
              return prev.domAtPos(prev.length);
      }
      for (let j = i; j < children.length; j++) {
          let next = children[j];
          if (next.dom.parentNode == dom)
              return next.domAtPos(0);
      }
      return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
      let last, { children } = parent;
      if (open > 0 && view instanceof MarkView && children.length &&
          (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
      }
      else {
          children.push(view);
          view.setParent(parent);
      }
      parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
      let before = null, beforePos = -1, after = null, afterPos = -1;
      function scan(view, pos) {
          for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
              let child = view.children[i], end = off + child.length;
              if (end >= pos) {
                  if (child.children.length) {
                      scan(child, pos - off);
                  }
                  else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) &&
                      (end > pos || off == end && child.getSide() > 0)) {
                      after = child;
                      afterPos = pos - off;
                  }
                  else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                      before = child;
                      beforePos = pos - off;
                  }
              }
              off = end;
          }
      }
      scan(view, pos);
      let target = (side < 0 ? before : after) || before || after;
      if (target)
          return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
      return fallbackRect(view);
  }
  function fallbackRect(view) {
      let last = view.dom.lastChild;
      if (!last)
          return view.dom.getBoundingClientRect();
      let rects = clientRectsFor(last);
      return rects[rects.length - 1] || null;
  }
  function onSameLine(a, b) {
      let posA = a.coordsAt(0, 1), posB = b.coordsAt(0, 1);
      return posA && posB && posB.top < posA.bottom;
  }

  function combineAttrs(source, target) {
      for (let name in source) {
          if (name == "class" && target.class)
              target.class += " " + source.class;
          else if (name == "style" && target.style)
              target.style += ";" + source.style;
          else
              target[name] = source[name];
      }
      return target;
  }
  const noAttrs$1 = /*@__PURE__*/Object.create(null);
  function attrsEq(a, b, ignore) {
      if (a == b)
          return true;
      if (!a)
          a = noAttrs$1;
      if (!b)
          b = noAttrs$1;
      let keysA = Object.keys(a), keysB = Object.keys(b);
      if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
          keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
          return false;
      for (let key of keysA) {
          if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
              return false;
      }
      return true;
  }
  function updateAttrs(dom, prev, attrs) {
      let changed = false;
      if (prev)
          for (let name in prev)
              if (!(attrs && name in attrs)) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = "";
                  else
                      dom.removeAttribute(name);
              }
      if (attrs)
          for (let name in attrs)
              if (!(prev && prev[name] == attrs[name])) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = attrs[name];
                  else
                      dom.setAttribute(name, attrs[name]);
              }
      return changed;
  }
  function getAttrs(dom) {
      let attrs = Object.create(null);
      for (let i = 0; i < dom.attributes.length; i++) {
          let attr = dom.attributes[i];
          attrs[attr.name] = attr.value;
      }
      return attrs;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  class WidgetType {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) { return false; }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom, view) { return false; }
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() { return -1; }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
      get lineBreaks() { return 0; }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) { return true; }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
      coordsAt(dom, pos, side) { return null; }
      /**
      @internal
      */
      get isHidden() { return false; }
      /**
      @internal
      */
      get editable() { return false; }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) { }
  }
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/(function (BlockType) {
      /**
      A line of text.
      */
      BlockType[BlockType["Text"] = 0] = "Text";
      /**
      A block widget associated with the position after it.
      */
      BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
      /**
      A block widget associated with the position before it.
      */
      BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
      /**
      A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
      */
      BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType})(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  class Decoration extends RangeValue {
      constructor(
      /**
      @internal
      */
      startSide, 
      /**
      @internal
      */
      endSide, 
      /**
      @internal
      */
      widget, 
      /**
      The config object used to create this decoration. You can
      include additional properties in there to store metadata about
      your decoration.
      */
      spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() { return false; }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
          return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
          let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
          side += (block && !spec.inlineOrder)
              ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
              : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
          return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
          let block = !!spec.block, startSide, endSide;
          if (spec.isBlockGap) {
              startSide = -500000000 /* Side.GapStart */;
              endSide = 400000000 /* Side.GapEnd */;
          }
          else {
              let { start, end } = getInclusive(spec, block);
              startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
              endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
          }
          return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
          return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
          return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
  }
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  class MarkDecoration extends Decoration {
      constructor(spec) {
          let { start, end } = getInclusive(spec);
          super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
      }
      eq(other) {
          var _a, _b;
          return this == other ||
              other instanceof MarkDecoration &&
                  this.tagName == other.tagName &&
                  (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                  attrsEq(this.attrs, other.attrs, "class");
      }
      range(from, to = from) {
          if (from >= to)
              throw new RangeError("Mark decorations may not be empty");
          return super.range(from, to);
      }
  }
  MarkDecoration.prototype.point = false;
  class LineDecoration extends Decoration {
      constructor(spec) {
          super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
      }
      eq(other) {
          return other instanceof LineDecoration &&
              this.spec.class == other.spec.class &&
              attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from, to = from) {
          if (to != from)
              throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from, to);
      }
  }
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  class PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block;
          this.isReplace = isReplace;
          this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
          return this.startSide != this.endSide ? BlockType.WidgetRange
              : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() {
          return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
      eq(other) {
          return other instanceof PointDecoration &&
              widgetsEq(this.widget, other.widget) &&
              this.block == other.block &&
              this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from, to = from) {
          if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
              throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from)
              throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from, to);
      }
  }
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
      let { inclusiveStart: start, inclusiveEnd: end } = spec;
      if (start == null)
          start = spec.inclusive;
      if (end == null)
          end = spec.inclusive;
      return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a, b) {
      return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last] + margin >= from)
          ranges[last] = Math.max(ranges[last], to);
      else
          ranges.push(from, to);
  }

  class LineView extends ContentView {
      constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = undefined;
          this.attrs = null;
          this.breakAfter = 0;
      }
      // Consumes source
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source) {
              if (!(source instanceof LineView))
                  return false;
              if (!this.dom)
                  source.transferDOM(this); // Reuse source.dom when appropriate
          }
          if (hasStart)
              this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
          return true;
      }
      split(at) {
          let end = new LineView;
          end.breakAfter = this.breakAfter;
          if (this.length == 0)
              return end;
          let { i, off } = this.childPos(at);
          if (off) {
              end.append(this.children[i].split(off), 0);
              this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
              i++;
          }
          for (let j = i; j < this.children.length; j++)
              end.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
              this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end;
      }
      transferDOM(other) {
          if (!this.dom)
              return;
          this.markDirty();
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
          this.prevAttrs = undefined;
          this.dom = null;
      }
      setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                  this.prevAttrs = this.attrs;
                  this.markDirty();
              }
              this.attrs = attrs;
          }
      }
      append(child, openStart) {
          joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
              this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
              this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      reuseDOM(node) {
          if (node.nodeName == "DIV") {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          var _a;
          if (!this.dom) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
              clearAttributes(this.dom);
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          if (this.prevAttrs !== undefined) {
              updateAttrs(this.dom, this.prevAttrs, this.attrs);
              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
          }
          super.sync(view, track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
              last = last.lastChild;
          if (!last || !this.length ||
              last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                  (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
              let hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
          }
      }
      measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
              return null;
          let totalWidth = 0, textHeight;
          for (let child of this.children) {
              if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                  return null;
              let rects = clientRectsFor(child.dom);
              if (rects.length != 1)
                  return null;
              totalWidth += rects[0].width;
              textHeight = rects[0].height;
          }
          return !totalWidth ? null : {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length,
              textHeight
          };
      }
      coordsAt(pos, side) {
          let rect = coordsInChildren(this, pos, side);
          // Correct rectangle height for empty lines when the returned
          // height is larger than the text height.
          if (!this.children.length && rect && this.parent) {
              let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
              if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                  let dist = (height - heightOracle.textHeight) / 2;
                  return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
              }
          }
          return rect;
      }
      become(other) {
          return other instanceof LineView && this.children.length == 0 && other.children.length == 0 &&
              attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
      covers() { return true; }
      static find(docView, pos) {
          for (let i = 0, off = 0; i < docView.children.length; i++) {
              let block = docView.children[i], end = off + block.length;
              if (end >= pos) {
                  if (block instanceof LineView)
                      return block;
                  if (end > pos)
                      break;
              }
              off = end + block.breakAfter;
          }
          return null;
      }
  }
  class BlockWidgetView extends ContentView {
      constructor(widget, length, deco) {
          super();
          this.widget = widget;
          this.length = length;
          this.deco = deco;
          this.breakAfter = 0;
          this.prevWidget = null;
      }
      merge(from, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      split(at) {
          let len = this.length - at;
          this.length = at;
          let end = new BlockWidgetView(this.widget, len, this.deco);
          end.breakAfter = this.breakAfter;
          return end;
      }
      get children() { return noChildren; }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
      domBoundsAround() { return null; }
      become(other) {
          if (other instanceof BlockWidgetView &&
              other.widget.constructor == this.widget.constructor) {
              if (!other.widget.compare(this.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              this.deco = other.deco;
              this.breakAfter = other.breakAfter;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get isEditable() { return false; }
      get isWidget() { return true; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          if (this.widget instanceof BlockGapWidget)
              return null;
          return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
      covers(side) {
          let { startSide, endSide } = this.deco;
          return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
  }
  class BlockGapWidget extends WidgetType {
      constructor(height) {
          super();
          this.height = height;
      }
      toDOM() {
          let elt = document.createElement("div");
          elt.className = "cm-gap";
          this.updateDOM(elt);
          return elt;
      }
      eq(other) { return other.height == this.height; }
      updateDOM(elt) {
          elt.style.height = this.height + "px";
          return true;
      }
      get editable() { return true; }
      get estimatedHeight() { return this.height; }
      ignoreEvent() { return false; }
  }

  class ContentBuilder {
      constructor(doc, pos, end, disallowBlockEffectsFor) {
          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.disallowBlockEffectsFor = disallowBlockEffectsFor;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0 /* Buf.No */;
          this.bufferMarks = [];
          // Set to false directly after a widget that covers the position after it
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
      }
      posCovered() {
          if (this.content.length == 0)
              return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
      getLine() {
          if (!this.curLine) {
              this.content.push(this.curLine = new LineView);
              this.atCursorPos = true;
          }
          return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
          if (this.pendingBuffer) {
              this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
              this.pendingBuffer = 0 /* Buf.No */;
          }
      }
      addBlockWidget(view) {
          this.flushBuffer();
          this.curLine = null;
          this.content.push(view);
      }
      finish(openEnd) {
          if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
              this.flushBuffer();
          else
              this.pendingBuffer = 0 /* Buf.No */;
          if (!this.posCovered() &&
              !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
              this.getLine();
      }
      buildText(length, active, openStart) {
          while (length > 0) {
              if (this.textOff == this.text.length) {
                  let { value, lineBreak, done } = this.cursor.next(this.skip);
                  this.skip = 0;
                  if (done)
                      throw new Error("Ran out of text content when drawing inline views");
                  if (lineBreak) {
                      if (!this.posCovered())
                          this.getLine();
                      if (this.content.length)
                          this.content[this.content.length - 1].breakAfter = 1;
                      else
                          this.breakAtStart = 1;
                      this.flushBuffer();
                      this.curLine = null;
                      this.atCursorPos = true;
                      length--;
                      continue;
                  }
                  else {
                      this.text = value;
                      this.textOff = 0;
                  }
              }
              let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
              this.flushBuffer(active.slice(active.length - openStart));
              this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.atCursorPos = true;
              this.textOff += take;
              length -= take;
              openStart = 0;
          }
      }
      span(from, to, active, openStart) {
          this.buildText(to - from, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      point(from, to, deco, active, openStart, index) {
          if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
              if (deco.block)
                  throw new RangeError("Block decorations may not be specified via plugins");
              if (to > this.doc.lineAt(this.pos).to)
                  throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
          }
          let len = to - from;
          if (deco instanceof PointDecoration) {
              if (deco.block) {
                  if (deco.startSide > 0 && !this.posCovered())
                      this.getLine();
                  this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
              }
              else {
                  let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                  let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                      (from < to || deco.startSide > 0);
                  let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                  let line = this.getLine();
                  if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                      this.pendingBuffer = 0 /* Buf.No */;
                  this.flushBuffer(active);
                  if (cursorBefore) {
                      line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                      openStart = active.length + Math.max(0, openStart - active.length);
                  }
                  line.append(wrapMarks(view, active), openStart);
                  this.atCursorPos = cursorAfter;
                  this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                  if (this.pendingBuffer)
                      this.bufferMarks = active.slice();
              }
          }
          else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
              this.getLine().addLineDeco(deco);
          }
          if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                  this.textOff += len;
              }
              else {
                  this.skip += len - (this.text.length - this.textOff);
                  this.text = "";
                  this.textOff = 0;
              }
              this.pos = to;
          }
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      static build(text, from, to, decorations, dynamicDecorationMap) {
          let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
          builder.openEnd = RangeSet.spans(decorations, from, to, builder);
          if (builder.openStart < 0)
              builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
      }
  }
  function wrapMarks(view, active) {
      for (let mark of active)
          view = new MarkView(mark, [view], view.length);
      return view;
  }
  class NullWidget extends WidgetType {
      constructor(tag) {
          super();
          this.tag = tag;
      }
      eq(other) { return other.tag == this.tag; }
      toDOM() { return document.createElement(this.tag); }
      updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
      get isHidden() { return true; }
  }
  NullWidget.inline = /*@__PURE__*/new NullWidget("span");
  NullWidget.block = /*@__PURE__*/new NullWidget("div");

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/(function (Direction) {
      // (These are chosen to match the base levels, in bidi algorithm
      // terms, of spans in that direction.)
      /**
      Left-to-right.
      */
      Direction[Direction["LTR"] = 0] = "LTR";
      /**
      Right-to-left.
      */
      Direction[Direction["RTL"] = 1] = "RTL";
  return Direction})(Direction || (Direction = {}));
  const LTR = Direction.LTR, RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
      let result = [];
      for (let i = 0; i < str.length; i++)
          result.push(1 << +str[i]);
      return result;
  }
  // Character types for codepoints 0 to 0xf8
  const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (let p of ["()", "[]", "{}"]) {
      let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
      Brackets[l] = r;
      Brackets[r] = -l;
  }
  function charType(ch) {
      return ch <= 0xf7 ? LowTypes[ch] :
          0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
              0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                  0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                      0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                          0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
  }
  const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  class BidiSpan {
      /**
      The direction of this span.
      */
      get dir() { return this.level % 2 ? RTL : LTR; }
      /**
      @internal
      */
      constructor(
      /**
      The start of the span (relative to the start of the line).
      */
      from, 
      /**
      The end of the span.
      */
      to, 
      /**
      The ["bidi
      level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
      of the span (in this context, 0 means
      left-to-right, 1 means right-to-left, 2 means left-to-right
      number inside right-to-left text).
      */
      level) {
          this.from = from;
          this.to = to;
          this.level = level;
      }
      /**
      @internal
      */
      side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
      /**
      @internal
      */
      forward(forward, dir) { return forward == (this.dir == dir); }
      /**
      @internal
      */
      static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
              let span = order[i];
              if (span.from <= index && span.to >= index) {
                  if (span.level == level)
                      return i;
                  // When multiple spans match, if assoc != 0, take the one that
                  // covers that side, otherwise take the one with the minimum
                  // level.
                  if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                      maybe = i;
              }
          }
          if (maybe < 0)
              throw new RangeError("Index out of range");
          return maybe;
      }
  }
  function isolatesEq(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++) {
          let iA = a[i], iB = b[i];
          if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
              return false;
      }
      return true;
  }
  // Reused array of character types
  const types$1 = [];
  // Fill in the character types (in `types`) from `from` to `to` and
  // apply W normalization rules.
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
      for (let iI = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          let prevType = iI ? 256 /* T.NI */ : outerType;
          // W1. Examine each non-spacing mark (NSM) in the level run, and
          // change the type of the NSM to the type of the previous
          // character. If the NSM is at the start of the level run, it will
          // get the type of sor.
          // W2. Search backwards from each instance of a European number
          // until the first strong type (R, L, AL, or sor) is found. If an
          // AL is found, change the type of the European number to Arabic
          // number.
          // W3. Change all ALs to R.
          // (Left after this: L, R, EN, AN, ET, CS, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = charType(line.charCodeAt(i));
              if (type == 512 /* T.NSM */)
                  type = prev;
              else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                  type = 16 /* T.AN */;
              types$1[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
              prev = type;
          }
          // W5. A sequence of European terminators adjacent to European
          // numbers changes to all European numbers.
          // W6. Otherwise, separators and terminators change to Other
          // Neutral.
          // W7. Search backwards from each instance of a European number
          // until the first strong type (R, L, or sor) is found. If an L is
          // found, then change the type of the European number to L.
          // (Left after this: L, R, EN+AN, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = types$1[i];
              if (type == 128 /* T.CS */) {
                  if (i < to - 1 && prev == types$1[i + 1] && (prev & 24 /* T.Num */))
                      type = types$1[i] = prev;
                  else
                      types$1[i] = 256 /* T.NI */;
              }
              else if (type == 64 /* T.ET */) {
                  let end = i + 1;
                  while (end < to && types$1[end] == 64 /* T.ET */)
                      end++;
                  let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types$1[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                  for (let j = i; j < end; j++)
                      types$1[j] = replace;
                  i = end - 1;
              }
              else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                  types$1[i] = 1 /* T.L */;
              }
              prev = type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
          }
      }
  }
  // Process brackets throughout a run sequence.
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
      let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
      for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N0. Process bracket pairs in an isolating run sequence
          // sequentially in the logical order of the text positions of the
          // opening paired brackets using the logic given below. Within this
          // scope, bidirectional types EN and AN are treated as R.
          for (let i = from, ch, br, type; i < to; i++) {
              // Keeps [startIndex, type, strongSeen] triples for each open
              // bracket on BracketStack.
              if (br = Brackets[ch = line.charCodeAt(i)]) {
                  if (br < 0) { // Closing bracket
                      for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                          if (BracketStack[sJ + 1] == -br) {
                              let flags = BracketStack[sJ + 2];
                              let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                  !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                      (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                              if (type)
                                  types$1[i] = types$1[BracketStack[sJ]] = type;
                              sI = sJ;
                              break;
                          }
                      }
                  }
                  else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                      break;
                  }
                  else {
                      BracketStack[sI++] = i;
                      BracketStack[sI++] = ch;
                      BracketStack[sI++] = context;
                  }
              }
              else if ((type = types$1[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                  let embed = type == outerType;
                  context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                  for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                      let cur = BracketStack[sJ + 2];
                      if (cur & 2 /* Bracketed.EmbedInside */)
                          break;
                      if (embed) {
                          BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                      }
                      else {
                          if (cur & 4 /* Bracketed.OppositeInside */)
                              break;
                          BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                      }
                  }
              }
          }
      }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
      for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N1. A sequence of neutrals takes the direction of the
          // surrounding strong text if the text on both sides has the same
          // direction. European and Arabic numbers act as if they were R in
          // terms of their influence on neutrals. Start-of-level-run (sor)
          // and end-of-level-run (eor) are used at level run boundaries.
          // N2. Any remaining neutrals take the embedding direction.
          // (Left after this: L, R, EN+AN)
          for (let i = from; i < to;) {
              let type = types$1[i];
              if (type == 256 /* T.NI */) {
                  let end = i + 1;
                  for (;;) {
                      if (end == to) {
                          if (iI == isolates.length)
                              break;
                          end = isolates[iI++].to;
                          to = iI < isolates.length ? isolates[iI].from : rTo;
                      }
                      else if (types$1[end] == 256 /* T.NI */) {
                          end++;
                      }
                      else {
                          break;
                      }
                  }
                  let beforeL = prev == 1 /* T.L */;
                  let afterL = (end < rTo ? types$1[end] : outerType) == 1 /* T.L */;
                  let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                  for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                      if (j == fromJ) {
                          j = isolates[--jI].from;
                          fromJ = jI ? isolates[jI - 1].to : rFrom;
                      }
                      types$1[--j] = replace;
                  }
                  i = end;
              }
              else {
                  prev = type;
                  i++;
              }
          }
      }
  }
  // Find the contiguous ranges of character types in a given range, and
  // emit spans for them. Flip the order of the spans as appropriate
  // based on the level, and call through to compute the spans for
  // isolates at the proper point.
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
      let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
      if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
          for (let iCh = from, iI = 0; iCh < to;) {
              // Scan a section of characters in direction ourType, unless
              // there's another type of char right after iCh, in which case
              // we scan a section of other characters (which, if ourType ==
              // T.L, may contain both T.R and T.AN chars).
              let sameDir = true, isNum = false;
              if (iI == isolates.length || iCh < isolates[iI].from) {
                  let next = types$1[iCh];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              // Holds an array of isolates to pass to a recursive call if we
              // must recurse (to distinguish T.AN inside an RTL section in
              // LTR text), null if we can emit directly
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI < isolates.length && iScan == isolates[iI].from) {
                      if (isNum)
                          break run;
                      let iso = isolates[iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.to, jI = iI + 1;;) {
                              if (upto == to)
                                  break run;
                              if (jI < isolates.length && isolates[jI].from == upto)
                                  upto = isolates[jI++].to;
                              else if (types$1[upto] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      iI++;
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.from > iCh)
                              order.push(new BidiSpan(iCh, iso.from, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.to;
                      }
                      iScan = iso.to;
                  }
                  else if (iScan == to || (sameDir ? types$1[iScan] != ourType : types$1[iScan] == ourType)) {
                      break;
                  }
                  else {
                      iScan++;
                  }
              }
              if (recurse)
                  emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
              else if (iCh < iScan)
                  order.push(new BidiSpan(iCh, iScan, localLevel));
              iCh = iScan;
          }
      }
      else {
          // Iterate in reverse to flip the span order. Same code again, but
          // going from the back of the section to the front
          for (let iCh = to, iI = isolates.length; iCh > from;) {
              let sameDir = true, isNum = false;
              if (!iI || iCh > isolates[iI - 1].to) {
                  let next = types$1[iCh - 1];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI && iScan == isolates[iI - 1].to) {
                      if (isNum)
                          break run;
                      let iso = isolates[--iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.from, jI = iI;;) {
                              if (upto == from)
                                  break run;
                              if (jI && isolates[jI - 1].to == upto)
                                  upto = isolates[--jI].from;
                              else if (types$1[upto - 1] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.to < iCh)
                              order.push(new BidiSpan(iso.to, iCh, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.from;
                      }
                      iScan = iso.from;
                  }
                  else if (iScan == from || (sameDir ? types$1[iScan - 1] != ourType : types$1[iScan - 1] == ourType)) {
                      break;
                  }
                  else {
                      iScan--;
                  }
              }
              if (recurse)
                  emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
              else if (iScan < iCh)
                  order.push(new BidiSpan(iScan, iCh, localLevel));
              iCh = iScan;
          }
      }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
      let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
      computeCharTypes(line, from, to, isolates, outerType);
      processBracketPairs(line, from, to, isolates, outerType);
      processNeutrals(from, to, isolates, outerType);
      emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
      if (!line)
          return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
      if (direction == LTR && !isolates.length && !BidiRE.test(line))
          return trivialOrder(line.length);
      if (isolates.length)
          while (line.length > types$1.length)
              types$1[types$1.length] = 256 /* T.NI */; // Make sure types array has no gaps
      let order = [], level = direction == LTR ? 0 : 1;
      computeSectionOrder(line, level, level, isolates, 0, line.length, order);
      return order;
  }
  function trivialOrder(length) {
      return [new BidiSpan(0, length, 0)];
  }
  let movedOver = "";
  // This implementation moves strictly visually, without concern for a
  // traversal visiting every logical position in the string. It will
  // still do so for simple input, but situations like multiple isolates
  // with the same level next to each other, or text going against the
  // main dir at the end of the line, will make some positions
  // unreachable with this motion. Each visible cursor position will
  // correspond to the lower-level bidi span that touches it.
  //
  // The alternative would be to solve an order globally for a given
  // line, making sure that it includes every position, but that would
  // require associating non-canonical (higher bidi span level)
  // positions with a given visual position, which is likely to confuse
  // people. (And would generally be a lot more complicated.)
  function moveVisually(line, order, dir, start, forward) {
      var _a;
      let startIndex = start.head - line.from;
      let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
      let span = order[spanI], spanEnd = span.side(forward, dir);
      // End of span
      if (startIndex == spanEnd) {
          let nextI = spanI += forward ? 1 : -1;
          if (nextI < 0 || nextI >= order.length)
              return null;
          span = order[spanI = nextI];
          startIndex = span.side(!forward, dir);
          spanEnd = span.side(forward, dir);
      }
      let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
      if (nextIndex < span.from || nextIndex > span.to)
          nextIndex = spanEnd;
      movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
      let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
      if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
          return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
      return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
      for (let i = from; i < to; i++) {
          let type = charType(text.charCodeAt(i));
          if (type == 1 /* T.L */)
              return LTR;
          if (type == 2 /* T.R */ || type == 4 /* T.AL */)
              return RTL;
      }
      return LTR;
  }

  const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  const mouseSelectionStyle = /*@__PURE__*/Facet.define();
  const exceptionSink = /*@__PURE__*/Facet.define();
  const updateListener = /*@__PURE__*/Facet.define();
  const inputHandler$1 = /*@__PURE__*/Facet.define();
  const focusChangeEffect = /*@__PURE__*/Facet.define();
  const clipboardInputFilter = /*@__PURE__*/Facet.define();
  const clipboardOutputFilter = /*@__PURE__*/Facet.define();
  const perLineTextDirection = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const nativeSelectionHidden = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const scrollHandler = /*@__PURE__*/Facet.define();
  class ScrollTarget {
      constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
      // This data structure is abused to also store precise scroll
      // snapshots, instead of a `scrollIntoView` request. When this
      // flag is `true`, `range` points at a position in the reference
      // line, `yMargin` holds the difference between the top of that
      // line and the top of the editor, and `xMargin` holds the
      // editor's `scrollLeft`.
      isSnapshot = false) {
          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
          this.isSnapshot = isSnapshot;
      }
      map(changes) {
          return changes.empty ? this :
              new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
      clip(state) {
          return this.range.to <= state.doc.length ? this :
              new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
  }
  const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
  const setEditContextFormatting = /*@__PURE__*/StateEffect.define();
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
      let handler = state.facet(exceptionSink);
      if (handler.length)
          handler[0](exception);
      else if (window.onerror && window.onerror(String(exception), context, undefined, undefined, exception)) ;
      else if (context)
          console.error(context + ":", exception);
      else
          console.error(exception);
  }
  const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
  let nextPluginID = 0;
  const viewPlugin = /*@__PURE__*/Facet.define({
      combine(plugins) {
          return plugins.filter((p, i) => {
              for (let j = 0; j < i; j++)
                  if (plugins[j].plugin == p.plugin)
                      return false;
              return true;
          });
      }
  });
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view. They optionally take an argument, in
  which case you need to call [`of`](https://codemirror.net/6/docs/ref/#view.ViewPlugin.of) to create
  an extension for the plugin. When the argument type is undefined,
  you can use the plugin instance as an extension directly.
  */
  class ViewPlugin {
      constructor(
      /**
      @internal
      */
      id, 
      /**
      @internal
      */
      create, 
      /**
      @internal
      */
      domEventHandlers, 
      /**
      @internal
      */
      domEventObservers, buildExtensions) {
          this.id = id;
          this.create = create;
          this.domEventHandlers = domEventHandlers;
          this.domEventObservers = domEventObservers;
          this.baseExtensions = buildExtensions(this);
          this.extension = this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg: undefined }));
      }
      /**
      Create an extension for this plugin with the given argument.
      */
      of(arg) {
          return this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg }));
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create, spec) {
          const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
          return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
              let ext = [];
              if (deco)
                  ext.push(decorations$1.of(view => {
                      let pluginInst = view.plugin(plugin);
                      return pluginInst ? deco(pluginInst) : Decoration.none;
                  }));
              if (provide)
                  ext.push(provide(plugin));
              return ext;
          });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
          return ViewPlugin.define((view, arg) => new cls(view, arg), spec);
      }
  }
  class PluginInstance {
      constructor(spec) {
          this.spec = spec;
          // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `null`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.
          this.mustUpdate = null;
          // This is null when the plugin is initially created, but
          // initialized on the first update.
          this.value = null;
      }
      get plugin() { return this.spec && this.spec.plugin; }
      update(view) {
          if (!this.value) {
              if (this.spec) {
                  try {
                      this.value = this.spec.plugin.create(view, this.spec.arg);
                  }
                  catch (e) {
                      logException(view.state, e, "CodeMirror plugin crashed");
                      this.deactivate();
                  }
              }
          }
          else if (this.mustUpdate) {
              let update = this.mustUpdate;
              this.mustUpdate = null;
              if (this.value.update) {
                  try {
                      this.value.update(update);
                  }
                  catch (e) {
                      logException(update.state, e, "CodeMirror plugin crashed");
                      if (this.value.destroy)
                          try {
                              this.value.destroy();
                          }
                          catch (_) { }
                      this.deactivate();
                  }
              }
          }
          return this;
      }
      destroy(view) {
          var _a;
          if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                  this.value.destroy();
              }
              catch (e) {
                  logException(view.state, e, "CodeMirror plugin crashed");
              }
          }
      }
      deactivate() {
          this.spec = this.value = null;
      }
  }
  const editorAttributes = /*@__PURE__*/Facet.define();
  const contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  const decorations$1 = /*@__PURE__*/Facet.define();
  const outerDecorations = /*@__PURE__*/Facet.define();
  const atomicRanges = /*@__PURE__*/Facet.define();
  const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
  function getIsolatedRanges(view, line) {
      let isolates = view.state.facet(bidiIsolatedRanges);
      if (!isolates.length)
          return isolates;
      let sets = isolates.map(i => i instanceof Function ? i(view) : i);
      let result = [];
      RangeSet.spans(sets, line.from, line.to, {
          point() { },
          span(fromDoc, toDoc, active, open) {
              let from = fromDoc - line.from, to = toDoc - line.from;
              let level = result;
              for (let i = active.length - 1; i >= 0; i--, open--) {
                  let direction = active[i].spec.bidiIsolate, update;
                  if (direction == null)
                      direction = autoDirection(line.text, from, to);
                  if (open > 0 && level.length &&
                      (update = level[level.length - 1]).to == from && update.direction == direction) {
                      update.to = to;
                      level = update.inner;
                  }
                  else {
                      let add = { from, to, direction, inner: [] };
                      level.push(add);
                      level = add.inner;
                  }
              }
          }
      });
      return result;
  }
  const scrollMargins = /*@__PURE__*/Facet.define();
  function getScrollMargins(view) {
      let left = 0, right = 0, top = 0, bottom = 0;
      for (let source of view.state.facet(scrollMargins)) {
          let m = source(view);
          if (m) {
              if (m.left != null)
                  left = Math.max(left, m.left);
              if (m.right != null)
                  right = Math.max(right, m.right);
              if (m.top != null)
                  top = Math.max(top, m.top);
              if (m.bottom != null)
                  bottom = Math.max(bottom, m.bottom);
          }
      }
      return { left, right, top, bottom };
  }
  const styleModule = /*@__PURE__*/Facet.define();
  class ChangedRange {
      constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
      }
      join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set) {
          let i = set.length, me = this;
          for (; i > 0; i--) {
              let range = set[i - 1];
              if (range.fromA > me.toA)
                  continue;
              if (range.toA < me.fromA)
                  break;
              me = me.join(range);
              set.splice(i - 1, 1);
          }
          set.splice(i, 0, me);
          return set;
      }
      static extendWithRanges(diff, ranges) {
          if (ranges.length == 0)
              return diff;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              let next = dI == diff.length ? null : diff[dI], off = posA - posB;
              let end = next ? next.fromB : 1e9;
              while (rI < ranges.length && ranges[rI] < end) {
                  let from = ranges[rI], to = ranges[rI + 1];
                  let fromB = Math.max(posB, from), toB = Math.min(end, to);
                  if (fromB <= toB)
                      new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                  if (to > end)
                      break;
                  else
                      rI += 2;
              }
              if (!next)
                  return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
          }
      }
  }
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  class ViewUpdate {
      constructor(
      /**
      The editor view that the update is associated with.
      */
      view, 
      /**
      The new editor state.
      */
      state, 
      /**
      The transactions involved in the update. May be empty.
      */
      transactions) {
          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */
          this.flags = 0;
          this.startState = view.state;
          this.changes = ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
              this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
          return new ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
          return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
      get viewportMoved() {
          return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
          return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
          return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
          return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
          return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
          return this.transactions.some(tr => tr.selection);
      }
      /**
      @internal
      */
      get empty() { return this.flags == 0 && this.transactions.length == 0; }
  }

  class DocView extends ContentView {
      get length() { return this.view.state.doc.length; }
      constructor(view) {
          super();
          this.view = view;
          this.decorations = [];
          this.dynamicDecorationMap = [false];
          this.domChanged = null;
          this.hasComposition = null;
          this.markedForComposition = new Set;
          this.editContextFormatting = Decoration.none;
          this.lastCompositionAfterCursor = false;
          // Track a minimum width for the editor. When measuring sizes in
          // measureVisibleLineHeights, this is updated to point at the width
          // of a given element and its extent in the document. When a change
          // happens in that range, these are reset. That way, once we've seen
          // a line/element of a given length, we keep the editor wide enough
          // to fit at least that element, until it is changed, at which point
          // we forget it again.
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          // Used by the resize observer to ignore resizes that we caused
          // ourselves
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView];
          this.children[0].setParent(this);
          this.updateDeco();
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      }
      // Update the document view to a given state.
      update(update) {
          var _a;
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                  this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
              }
              else {
                  this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                  this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
              }
          }
          this.updateEditContextFormatting(update);
          let readCompositionAt = -1;
          if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
              if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                  readCompositionAt = this.domChanged.newSel.head;
              else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                  readCompositionAt = update.state.selection.main.head;
          }
          let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
          this.domChanged = null;
          if (this.hasComposition) {
              this.markedForComposition.clear();
              let { from, to } = this.hasComposition;
              changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                  .addToSet(changedRanges.slice());
          }
          this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
          // When the DOM nodes around the selection are moved to another
          // parent, Chrome sometimes reports a different selection through
          // getSelection than the one that it actually shows to the user.
          // This forces a selection update when lines are joined to work
          // around that. Issue #54
          if ((browser.ie || browser.chrome) && !composition && update &&
              update.state.doc.lines != update.startState.doc.lines)
              this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
              return false;
          }
          else {
              this.updateInner(changedRanges, update.startState.doc.length, composition);
              if (update.transactions.length)
                  this.lastUpdate = Date.now();
              return true;
          }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength, composition) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, oldLength, composition);
          let { observer } = this.view;
          observer.ignore(() => {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
              this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
              // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.
              let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
              this.sync(this.view, track);
              this.flags &= ~7 /* ViewFlag.Dirty */;
              if (track && (track.written || observer.selectionRange.focusNode != track.node))
                  this.forceSelection = true;
              this.dom.style.height = "";
          });
          this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
              for (let child of this.children)
                  if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                      gaps.push(child.dom);
          observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength, composition) {
          let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
          let cursor = this.childCursor(oldLength);
          for (let i = ranges.length - 1;; i--) {
              let next = i >= 0 ? ranges[i] : null;
              if (!next)
                  break;
              let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
              if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                  let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                  let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                  breakAtStart = before.breakAtStart;
                  openStart = before.openStart;
                  openEnd = after.openEnd;
                  let compLine = this.compositionView(composition);
                  if (after.breakAtStart) {
                      compLine.breakAfter = 1;
                  }
                  else if (after.content.length &&
                      compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                      compLine.breakAfter = after.content[0].breakAfter;
                      after.content.shift();
                  }
                  if (before.content.length &&
                      compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                      before.content.pop();
                  }
                  content = before.content.concat(compLine).concat(after.content);
              }
              else {
                  ({ content, breakAtStart, openStart, openEnd } =
                      ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
              }
              let { i: toI, off: toOff } = cursor.findPos(toA, 1);
              let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
              replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
          }
          if (composition)
              this.fixCompositionDOM(composition);
      }
      updateEditContextFormatting(update) {
          this.editContextFormatting = this.editContextFormatting.map(update.changes);
          for (let tr of update.transactions)
              for (let effect of tr.effects)
                  if (effect.is(setEditContextFormatting)) {
                      this.editContextFormatting = effect.value;
                  }
      }
      compositionView(composition) {
          let cur = new TextView(composition.text.nodeValue);
          cur.flags |= 8 /* ViewFlag.Composition */;
          for (let { deco } of composition.marks)
              cur = new MarkView(deco, [cur], cur.length);
          let line = new LineView;
          line.append(cur, 0);
          return line;
      }
      fixCompositionDOM(composition) {
          let fix = (dom, cView) => {
              cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
              this.markedForComposition.add(cView);
              let prev = ContentView.get(dom);
              if (prev && prev != cView)
                  prev.dom = null;
              cView.setDOM(dom);
          };
          let pos = this.childPos(composition.range.fromB, 1);
          let cView = this.children[pos.i];
          fix(composition.line, cView);
          for (let i = composition.marks.length - 1; i >= -1; i--) {
              pos = cView.childPos(pos.off, 1);
              cView = cView.children[pos.i];
              fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
          }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead || !this.view.observer.selectionRange.focusNode)
              this.view.observer.readSelectionRange();
          let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
          let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) &&
              hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
          if (!(focused || fromPointer || selectionNotFocus))
              return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          let anchor = this.moveToLine(this.domAtPos(main.anchor));
          let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
          // Always reset on Firefox when next to an uneditable node to
          // avoid invisible cursor bugs (#111)
          if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
              let dummy = document.createTextNode("");
              this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
              anchor = head = new DOMPos(dummy, 0);
              force = true;
          }
          let domSel = this.view.observer.selectionRange;
          // If the selection is already here, or in an equivalent position, don't touch it
          if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
              !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
              this.view.observer.ignore(() => {
                  // Chrome Android will hide the virtual keyboard when tapping
                  // inside an uneditable node, and not bring it back when we
                  // move the cursor to its proper position. This tries to
                  // restore the keyboard by cycling focus.
                  if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                      inUneditable(domSel.focusNode, this.dom)) {
                      this.dom.blur();
                      this.dom.focus({ preventScroll: true });
                  }
                  let rawSel = getSelection(this.view.root);
                  if (!rawSel) ;
                  else if (main.empty) {
                      // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                      if (browser.gecko) {
                          let nextTo = nextToUneditable(anchor.node, anchor.offset);
                          if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                              let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                              if (text)
                                  anchor = new DOMPos(text.node, text.offset);
                          }
                      }
                      rawSel.collapse(anchor.node, anchor.offset);
                      if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                          rawSel.caretBidiLevel = main.bidiLevel;
                  }
                  else if (rawSel.extend) {
                      // Selection.extend can be used to create an 'inverted' selection
                      // (one where the focus is before the anchor), but not all
                      // browsers support it yet.
                      rawSel.collapse(anchor.node, anchor.offset);
                      // Safari will ignore the call above when the editor is
                      // hidden, and then raise an error on the call to extend
                      // (#940).
                      try {
                          rawSel.extend(head.node, head.offset);
                      }
                      catch (_) { }
                  }
                  else {
                      // Primitive (IE) way
                      let range = document.createRange();
                      if (main.anchor > main.head)
                          [anchor, head] = [head, anchor];
                      range.setEnd(head.node, head.offset);
                      range.setStart(anchor.node, anchor.offset);
                      rawSel.removeAllRanges();
                      rawSel.addRange(range);
                  }
                  if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                      this.dom.blur();
                      if (activeElt)
                          activeElt.focus();
                  }
              });
              this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
      suppressWidgetCursorChange(sel, cursor) {
          return this.hasComposition && cursor.empty &&
              isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
              this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
      enforceCursorAssoc() {
          if (this.hasComposition)
              return;
          let { view } = this, cursor = view.state.selection.main;
          let sel = getSelection(view.root);
          let { anchorNode, anchorOffset } = view.observer.selectionRange;
          if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
              return;
          let line = LineView.find(this, cursor.head);
          if (!line)
              return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
              return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
              return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          // This can go wrong in corner cases like single-character lines,
          // so check and reset if necessary.
          view.observer.readSelectionRange();
          let newRange = view.observer.selectionRange;
          if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
              sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
      moveToLine(pos) {
          // Block widgets will return positions before/after them, which
          // are thus directly in the document DOM element.
          let dom = this.dom, newPos;
          if (pos.node != dom)
              return pos;
          for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(0);
          }
          for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(view.length);
          }
          return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
      nearest(dom) {
          for (let cur = dom; cur;) {
              let domView = ContentView.get(cur);
              if (domView && domView.rootView == this)
                  return domView;
              cur = cur.parentNode;
          }
          return null;
      }
      posFromDOM(node, offset) {
          let view = this.nearest(node);
          if (!view)
              throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
      domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1;) {
              let child = this.children[i];
              if (off < child.length || child instanceof LineView)
                  break;
              i++;
              off = 0;
          }
          return this.children[i].domAtPos(off);
      }
      coordsAt(pos, side) {
          let best = null, bestPos = 0;
          for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
              let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
              if (end < pos)
                  break;
              if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                  (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                  best = child;
                  bestPos = start;
              }
              else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
                  if (child.deco.startSide < 0)
                      break;
                  else if (i)
                      best = null;
              }
              off = start;
          }
          return best ? best.coordsAt(pos - bestPos, side) : null;
      }
      coordsForChar(pos) {
          let { i, off } = this.childPos(pos, 1), child = this.children[i];
          if (!(child instanceof LineView))
              return null;
          while (child.children.length) {
              let { i, off: childOff } = child.childPos(off, 1);
              for (;; i++) {
                  if (i == child.children.length)
                      return null;
                  if ((child = child.children[i]).length)
                      break;
              }
              off = childOff;
          }
          if (!(child instanceof TextView))
              return null;
          let end = findClusterBreak(child.text, off);
          if (end == off)
              return null;
          let rects = textRange(child.dom, off, end).getClientRects();
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                  return rect;
          }
          return null;
      }
      measureVisibleLineHeights(viewport) {
          let result = [], { from, to } = viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1, ltr = this.view.textDirection == Direction.LTR;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (end > to)
                  break;
              if (pos >= from) {
                  let childRect = child.dom.getBoundingClientRect();
                  result.push(childRect.height);
                  if (isWider) {
                      let last = child.dom.lastChild;
                      let rects = last ? clientRectsFor(last) : [];
                      if (rects.length) {
                          let rect = rects[rects.length - 1];
                          let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                          if (width > widest) {
                              widest = width;
                              this.minWidth = contentWidth;
                              this.minWidthFrom = pos;
                              this.minWidthTo = end;
                          }
                      }
                  }
              }
              pos = end + child.breakAfter;
          }
          return result;
      }
      textDirectionAt(pos) {
          let { i } = this.childPos(pos, 1);
          return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
      measureTextSize() {
          for (let child of this.children) {
              if (child instanceof LineView) {
                  let measure = child.measureTextSize();
                  if (measure)
                      return measure;
              }
          }
          // If no workable line exists, force a layout of a measurable element
          let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
          dummy.className = "cm-line";
          dummy.style.width = "99999px";
          dummy.style.position = "absolute";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
              this.dom.appendChild(dummy);
              let rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              textHeight = rect ? rect.height : lineHeight;
              dummy.remove();
          });
          return { lineHeight, charWidth, textHeight };
      }
      childCursor(pos = this.length) {
          // Move back to start of last element when possible, so that
          // `ChildCursor.findPos` doesn't have to deal with the edge case
          // of being after the last element.
          let i = this.children.length;
          if (i)
              pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
      }
      computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0;; i++) {
              let next = i == vs.viewports.length ? null : vs.viewports[i];
              let end = next ? next.from - 1 : this.length;
              if (end > pos) {
                  let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                  deco.push(Decoration.replace({
                      widget: new BlockGapWidget(height),
                      block: true,
                      inclusive: true,
                      isBlockGap: true,
                  }).range(pos, end));
              }
              if (!next)
                  break;
              pos = next.to + 1;
          }
          return Decoration.set(deco);
      }
      updateDeco() {
          let i = 1;
          let allDeco = this.view.state.facet(decorations$1).map(d => {
              let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
              return dynamic ? d(this.view) : d;
          });
          let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
              let dynamic = typeof d == "function";
              if (dynamic)
                  dynamicOuter = true;
              return dynamic ? d(this.view) : d;
          });
          if (outerDeco.length) {
              this.dynamicDecorationMap[i++] = dynamicOuter;
              allDeco.push(RangeSet.join(outerDeco));
          }
          this.decorations = [
              this.editContextFormatting,
              ...allDeco,
              this.computeBlockGapDeco(),
              this.view.viewState.lineGapDeco
          ];
          while (i < this.decorations.length)
              this.dynamicDecorationMap[i++] = false;
          return this.decorations;
      }
      scrollIntoView(target) {
          if (target.isSnapshot) {
              let ref = this.view.viewState.lineBlockAt(target.range.head);
              this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
              this.view.scrollDOM.scrollLeft = target.xMargin;
              return;
          }
          for (let handler of this.view.state.facet(scrollHandler)) {
              try {
                  if (handler(this.view, target.range, target))
                      return true;
              }
              catch (e) {
                  logException(this.view.state, e, "scroll handler");
              }
          }
          let { range } = target;
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
              return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
              rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                  right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
          let margins = getScrollMargins(this.view);
          let targetRect = {
              left: rect.left - margins.left, top: rect.top - margins.top,
              right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
          };
          let { offsetWidth, offsetHeight } = this.view.scrollDOM;
          scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
  }
  function betweenUneditable(pos) {
      return pos.node.nodeType == 1 && pos.node.firstChild &&
          (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
          (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
      let sel = view.observer.selectionRange;
      if (!sel.focusNode)
          return null;
      let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
      let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
      let textNode = textBefore || textAfter;
      if (textAfter && textBefore && textAfter.node != textBefore.node) {
          let descAfter = ContentView.get(textAfter.node);
          if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
              textNode = textAfter;
          }
          else if (view.docView.lastCompositionAfterCursor) {
              let descBefore = ContentView.get(textBefore.node);
              if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                  textNode = textAfter;
          }
      }
      view.docView.lastCompositionAfterCursor = textNode != textBefore;
      if (!textNode)
          return null;
      let from = headPos - textNode.offset;
      return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
  }
  function findCompositionRange(view, changes, headPos) {
      let found = findCompositionNode(view, headPos);
      if (!found)
          return null;
      let { node: textNode, from, to } = found, text = textNode.nodeValue;
      // Don't try to preserve multi-line compositions
      if (/[\n\r]/.test(text))
          return null;
      if (view.state.doc.sliceString(found.from, found.to) != text)
          return null;
      let inv = changes.invertedDesc;
      let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
      let marks = [];
      for (let parent = textNode.parentNode;; parent = parent.parentNode) {
          let parentView = ContentView.get(parent);
          if (parentView instanceof MarkView)
              marks.push({ node: parent, deco: parentView.mark });
          else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
              return { range, text: textNode, marks, line: parent };
          else if (parent != view.contentDOM)
              marks.push({ node: parent, deco: new MarkDecoration({
                      inclusive: true,
                      attributes: getAttrs(parent),
                      tagName: parent.tagName.toLowerCase()
                  }) });
          else
              return null;
      }
  }
  function nextToUneditable(node, offset) {
      if (node.nodeType != 1)
          return 0;
      return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
          (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  let DecorationComparator$1 = class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange(from, to) { addRange(from, to, this.changes); }
      comparePoint(from, to) { addRange(from, to, this.changes); }
      boundChange(pos) { addRange(pos, pos, this.changes); }
  };
  function findChangedDeco(a, b, diff) {
      let comp = new DecorationComparator$1;
      RangeSet.compare(a, b, diff, comp);
      return comp.changes;
  }
  function inUneditable(node, inside) {
      for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == 'false') {
              return true;
          }
      }
      return false;
  }
  function touchesComposition(changes, composition) {
      let touched = false;
      if (composition)
          changes.iterChangedRanges((from, to) => {
              if (from < composition.to && to > composition.from)
                  touched = true;
          });
      return touched;
  }

  function groupAt(state, pos, bias = 1) {
      let categorize = state.charCategorizer(pos);
      let line = state.doc.lineAt(pos), linePos = pos - line.from;
      if (line.length == 0)
          return EditorSelection.cursor(pos);
      if (linePos == 0)
          bias = 1;
      else if (linePos == line.length)
          bias = -1;
      let from = linePos, to = linePos;
      if (bias < 0)
          from = findClusterBreak(line.text, linePos, false);
      else
          to = findClusterBreak(line.text, linePos);
      let cat = categorize(line.text.slice(from, to));
      while (from > 0) {
          let prev = findClusterBreak(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat)
              break;
          from = prev;
      }
      while (to < line.length) {
          let next = findClusterBreak(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat)
              break;
          to = next;
      }
      return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
      return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
      return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
      return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
      return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
      return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
      let closest, closestRect, closestX, closestY, closestOverlap = false;
      let above, below, aboveRect, belowRect;
      for (let child = parent.firstChild; child; child = child.nextSibling) {
          let rects = clientRectsFor(child);
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (closestRect && yOverlap(closestRect, rect))
                  rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
              let dx = getdx(x, rect), dy = getdy(y, rect);
              if (dx == 0 && dy == 0)
                  return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
              if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                  closest = child;
                  closestRect = rect;
                  closestX = dx;
                  closestY = dy;
                  closestOverlap = !dx ? true : x < rect.left ? i > 0 : i < rects.length - 1;
              }
              if (dx == 0) {
                  if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                      above = child;
                      aboveRect = rect;
                  }
                  else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                      below = child;
                      belowRect = rect;
                  }
              }
              else if (aboveRect && yOverlap(aboveRect, rect)) {
                  aboveRect = upBot(aboveRect, rect.bottom);
              }
              else if (belowRect && yOverlap(belowRect, rect)) {
                  belowRect = upTop(belowRect, rect.top);
              }
          }
      }
      if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
      }
      else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
      }
      if (!closest)
          return { node: parent, offset: 0 };
      let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
      if (closest.nodeType == 3)
          return domPosInText(closest, clipX, y);
      if (closestOverlap && closest.contentEditable != "false")
          return domPosAtCoords(closest, clipX, y);
      let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
          (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
      return { node: parent, offset };
  }
  function domPosInText(node, x, y) {
      let len = node.nodeValue.length;
      let closestOffset = -1, closestDY = 1e9, generalSide = 0;
      for (let i = 0; i < len; i++) {
          let rects = textRange(node, i, i + 1).getClientRects();
          for (let j = 0; j < rects.length; j++) {
              let rect = rects[j];
              if (rect.top == rect.bottom)
                  continue;
              if (!generalSide)
                  generalSide = x - rect.left;
              let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
              if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                  let right = x >= (rect.left + rect.right) / 2, after = right;
                  if (browser.chrome || browser.gecko) {
                      // Check for RTL on browsers that support getting client
                      // rects for empty ranges.
                      let rectBefore = textRange(node, i).getBoundingClientRect();
                      if (rectBefore.left == rect.right)
                          after = !right;
                  }
                  if (dy <= 0)
                      return { node, offset: i + (after ? 1 : 0) };
                  closestOffset = i + (after ? 1 : 0);
                  closestDY = dy;
              }
          }
      }
      return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
      var _a, _b;
      let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
      let block, { docHeight } = view.viewState;
      let { x, y } = coords, yOffset = y - docTop;
      if (yOffset < 0)
          return 0;
      if (yOffset > docHeight)
          return view.state.doc.length;
      // Scan for a text block near the queried y position
      for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
          block = view.elementAtHeight(yOffset);
          if (block.type == BlockType.Text)
              break;
          for (;;) {
              // Move the y position out of this block
              yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
              if (yOffset >= 0 && yOffset <= docHeight)
                  break;
              // If the document consists entirely of replaced widgets, we
              // won't find a text block, so return 0
              if (bounced)
                  return precise ? null : 0;
              bounced = true;
              bias = -bias;
          }
      }
      y = docTop + yOffset;
      let lineStart = block.from;
      // If this is outside of the rendered viewport, we can't determine a position
      if (lineStart < view.viewport.from)
          return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      if (lineStart > view.viewport.to)
          return view.viewport.to == view.state.doc.length ? view.state.doc.length :
              precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
      let doc = view.dom.ownerDocument;
      let root = view.root.elementFromPoint ? view.root : doc;
      let element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element))
          element = null;
      // If the element is unexpected, clip x at the sides of the content area and try again
      if (!element) {
          x = Math.max(content.left + 1, Math.min(content.right - 1, x));
          element = root.elementFromPoint(x, y);
          if (element && !view.contentDOM.contains(element))
              element = null;
      }
      // There's visible editor content under the point, so we can try
      // using caret(Position|Range)FromPoint as a shortcut
      let node, offset = -1;
      if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc.caretPositionFromPoint) {
              let pos = doc.caretPositionFromPoint(x, y);
              if (pos)
                  ({ offsetNode: node, offset } = pos);
          }
          else if (doc.caretRangeFromPoint) {
              let range = doc.caretRangeFromPoint(x, y);
              if (range) {
                  ({ startContainer: node, startOffset: offset } = range);
                  if (!view.contentDOM.contains(node) ||
                      browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                      browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                      node = undefined;
              }
          }
          // Chrome will return offsets into <input> elements without child
          // nodes, which will lead to a null deref below, so clip the
          // offset to the node size.
          if (node)
              offset = Math.min(maxOffset(node), offset);
      }
      // No luck, do our own (potentially expensive) search
      if (!node || !view.docView.dom.contains(node)) {
          let line = LineView.find(view.docView, lineStart);
          if (!line)
              return yOffset > block.top + block.height / 2 ? block.to : block.from;
          ({ node, offset } = domPosAtCoords(line.dom, x, y));
      }
      let nearest = view.docView.nearest(node);
      if (!nearest)
          return null;
      if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
          let rect = nearest.dom.getBoundingClientRect();
          return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
              ? nearest.posAtStart : nearest.posAtEnd;
      }
      else {
          return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
      }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
      let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
      if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          let textHeight = view.viewState.heightOracle.textHeight;
          let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
          into += line * view.viewState.heightOracle.lineLength;
      }
      let content = view.state.sliceDoc(block.from, block.to);
      return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
      let len, scan = node;
      if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
          return false;
      for (;;) { // Check that there is no content after this node
          let next = scan.nextSibling;
          if (next) {
              if (next.nodeName == "BR")
                  break;
              return false;
          }
          else {
              let parent = scan.parentNode;
              if (!parent || parent.nodeName == "DIV")
                  break;
              scan = parent;
          }
      }
      return textRange(node, len - 1, len).getBoundingClientRect().right > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
      if (offset != 0)
          return false;
      for (let cur = node;;) {
          let parent = cur.parentNode;
          if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
              return false;
          if (parent.classList.contains("cm-line"))
              break;
          cur = parent;
      }
      let rect = node.nodeType == 1 ? node.getBoundingClientRect()
          : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
      return x - rect.left > 5;
  }
  function blockAt(view, pos, side) {
      let line = view.lineBlockAt(pos);
      if (Array.isArray(line.type)) {
          let best;
          for (let l of line.type) {
              if (l.from > pos)
                  break;
              if (l.to < pos)
                  continue;
              if (l.from < pos && l.to > pos)
                  return l;
              if (!best || (l.type == BlockType.Text && (best.type != l.type || (side < 0 ? l.from < pos : l.to > pos))))
                  best = l;
          }
          return best || line;
      }
      return line;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
      let line = blockAt(view, start.head, start.assoc || -1);
      let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
          : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
      if (coords) {
          let editorRect = view.dom.getBoundingClientRect();
          let direction = view.textDirectionAt(line.from);
          let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
              y: (coords.top + coords.bottom) / 2 });
          if (pos != null)
              return EditorSelection.cursor(pos, forward ? -1 : 1);
      }
      return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
      let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
      let direction = view.textDirectionAt(line.from);
      for (let cur = start, check = null;;) {
          let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
          if (!next) {
              if (line.number == (forward ? view.state.doc.lines : 1))
                  return cur;
              char = "\n";
              line = view.state.doc.line(line.number + (forward ? 1 : -1));
              spans = view.bidiSpans(line);
              next = view.visualLineSide(line, !forward);
          }
          if (!check) {
              if (!by)
                  return next;
              check = by(char);
          }
          else if (!check(char)) {
              return cur;
          }
          cur = next;
      }
  }
  function byGroup(view, pos, start) {
      let categorize = view.state.charCategorizer(pos);
      let cat = categorize(start);
      return (next) => {
          let nextCat = categorize(next);
          if (cat == CharCategory.Space)
              cat = nextCat;
          return cat == nextCat;
      };
  }
  function moveVertically(view, start, forward, distance) {
      let startPos = start.head, dir = forward ? 1 : -1;
      if (startPos == (forward ? view.state.doc.length : 0))
          return EditorSelection.cursor(startPos, start.assoc);
      let goal = start.goalColumn, startY;
      let rect = view.contentDOM.getBoundingClientRect();
      let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
      if (startCoords) {
          if (goal == null)
              goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
      }
      else {
          let line = view.viewState.lineBlockAt(startPos);
          if (goal == null)
              goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
      }
      let resolvedGoal = rect.left + goal;
      let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
      for (let extra = 0;; extra += 10) {
          let curY = startY + (dist + extra) * dir;
          let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
              let charRect = view.docView.coordsForChar(pos);
              let assoc = !charRect || curY < charRect.top ? -1 : 1;
              return EditorSelection.cursor(pos, assoc, undefined, goal);
          }
      }
  }
  function skipAtomicRanges(atoms, pos, bias) {
      for (;;) {
          let moved = 0;
          for (let set of atoms) {
              set.between(pos - 1, pos + 1, (from, to, value) => {
                  if (pos > from && pos < to) {
                      let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                      pos = side < 0 ? from : to;
                      moved = side;
                  }
              });
          }
          if (!moved)
              return pos;
      }
  }
  function skipAtoms(view, oldPos, pos) {
      let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
      return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }

  const LineBreakPlaceholder = "\uffff";
  class DOMReader {
      constructor(points, state) {
          this.points = points;
          this.text = "";
          this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text) {
          this.text += text;
      }
      lineBreak() {
          this.text += LineBreakPlaceholder;
      }
      readRange(start, end) {
          if (!start)
              return this;
          let parent = start.parentNode;
          for (let cur = start;;) {
              this.findPointBefore(parent, cur);
              let oldLen = this.text.length;
              this.readNode(cur);
              let next = cur.nextSibling;
              if (next == end)
                  break;
              let view = ContentView.get(cur), nextView = ContentView.get(next);
              if (view && nextView ? view.breakAfter :
                  (view ? view.breakAfter : isBlockElement(cur)) ||
                      (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                  this.lineBreak();
              cur = next;
          }
          this.findPointBefore(parent, end);
          return this;
      }
      readTextNode(node) {
          let text = node.nodeValue;
          for (let point of this.points)
              if (point.node == node)
                  point.pos = this.text.length + Math.min(point.offset, text.length);
          for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
              let nextBreak = -1, breakSize = 1, m;
              if (this.lineSeparator) {
                  nextBreak = text.indexOf(this.lineSeparator, off);
                  breakSize = this.lineSeparator.length;
              }
              else if (m = re.exec(text)) {
                  nextBreak = m.index;
                  breakSize = m[0].length;
              }
              this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
              if (nextBreak < 0)
                  break;
              this.lineBreak();
              if (breakSize > 1)
                  for (let point of this.points)
                      if (point.node == node && point.pos > this.text.length)
                          point.pos -= breakSize - 1;
              off = nextBreak + breakSize;
          }
      }
      readNode(node) {
          if (node.cmIgnore)
              return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          if (fromView != null) {
              this.findPointInside(node, fromView.length);
              for (let i = fromView.iter(); !i.next().done;) {
                  if (i.lineBreak)
                      this.lineBreak();
                  else
                      this.append(i.value);
              }
          }
          else if (node.nodeType == 3) {
              this.readTextNode(node);
          }
          else if (node.nodeName == "BR") {
              if (node.nextSibling)
                  this.lineBreak();
          }
          else if (node.nodeType == 1) {
              this.readRange(node.firstChild, null);
          }
      }
      findPointBefore(node, next) {
          for (let point of this.points)
              if (point.node == node && node.childNodes[point.offset] == next)
                  point.pos = this.text.length;
      }
      findPointInside(node, length) {
          for (let point of this.points)
              if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                  point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
      }
  }
  function isAtEnd(parent, node, offset) {
      for (;;) {
          if (!node || offset < maxOffset(node))
              return false;
          if (node == parent)
              return true;
          offset = domIndex(node) + 1;
          node = node.parentNode;
      }
  }
  class DOMPoint {
      constructor(node, offset) {
          this.node = node;
          this.offset = offset;
          this.pos = -1;
      }
  }

  class DOMChange {
      constructor(view, start, end, typeOver) {
          this.typeOver = typeOver;
          this.bounds = null;
          this.text = "";
          this.domChanged = start > -1;
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          if (view.state.readOnly && start > -1) {
              // Ignore changes when the editor is read-only
              this.newSel = null;
          }
          else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
              let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
              let reader = new DOMReader(selPoints, view.state);
              reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
              this.text = reader.text;
              this.newSel = selectionFromPoints(selPoints, this.bounds.from);
          }
          else {
              let domSel = view.observer.selectionRange;
              let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                  !contains(view.contentDOM, domSel.focusNode)
                  ? view.state.selection.main.head
                  : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
              let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                  !contains(view.contentDOM, domSel.anchorNode)
                  ? view.state.selection.main.anchor
                  : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
              // iOS will refuse to select the block gaps when doing
              // select-all.
              // Chrome will put the selection *inside* them, confusing
              // posFromDOM
              let vp = view.viewport;
              if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                  (vp.from > 0 || vp.to < view.state.doc.length)) {
                  let from = Math.min(head, anchor), to = Math.max(head, anchor);
                  let offFrom = vp.from - from, offTo = vp.to - to;
                  if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                      head = 0;
                      anchor = view.state.doc.length;
                  }
              }
              this.newSel = EditorSelection.single(anchor, head);
          }
      }
  }
  function applyDOMChange(view, domChange) {
      let change;
      let { newSel } = domChange, sel = view.state.selection.main;
      let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
      if (domChange.bounds) {
          let { from, to } = domChange.bounds;
          let preferredPos = sel.from, preferredSide = null;
          // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)
          if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
              preferredPos = sel.to;
              preferredSide = "end";
          }
          let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
          if (diff) {
              // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. DomChange drops one of those.
              if (browser.chrome && lastKey == 13 &&
                  diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                  diff.toB--;
              change = { from: from + diff.from, to: from + diff.toA,
                  insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
          }
      }
      else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
          newSel = null;
      }
      if (!change && !newSel)
          return false;
      if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
          // Heuristic to notice typing over a selected character
          change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
      }
      else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
          /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
          // Detect insert-period-on-double-space Mac and Android behavior,
          // and transform it into a regular space insert.
          if (newSel && change.insert.length == 2)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
      }
      else if (change && change.from >= sel.from && change.to <= sel.to &&
          (change.from != sel.from || change.to != sel.to) &&
          (sel.to - sel.from) - (change.to - change.from) <= 4) {
          // If the change is inside the selection and covers most of it,
          // assume it is a selection replace (with identical characters at
          // the start/end not included in the diff)
          change = {
              from: sel.from, to: sel.to,
              insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
          };
      }
      else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
          change.insert.toString() == "\n " && view.lineWrapping) {
          // In Chrome, if you insert a space at the start of a wrapped
          // line, it will actually insert a newline and a space, causing a
          // bogus new line to be created in CodeMirror (#968)
          if (newSel)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
      }
      if (change) {
          return applyDOMChangeInner(view, change, newSel, lastKey);
      }
      else if (newSel && !newSel.main.eq(sel)) {
          let scrollIntoView = false, userEvent = "select";
          if (view.inputState.lastSelectionTime > Date.now() - 50) {
              if (view.inputState.lastSelectionOrigin == "select")
                  scrollIntoView = true;
              userEvent = view.inputState.lastSelectionOrigin;
          }
          view.dispatch({ selection: newSel, scrollIntoView, userEvent });
          return true;
      }
      else {
          return false;
      }
  }
  function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
      if (browser.ios && view.inputState.flushIOSKey(change))
          return true;
      let sel = view.state.selection.main;
      // Android browsers don't fire reasonable key events for enter,
      // backspace, or delete. So this detects changes that look like
      // they're caused by those keys, and reinterprets them as key
      // events. (Some of these keys are also handled by beforeinput
      // events and the pendingAndroidKey mechanism, but that's not
      // reliable in all situations.)
      if (browser.android &&
          ((change.to == sel.to &&
              // GBoard will sometimes remove a space it just inserted
              // after a completion when you press enter
              (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
              change.insert.length == 1 && change.insert.lines == 2 &&
              dispatchKey(view.contentDOM, "Enter", 13)) ||
              ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                  lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                  dispatchKey(view.contentDOM, "Backspace", 8)) ||
              (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                  dispatchKey(view.contentDOM, "Delete", 46))))
          return true;
      let text = change.insert.toString();
      if (view.inputState.composing >= 0)
          view.inputState.composing++;
      let defaultTr;
      let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
      if (!view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text, defaultInsert)))
          view.dispatch(defaultInsert());
      return true;
  }
  function applyDefaultInsert(view, change, newSel) {
      let tr, startState = view.state, sel = startState.selection.main;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
          (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
          view.inputState.composing < 0) {
          let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
          let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
          tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
      }
      else {
          let changes = startState.changes(change);
          let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
          // Try to apply a composition change to all cursors
          if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
              change.to <= sel.to && change.to >= sel.to - 10) {
              let replaced = view.state.sliceDoc(change.from, change.to);
              let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
              if (composition) {
                  let dLen = change.insert.length - (change.to - change.from);
                  compositionRange = { from: composition.from, to: composition.to - dLen };
              }
              else {
                  compositionRange = view.state.doc.lineAt(sel.head);
              }
              let offset = sel.to - change.to, size = sel.to - sel.from;
              tr = startState.changeByRange(range => {
                  if (range.from == sel.from && range.to == sel.to)
                      return { changes, range: mainSel || range.map(changes) };
                  let to = range.to - offset, from = to - replaced.length;
                  if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                      // Unfortunately, there's no way to make multiple
                      // changes in the same node work without aborting
                      // composition, so cursors in the composition range are
                      // ignored.
                      range.to >= compositionRange.from && range.from <= compositionRange.to)
                      return { range };
                  let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                  return {
                      changes: rangeChanges,
                      range: !mainSel ? range.map(rangeChanges) :
                          EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                  };
              });
          }
          else {
              tr = {
                  changes,
                  selection: mainSel && startState.selection.replaceRange(mainSel)
              };
          }
      }
      let userEvent = "input.type";
      if (view.composing ||
          view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
          view.inputState.compositionPendingChange = false;
          userEvent += ".compose";
          if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
          }
      }
      return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
      let minLen = Math.min(a.length, b.length);
      let from = 0;
      while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
          from++;
      if (from == minLen && a.length == b.length)
          return null;
      let toA = a.length, toB = b.length;
      while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
      }
      if (preferredSide == "end") {
          let adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
      }
      if (toA < from && a.length < b.length) {
          let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
      }
      else if (toB < from) {
          let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
          from -= move;
          toA = from + (toA - toB);
          toB = from;
      }
      return { from, toA, toB };
  }
  function selectionPoints(view) {
      let result = [];
      if (view.root.activeElement != view.contentDOM)
          return result;
      let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
      if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset)
              result.push(new DOMPoint(focusNode, focusOffset));
      }
      return result;
  }
  function selectionFromPoints(points, base) {
      if (points.length == 0)
          return null;
      let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
      return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }

  class InputState {
      setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
      }
      constructor(view) {
          this.view = view;
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.lastTouchTime = 0;
          this.lastFocusTime = 0;
          this.lastScrollTop = 0;
          this.lastScrollLeft = 0;
          // On iOS, some keys need to have their default behavior happen
          // (after which we retroactively handle them and reset the DOM) to
          // avoid messing up the virtual keyboard state.
          this.pendingIOSKey = undefined;
          /**
          When enabled (>-1), tab presses are not given to key handlers,
          leaving the browser's default behavior. If >0, the mode expires
          at that timestamp, and any other keypress clears it.
          Esc enables temporary tab focus mode for two seconds when not
          otherwise handled.
          */
          this.tabFocusMode = -1;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.handlers = Object.create(null);
          // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.
          this.composing = -1;
          // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)
          this.compositionFirstChange = null;
          // End time of the previous composition
          this.compositionEndedAt = 0;
          // Used in a kludge to detect when an Enter keypress should be
          // considered part of the composition on Safari, which fires events
          // in the wrong order
          this.compositionPendingKey = false;
          // Used to categorize changes as part of a composition, even when
          // the mutation events fire shortly after the compositionend event
          this.compositionPendingChange = false;
          this.mouseSelection = null;
          // When a drag from the editor is active, this points at the range
          // being dragged.
          this.draggedContent = null;
          this.handleEvent = this.handleEvent.bind(this);
          this.notifiedFocused = view.hasFocus;
          // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.
          if (browser.safari)
              view.contentDOM.addEventListener("input", () => null);
          if (browser.gecko)
              firefoxCopyCutHack(view.contentDOM.ownerDocument);
      }
      handleEvent(event) {
          if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
              return;
          if (event.type == "keydown" && this.keydown(event))
              return;
          if (this.view.updateState != 0 /* UpdateState.Idle */)
              Promise.resolve().then(() => this.runHandlers(event.type, event));
          else
              this.runHandlers(event.type, event);
      }
      runHandlers(type, event) {
          let handlers = this.handlers[type];
          if (handlers) {
              for (let observer of handlers.observers)
                  observer(this.view, event);
              for (let handler of handlers.handlers) {
                  if (event.defaultPrevented)
                      break;
                  if (handler(this.view, event)) {
                      event.preventDefault();
                      break;
                  }
              }
          }
      }
      ensureHandlers(plugins) {
          let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
          for (let type in handlers)
              if (type != "scroll") {
                  let passive = !handlers[type].handlers.length;
                  let exists = prev[type];
                  if (exists && passive != !exists.handlers.length) {
                      dom.removeEventListener(type, this.handleEvent);
                      exists = null;
                  }
                  if (!exists)
                      dom.addEventListener(type, this.handleEvent, { passive });
              }
          for (let type in prev)
              if (type != "scroll" && !handlers[type])
                  dom.removeEventListener(type, this.handleEvent);
          this.handlers = handlers;
      }
      keydown(event) {
          // Must always run, even if a custom handler handled the event
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
              return true;
          if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
              this.tabFocusMode = -1;
          // Chrome for Android usually doesn't fire proper key events, but
          // occasionally does, usually surrounded by a bunch of complicated
          // composition changes. When an enter or backspace key event is
          // seen, hold off on handling DOM events for a bit, and then
          // dispatch it.
          if (browser.android && browser.chrome && !event.synthetic &&
              (event.keyCode == 13 || event.keyCode == 8)) {
              this.view.observer.delayAndroidKey(event.key, event.keyCode);
              return true;
          }
          // Preventing the default behavior of Enter on iOS makes the
          // virtual keyboard get stuck in the wrong (lowercase)
          // state. So we let it go through, and then, in
          // applyDOMChange, notify key handlers of it and reset to
          // the state they produce.
          let pending;
          if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
              ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                  EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
              this.pendingIOSKey = pending || event;
              setTimeout(() => this.flushIOSKey(), 250);
              return true;
          }
          if (event.keyCode != 229)
              this.view.observer.forceFlush();
          return false;
      }
      flushIOSKey(change) {
          let key = this.pendingIOSKey;
          if (!key)
              return false;
          // This looks like an autocorrection before Enter
          if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
              return false;
          this.pendingIOSKey = undefined;
          return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
      }
      ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
              return false;
          if (this.composing > 0)
              return true;
          // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
          // On some input method editors (IMEs), the Enter key is used to
          // confirm character selection. On Safari, when Enter is pressed,
          // compositionend and keydown events are sometimes emitted in the
          // wrong order. The key event should still be ignored, even when
          // it happens after the compositionend event.
          if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
              this.compositionPendingKey = false;
              return true;
          }
          return false;
      }
      startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
      }
      update(update) {
          this.view.observer.update(update);
          if (this.mouseSelection)
              this.mouseSelection.update(update);
          if (this.draggedContent && update.docChanged)
              this.draggedContent = this.draggedContent.map(update.changes);
          if (update.transactions.length)
              this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
      }
  }
  function bindHandler(plugin, handler) {
      return (view, event) => {
          try {
              return handler.call(plugin, event, view);
          }
          catch (e) {
              logException(view.state, e);
          }
      };
  }
  function computeHandlers(plugins) {
      let result = Object.create(null);
      function record(type) {
          return result[type] || (result[type] = { observers: [], handlers: [] });
      }
      for (let plugin of plugins) {
          let spec = plugin.spec, handlers = spec && spec.plugin.domEventHandlers, observers = spec && spec.plugin.domEventObservers;
          if (handlers)
              for (let type in handlers) {
                  let f = handlers[type];
                  if (f)
                      record(type).handlers.push(bindHandler(plugin.value, f));
              }
          if (observers)
              for (let type in observers) {
                  let f = observers[type];
                  if (f)
                      record(type).observers.push(bindHandler(plugin.value, f));
              }
      }
      for (let type in handlers)
          record(type).handlers.push(handlers[type]);
      for (let type in observers)
          record(type).observers.push(observers[type]);
      return result;
  }
  const PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  const EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  const dragScrollMargin = 6;
  function dragScrollSpeed(dist) {
      return Math.max(0, dist) * 0.7 + 8;
  }
  function dist(a, b) {
      return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  class MouseSelection {
      constructor(view, startEvent, style, mustSelect) {
          this.view = view;
          this.startEvent = startEvent;
          this.style = style;
          this.mustSelect = mustSelect;
          this.scrollSpeed = { x: 0, y: 0 };
          this.scrolling = -1;
          this.lastEvent = startEvent;
          this.scrollParents = scrollableParents(view.contentDOM);
          this.atoms = view.state.facet(atomicRanges).map(f => f(view));
          let doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      }
      start(event) {
          // When clicking outside of the selection, immediately apply the
          // effect of starting the selection
          if (this.dragging === false)
              this.select(event);
      }
      move(event) {
          if (event.buttons == 0)
              return this.destroy();
          if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
              return;
          this.select(this.lastEvent = event);
          let sx = 0, sy = 0;
          let left = 0, top = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
          if (this.scrollParents.x)
              ({ left, right } = this.scrollParents.x.getBoundingClientRect());
          if (this.scrollParents.y)
              ({ top, bottom } = this.scrollParents.y.getBoundingClientRect());
          let margins = getScrollMargins(this.view);
          if (event.clientX - margins.left <= left + dragScrollMargin)
              sx = -dragScrollSpeed(left - event.clientX);
          else if (event.clientX + margins.right >= right - dragScrollMargin)
              sx = dragScrollSpeed(event.clientX - right);
          if (event.clientY - margins.top <= top + dragScrollMargin)
              sy = -dragScrollSpeed(top - event.clientY);
          else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
              sy = dragScrollSpeed(event.clientY - bottom);
          this.setScrollSpeed(sx, sy);
      }
      up(event) {
          if (this.dragging == null)
              this.select(this.lastEvent);
          if (!this.dragging)
              event.preventDefault();
          this.destroy();
      }
      destroy() {
          this.setScrollSpeed(0, 0);
          let doc = this.view.contentDOM.ownerDocument;
          doc.removeEventListener("mousemove", this.move);
          doc.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
      setScrollSpeed(sx, sy) {
          this.scrollSpeed = { x: sx, y: sy };
          if (sx || sy) {
              if (this.scrolling < 0)
                  this.scrolling = setInterval(() => this.scroll(), 50);
          }
          else if (this.scrolling > -1) {
              clearInterval(this.scrolling);
              this.scrolling = -1;
          }
      }
      scroll() {
          let { x, y } = this.scrollSpeed;
          if (x && this.scrollParents.x) {
              this.scrollParents.x.scrollLeft += x;
              x = 0;
          }
          if (y && this.scrollParents.y) {
              this.scrollParents.y.scrollTop += y;
              y = 0;
          }
          if (x || y)
              this.view.win.scrollBy(x, y);
          if (this.dragging === false)
              this.select(this.lastEvent);
      }
      skipAtoms(sel) {
          let ranges = null;
          for (let i = 0; i < sel.ranges.length; i++) {
              let range = sel.ranges[i], updated = null;
              if (range.empty) {
                  let pos = skipAtomicRanges(this.atoms, range.from, 0);
                  if (pos != range.from)
                      updated = EditorSelection.cursor(pos, -1);
              }
              else {
                  let from = skipAtomicRanges(this.atoms, range.from, -1);
                  let to = skipAtomicRanges(this.atoms, range.to, 1);
                  if (from != range.from || to != range.to)
                      updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
              }
              if (updated) {
                  if (!ranges)
                      ranges = sel.ranges.slice();
                  ranges[i] = updated;
              }
          }
          return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
      select(event) {
          let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
          if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
              this.view.dispatch({
                  selection,
                  userEvent: "select.pointer"
              });
          this.mustSelect = false;
      }
      update(update) {
          if (update.transactions.some(tr => tr.isUserEvent("input.type")))
              this.destroy();
          else if (this.style.update(update))
              setTimeout(() => this.select(this.lastEvent), 20);
      }
  }
  function addsSelectionRange(view, event) {
      let facet = view.state.facet(clickAddsSelectionRange);
      return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
      let facet = view.state.facet(dragMovesSelection$1);
      return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
      let { main } = view.state.selection;
      if (main.empty)
          return false;
      // On boundary clicks, check whether the coordinates are inside the
      // selection's client rectangles
      let sel = getSelection(view.root);
      if (!sel || sel.rangeCount == 0)
          return true;
      let rects = sel.getRangeAt(0).getClientRects();
      for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          if (rect.left <= event.clientX && rect.right >= event.clientX &&
              rect.top <= event.clientY && rect.bottom >= event.clientY)
              return true;
      }
      return false;
  }
  function eventBelongsToEditor(view, event) {
      if (!event.bubbles)
          return true;
      if (event.defaultPrevented)
          return false;
      for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
          if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
              return false;
      return true;
  }
  const handlers = /*@__PURE__*/Object.create(null);
  const observers = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
      (browser.ios && browser.webkit_version < 604);
  function capturePaste(view) {
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
          view.focus();
          target.remove();
          doPaste(view, target.value);
      }, 50);
  }
  function textFilter(state, facet, text) {
      for (let filter of state.facet(facet))
          text = filter(text, state);
      return text;
  }
  function doPaste(view, input) {
      input = textFilter(view.state, clipboardInputFilter, input);
      let { state } = view, changes, i = 1, text = state.toText(input);
      let byLine = text.lines == state.selection.ranges.length;
      let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
      if (linewise) {
          let lastLine = -1;
          changes = state.changeByRange(range => {
              let line = state.doc.lineAt(range.from);
              if (line.from == lastLine)
                  return { range };
              lastLine = line.from;
              let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
              return { changes: { from: line.from, insert },
                  range: EditorSelection.cursor(range.from + insert.length) };
          });
      }
      else if (byLine) {
          changes = state.changeByRange(range => {
              let line = text.line(i++);
              return { changes: { from: range.from, to: range.to, insert: line.text },
                  range: EditorSelection.cursor(range.from + line.length) };
          });
      }
      else {
          changes = state.replaceSelection(text);
      }
      view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
      });
  }
  observers.scroll = view => {
      view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
      view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
          view.inputState.tabFocusMode = Date.now() + 2000;
      return false;
  };
  observers.touchstart = (view, e) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = view => {
      view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2000)
          return false; // Ignore touch interaction
      let style = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style = makeStyle(view, event);
          if (style)
              break;
      }
      if (!style && event.button == 0)
          style = basicMouseSelection(view, event);
      if (style) {
          let mustFocus = !view.hasFocus;
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
          if (mustFocus)
              view.observer.ignore(() => {
                  focusPreventScroll(view.contentDOM);
                  let active = view.root.activeElement;
                  if (active && !active.contains(view.contentDOM))
                      active.blur();
              });
          let mouseSel = view.inputState.mouseSelection;
          if (mouseSel) {
              mouseSel.start(event);
              return mouseSel.dragging === false;
          }
      }
      return false;
  };
  function rangeForClick(view, pos, bias, type) {
      if (type == 1) { // Single click
          return EditorSelection.cursor(pos, bias);
      }
      else if (type == 2) { // Double click
          return groupAt(view.state, pos, bias);
      }
      else { // Triple click
          let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to)
              to++;
          return EditorSelection.range(from, to);
      }
  }
  let inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
      let line = LineView.find(view.docView, pos);
      if (!line)
          return 1;
      let off = pos - line.posAtStart;
      // Line boundaries point into the line
      if (off == 0)
          return 1;
      if (off == line.length)
          return -1;
      // Positions on top of an element point at that element
      let before = line.coordsAt(off, -1);
      if (before && inside(x, y, before))
          return -1;
      let after = line.coordsAt(off, 1);
      if (after && inside(x, y, after))
          return 1;
      // This is probably a line wrap point. Pick before if the point is
      // above its bottom.
      return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
      let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  const BadMouseDetail = browser.ie && browser.ie_version <= 11;
  let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
  function getClickType(event) {
      if (!BadMouseDetail)
          return event.detail;
      let last = lastMouseDown, lastTime = lastMouseDownTime;
      lastMouseDown = event;
      lastMouseDownTime = Date.now();
      return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
          Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
      let start = queryPos(view, event), type = getClickType(event);
      let startSel = view.state.selection;
      return {
          update(update) {
              if (update.docChanged) {
                  start.pos = update.changes.mapPos(start.pos);
                  startSel = startSel.map(update.changes);
              }
          },
          get(event, extend, multiple) {
              let cur = queryPos(view, event), removed;
              let range = rangeForClick(view, cur.pos, cur.bias, type);
              if (start.pos != cur.pos && !extend) {
                  let startRange = rangeForClick(view, start.pos, start.bias, type);
                  let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                  range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
              }
              if (extend)
                  return startSel.replaceRange(startSel.main.extend(range.from, range.to));
              else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                  return removed;
              else if (multiple)
                  return startSel.addRange(range);
              else
                  return EditorSelection.create([range]);
          }
      };
  }
  function removeRangeAround(sel, pos) {
      for (let i = 0; i < sel.ranges.length; i++) {
          let { from, to } = sel.ranges[i];
          if (from <= pos && to >= pos)
              return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
      }
      return null;
  }
  handlers.dragstart = (view, event) => {
      let { selection: { main: range } } = view.state;
      if (event.target.draggable) {
          let cView = view.docView.nearest(event.target);
          if (cView && cView.isWidget) {
              let from = cView.posAtStart, to = from + cView.length;
              if (from >= range.to || to <= range.from)
                  range = EditorSelection.range(from, to);
          }
      }
      let { inputState } = view;
      if (inputState.mouseSelection)
          inputState.mouseSelection.dragging = true;
      inputState.draggedContent = range;
      if (event.dataTransfer) {
          event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
          event.dataTransfer.effectAllowed = "copyMove";
      }
      return false;
  };
  handlers.dragend = view => {
      view.inputState.draggedContent = null;
      return false;
  };
  function dropText(view, event, text, direct) {
      text = textFilter(view.state, clipboardInputFilter, text);
      if (!text)
          return;
      let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let { draggedContent } = view.inputState;
      let del = direct && draggedContent && dragMovesSelection(view, event)
          ? { from: draggedContent.from, to: draggedContent.to } : null;
      let ins = { from: dropPos, insert: text };
      let changes = view.state.changes(del ? [del, ins] : ins);
      view.focus();
      view.dispatch({
          changes,
          selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
          userEvent: del ? "move.drop" : "input.drop"
      });
      view.inputState.draggedContent = null;
  }
  handlers.drop = (view, event) => {
      if (!event.dataTransfer)
          return false;
      if (view.state.readOnly)
          return true;
      let files = event.dataTransfer.files;
      if (files && files.length) { // For a file drop, read the file's text.
          let text = Array(files.length), read = 0;
          let finishFile = () => {
              if (++read == files.length)
                  dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
              let reader = new FileReader;
              reader.onerror = finishFile;
              reader.onload = () => {
                  if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                      text[i] = reader.result;
                  finishFile();
              };
              reader.readAsText(files[i]);
          }
          return true;
      }
      else {
          let text = event.dataTransfer.getData("Text");
          if (text) {
              dropText(view, event, text, true);
              return true;
          }
      }
      return false;
  };
  handlers.paste = (view, event) => {
      if (view.state.readOnly)
          return true;
      view.observer.flush();
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
          return true;
      }
      else {
          capturePaste(view);
          return false;
      }
  };
  function captureCopy(view, text) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.value = text;
      target.focus();
      target.selectionEnd = text.length;
      target.selectionStart = 0;
      setTimeout(() => {
          target.remove();
          view.focus();
      }, 50);
  }
  function copiedRange(state) {
      let content = [], ranges = [], linewise = false;
      for (let range of state.selection.ranges)
          if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
          }
      if (!content.length) {
          // Nothing selected, do a line-wise copy
          let upto = -1;
          for (let { from } of state.selection.ranges) {
              let line = state.doc.lineAt(from);
              if (line.number > upto) {
                  content.push(line.text);
                  ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
              }
              upto = line.number;
          }
          linewise = true;
      }
      return { text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)), ranges, linewise };
  }
  let lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
      let { text, ranges, linewise } = copiedRange(view.state);
      if (!text && !linewise)
          return false;
      lastLinewiseCopy = linewise ? text : null;
      if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
              changes: ranges,
              scrollIntoView: true,
              userEvent: "delete.cut"
          });
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          data.clearData();
          data.setData("text/plain", text);
          return true;
      }
      else {
          captureCopy(view, text);
          return false;
      }
  };
  const isFocusChange = /*@__PURE__*/Annotation.define();
  function focusChangeTransaction(state, focus) {
      let effects = [];
      for (let getEffect of state.facet(focusChangeEffect)) {
          let effect = getEffect(state, focus);
          if (effect)
              effects.push(effect);
      }
      return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
      setTimeout(() => {
          let focus = view.hasFocus;
          if (focus != view.inputState.notifiedFocused) {
              let tr = focusChangeTransaction(view.state, focus);
              if (tr)
                  view.dispatch(tr);
              else
                  view.update([]);
          }
      }, 10);
  }
  observers.focus = view => {
      view.inputState.lastFocusTime = Date.now();
      // When focusing reset the scroll position, move it back to where it was
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
          view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
          view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
  };
  observers.blur = view => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
          // FIXME possibly set a timeout to clear it again on Android
          view.inputState.composing = 0;
      }
  };
  observers.compositionend = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionPendingKey = true;
      view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android) {
          // Delay flushing for a bit on Android because it'll often fire a
          // bunch of contradictory changes in a row at end of compositon
          view.observer.flushSoon();
      }
      else if (view.inputState.compositionPendingChange) {
          // If we found pending records, schedule a flush.
          Promise.resolve().then(() => view.observer.flush());
      }
      else {
          // Otherwise, make sure that, if no changes come in soon, the
          // composition view is cleared.
          setTimeout(() => {
              if (view.inputState.composing < 0 && view.docView.hasComposition)
                  view.update([]);
          }, 50);
      }
  };
  observers.contextmenu = view => {
      view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
      var _a, _b;
      // In EditContext mode, we must handle insertReplacementText events
      // directly, to make spell checking corrections work
      if (event.inputType == "insertReplacementText" && view.observer.editContext) {
          let text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"), ranges = event.getTargetRanges();
          if (text && ranges.length) {
              let r = ranges[0];
              let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
              applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
              return true;
          }
      }
      // Because Chrome Android doesn't fire useful key events, use
      // beforeinput to detect backspace (and possibly enter and delete,
      // but those usually don't even seem to fire beforeinput events at
      // the moment) and fake a key event for it.
      //
      // (preventDefault on beforeinput, though supported in the spec,
      // seems to do nothing at all on Chrome).
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);
          if (pending.key == "Backspace" || pending.key == "Delete") {
              let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
              setTimeout(() => {
                  var _a;
                  // Backspacing near uneditable nodes on Chrome Android sometimes
                  // closes the virtual keyboard. This tries to crudely detect
                  // that and refocus to get it back.
                  if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                      view.contentDOM.blur();
                      view.focus();
                  }
              }, 100);
          }
      }
      if (browser.ios && event.inputType == "deleteContentForward") {
          // For some reason, DOM changes (and beforeinput) happen _before_
          // the key event for ctrl-d on iOS when using an external
          // keyboard.
          view.observer.flushSoon();
      }
      // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
      if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
          setTimeout(() => observers.compositionend(view, event), 20);
      }
      return false;
  };
  const appliedFirefoxHack = /*@__PURE__*/new Set;
  // In Firefox, when cut/copy handlers are added to the document, that
  // somehow avoids a bug where those events aren't fired when the
  // selection is empty. See https://github.com/codemirror/dev/issues/1082
  // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
  function firefoxCopyCutHack(doc) {
      if (!appliedFirefoxHack.has(doc)) {
          appliedFirefoxHack.add(doc);
          doc.addEventListener("copy", () => { });
          doc.addEventListener("cut", () => { });
      }
  }

  const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  // Used to track, during updateHeight, if any actual heights changed
  let heightChangeFlag = false;
  function clearHeightChangeFlag() { heightChangeFlag = false; }
  class HeightOracle {
      constructor(lineWrapping) {
          this.lineWrapping = lineWrapping;
          this.doc = Text.empty;
          this.heightSamples = {};
          this.lineHeight = 14; // The height of an entire line (line-height)
          this.charWidth = 7;
          this.textHeight = 14; // The height of the actual font (font-size)
          this.lineLength = 30;
      }
      heightForGap(from, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
          if (this.lineWrapping)
              lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
          return this.lineHeight * lines;
      }
      heightForLine(length) {
          if (!this.lineWrapping)
              return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / Math.max(1, this.lineLength - 5)));
          return lines * this.lineHeight;
      }
      setDoc(doc) { this.doc = doc; return this; }
      mustRefreshForWrapping(whiteSpace) {
          return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
              let h = lineHeights[i];
              if (h < 0) {
                  i++;
              }
              else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                  newHeight = true;
                  this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
          this.lineWrapping = lineWrapping;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.textHeight = textHeight;
          this.lineLength = lineLength;
          if (changed) {
              this.heightSamples = {};
              for (let i = 0; i < knownHeights.length; i++) {
                  let h = knownHeights[i];
                  if (h < 0)
                      i++;
                  else
                      this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return changed;
      }
  }
  // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  class MeasuredHeights {
      constructor(from, heights) {
          this.from = from;
          this.heights = heights;
          this.index = 0;
      }
      get more() { return this.index < this.heights.length; }
  }
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  class BlockInfo {
      /**
      @internal
      */
      constructor(
      /**
      The start of the element in the document.
      */
      from, 
      /**
      The length of the element.
      */
      length, 
      /**
      The top position of the element (relative to the top of the
      document).
      */
      top, 
      /**
      Its height.
      */
      height, 
      /**
      @internal Weird packed field that holds an array of children
      for composite blocks, a decoration for block widgets, and a
      number indicating the amount of widget-create line breaks for
      text blocks.
      */
      _content) {
          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this._content = _content;
      }
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      get type() {
          return typeof this._content == "number" ? BlockType.Text :
              Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
      get to() { return this.from + this.length; }
      /**
      The bottom position of the element.
      */
      get bottom() { return this.top + this.height; }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
      get widget() {
          return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
      get widgetLineBreaks() {
          return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
      join(other) {
          let content = (Array.isArray(this._content) ? this._content : [this])
              .concat(Array.isArray(other._content) ? other._content : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
      }
  }
  var QueryType$1 = /*@__PURE__*/(function (QueryType) {
      QueryType[QueryType["ByPos"] = 0] = "ByPos";
      QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
      QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType})(QueryType$1 || (QueryType$1 = {}));
  const Epsilon = 1e-3;
  class HeightMap {
      constructor(length, // The number of characters covered
      height, // Height of this part of the document
      flags = 2 /* Flag.Outdated */) {
          this.length = length;
          this.height = height;
          this.flags = flags;
      }
      get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
      set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
      setHeight(height) {
          if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon)
                  heightChangeFlag = true;
              this.height = height;
          }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) { result.push(this); }
      decomposeRight(_from, result) { result.push(this); }
      applyChanges(decorations, oldDoc, oracle, changes) {
          let me = this, doc = oracle.doc;
          for (let i = changes.length - 1; i >= 0; i--) {
              let { fromA, toA, fromB, toB } = changes[i];
              let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
              let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
              toB += end.to - toA;
              toA = end.to;
              while (i > 0 && start.from <= changes[i - 1].toA) {
                  fromA = changes[i - 1].fromA;
                  fromB = changes[i - 1].fromB;
                  i--;
                  if (fromA < start.from)
                      start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
              }
              fromB += start.from - fromA;
              fromA = start.from;
              let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
              me = replace$1(me, me.replace(fromA, toA, nodes));
          }
          return me.updateHeight(oracle, 0);
      }
      static empty() { return new HeightMapText(0, 0); }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
          if (nodes.length == 1)
              return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (;;) {
              if (i == j) {
                  if (before > after * 2) {
                      let split = nodes[i - 1];
                      if (split.break)
                          nodes.splice(--i, 1, split.left, null, split.right);
                      else
                          nodes.splice(--i, 1, split.left, split.right);
                      j += 1 + split.break;
                      before -= split.size;
                  }
                  else if (after > before * 2) {
                      let split = nodes[j];
                      if (split.break)
                          nodes.splice(j, 1, split.left, null, split.right);
                      else
                          nodes.splice(j, 1, split.left, split.right);
                      j += 2 + split.break;
                      after -= split.size;
                  }
                  else {
                      break;
                  }
              }
              else if (before < after) {
                  let next = nodes[i++];
                  if (next)
                      before += next.size;
              }
              else {
                  let next = nodes[--j];
                  if (next)
                      after += next.size;
              }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
              brk = 1;
              i--;
          }
          else if (nodes[i] == null) {
              brk = 1;
              j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
  }
  function replace$1(old, val) {
      if (old == val)
          return old;
      if (old.constructor != val.constructor)
          heightChangeFlag = true;
      return val;
  }
  HeightMap.prototype.size = 1;
  class HeightMapBlock extends HeightMap {
      constructor(length, height, deco) {
          super(length, height);
          this.deco = deco;
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
      }
      lineAt(_value, _type, oracle, top, offset) {
          return this.blockAt(0, oracle, top, offset);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          if (from <= offset + this.length && to >= offset)
              f(this.blockAt(0, oracle, top, offset));
      }
      updateHeight(oracle, offset = 0, _force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          this.outdated = false;
          return this;
      }
      toString() { return `block(${this.length})`; }
  }
  class HeightMapText extends HeightMapBlock {
      constructor(length, height) {
          super(length, height, null);
          this.collapsed = 0; // Amount of collapsed content in the line
          this.widgetHeight = 0; // Maximum inline widget height
          this.breaks = 0; // Number of widget-introduced line breaks on the line
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.breaks);
      }
      replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
              Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap)
                  node = new HeightMapText(node.length, this.height);
              else
                  node.height = this.height;
              if (!this.outdated)
                  node.outdated = false;
              return node;
          }
          else {
              return HeightMap.of(nodes);
          }
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          else if (force || this.outdated)
              this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                  this.breaks * oracle.lineHeight);
          this.outdated = false;
          return this;
      }
      toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
  }
  class HeightMapGap extends HeightMap {
      constructor(length) { super(length, 0); }
      heightMetrics(oracle, offset) {
          let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
          let lines = lastLine - firstLine + 1;
          let perLine, perChar = 0;
          if (oracle.lineWrapping) {
              let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
              perLine = totalPerLine / lines;
              if (this.length > lines + 1)
                  perChar = (this.height - totalPerLine) / (this.length - lines - 1);
          }
          else {
              perLine = this.height / lines;
          }
          return { firstLine, lastLine, perLine, perChar };
      }
      blockAt(height, oracle, top, offset) {
          let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          if (oracle.lineWrapping) {
              let guess = offset + (height < oracle.lineHeight ? 0
                  : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
              let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
              let lineTop = Math.max(top, height - lineHeight / 2);
              return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
          }
          else {
              let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
              let { from, length } = oracle.doc.line(firstLine + line);
              return new BlockInfo(from, length, top + perLine * line, perLine, 0);
          }
      }
      lineAt(value, type, oracle, top, offset) {
          if (type == QueryType$1.ByHeight)
              return this.blockAt(value, oracle, top, offset);
          if (type == QueryType$1.ByPosNoHeight) {
              let { from, to } = oracle.doc.lineAt(value);
              return new BlockInfo(from, to - from, 0, 0, 0);
          }
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
          let linesAbove = line.number - firstLine;
          let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
          return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          from = Math.max(from, offset);
          to = Math.min(to, offset + this.length);
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          for (let pos = from, lineTop = top; pos <= to;) {
              let line = oracle.doc.lineAt(pos);
              if (pos == from) {
                  let linesAbove = line.number - firstLine;
                  lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
              }
              let lineHeight = perLine + perChar * line.length;
              f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
              lineTop += lineHeight;
              pos = line.to + 1;
          }
      }
      replace(from, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
              let last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap)
                  nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
              else
                  nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from > 0) {
              let first = nodes[0];
              if (first instanceof HeightMapGap)
                  nodes[0] = new HeightMapGap(from + first.length);
              else
                  nodes.unshift(new HeightMapGap(from - 1), null);
          }
          return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
      }
      decomposeRight(from, result) {
          result.push(null, new HeightMapGap(this.length - from - 1));
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let end = offset + this.length;
          if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
              if (measured.from > offset)
                  nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
              while (pos <= end && measured.more) {
                  let len = oracle.doc.lineAt(pos).length;
                  if (nodes.length)
                      nodes.push(null);
                  let height = measured.heights[measured.index++];
                  if (singleHeight == -1)
                      singleHeight = height;
                  else if (Math.abs(height - singleHeight) >= Epsilon)
                      singleHeight = -2;
                  let line = new HeightMapText(len, height);
                  line.outdated = false;
                  nodes.push(line);
                  pos += len + 1;
              }
              if (pos <= end)
                  nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              let result = HeightMap.of(nodes);
              if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                  Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                  heightChangeFlag = true;
              return replace$1(this, result);
          }
          else if (force || this.outdated) {
              this.setHeight(oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
          }
          return this;
      }
      toString() { return `gap(${this.length})`; }
  }
  class HeightMapBranch extends HeightMap {
      constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
      }
      get break() { return this.flags & 1 /* Flag.Break */; }
      blockAt(height, oracle, top, offset) {
          let mid = top + this.left.height;
          return height < mid ? this.left.blockAt(height, oracle, top, offset)
              : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
      }
      lineAt(value, type, oracle, top, offset) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
          let base = left ? this.left.lineAt(value, type, oracle, top, offset)
              : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
          if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
              return base;
          let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
          if (left)
              return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
          else
              return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          if (this.break) {
              if (from < rightOffset)
                  this.left.forEachLine(from, to, oracle, top, offset, f);
              if (to >= rightOffset)
                  this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
          }
          else {
              let mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
              if (from < mid.from)
                  this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
              if (mid.to >= from && mid.from <= to)
                  f(mid);
              if (to > mid.to)
                  this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
          }
      }
      replace(from, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
              return this.balanced(this.left.replace(from, to, nodes), this.right);
          if (from > this.left.length)
              return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
          let result = [];
          if (from > 0)
              this.decomposeLeft(from, result);
          let left = result.length;
          for (let node of nodes)
              result.push(node);
          if (from > 0)
              mergeGaps(result, left - 1);
          if (to < this.length) {
              let right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
          }
          return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
              return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
              left++;
              if (to >= left)
                  result.push(null);
          }
          if (to > left)
              this.right.decomposeLeft(to - left, result);
      }
      decomposeRight(from, result) {
          let left = this.left.length, right = left + this.break;
          if (from >= right)
              return this.right.decomposeRight(from - right, result);
          if (from < left)
              this.left.decomposeRight(from, result);
          if (this.break && from < right)
              result.push(null);
          result.push(this.right);
      }
      balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
              return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = replace$1(this.left, left);
          this.right = replace$1(this.right, right);
          this.setHeight(left.height + right.height);
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset + left.length && measured.more)
              rebalance = left = left.updateHeight(oracle, offset, force, measured);
          else
              left.updateHeight(oracle, offset, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
              rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
              right.updateHeight(oracle, rightStart, force);
          if (rebalance)
              return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
      }
      toString() { return this.left + (this.break ? " " : "-") + this.right; }
  }
  function mergeGaps(nodes, around) {
      let before, after;
      if (nodes[around] == null &&
          (before = nodes[around - 1]) instanceof HeightMapGap &&
          (after = nodes[around + 1]) instanceof HeightMapGap)
          nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  const relevantWidgetHeight = 5;
  class NodeBuilder {
      constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
      }
      get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
          if (this.lineStart > -1) {
              let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText)
                  last.length += end - this.pos;
              else if (end > this.pos || !this.isCovered)
                  this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;
              if (to > end) {
                  this.nodes.push(null);
                  this.writtenTo++;
                  this.lineStart = -1;
              }
          }
          this.pos = to;
      }
      point(from, to, deco) {
          if (from < to || deco.heightRelevant) {
              let height = deco.widget ? deco.widget.estimatedHeight : 0;
              let breaks = deco.widget ? deco.widget.lineBreaks : 0;
              if (height < 0)
                  height = this.oracle.lineHeight;
              let len = to - from;
              if (deco.block) {
                  this.addBlock(new HeightMapBlock(len, height, deco));
              }
              else if (len || breaks || height >= relevantWidgetHeight) {
                  this.addLineDeco(height, breaks, len);
              }
          }
          else if (to > from) {
              this.span(from, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
              this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
          if (this.lineStart > -1)
              return;
          let { from, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from;
          this.lineEnd = to;
          if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                  this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
          }
          if (this.pos > from)
              this.nodes.push(new HeightMapText(this.pos - from, -1));
          this.writtenTo = this.pos;
      }
      blankContent(from, to) {
          let gap = new HeightMapGap(to - from);
          if (this.oracle.doc.lineAt(from).to == to)
              gap.flags |= 4 /* Flag.SingleLine */;
          return gap;
      }
      ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
              return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
      }
      addBlock(block) {
          this.enterLine();
          let deco = block.deco;
          if (deco && deco.startSide > 0 && !this.isCovered)
              this.ensureLine();
          this.nodes.push(block);
          this.writtenTo = this.pos = this.pos + block.length;
          if (deco && deco.endSide > 0)
              this.covering = block;
      }
      addLineDeco(height, breaks, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          line.breaks += breaks;
          this.writtenTo = this.pos = this.pos + length;
      }
      finish(from) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
              this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
              this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from;
          for (let node of this.nodes) {
              if (node instanceof HeightMapText)
                  node.updateHeight(this.oracle, pos);
              pos += node ? node.length : 1;
          }
          return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations, from, to) {
          let builder = new NodeBuilder(from, oracle);
          RangeSet.spans(decorations, from, to, builder, 0);
          return builder.finish(from);
      }
  }
  function heightRelevantDecoChanges(a, b, diff) {
      let comp = new DecorationComparator;
      RangeSet.compare(a, b, diff, comp, 0);
      return comp.changes;
  }
  class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange() { }
      comparePoint(from, to, a, b) {
          if (from < to || a && a.heightRelevant || b && b.heightRelevant)
              addRange(from, to, this.changes, 5);
      }
  }

  function visiblePixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
      let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
      for (let parent = dom.parentNode; parent && parent != doc.body;) {
          if (parent.nodeType == 1) {
              let elt = parent;
              let style = window.getComputedStyle(elt);
              if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                  style.overflow != "visible") {
                  let parentRect = elt.getBoundingClientRect();
                  left = Math.max(left, parentRect.left);
                  right = Math.min(right, parentRect.right);
                  top = Math.max(top, parentRect.top);
                  bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
              }
              parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          }
          else if (parent.nodeType == 11) { // Shadow root
              parent = parent.host;
          }
          else {
              break;
          }
      }
      return { left: left - rect.left, right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
  }
  function inWindow(elt) {
      let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
      return rect.left < win.innerWidth && rect.right > 0 &&
          rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      return { left: 0, right: rect.right - rect.left,
          top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  class LineGap {
      constructor(from, to, size, displaySize) {
          this.from = from;
          this.to = to;
          this.size = size;
          this.displaySize = displaySize;
      }
      static same(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++) {
              let gA = a[i], gB = b[i];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                  return false;
          }
          return true;
      }
      draw(viewState, wrapping) {
          return Decoration.replace({
              widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
          }).range(this.from, this.to);
      }
  }
  class LineGapWidget extends WidgetType {
      constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
      }
      eq(other) { return other.size == this.size && other.vertical == this.vertical; }
      toDOM() {
          let elt = document.createElement("div");
          if (this.vertical) {
              elt.style.height = this.size + "px";
          }
          else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
          }
          return elt;
      }
      get estimatedHeight() { return this.vertical ? this.size : -1; }
  }
  class ViewState {
      constructor(state) {
          this.state = state;
          // These are contentDOM-local coordinates
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0; // Padding above the document, scaled
          this.paddingBottom = 0; // Padding below the document, scaled
          this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
          this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
          this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
          this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
          this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
          this.scrolledToBottom = false;
          // The CSS-transformation scale of the editor (transformed size /
          // concrete size)
          this.scaleX = 1;
          this.scaleY = 1;
          // The vertical position (document-relative) to which to anchor the
          // scroll position. -1 means anchor to the end of the document.
          this.scrollAnchorPos = 0;
          // The height at the anchor position. Set by the DOM update phase.
          // -1 means no height available.
          this.scrollAnchorHeight = -1;
          // See VP.MaxDOMHeight
          this.scaler = IdScaler;
          this.scrollTarget = null;
          // Briefly set to true when printing, to disable viewport limiting
          this.printing = false;
          // Flag set when editor content was redrawn, so that the next
          // measure stage knows it must read DOM layout
          this.mustMeasureContent = true;
          this.defaultTextDirection = Direction.LTR;
          this.visibleRanges = [];
          // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.
          this.mustEnforceCursorAssoc = false;
          let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
          this.heightOracle = new HeightOracle(guessWrapping);
          this.stateDeco = state.facet(decorations$1).filter(d => typeof d != "function");
          this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          for (let i = 0; i < 2; i++) {
              this.viewport = this.getViewport(0, null);
              if (!this.updateForViewport())
                  break;
          }
          this.updateViewportLines();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
          this.computeVisibleRanges();
      }
      updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
              let pos = i ? main.head : main.anchor;
              if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                  let { from, to } = this.lineBlockAt(pos);
                  viewports.push(new Viewport(from, to));
              }
          }
          this.viewports = viewports.sort((a, b) => a.from - b.from);
          return this.updateScaler();
      }
      updateScaler() {
          let scaler = this.scaler;
          this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
              new BigScaler(this.heightOracle, this.heightMap, this.viewports);
          return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
      }
      updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
              this.viewportLines.push(scaleBlock(block, this.scaler));
          });
      }
      update(update, scrollTarget = null) {
          this.state = update.state;
          let prevDeco = this.stateDeco;
          this.stateDeco = this.state.facet(decorations$1).filter(d => typeof d != "function");
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
          clearHeightChangeFlag();
          this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight || heightChangeFlag)
              update.flags |= 2 /* UpdateFlag.Height */;
          if (scrollAnchor) {
              this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
              this.scrollAnchorHeight = scrollAnchor.top;
          }
          else {
              this.scrollAnchorPos = -1;
              this.scrollAnchorHeight = prevHeight;
          }
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
              !this.viewportIsAppropriate(viewport))
              viewport = this.getViewport(0, scrollTarget);
          let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          update.flags |= this.updateForViewport();
          if (viewportChange || !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */))
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges(update.changes);
          if (scrollTarget)
              this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
              update.state.selection.main.empty && update.state.selection.main.assoc &&
              !update.state.facet(nativeSelectionHidden))
              this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
          let dom = view.contentDOM, style = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style.whiteSpace;
          this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
          let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
          let domRect = dom.getBoundingClientRect();
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
          this.contentDOMHeight = domRect.height;
          this.mustMeasureContent = false;
          let result = 0, bias = 0;
          if (domRect.width && domRect.height) {
              let { scaleX, scaleY } = getScale(dom, domRect);
              if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                  scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                  this.scaleX = scaleX;
                  this.scaleY = scaleY;
                  result |= 16 /* UpdateFlag.Geometry */;
                  refresh = measureContent = true;
              }
          }
          // Vertical padding
          let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
          let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
          if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
              this.paddingTop = paddingTop;
              this.paddingBottom = paddingBottom;
              result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
          }
          if (this.editorWidth != view.scrollDOM.clientWidth) {
              if (oracle.lineWrapping)
                  measureContent = true;
              this.editorWidth = view.scrollDOM.clientWidth;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
          if (this.scrollTop != scrollTop) {
              this.scrollAnchorHeight = -1;
              this.scrollTop = scrollTop;
          }
          this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
          // Pixel viewport
          let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (inView != this.inView) {
              this.inView = inView;
              if (inView)
                  measureContent = true;
          }
          if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
              return 0;
          let contentWidth = domRect.width;
          if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
              this.contentDOMWidth = domRect.width;
              this.editorHeight = view.scrollDOM.clientHeight;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          if (measureContent) {
              let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
              if (oracle.mustRefreshForHeights(lineHeights))
                  refresh = true;
              if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                  let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                  refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, Math.max(5, contentWidth / charWidth), lineHeights);
                  if (refresh) {
                      view.docView.minWidth = 0;
                      result |= 16 /* UpdateFlag.Geometry */;
                  }
              }
              if (dTop > 0 && dBottom > 0)
                  bias = Math.max(dTop, dBottom);
              else if (dTop < 0 && dBottom < 0)
                  bias = Math.min(dTop, dBottom);
              clearHeightChangeFlag();
              for (let vp of this.viewports) {
                  let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                  this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
              }
              if (heightChangeFlag)
                  result |= 2 /* UpdateFlag.Height */;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
              this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                  this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange) {
              if (result & 2 /* UpdateFlag.Height */)
                  result |= this.updateScaler();
              this.viewport = this.getViewport(bias, this.scrollTarget);
              result |= this.updateForViewport();
          }
          if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false;
              // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.
              view.docView.enforceCursorAssoc();
          }
          return result;
      }
      get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
      get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
      getViewport(bias, scrollTarget) {
          // This will divide VP.Margin between the top and the
          // bottom, depending on the bias (the change in viewport position
          // since the last update). It'll hold a number between 0 and 1
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
          let map = this.heightMap, oracle = this.heightOracle;
          let { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
          // If scrollTarget is given, make sure the viewport includes that position
          if (scrollTarget) {
              let { head } = scrollTarget.range;
              if (head < viewport.from || head > viewport.to) {
                  let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                  let block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0), topPos;
                  if (scrollTarget.y == "center")
                      topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                  else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                      topPos = block.top;
                  else
                      topPos = block.bottom - viewHeight;
                  viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
              }
          }
          return viewport;
      }
      mapViewport(viewport, changes) {
          let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from, to }, bias = 0) {
          if (!this.inView)
              return true;
          let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
              (to == this.state.doc.length ||
                  bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
              (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
      }
      mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
              return gaps;
          let mapped = [];
          for (let gap of gaps)
              if (!changes.touchesRange(gap.from, gap.to))
                  mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
          return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
          let wrapping = this.heightOracle.lineWrapping;
          let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
          // The non-wrapping logic won't work at all in predominantly right-to-left text.
          if (this.defaultTextDirection != Direction.LTR && !wrapping)
              return [];
          let gaps = [];
          let addGap = (from, to, line, structure) => {
              if (to - from < halfMargin)
                  return;
              let sel = this.state.selection.main, avoid = [sel.from];
              if (!sel.empty)
                  avoid.push(sel.to);
              for (let pos of avoid) {
                  if (pos > from && pos < to) {
                      addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                      addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                      return;
                  }
              }
              let gap = find$1(current, gap => gap.from >= line.from && gap.to <= line.to &&
                  Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                  !avoid.some(pos => gap.from < pos && gap.to > pos));
              if (!gap) {
                  // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                  if (to < line.to && mayMeasure && wrapping &&
                      mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                      let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                      if (lineStart > from)
                          to = lineStart;
                  }
                  let size = this.gapSize(line, from, to, structure);
                  let displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
                  gap = new LineGap(from, to, size, displaySize);
              }
              gaps.push(gap);
          };
          let checkLine = (line) => {
              if (line.length < doubleMargin || line.type != BlockType.Text)
                  return;
              let structure = lineStructure(line.from, line.to, this.stateDeco);
              if (structure.total < doubleMargin)
                  return;
              let target = this.scrollTarget ? this.scrollTarget.range.head : null;
              let viewFrom, viewTo;
              if (wrapping) {
                  let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                  let top, bot;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                      top = targetFrac - spaceFrac;
                      bot = targetFrac + spaceFrac;
                  }
                  else {
                      top = (this.visibleTop - line.top - marginHeight) / line.height;
                      bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                  }
                  viewFrom = findPosition(structure, top);
                  viewTo = findPosition(structure, bot);
              }
              else {
                  let totalWidth = structure.total * this.heightOracle.charWidth;
                  let marginWidth = margin * this.heightOracle.charWidth;
                  let horizOffset = 0;
                  if (totalWidth > 2000000 /* VP.MaxHorizGap */)
                      for (let old of current) {
                          if (old.from >= line.from && old.from < line.to && old.size != old.displaySize &&
                              old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                              horizOffset = old.size - old.displaySize;
                      }
                  let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
                  let left, right;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
                      left = targetFrac - spaceFrac;
                      right = targetFrac + spaceFrac;
                  }
                  else {
                      left = (pxLeft - marginWidth) / totalWidth;
                      right = (pxRight + marginWidth) / totalWidth;
                  }
                  viewFrom = findPosition(structure, left);
                  viewTo = findPosition(structure, right);
              }
              if (viewFrom > line.from)
                  addGap(line.from, viewFrom, line, structure);
              if (viewTo < line.to)
                  addGap(viewTo, line.to, line, structure);
          };
          for (let line of this.viewportLines) {
              if (Array.isArray(line.type))
                  line.type.forEach(checkLine);
              else
                  checkLine(line);
          }
          return gaps;
      }
      gapSize(line, from, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from);
          if (this.heightOracle.lineWrapping) {
              return line.height * fraction;
          }
          else {
              return structure.total * this.heightOracle.charWidth * fraction;
          }
      }
      updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
          }
      }
      computeVisibleRanges(changes) {
          let deco = this.stateDeco;
          if (this.lineGaps.length)
              deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
              span(from, to) { ranges.push({ from, to }); },
              point() { }
          }, 20);
          let changed = 0;
          if (ranges.length != this.visibleRanges.length) {
              changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
          }
          else {
              for (let i = 0; i < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); i++) {
                  let old = this.visibleRanges[i], nw = ranges[i];
                  if (old.from != nw.from || old.to != nw.to) {
                      changed |= 4 /* UpdateFlag.Viewport */;
                      if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
                          changed |= 8 /* UpdateFlag.ViewportMoved */;
                  }
              }
          }
          this.visibleRanges = ranges;
          return changed;
      }
      lineBlockAt(pos) {
          return (pos >= this.viewport.from && pos <= this.viewport.to &&
              this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
              scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
          return (height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom &&
              this.viewportLines.find(l => l.top <= height && l.bottom >= height)) ||
              scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
      scrollAnchorAt(scrollTop) {
          let block = this.lineBlockAtHeight(scrollTop + 8);
          return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
      }
      elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
      get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
      }
  }
  class Viewport {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  function lineStructure(from, to, stateDeco) {
      let ranges = [], pos = from, total = 0;
      RangeSet.spans(stateDeco, from, to, {
          span() { },
          point(from, to) {
              if (from > pos) {
                  ranges.push({ from: pos, to: from });
                  total += from - pos;
              }
              pos = to;
          }
      }, 20); // We're only interested in collapsed ranges of a significant size
      if (pos < to) {
          ranges.push({ from: pos, to });
          total += to - pos;
      }
      return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
      if (ratio <= 0)
          return ranges[0].from;
      if (ratio >= 1)
          return ranges[ranges.length - 1].to;
      let dist = Math.floor(total * ratio);
      for (let i = 0;; i++) {
          let { from, to } = ranges[i], size = to - from;
          if (dist <= size)
              return from + dist;
          dist -= size;
      }
  }
  function findFraction(structure, pos) {
      let counted = 0;
      for (let { from, to } of structure.ranges) {
          if (pos <= to) {
              counted += pos - from;
              break;
          }
          counted += to - from;
      }
      return counted / structure.total;
  }
  function find$1(array, f) {
      for (let val of array)
          if (f(val))
              return val;
      return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  const IdScaler = {
      toDOM(n) { return n; },
      fromDOM(n) { return n; },
      scale: 1,
      eq(other) { return other == this; }
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  class BigScaler {
      constructor(oracle, heightMap, viewports) {
          let vpHeight = 0, base = 0, domBase = 0;
          this.viewports = viewports.map(({ from, to }) => {
              let top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
              let bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
              vpHeight += bottom - top;
              return { from, to, top, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
          }
      }
      toDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.top)
                  return domBase + (n - base) * this.scale;
              if (n <= vp.bottom)
                  return vp.domTop + (n - vp.top);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      fromDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.domTop)
                  return base + (n - domBase) / this.scale;
              if (n <= vp.domBottom)
                  return vp.top + (n - vp.domTop);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      eq(other) {
          if (!(other instanceof BigScaler))
              return false;
          return this.scale == other.scale && this.viewports.length == other.viewports.length &&
              this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
      }
  }
  function scaleBlock(block, scaler) {
      if (scaler.scale == 1)
          return block;
      let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
      return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
  }

  const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
  const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
  const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
  const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
      return new StyleModule(spec, {
          finish(sel) {
              return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                  if (m == "&")
                      return main;
                  if (!scopes || !scopes[m])
                      throw new RangeError(`Unsupported selector: ${m}`);
                  return scopes[m];
              }) : main + " " + sel;
          }
      });
  }
  const baseTheme$1$2 = /*@__PURE__*/buildTheme("." + baseThemeID, {
      "&": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
              // Provide a simple default outline to make sure a focused
              // editor is visually distinct. Can't leave the default behavior
              // because that will apply to the content element, which is
              // inside the scrollable container and doesn't include the
              // gutters. We also can't use an 'auto' outline, since those
              // are, for some reason, drawn behind the element content, which
              // will cause things like the active line background to cover
              // the outline (#297).
              outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
      },
      ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0,
          overflowAnchor: "none",
      },
      ".cm-content": {
          margin: 0,
          flexGrow: 2,
          flexShrink: 0,
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
          boxSizing: "border-box",
          minHeight: "100%",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
              WebkitUserModify: "read-write-plaintext-only",
          }
      },
      ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap", // For IE
          whiteSpace: "break-spaces",
          wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
          overflowWrap: "anywhere",
          flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
          display: "block",
          padding: "0 2px 0 6px"
      },
      ".cm-layer": {
          position: "absolute",
          left: 0,
          top: 0,
          contain: "size style",
          "& > *": {
              position: "absolute"
          }
      },
      "&light .cm-selectionBackground": {
          background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
          background: "#222"
      },
      "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#d7d4f0"
      },
      "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#233"
      },
      ".cm-cursorLayer": {
          pointerEvents: "none"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
      },
      ".cm-cursor": {
          display: "none"
      },
      "&dark .cm-cursor": {
          borderLeftColor: "#ddd"
      },
      ".cm-dropCursor": {
          position: "absolute"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
          display: "block"
      },
      ".cm-iso": {
          unicodeBidi: "isolate"
      },
      ".cm-announced": {
          position: "fixed",
          top: "-10000px"
      },
      "@media print": {
          ".cm-announced": { display: "none" }
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
          flexShrink: 0,
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          zIndex: 200,
      },
      ".cm-gutters-before": { insetInlineStart: 0 },
      ".cm-gutters-after": { insetInlineEnd: 0 },
      "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#6c6c6c",
          border: "0px solid #ddd",
          "&.cm-gutters-before": { borderRightWidth: "1px" },
          "&.cm-gutters-after": { borderLeftWidth: "1px" },
      },
      "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
      },
      ".cm-gutter": {
          display: "flex !important", // Necessary -- prevents margin collapsing
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
      },
      ".cm-gutterElement": {
          boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
      },
      ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0,
          zIndex: 300
      },
      "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
      },
      "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-dialog": {
          padding: "2px 19px 4px 6px",
          position: "relative",
          "& label": { fontSize: "80%" },
      },
      ".cm-dialog-close": {
          position: "absolute",
          top: "3px",
          right: "4px",
          backgroundColor: "inherit",
          border: "none",
          font: "inherit",
          fontSize: "14px",
          padding: "0"
      },
      ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
          verticalAlign: "text-top",
          height: "1em",
          width: 0,
          display: "inline"
      },
      ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top",
          userSelect: "none"
      },
      ".cm-highlightSpace": {
          backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
          backgroundPosition: "center",
      },
      ".cm-highlightTab": {
          backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
          backgroundSize: "auto 100%",
          backgroundPosition: "right 90%",
          backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
          backgroundColor: "#ff332255"
      },
      ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
      },
      "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
      },
      "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#111, #333)"
          }
      },
      ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
      },
      "&light .cm-textfield": {
          backgroundColor: "white"
      },
      "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
      }
  }, lightDarkIDs);

  const observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  const useCharData = browser.ie && browser.ie_version <= 11;
  class DOMObserver {
      constructor(view) {
          this.view = view;
          this.active = false;
          this.editContext = null;
          // The known selection. Kept in our own object, as opposed to just
          // directly accessing the selection because:
          //  - Safari doesn't report the right selection in shadow DOM
          //  - Reading from the selection forces a DOM layout
          //  - This way, we can ignore selectionchange events if we have
          //    already seen the 'new' selection
          this.selectionRange = new DOMSelectionState;
          // Set when a selection change is detected, cleared on flush
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
          this.lastChange = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.resizeScroll = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          this.printQuery = null;
          // Timeout for scheduling check of the parents that need scroll handlers
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(mutations => {
              for (let mut of mutations)
                  this.queue.push(mut);
              // IE11 will sometimes (on typing over a selection or
              // backspacing out a single character text node) call the
              // observer callback before actually updating the DOM.
              //
              // Unrelatedly, iOS Safari will, when ending a composition,
              // sometimes first clear it, deliver the mutations, and then
              // reinsert the finished text. CodeMirror's handling of the
              // deletion will prevent the reinsertion from happening,
              // breaking composition.
              if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                  mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                      m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                  this.flushSoon();
              else
                  this.flush();
          });
          if (window.EditContext && browser.android && view.constructor.EDIT_CONTEXT !== false &&
              // Chrome <126 doesn't support inverted selections in edit context (#1392)
              !(browser.chrome && browser.chrome_version < 126)) {
              this.editContext = new EditContextManager(view);
              if (view.state.facet(editable))
                  view.contentDOM.editContext = this.editContext.editContext;
          }
          if (useCharData)
              this.onCharData = (event) => {
                  this.queue.push({ target: event.target,
                      type: "characterData",
                      oldValue: event.prevValue });
                  this.flushSoon();
              };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.onResize = this.onResize.bind(this);
          this.onPrint = this.onPrint.bind(this);
          this.onScroll = this.onScroll.bind(this);
          if (window.matchMedia)
              this.printQuery = window.matchMedia("print");
          if (typeof ResizeObserver == "function") {
              this.resizeScroll = new ResizeObserver(() => {
                  var _a;
                  if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                      this.onResize();
              });
              this.resizeScroll.observe(view.scrollDOM);
          }
          this.addWindowListeners(this.win = view.win);
          this.start();
          if (typeof IntersectionObserver == "function") {
              this.intersection = new IntersectionObserver(entries => {
                  if (this.parentCheck < 0)
                      this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                  if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                      this.intersecting = !this.intersecting;
                      if (this.intersecting != this.view.inView)
                          this.onScrollChanged(document.createEvent("Event"));
                  }
              }, { threshold: [0, .001] });
              this.intersection.observe(this.dom);
              this.gapIntersection = new IntersectionObserver(entries => {
                  if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                      this.onScrollChanged(document.createEvent("Event"));
              }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
      }
      onScrollChanged(e) {
          this.view.inputState.runHandlers("scroll", e);
          if (this.intersecting)
              this.view.measure();
      }
      onScroll(e) {
          if (this.intersecting)
              this.flush(false);
          if (this.editContext)
              this.view.requestMeasure(this.editContext.measureReq);
          this.onScrollChanged(e);
      }
      onResize() {
          if (this.resizeTimeout < 0)
              this.resizeTimeout = setTimeout(() => {
                  this.resizeTimeout = -1;
                  this.view.requestMeasure();
              }, 50);
      }
      onPrint(event) {
          if ((event.type == "change" || !event.type) && !event.matches)
              return;
          this.view.viewState.printing = true;
          this.view.measure();
          setTimeout(() => {
              this.view.viewState.printing = false;
              this.view.requestMeasure();
          }, 500);
      }
      updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
              this.gapIntersection.disconnect();
              for (let gap of gaps)
                  this.gapIntersection.observe(gap);
              this.gaps = gaps;
          }
      }
      onSelectionChange(event) {
          let wasChanged = this.selectionChanged;
          if (!this.readSelectionRange() || this.delayedAndroidKey)
              return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
              return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event)) {
              if (!wasChanged)
                  this.selectionChanged = false;
              return;
          }
          // Deletions on IE11 fire their events in the wrong order, giving
          // us a selection change event before the DOM changes are
          // reported.
          // Chrome Android has a similar issue when backspacing out a
          // selection (#645).
          if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
              // (Selection.isCollapsed isn't reliable on IE)
              sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
              this.flushSoon();
          else
              this.flush(false);
      }
      readSelectionRange() {
          let { view } = this;
          // The Selection object is broken in shadow roots in Safari. See
          // https://github.com/codemirror/dev/issues/414
          let selection = getSelection(view.root);
          if (!selection)
              return false;
          let range = browser.safari && view.root.nodeType == 11 &&
              view.root.activeElement == this.dom &&
              safariSelectionRangeHack(this.view, selection) || selection;
          if (!range || this.selectionRange.eq(range))
              return false;
          let local = hasSelection(this.dom, range);
          // Detect the situation where the browser has, on focus, moved the
          // selection to the start of the content element. Reset it to the
          // position from the editor state.
          if (local && !this.selectionChanged &&
              view.inputState.lastFocusTime > Date.now() - 200 &&
              view.inputState.lastTouchTime < Date.now() - 300 &&
              atElementStart(this.dom, range)) {
              this.view.inputState.lastFocusTime = 0;
              view.docView.updateSelection();
              return false;
          }
          this.selectionRange.setRange(range);
          if (local)
              this.selectionChanged = true;
          return true;
      }
      setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
      }
      clearSelectionRange() {
          this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                  if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                      i++;
                  else if (!changed)
                      changed = this.scrollTargets.slice(0, i);
                  if (changed)
                      changed.push(dom);
                  dom = dom.assignedSlot || dom.parentNode;
              }
              else if (dom.nodeType == 11) { // Shadow root
                  dom = dom.host;
              }
              else {
                  break;
              }
          }
          if (i < this.scrollTargets.length && !changed)
              changed = this.scrollTargets.slice(0, i);
          if (changed) {
              for (let dom of this.scrollTargets)
                  dom.removeEventListener("scroll", this.onScroll);
              for (let dom of this.scrollTargets = changed)
                  dom.addEventListener("scroll", this.onScroll);
          }
      }
      ignore(f) {
          if (!this.active)
              return f();
          try {
              this.stop();
              return f();
          }
          finally {
              this.start();
              this.clear();
          }
      }
      start() {
          if (this.active)
              return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
              this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
      }
      stop() {
          if (!this.active)
              return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
              this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
          this.processRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key, keyCode) {
          var _a;
          if (!this.delayedAndroidKey) {
              let flush = () => {
                  let key = this.delayedAndroidKey;
                  if (key) {
                      this.clearDelayedAndroidKey();
                      this.view.inputState.lastKeyCode = key.keyCode;
                      this.view.inputState.lastKeyTime = Date.now();
                      let flushed = this.flush();
                      if (!flushed && key.force)
                          dispatchKey(this.dom, key.key, key.keyCode);
                  }
              };
              this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
          }
          // Since backspace beforeinput is sometimes signalled spuriously,
          // Enter always takes precedence.
          if (!this.delayedAndroidKey || key == "Enter")
              this.delayedAndroidKey = {
                  key, keyCode,
                  // Only run the key handler when no changes are detected if
                  // this isn't coming right after another change, in which case
                  // it is probably part of a weird chain of updates, and should
                  // be ignored if it returns the DOM to its previous state.
                  force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
              };
      }
      clearDelayedAndroidKey() {
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
      }
      flushSoon() {
          if (this.delayedFlush < 0)
              this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
      }
      forceFlush() {
          if (this.delayedFlush >= 0) {
              this.view.win.cancelAnimationFrame(this.delayedFlush);
              this.delayedFlush = -1;
          }
          this.flush();
      }
      pendingRecords() {
          for (let mut of this.observer.takeRecords())
              this.queue.push(mut);
          return this.queue;
      }
      processRecords() {
          let records = this.pendingRecords();
          if (records.length)
              this.queue = [];
          let from = -1, to = -1, typeOver = false;
          for (let record of records) {
              let range = this.readMutation(record);
              if (!range)
                  continue;
              if (range.typeOver)
                  typeOver = true;
              if (from == -1) {
                  ({ from, to } = range);
              }
              else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
              }
          }
          return { from, to, typeOver };
      }
      readChange() {
          let { from, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from < 0 && !newSel)
              return null;
          if (from > -1)
              this.lastChange = Date.now();
          this.view.inputState.lastFocusTime = 0;
          this.selectionChanged = false;
          let change = new DOMChange(this.view, from, to, typeOver);
          this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
          return change;
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
          // Completely hold off flushing when pending keys are set—the code
          // managing those will make sure processRecords is called and the
          // view is resynchronized after
          if (this.delayedFlush >= 0 || this.delayedAndroidKey)
              return false;
          if (readSelection)
              this.readSelectionRange();
          let domChange = this.readChange();
          if (!domChange) {
              this.view.requestMeasure();
              return false;
          }
          let startState = this.view.state;
          let handled = applyDOMChange(this.view, domChange);
          // The view wasn't updated but DOM/selection changes were seen. Reset the view.
          if (this.view.state == startState &&
              (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
              this.view.update([]);
          return handled;
      }
      readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
              return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
              cView.flags |= 4 /* ViewFlag.AttrsDirty */;
          if (rec.type == "childList") {
              let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                  to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
          }
          else if (rec.type == "characterData") {
              return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          }
          else {
              return null;
          }
      }
      setWindow(win) {
          if (win != this.win) {
              this.removeWindowListeners(this.win);
              this.win = win;
              this.addWindowListeners(this.win);
          }
      }
      addWindowListeners(win) {
          win.addEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.addEventListener)
                  this.printQuery.addEventListener("change", this.onPrint);
              else
                  this.printQuery.addListener(this.onPrint);
          }
          else
              win.addEventListener("beforeprint", this.onPrint);
          win.addEventListener("scroll", this.onScroll);
          win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
          win.removeEventListener("scroll", this.onScroll);
          win.removeEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.removeEventListener)
                  this.printQuery.removeEventListener("change", this.onPrint);
              else
                  this.printQuery.removeListener(this.onPrint);
          }
          else
              win.removeEventListener("beforeprint", this.onPrint);
          win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      update(update) {
          if (this.editContext) {
              this.editContext.update(update);
              if (update.startState.facet(editable) != update.state.facet(editable))
                  update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
          }
      }
      destroy() {
          var _a, _b, _c;
          this.stop();
          (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
          (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
          for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
          this.removeWindowListeners(this.win);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
          this.win.cancelAnimationFrame(this.delayedFlush);
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          if (this.editContext) {
              this.view.contentDOM.editContext = null;
              this.editContext.destroy();
          }
      }
  }
  function findChild(cView, dom, dir) {
      while (dom) {
          let curView = ContentView.get(dom);
          if (curView && curView.parent == cView)
              return curView;
          let parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
      }
      return null;
  }
  function buildSelectionRangeFromRange(view, range) {
      let anchorNode = range.startContainer, anchorOffset = range.startOffset;
      let focusNode = range.endContainer, focusOffset = range.endOffset;
      let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
      // Since such a range doesn't distinguish between anchor and head,
      // use a heuristic that flips it around if its end matches the
      // current anchor.
      if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view, selection) {
      if (selection.getComposedRanges) {
          let range = selection.getComposedRanges(view.root)[0];
          if (range)
              return buildSelectionRangeFromRange(view, range);
      }
      let found = null;
      // Because Safari (at least in 2018-2021) doesn't provide regular
      // access to the selection inside a shadowroot, we have to perform a
      // ridiculous hack to get at it—using `execCommand` to trigger a
      // `beforeInput` event so that we can read the target range from the
      // event.
      function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
      }
      view.contentDOM.addEventListener("beforeinput", read, true);
      view.dom.ownerDocument.execCommand("indent");
      view.contentDOM.removeEventListener("beforeinput", read, true);
      return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  class EditContextManager {
      constructor(view) {
          // The document window for which the text in the context is
          // maintained. For large documents, this may be smaller than the
          // editor document. This window always includes the selection head.
          this.from = 0;
          this.to = 0;
          // When applying a transaction, this is used to compare the change
          // made to the context content to the change in the transaction in
          // order to make the minimal changes to the context (since touching
          // that sometimes breaks series of multiple edits made for a single
          // user action on some Android keyboards)
          this.pendingContextChange = null;
          this.handlers = Object.create(null);
          // Kludge to work around the fact that EditContext does not respond
          // well to having its content updated during a composition (see #1472)
          this.composing = null;
          this.resetRange(view.state);
          let context = this.editContext = new window.EditContext({
              text: view.state.doc.sliceString(this.from, this.to),
              selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
              selectionEnd: this.toContextPos(view.state.selection.main.head)
          });
          this.handlers.textupdate = e => {
              let main = view.state.selection.main, { anchor, head } = main;
              let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
              if (view.inputState.composing >= 0 && !this.composing)
                  this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
              let change = { from, to, insert: Text.of(e.text.split("\n")) };
              // If the window doesn't include the anchor, assume changes
              // adjacent to a side go up to the anchor.
              if (change.from == this.from && anchor < this.from)
                  change.from = anchor;
              else if (change.to == this.to && anchor > this.to)
                  change.to = anchor;
              // Edit contexts sometimes fire empty changes
              if (change.from == change.to && !change.insert.length) {
                  let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
                  if (!newSel.main.eq(main))
                      view.dispatch({ selection: newSel, userEvent: "select" });
                  return;
              }
              if ((browser.mac || browser.android) && change.from == head - 1 &&
                  /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
                  change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
              this.pendingContextChange = change;
              if (!view.state.readOnly) {
                  let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
                  applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
              }
              // If the transaction didn't flush our change, revert it so
              // that the context is in sync with the editor state again.
              if (this.pendingContextChange) {
                  this.revertPending(view.state);
                  this.setSelection(view.state);
              }
          };
          this.handlers.characterboundsupdate = e => {
              let rects = [], prev = null;
              for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
                  let rect = view.coordsForChar(i);
                  prev = (rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top))
                      || prev || new DOMRect;
                  rects.push(prev);
              }
              context.updateCharacterBounds(e.rangeStart, rects);
          };
          this.handlers.textformatupdate = e => {
              let deco = [];
              for (let format of e.getTextFormats()) {
                  let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
                  if (lineStyle != "None" && thickness != "None") {
                      let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
                      if (from < to) {
                          let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                          deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
                      }
                  }
              }
              view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
          };
          this.handlers.compositionstart = () => {
              if (view.inputState.composing < 0) {
                  view.inputState.composing = 0;
                  view.inputState.compositionFirstChange = true;
              }
          };
          this.handlers.compositionend = () => {
              view.inputState.composing = -1;
              view.inputState.compositionFirstChange = null;
              if (this.composing) {
                  let { drifted } = this.composing;
                  this.composing = null;
                  if (drifted)
                      this.reset(view.state);
              }
          };
          for (let event in this.handlers)
              context.addEventListener(event, this.handlers[event]);
          this.measureReq = { read: view => {
                  this.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
                  let sel = getSelection(view.root);
                  if (sel && sel.rangeCount)
                      this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
              } };
      }
      applyEdits(update) {
          let off = 0, abort = false, pending = this.pendingContextChange;
          update.changes.iterChanges((fromA, toA, _fromB, _toB, insert) => {
              if (abort)
                  return;
              let dLen = insert.length - (toA - fromA);
              if (pending && toA >= pending.to) {
                  if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
                      pending = this.pendingContextChange = null; // Match
                      off += dLen;
                      this.to += dLen;
                      return;
                  }
                  else { // Mismatch, revert
                      pending = null;
                      this.revertPending(update.state);
                  }
              }
              fromA += off;
              toA += off;
              if (toA <= this.from) { // Before the window
                  this.from += dLen;
                  this.to += dLen;
              }
              else if (fromA < this.to) { // Overlaps with window
                  if (fromA < this.from || toA > this.to || (this.to - this.from) + insert.length > 30000 /* CxVp.MaxSize */) {
                      abort = true;
                      return;
                  }
                  this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert.toString());
                  this.to += dLen;
              }
              off += dLen;
          });
          if (pending && !abort)
              this.revertPending(update.state);
          return !abort;
      }
      update(update) {
          let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
          if (this.composing &&
              (this.composing.drifted ||
                  (!update.changes.touchesRange(startSel.from, startSel.to) &&
                      update.transactions.some(tr => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to))))) {
              this.composing.drifted = true;
              this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
          }
          else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
              this.pendingContextChange = null;
              this.reset(update.state);
          }
          else if (update.docChanged || update.selectionSet || reverted) {
              this.setSelection(update.state);
          }
          if (update.geometryChanged || update.docChanged || update.selectionSet)
              update.view.requestMeasure(this.measureReq);
      }
      resetRange(state) {
          let { head } = state.selection.main;
          this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
          this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
      }
      reset(state) {
          this.resetRange(state);
          this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
          this.setSelection(state);
      }
      revertPending(state) {
          let pending = this.pendingContextChange;
          this.pendingContextChange = null;
          this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
      setSelection(state) {
          let { main } = state.selection;
          let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
          let end = this.toContextPos(main.head);
          if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
              this.editContext.updateSelection(start, end);
      }
      rangeIsValid(state) {
          let { head } = state.selection.main;
          return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ ||
              this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ ||
              this.to - this.from > 10000 /* CxVp.Margin */ * 3);
      }
      toEditorPos(contextPos, clipLen = this.to - this.from) {
          contextPos = Math.min(contextPos, clipLen);
          let c = this.composing;
          return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
      }
      toContextPos(editorPos) {
          let c = this.composing;
          return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
      }
      destroy() {
          for (let event in this.handlers)
              this.editContext.removeEventListener(event, this.handlers[event]);
      }
  }

  // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  class EditorView {
      /**
      The current editor state.
      */
      get state() { return this.viewState.state; }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() { return this.viewState.viewport; }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() { return this.viewState.visibleRanges; }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() { return this.viewState.inView; }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() { return !!this.inputState && this.inputState.composing > 0; }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() { return !!this.inputState && this.inputState.composing >= 0; }
      /**
      The document or shadow root that the view lives in.
      */
      get root() { return this._root; }
      /**
      @internal
      */
      get win() { return this.dom.ownerDocument.defaultView || window; }
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config = {}) {
          var _a;
          this.plugins = [];
          this.pluginMap = new Map;
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          /**
          @internal
          */
          this.updateState = 2 /* UpdateState.Updating */;
          /**
          @internal
          */
          this.measureScheduled = -1;
          /**
          @internal
          */
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.className = "cm-announced";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          if (config.parent)
              config.parent.appendChild(this.dom);
          let { dispatch } = config;
          this.dispatchTransactions = config.dispatchTransactions ||
              (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
              ((trs) => this.update(trs));
          this.dispatch = this.dispatch.bind(this);
          this._root = (config.root || getRoot(config.parent) || document);
          this.viewState = new ViewState(config.state || EditorState.create(config));
          if (config.scrollTo && config.scrollTo.is(scrollIntoView$1))
              this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
          this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
          for (let plugin of this.plugins)
              plugin.update(this);
          this.observer = new DOMObserver(this);
          this.inputState = new InputState(this);
          this.inputState.ensureHandlers(this.plugins);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0 /* UpdateState.Idle */;
          this.requestMeasure();
          if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready)
              document.fonts.ready.then(() => this.requestMeasure());
      }
      dispatch(...input) {
          let trs = input.length == 1 && input[0] instanceof Transaction ? input
              : input.length == 1 && Array.isArray(input[0]) ? input[0]
                  : [this.state.update(...input)];
          this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, attrsChanged = false, update;
          let state = this.state;
          for (let tr of transactions) {
              if (tr.startState != state)
                  throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
              state = tr.state;
          }
          if (this.destroyed) {
              this.viewState.state = state;
              return;
          }
          let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
          if (transactions.some(tr => tr.annotation(isFocusChange))) {
              this.inputState.notifiedFocused = focus;
              // If a focus-change transaction is being dispatched, set this update flag.
              focusFlag = 1 /* UpdateFlag.Focus */;
          }
          else if (focus != this.inputState.notifiedFocused) {
              this.inputState.notifiedFocused = focus;
              // Schedule a separate focus transaction if necessary, otherwise
              // add a flag to this update
              dispatchFocus = focusChangeTransaction(state, focus);
              if (!dispatchFocus)
                  focusFlag = 1 /* UpdateFlag.Focus */;
          }
          // If there was a pending DOM change, eagerly read it and try to
          // apply it after the given transactions.
          let pendingKey = this.observer.delayedAndroidKey, domChange = null;
          if (pendingKey) {
              this.observer.clearDelayedAndroidKey();
              domChange = this.observer.readChange();
              // Only try to apply DOM changes if the transactions didn't
              // change the doc or selection.
              if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                  domChange = null;
          }
          else {
              this.observer.clear();
          }
          // When the phrases change, redraw the editor
          if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
              return this.setState(state);
          update = ViewUpdate.create(this, state, transactions);
          update.flags |= focusFlag;
          let scrollTarget = this.viewState.scrollTarget;
          try {
              this.updateState = 2 /* UpdateState.Updating */;
              for (let tr of transactions) {
                  if (scrollTarget)
                      scrollTarget = scrollTarget.map(tr.changes);
                  if (tr.scrollIntoView) {
                      let { main } = tr.state.selection;
                      scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                  }
                  for (let e of tr.effects)
                      if (e.is(scrollIntoView$1))
                          scrollTarget = e.value.clip(this.state);
              }
              this.viewState.update(update, scrollTarget);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
              if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
              }
              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules)
                  this.mountStyles();
              attrsChanged = this.updateAttrs();
              this.showAnnouncements(transactions);
              this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (update.startState.facet(theme) != update.state.facet(theme))
              this.viewState.mustMeasureContent = true;
          if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
              this.requestMeasure();
          if (redrawn)
              this.docViewUpdate();
          if (!update.empty)
              for (let listener of this.state.facet(updateListener)) {
                  try {
                      listener(update);
                  }
                  catch (e) {
                      logException(this.state, e, "update listener");
                  }
              }
          if (dispatchFocus || domChange)
              Promise.resolve().then(() => {
                  if (dispatchFocus && this.state == dispatchFocus.startState)
                      this.dispatch(dispatchFocus);
                  if (domChange) {
                      if (!applyDOMChange(this, domChange) && pendingKey.force)
                          dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                  }
              });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
              this.viewState.state = newState;
              return;
          }
          this.updateState = 2 /* UpdateState.Updating */;
          let hadFocus = this.hasFocus;
          try {
              for (let plugin of this.plugins)
                  plugin.destroy(this);
              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
              this.pluginMap.clear();
              for (let plugin of this.plugins)
                  plugin.update(this);
              this.docView.destroy();
              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this.plugins);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (hadFocus)
              this.focus();
          this.requestMeasure();
      }
      updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
              let newPlugins = [];
              for (let spec of specs) {
                  let found = prevSpecs.indexOf(spec);
                  if (found < 0) {
                      newPlugins.push(new PluginInstance(spec));
                  }
                  else {
                      let plugin = this.plugins[found];
                      plugin.mustUpdate = update;
                      newPlugins.push(plugin);
                  }
              }
              for (let plugin of this.plugins)
                  if (plugin.mustUpdate != update)
                      plugin.destroy(this);
              this.plugins = newPlugins;
              this.pluginMap.clear();
          }
          else {
              for (let p of this.plugins)
                  p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
              this.plugins[i].update(this);
          if (prevSpecs != specs)
              this.inputState.ensureHandlers(this.plugins);
      }
      docViewUpdate() {
          for (let plugin of this.plugins) {
              let val = plugin.value;
              if (val && val.docViewUpdate) {
                  try {
                      val.docViewUpdate(this);
                  }
                  catch (e) {
                      logException(this.state, e, "doc view update listener");
                  }
              }
          }
      }
      /**
      @internal
      */
      measure(flush = true) {
          if (this.destroyed)
              return;
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          if (this.observer.delayedAndroidKey) {
              this.measureScheduled = -1;
              this.requestMeasure();
              return;
          }
          this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
          if (flush)
              this.observer.forceFlush();
          let updated = null;
          let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
          let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
          if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
              scrollAnchorHeight = -1;
          this.viewState.scrollAnchorHeight = -1;
          try {
              for (let i = 0;; i++) {
                  if (scrollAnchorHeight < 0) {
                      if (isScrolledToBottom(sDOM)) {
                          scrollAnchorPos = -1;
                          scrollAnchorHeight = this.viewState.heightMap.height;
                      }
                      else {
                          let block = this.viewState.scrollAnchorAt(scrollTop);
                          scrollAnchorPos = block.from;
                          scrollAnchorHeight = block.top;
                      }
                  }
                  this.updateState = 1 /* UpdateState.Measuring */;
                  let changed = this.viewState.measure(this);
                  if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                      break;
                  if (i > 5) {
                      console.warn(this.measureRequests.length
                          ? "Measure loop restarted more than 5 times"
                          : "Viewport failed to stabilize");
                      break;
                  }
                  let measuring = [];
                  // Only run measure requests in this cycle when the viewport didn't change
                  if (!(changed & 4 /* UpdateFlag.Viewport */))
                      [this.measureRequests, measuring] = [measuring, this.measureRequests];
                  let measured = measuring.map(m => {
                      try {
                          return m.read(this);
                      }
                      catch (e) {
                          logException(this.state, e);
                          return BadMeasure;
                      }
                  });
                  let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                  update.flags |= changed;
                  if (!updated)
                      updated = update;
                  else
                      updated.flags |= changed;
                  this.updateState = 2 /* UpdateState.Updating */;
                  if (!update.empty) {
                      this.updatePlugins(update);
                      this.inputState.update(update);
                      this.updateAttrs();
                      redrawn = this.docView.update(update);
                      if (redrawn)
                          this.docViewUpdate();
                  }
                  for (let i = 0; i < measuring.length; i++)
                      if (measured[i] != BadMeasure) {
                          try {
                              let m = measuring[i];
                              if (m.write)
                                  m.write(measured[i], this);
                          }
                          catch (e) {
                              logException(this.state, e);
                          }
                      }
                  if (redrawn)
                      this.docView.updateSelection(true);
                  if (!update.viewportChanged && this.measureRequests.length == 0) {
                      if (this.viewState.editorHeight) {
                          if (this.viewState.scrollTarget) {
                              this.docView.scrollIntoView(this.viewState.scrollTarget);
                              this.viewState.scrollTarget = null;
                              scrollAnchorHeight = -1;
                              continue;
                          }
                          else {
                              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                  this.viewState.lineBlockAt(scrollAnchorPos).top;
                              let diff = newAnchorHeight - scrollAnchorHeight;
                              if (diff > 1 || diff < -1) {
                                  scrollTop = scrollTop + diff;
                                  sDOM.scrollTop = scrollTop / this.scaleY;
                                  scrollAnchorHeight = -1;
                                  continue;
                              }
                          }
                      }
                      break;
                  }
              }
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
              this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
              for (let listener of this.state.facet(updateListener))
                  listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
          return baseThemeID + " " +
              (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
              this.state.facet(theme);
      }
      updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
              class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              writingsuggestions: "false",
              translate: "no",
              contenteditable: !this.state.facet(editable) ? "false" : "true",
              class: "cm-content",
              style: `${browser.tabSize}: ${this.state.tabSize}`,
              role: "textbox",
              "aria-multiline": "true"
          };
          if (this.state.readOnly)
              contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          let changed = this.observer.ignore(() => {
              let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
              let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
              return changedContent || changedEditor;
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
          return changed;
      }
      showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
              for (let effect of tr.effects)
                  if (effect.is(EditorView.announce)) {
                      if (first)
                          this.announceDOM.textContent = "";
                      first = false;
                      let div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                  }
      }
      mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          let nonce = this.state.facet(EditorView.cspNonce);
          StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$2).reverse(), nonce ? { nonce } : undefined);
      }
      readMeasured() {
          if (this.updateState == 2 /* UpdateState.Updating */)
              throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
              this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
          if (this.measureScheduled < 0)
              this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
          if (request) {
              if (this.measureRequests.indexOf(request) > -1)
                  return;
              if (request.key != null)
                  for (let i = 0; i < this.measureRequests.length; i++) {
                      if (this.measureRequests[i].key === request.key) {
                          this.measureRequests[i] = request;
                          return;
                      }
                  }
              this.measureRequests.push(request);
          }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
          let known = this.pluginMap.get(plugin);
          if (known === undefined || known && known.plugin != plugin)
              this.pluginMap.set(plugin, known = this.plugins.find(p => p.plugin == plugin) || null);
          return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
      get scaleX() { return this.viewState.scaleX; }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
      get scaleY() { return this.viewState.scaleY; }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
          return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
          return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start, forward, by) {
          return skipAtoms(this, start, moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start, forward) {
          return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
      visualLineSide(line, end) {
          let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
          let span = order[end ? order.length - 1 : 0];
          return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start, forward, includeWrap = true) {
          return moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start, forward, distance) {
          return skipAtoms(this, start, moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos) {
          return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset = 0) {
          return this.docView.posFromDOM(node, offset);
      }
      posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
              return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
      coordsForChar(pos) {
          this.readMeasured();
          return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() { return this.viewState.defaultTextDirection; }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos) {
          let perLine = this.state.facet(perLineTextDirection);
          if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
              return this.textDirection;
          this.readMeasured();
          return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line) {
          if (line.length > MaxBidiLine)
              return trivialOrder(line.length);
          let dir = this.textDirectionAt(line.from), isolates;
          for (let entry of this.bidiCache) {
              if (entry.from == line.from && entry.dir == dir &&
                  (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                  return entry.order;
          }
          if (!isolates)
              isolates = getIsolatedRanges(this, line);
          let order = computeOrder(line.text, dir, isolates);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
          return order;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
          var _a;
          // Safari return false for hasFocus when the context menu is open
          // or closing, which leads us to ignore selection changes from the
          // context menu because it looks like the editor isn't focused.
          // This kludges around that.
          return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
              this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
          this.observer.ignore(() => {
              focusPreventScroll(this.contentDOM);
              this.docView.updateSelection();
          });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root) {
          if (this._root != root) {
              this._root = root;
              this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
              this.mountStyles();
          }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
          if (this.root.activeElement == this.contentDOM)
              this.contentDOM.blur();
          for (let plugin of this.plugins)
              plugin.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.docView.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos, options = {}) {
          return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      scrollSnapshot() {
          let { scrollTop, scrollLeft } = this.scrollDOM;
          let ref = this.viewState.scrollAnchorAt(scrollTop);
          return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
      setTabFocusMode(to) {
          if (to == null)
              this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
          else if (typeof to == "boolean")
              this.inputState.tabFocusMode = to ? 0 : -1;
          else if (this.inputState.tabFocusMode != 0)
              this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
      static domEventObservers(observers) {
          return ViewPlugin.define(() => ({}), { eventObservers: observers });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
          let prefix = StyleModule.newName();
          let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
          if (options && options.dark)
              result.push(darkTheme.of(true));
          return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
          return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
          var _a;
          let content = dom.querySelector(".cm-content");
          let cView = content && ContentView.get(content) || ContentView.get(dom);
          return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
  }
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.

  The `insert` argument can be used to get the default transaction
  that would be applied for this input. This can be useful when
  dispatching the custom behavior as a separate transaction.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  Functions provided in this facet will be used to transform text
  pasted or dropped into the editor.
  */
  EditorView.clipboardInputFilter = clipboardInputFilter;
  /**
  Transform text copied or dragged from the editor.
  */
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  /**
  Scroll handlers can override how things are scrolled into view.
  If they return `true`, no further handling happens for the
  scrolling. If they return false, the default scroll behavior is
  applied. Scroll handlers should never initiate editor updates.
  */
  EditorView.scrollHandler = scrollHandler;
  /**
  This facet can be used to provide functions that create effects
  to be dispatched when the editor's focus state changes.
  */
  EditorView.focusChangeEffect = focusChangeEffect;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations$1;
  /**
  Facet that works much like
  [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
  inputs at the very bottom of the precedence stack, meaning mark
  decorations provided here will only be split by other, partially
  overlapping \`outerDecorations\` ranges, and wrap around all
  regular decorations. Use this for mark elements that should, as
  much as possible, remain in one piece.
  */
  EditorView.outerDecorations = outerDecorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  When range decorations add a `unicode-bidi: isolate` style, they
  should also include a
  [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
  in their decoration spec, and be exposed through this facet, so
  that the editor can compute the proper text order. (Other values
  for `unicode-bidi`, except of course `normal`, are not
  supported.)
  */
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Provides a Content Security Policy nonce to use when creating
  the style sheets for the editor. Holds the empty string when no
  nonce has been provided.
  */
  EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  const MaxBidiLine = 4096;
  const BadMeasure = {};
  class CachedOrder {
      constructor(from, to, dir, isolates, fresh, order) {
          this.from = from;
          this.to = to;
          this.dir = dir;
          this.isolates = isolates;
          this.fresh = fresh;
          this.order = order;
      }
      static update(cache, changes) {
          if (changes.empty && !cache.some(c => c.fresh))
              return cache;
          let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
          for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
              let entry = cache[i];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                  result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
          }
          return result;
      }
  }
  function attrsFromFacet(view, facet, base) {
      for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
          let source = sources[i], value = typeof source == "function" ? source(view) : source;
          if (value)
              combineAttrs(value, base);
      }
      return base;
  }

  const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
      const parts = name.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result == "Space")
          result = " ";
      let alt, ctrl, shift, meta;
      for (let i = 0; i < parts.length - 1; ++i) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
              meta = true;
          else if (/^a(lt)?$/i.test(mod))
              alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
              ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
              shift = true;
          else if (/^mod$/i.test(mod)) {
              if (platform == "mac")
                  meta = true;
              else
                  ctrl = true;
          }
          else
              throw new Error("Unrecognized modifier name: " + mod);
      }
      if (alt)
          result = "Alt-" + result;
      if (ctrl)
          result = "Ctrl-" + result;
      if (meta)
          result = "Meta-" + result;
      if (shift)
          result = "Shift-" + result;
      return result;
  }
  function modifiers(name, event, shift) {
      if (event.altKey)
          name = "Alt-" + name;
      if (event.ctrlKey)
          name = "Ctrl-" + name;
      if (event.metaKey)
          name = "Meta-" + name;
      if (shift !== false && event.shiftKey)
          name = "Shift-" + name;
      return name;
  }
  const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
      }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
  const Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
      let bindings = state.facet(keymap);
      let map = Keymaps.get(bindings);
      if (!map)
          Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
      return map;
  }
  /**
  Run the key handlers registered for a given scope. The event
  object should be a `"keydown"` event. Returns true if any of the
  handlers handled it.
  */
  function runScopeHandlers(view, event, scope) {
      return runHandlers(getKeymap(view.state), event, view, scope);
  }
  let storedPrefix = null;
  const PrefixTimeout = 4000;
  function buildKeymap(bindings, platform = currentPlatform) {
      let bound = Object.create(null);
      let isPrefix = Object.create(null);
      let checkPrefix = (name, is) => {
          let current = isPrefix[name];
          if (current == null)
              isPrefix[name] = is;
          else if (current != is)
              throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
      };
      let add = (scope, key, command, preventDefault, stopPropagation) => {
          var _a, _b;
          let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
          for (let i = 1; i < parts.length; i++) {
              let prefix = parts.slice(0, i).join(" ");
              checkPrefix(prefix, true);
              if (!scopeObj[prefix])
                  scopeObj[prefix] = {
                      preventDefault: true,
                      stopPropagation: false,
                      run: [(view) => {
                              let ourObj = storedPrefix = { view, prefix, scope };
                              setTimeout(() => { if (storedPrefix == ourObj)
                                  storedPrefix = null; }, PrefixTimeout);
                              return true;
                          }]
                  };
          }
          let full = parts.join(" ");
          checkPrefix(full, false);
          let binding = scopeObj[full] || (scopeObj[full] = {
              preventDefault: false,
              stopPropagation: false,
              run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
          });
          if (command)
              binding.run.push(command);
          if (preventDefault)
              binding.preventDefault = true;
          if (stopPropagation)
              binding.stopPropagation = true;
      };
      for (let b of bindings) {
          let scopes = b.scope ? b.scope.split(" ") : ["editor"];
          if (b.any)
              for (let scope of scopes) {
                  let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                  if (!scopeObj._any)
                      scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                  let { any } = b;
                  for (let key in scopeObj)
                      scopeObj[key].run.push(view => any(view, currentKeyEvent));
              }
          let name = b[platform] || b.key;
          if (!name)
              continue;
          for (let scope of scopes) {
              add(scope, name, b.run, b.preventDefault, b.stopPropagation);
              if (b.shift)
                  add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
          }
      }
      return bound;
  }
  let currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
      currentKeyEvent = event;
      let name = keyName(event);
      let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
      let prefix = "", handled = false, prevented = false, stopPropagation = false;
      if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (modifierCodes.indexOf(event.keyCode) < 0) {
              prevented = true;
              storedPrefix = null;
          }
      }
      let ran = new Set;
      let runFor = (binding) => {
          if (binding) {
              for (let cmd of binding.run)
                  if (!ran.has(cmd)) {
                      ran.add(cmd);
                      if (cmd(view)) {
                          if (binding.stopPropagation)
                              stopPropagation = true;
                          return true;
                      }
                  }
              if (binding.preventDefault) {
                  if (binding.stopPropagation)
                      stopPropagation = true;
                  prevented = true;
              }
          }
          return false;
      };
      let scopeObj = map[scope], baseName, shiftName;
      if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
              handled = true;
          }
          else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
              // Ctrl-Alt may be used for AltGr on Windows
              !(browser.windows && event.ctrlKey && event.altKey) &&
              // Alt-combinations on macOS tend to be typed characters
              !(browser.mac && event.altKey && !event.ctrlKey) &&
              (baseName = base$1[event.keyCode]) && baseName != name) {
              if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                  handled = true;
              }
              else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                  runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                  handled = true;
              }
          }
          else if (isChar && event.shiftKey &&
              runFor(scopeObj[prefix + modifiers(name, event, true)])) {
              handled = true;
          }
          if (!handled && runFor(scopeObj._any))
              handled = true;
      }
      if (prevented)
          handled = true;
      if (handled && stopPropagation)
          event.stopPropagation();
      currentKeyEvent = null;
      return handled;
  }

  /**
  Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
  a rectangle at a given set of coordinates.
  */
  class RectangleMarker {
      /**
      Create a marker with the given class and dimensions. If `width`
      is null, the DOM element will get no width style.
      */
      constructor(className, 
      /**
      The left position of the marker (in pixels, document-relative).
      */
      left, 
      /**
      The top position of the marker.
      */
      top, 
      /**
      The width of the marker, or null if it shouldn't get a width assigned.
      */
      width, 
      /**
      The height of the marker.
      */
      height) {
          this.className = className;
          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
      }
      draw() {
          let elt = document.createElement("div");
          elt.className = this.className;
          this.adjust(elt);
          return elt;
      }
      update(elt, prev) {
          if (prev.className != this.className)
              return false;
          this.adjust(elt);
          return true;
      }
      adjust(elt) {
          elt.style.left = this.left + "px";
          elt.style.top = this.top + "px";
          if (this.width != null)
              elt.style.width = this.width + "px";
          elt.style.height = this.height + "px";
      }
      eq(p) {
          return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
              this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
      static forRange(view, className, range) {
          if (range.empty) {
              let pos = view.coordsAtPos(range.head, range.assoc || 1);
              if (!pos)
                  return [];
              let base = getBase(view);
              return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
          }
          else {
              return rectanglesForRange(view, className, range);
          }
      }
  }
  function getBase(view) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
      return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
  }
  function wrappedLine(view, pos, side, inside) {
      let coords = view.coordsAtPos(pos, side * 2);
      if (!coords)
          return inside;
      let editorRect = view.dom.getBoundingClientRect();
      let y = (coords.top + coords.bottom) / 2;
      let left = view.posAtCoords({ x: editorRect.left + 1, y });
      let right = view.posAtCoords({ x: editorRect.right - 1, y });
      if (left == null || right == null)
          return inside;
      return { from: Math.max(inside.from, Math.min(left, right)), to: Math.min(inside.to, Math.max(left, right)) };
  }
  function rectanglesForRange(view, className, range) {
      if (range.to <= view.viewport.from || range.from >= view.viewport.to)
          return [];
      let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
      let ltr = view.textDirection == Direction.LTR;
      let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
      let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
      let leftSide = contentRect.left +
          (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
      let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
      let startBlock = blockAt(view, from, 1), endBlock = blockAt(view, to, -1);
      let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
      let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
      if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
          visualStart = wrappedLine(view, from, 1, visualStart);
      if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
          visualEnd = wrappedLine(view, to, -1, visualEnd);
      if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
          return pieces(drawForLine(range.from, range.to, visualStart));
      }
      else {
          let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          let between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
              startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
              between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
          else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
              top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
      }
      function piece(left, top, right, bottom) {
          return new RectangleMarker(className, left - base.left, top - base.top, right - left, bottom - top);
      }
      function pieces({ top, bottom, horizontal }) {
          let pieces = [];
          for (let i = 0; i < horizontal.length; i += 2)
              pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
          return pieces;
      }
      // Gets passed from/to in line-local positions
      function drawForLine(from, to, line) {
          let top = 1e9, bottom = -1e9, horizontal = [];
          function addSpan(from, fromOpen, to, toOpen, dir) {
              // Passing 2/-2 is a kludge to force the view to return
              // coordinates on the proper side of block widgets, since
              // normalizing the side there, though appropriate for most
              // coordsAtPos queries, would break selection drawing.
              let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
              let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
              if (!fromCoords || !toCoords)
                  return;
              top = Math.min(fromCoords.top, toCoords.top, top);
              bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
              if (dir == Direction.LTR)
                  horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
              else
                  horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }
          let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
          // Split the range by visible range and document line
          for (let r of view.visibleRanges)
              if (r.to > start && r.from < end) {
                  for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                      let docLine = view.state.doc.lineAt(pos);
                      for (let span of view.bidiSpans(docLine)) {
                          let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                          if (spanFrom >= endPos)
                              break;
                          if (spanTo > pos)
                              addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                      }
                      pos = docLine.to + 1;
                      if (pos >= endPos)
                          break;
                  }
              }
          if (horizontal.length == 0)
              addSpan(start, from == null, end, to == null, view.textDirection);
          return { top, bottom, horizontal };
      }
      function drawForWidget(block, top) {
          let y = contentRect.top + (top ? block.top : block.bottom);
          return { top: y, bottom: y, horizontal: [] };
      }
  }
  function sameMarker(a, b) {
      return a.constructor == b.constructor && a.eq(b);
  }
  class LayerView {
      constructor(view, layer) {
          this.view = view;
          this.layer = layer;
          this.drawn = [];
          this.scaleX = 1;
          this.scaleY = 1;
          this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
          this.dom = view.scrollDOM.appendChild(document.createElement("div"));
          this.dom.classList.add("cm-layer");
          if (layer.above)
              this.dom.classList.add("cm-layer-above");
          if (layer.class)
              this.dom.classList.add(layer.class);
          this.scale();
          this.dom.setAttribute("aria-hidden", "true");
          this.setOrder(view.state);
          view.requestMeasure(this.measureReq);
          if (layer.mount)
              layer.mount(this.dom, view);
      }
      update(update) {
          if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
              this.setOrder(update.state);
          if (this.layer.update(update, this.dom) || update.geometryChanged) {
              this.scale();
              update.view.requestMeasure(this.measureReq);
          }
      }
      docViewUpdate(view) {
          if (this.layer.updateOnDocViewUpdate !== false)
              view.requestMeasure(this.measureReq);
      }
      setOrder(state) {
          let pos = 0, order = state.facet(layerOrder);
          while (pos < order.length && order[pos] != this.layer)
              pos++;
          this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
      measure() {
          return this.layer.markers(this.view);
      }
      scale() {
          let { scaleX, scaleY } = this.view;
          if (scaleX != this.scaleX || scaleY != this.scaleY) {
              this.scaleX = scaleX;
              this.scaleY = scaleY;
              this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
          }
      }
      draw(markers) {
          if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
              let old = this.dom.firstChild, oldI = 0;
              for (let marker of markers) {
                  if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
                      marker.update(old, this.drawn[oldI])) {
                      old = old.nextSibling;
                      oldI++;
                  }
                  else {
                      this.dom.insertBefore(marker.draw(), old);
                  }
              }
              while (old) {
                  let next = old.nextSibling;
                  old.remove();
                  old = next;
              }
              this.drawn = markers;
          }
      }
      destroy() {
          if (this.layer.destroy)
              this.layer.destroy(this.dom, this.view);
          this.dom.remove();
      }
  }
  const layerOrder = /*@__PURE__*/Facet.define();
  /**
  Define a layer.
  */
  function layer(config) {
      return [
          ViewPlugin.define(v => new LayerView(v, config)),
          layerOrder.of(config)
      ];
  }

  const selectionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              cursorBlinkRate: 1200,
              drawRangeCursor: true
          }, {
              cursorBlinkRate: (a, b) => Math.min(a, b),
              drawRangeCursor: (a, b) => a || b
          });
      }
  });
  /**
  Returns an extension that hides the browser's native selection and
  cursor, replacing the selection with a background behind the text
  (with the `cm-selectionBackground` class), and the
  cursors with elements overlaid over the code (using
  `cm-cursor-primary` and `cm-cursor-secondary`).

  This allows the editor to display secondary selection ranges, and
  tends to produce a type of selection more in line with that users
  expect in a text editor (the native selection styling will often
  leave gaps between lines and won't fill the horizontal space after
  a line when the selection continues past it).

  It does have a performance cost, in that it requires an extra DOM
  layout cycle for many updates (the selection is drawn based on DOM
  layout information that's only available after laying out the
  content).
  */
  function drawSelection(config = {}) {
      return [
          selectionConfig.of(config),
          cursorLayer,
          selectionLayer,
          hideNativeSelection,
          nativeSelectionHidden.of(true)
      ];
  }
  function configChanged(update) {
      return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  const cursorLayer = /*@__PURE__*/layer({
      above: true,
      markers(view) {
          let { state } = view, conf = state.facet(selectionConfig);
          let cursors = [];
          for (let r of state.selection.ranges) {
              let prim = r == state.selection.main;
              if (r.empty || conf.drawRangeCursor) {
                  let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
                  let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
                  for (let piece of RectangleMarker.forRange(view, className, cursor))
                      cursors.push(piece);
              }
          }
          return cursors;
      },
      update(update, dom) {
          if (update.transactions.some(tr => tr.selection))
              dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
          let confChange = configChanged(update);
          if (confChange)
              setBlinkRate(update.state, dom);
          return update.docChanged || update.selectionSet || confChange;
      },
      mount(dom, view) {
          setBlinkRate(view.state, dom);
      },
      class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
      dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  const selectionLayer = /*@__PURE__*/layer({
      above: false,
      markers(view) {
          return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
              .reduce((a, b) => a.concat(b));
      },
      update(update, dom) {
          return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
      },
      class: "cm-selectionLayer"
  });
  const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme({
      ".cm-line": {
          "& ::selection, &::selection": { backgroundColor: "transparent !important" },
          caretColor: "transparent !important"
      },
      ".cm-content": {
          caretColor: "transparent !important",
          "& :focus": {
              caretColor: "initial !important",
              "&::selection, & ::selection": {
                  backgroundColor: "Highlight !important"
              }
          }
      }
  }));

  const setDropCursorPos = /*@__PURE__*/StateEffect.define({
      map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
  });
  const dropCursorPos = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(pos, tr) {
          if (pos != null)
              pos = tr.changes.mapPos(pos);
          return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
      }
  });
  const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.cursor = null;
          this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
      }
      update(update) {
          var _a;
          let cursorPos = update.state.field(dropCursorPos);
          if (cursorPos == null) {
              if (this.cursor != null) {
                  (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                  this.cursor = null;
              }
          }
          else {
              if (!this.cursor) {
                  this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                  this.cursor.className = "cm-dropCursor";
              }
              if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                  this.view.requestMeasure(this.measureReq);
          }
      }
      readPos() {
          let { view } = this;
          let pos = view.state.field(dropCursorPos);
          let rect = pos != null && view.coordsAtPos(pos);
          if (!rect)
              return null;
          let outer = view.scrollDOM.getBoundingClientRect();
          return {
              left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
              top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
              height: rect.bottom - rect.top
          };
      }
      drawCursor(pos) {
          if (this.cursor) {
              let { scaleX, scaleY } = this.view;
              if (pos) {
                  this.cursor.style.left = pos.left / scaleX + "px";
                  this.cursor.style.top = pos.top / scaleY + "px";
                  this.cursor.style.height = pos.height / scaleY + "px";
              }
              else {
                  this.cursor.style.left = "-100000px";
              }
          }
      }
      destroy() {
          if (this.cursor)
              this.cursor.remove();
      }
      setDropPos(pos) {
          if (this.view.state.field(dropCursorPos) != pos)
              this.view.dispatch({ effects: setDropCursorPos.of(pos) });
      }
  }, {
      eventObservers: {
          dragover(event) {
              this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
          },
          dragleave(event) {
              if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                  this.setDropPos(null);
          },
          dragend() {
              this.setDropPos(null);
          },
          drop() {
              this.setDropPos(null);
          }
      }
  });
  /**
  Draws a cursor at the current drop position when something is
  dragged over the editor.
  */
  function dropCursor() {
      return [dropCursorPos, drawDropCursor];
  }

  function iterMatches(doc, re, from, to, f) {
      re.lastIndex = 0;
      for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak)
              while (m = re.exec(cursor.value))
                  f(pos + m.index, m);
      }
  }
  function matchRanges(view, maxLength) {
      let visible = view.visibleRanges;
      if (visible.length == 1 && visible[0].from == view.viewport.from &&
          visible[0].to == view.viewport.to)
          return visible;
      let result = [];
      for (let { from, to } of visible) {
          from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
          to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
          if (result.length && result[result.length - 1].to >= from)
              result[result.length - 1].to = to;
          else
              result.push({ from, to });
      }
      return result;
  }
  /**
  Helper class used to make it easier to maintain decorations on
  visible code that matches a given regular expression. To be used
  in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
  represent a matching configuration.
  */
  class MatchDecorator {
      /**
      Create a decorator.
      */
      constructor(config) {
          const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
          if (!regexp.global)
              throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
          this.regexp = regexp;
          if (decorate) {
              this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
          }
          else if (typeof decoration == "function") {
              this.addMatch = (match, view, from, add) => {
                  let deco = decoration(match, view, from);
                  if (deco)
                      add(from, from + match[0].length, deco);
              };
          }
          else if (decoration) {
              this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
          }
          else {
              throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
          }
          this.boundary = boundary;
          this.maxLength = maxLength;
      }
      /**
      Compute the full set of decorations for matches in the given
      view's viewport. You'll want to call this when initializing your
      plugin.
      */
      createDeco(view) {
          let build = new RangeSetBuilder(), add = build.add.bind(build);
          for (let { from, to } of matchRanges(view, this.maxLength))
              iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
          return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
      updateDeco(update, deco) {
          let changeFrom = 1e9, changeTo = -1;
          if (update.docChanged)
              update.changes.iterChanges((_f, _t, from, to) => {
                  if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
                      changeFrom = Math.min(from, changeFrom);
                      changeTo = Math.max(to, changeTo);
                  }
              });
          if (update.viewportMoved || changeTo - changeFrom > 1000)
              return this.createDeco(update.view);
          if (changeTo > -1)
              return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
          return deco;
      }
      updateRange(view, deco, updateFrom, updateTo) {
          for (let r of view.visibleRanges) {
              let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
              if (to >= from) {
                  let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                  let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                  if (this.boundary) {
                      for (; from > fromLine.from; from--)
                          if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                              start = from;
                              break;
                          }
                      for (; to < toLine.to; to++)
                          if (this.boundary.test(toLine.text[to - toLine.from])) {
                              end = to;
                              break;
                          }
                  }
                  let ranges = [], m;
                  let add = (from, to, deco) => ranges.push(deco.range(from, to));
                  if (fromLine == toLine) {
                      this.regexp.lastIndex = start - fromLine.from;
                      while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
                          this.addMatch(m, view, m.index + fromLine.from, add);
                  }
                  else {
                      iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
                  }
                  deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
              }
          }
          return deco;
      }
  }

  const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
  const Names = {
      0: "null",
      7: "bell",
      8: "backspace",
      10: "newline",
      11: "vertical tab",
      13: "carriage return",
      27: "escape",
      8203: "zero width space",
      8204: "zero width non-joiner",
      8205: "zero width joiner",
      8206: "left-to-right mark",
      8207: "right-to-left mark",
      8232: "line separator",
      8237: "left-to-right override",
      8238: "right-to-left override",
      8294: "left-to-right isolate",
      8295: "right-to-left isolate",
      8297: "pop directional isolate",
      8233: "paragraph separator",
      65279: "zero width no-break space",
      65532: "object replacement"
  };
  let _supportsTabSize = null;
  function supportsTabSize() {
      var _a;
      if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
          let styles = document.body.style;
          _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
      }
      return _supportsTabSize || false;
  }
  const specialCharConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          let config = combineConfig(configs, {
              render: null,
              specialChars: Specials,
              addSpecialChars: null
          });
          if (config.replaceTabs = !supportsTabSize())
              config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
          if (config.addSpecialChars)
              config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
          return config;
      }
  });
  /**
  Returns an extension that installs highlighting of special
  characters.
  */
  function highlightSpecialChars(
  /**
  Configuration options.
  */
  config = {}) {
      return [specialCharConfig.of(config), specialCharPlugin()];
  }
  let _plugin = null;
  function specialCharPlugin() {
      return _plugin || (_plugin = ViewPlugin.fromClass(class {
          constructor(view) {
              this.view = view;
              this.decorations = Decoration.none;
              this.decorationCache = Object.create(null);
              this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
              this.decorations = this.decorator.createDeco(view);
          }
          makeDecorator(conf) {
              return new MatchDecorator({
                  regexp: conf.specialChars,
                  decoration: (m, view, pos) => {
                      let { doc } = view.state;
                      let code = codePointAt(m[0], 0);
                      if (code == 9) {
                          let line = doc.lineAt(pos);
                          let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                          return Decoration.replace({
                              widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)
                          });
                      }
                      return this.decorationCache[code] ||
                          (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                  },
                  boundary: conf.replaceTabs ? undefined : /[^]/
              });
          }
          update(update) {
              let conf = update.state.facet(specialCharConfig);
              if (update.startState.facet(specialCharConfig) != conf) {
                  this.decorator = this.makeDecorator(conf);
                  this.decorations = this.decorator.createDeco(update.view);
              }
              else {
                  this.decorations = this.decorator.updateDeco(update, this.decorations);
              }
          }
      }, {
          decorations: v => v.decorations
      }));
  }
  const DefaultPlaceholder = "\u2022";
  // Assigns placeholder characters from the Control Pictures block to
  // ASCII control characters
  function placeholder$1(code) {
      if (code >= 32)
          return DefaultPlaceholder;
      if (code == 10)
          return "\u2424";
      return String.fromCharCode(9216 + code);
  }
  class SpecialCharWidget extends WidgetType {
      constructor(options, code) {
          super();
          this.options = options;
          this.code = code;
      }
      eq(other) { return other.code == this.code; }
      toDOM(view) {
          let ph = placeholder$1(this.code);
          let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
          let custom = this.options.render && this.options.render(this.code, desc, ph);
          if (custom)
              return custom;
          let span = document.createElement("span");
          span.textContent = ph;
          span.title = desc;
          span.setAttribute("aria-label", desc);
          span.className = "cm-specialChar";
          return span;
      }
      ignoreEvent() { return false; }
  }
  class TabWidget extends WidgetType {
      constructor(width) {
          super();
          this.width = width;
      }
      eq(other) { return other.width == this.width; }
      toDOM() {
          let span = document.createElement("span");
          span.textContent = "\t";
          span.className = "cm-tab";
          span.style.width = this.width + "px";
          return span;
      }
      ignoreEvent() { return false; }
  }

  /**
  Mark lines that have a cursor on them with the `"cm-activeLine"`
  DOM class.
  */
  function highlightActiveLine() {
      return activeLineHighlighter;
  }
  const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
  const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.decorations = this.getDeco(view);
      }
      update(update) {
          if (update.docChanged || update.selectionSet)
              this.decorations = this.getDeco(update.view);
      }
      getDeco(view) {
          let lastLineStart = -1, deco = [];
          for (let r of view.state.selection.ranges) {
              let line = view.lineBlockAt(r.head);
              if (line.from > lastLineStart) {
                  deco.push(lineDeco.range(line.from));
                  lastLineStart = line.from;
              }
          }
          return Decoration.set(deco);
      }
  }, {
      decorations: v => v.decorations
  });

  // Don't compute precise column positions for line offsets above this
  // (since it could get expensive). Assume offset==column for them.
  const MaxOff = 2000;
  function rectangleFor(state, a, b) {
      let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
      let ranges = [];
      if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
          let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
          for (let i = startLine; i <= endLine; i++) {
              let line = state.doc.line(i);
              if (line.length <= endOff)
                  ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
          }
      }
      else {
          let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
          for (let i = startLine; i <= endLine; i++) {
              let line = state.doc.line(i);
              let start = findColumn(line.text, startCol, state.tabSize, true);
              if (start < 0) {
                  ranges.push(EditorSelection.cursor(line.to));
              }
              else {
                  let end = findColumn(line.text, endCol, state.tabSize);
                  ranges.push(EditorSelection.range(line.from + start, line.from + end));
              }
          }
      }
      return ranges;
  }
  function absoluteColumn(view, x) {
      let ref = view.coordsAtPos(view.viewport.from);
      return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
      let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let line = view.state.doc.lineAt(offset), off = offset - line.from;
      let col = off > MaxOff ? -1
          : off == line.length ? absoluteColumn(view, event.clientX)
              : countColumn(line.text, view.state.tabSize, offset - line.from);
      return { line: line.number, col, off };
  }
  function rectangleSelectionStyle(view, event) {
      let start = getPos(view, event), startSel = view.state.selection;
      if (!start)
          return null;
      return {
          update(update) {
              if (update.docChanged) {
                  let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                  let newLine = update.state.doc.lineAt(newStart);
                  start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                  startSel = startSel.map(update.changes);
              }
          },
          get(event, _extend, multiple) {
              let cur = getPos(view, event);
              if (!cur)
                  return startSel;
              let ranges = rectangleFor(view.state, start, cur);
              if (!ranges.length)
                  return startSel;
              if (multiple)
                  return EditorSelection.create(ranges.concat(startSel.ranges));
              else
                  return EditorSelection.create(ranges);
          }
      };
  }
  /**
  Create an extension that enables rectangular selections. By
  default, it will react to left mouse drag with the Alt key held
  down. When such a selection occurs, the text within the rectangle
  that was dragged over will be selected, as one selection
  [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
  */
  function rectangularSelection(options) {
      let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
      return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
  }
  const keys = {
      Alt: [18, e => !!e.altKey],
      Control: [17, e => !!e.ctrlKey],
      Shift: [16, e => !!e.shiftKey],
      Meta: [91, e => !!e.metaKey]
  };
  const showCrosshair = { style: "cursor: crosshair" };
  /**
  Returns an extension that turns the pointer cursor into a
  crosshair when a given modifier key, defaulting to Alt, is held
  down. Can serve as a visual hint that rectangular selection is
  going to happen when paired with
  [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
  */
  function crosshairCursor(options = {}) {
      let [code, getter] = keys[options.key || "Alt"];
      let plugin = ViewPlugin.fromClass(class {
          constructor(view) {
              this.view = view;
              this.isDown = false;
          }
          set(isDown) {
              if (this.isDown != isDown) {
                  this.isDown = isDown;
                  this.view.update([]);
              }
          }
      }, {
          eventObservers: {
              keydown(e) {
                  this.set(e.keyCode == code || getter(e));
              },
              keyup(e) {
                  if (e.keyCode == code || !getter(e))
                      this.set(false);
              },
              mousemove(e) {
                  this.set(getter(e));
              }
          }
      });
      return [
          plugin,
          EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
      ];
  }

  const Outside = "-10000px";
  class TooltipViewManager {
      constructor(view, facet, createTooltipView, removeTooltipView) {
          this.facet = facet;
          this.createTooltipView = createTooltipView;
          this.removeTooltipView = removeTooltipView;
          this.input = view.state.facet(facet);
          this.tooltips = this.input.filter(t => t);
          let prev = null;
          this.tooltipViews = this.tooltips.map(t => prev = createTooltipView(t, prev));
      }
      update(update, above) {
          var _a;
          let input = update.state.facet(this.facet);
          let tooltips = input.filter(x => x);
          if (input === this.input) {
              for (let t of this.tooltipViews)
                  if (t.update)
                      t.update(update);
              return false;
          }
          let tooltipViews = [], newAbove = above ? [] : null;
          for (let i = 0; i < tooltips.length; i++) {
              let tip = tooltips[i], known = -1;
              if (!tip)
                  continue;
              for (let i = 0; i < this.tooltips.length; i++) {
                  let other = this.tooltips[i];
                  if (other && other.create == tip.create)
                      known = i;
              }
              if (known < 0) {
                  tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
                  if (newAbove)
                      newAbove[i] = !!tip.above;
              }
              else {
                  let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                  if (newAbove)
                      newAbove[i] = above[known];
                  if (tooltipView.update)
                      tooltipView.update(update);
              }
          }
          for (let t of this.tooltipViews)
              if (tooltipViews.indexOf(t) < 0) {
                  this.removeTooltipView(t);
                  (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
              }
          if (above) {
              newAbove.forEach((val, i) => above[i] = val);
              above.length = newAbove.length;
          }
          this.input = input;
          this.tooltips = tooltips;
          this.tooltipViews = tooltipViews;
          return true;
      }
  }
  function windowSpace(view) {
      let docElt = view.dom.ownerDocument.documentElement;
      return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
  }
  const tooltipConfig = /*@__PURE__*/Facet.define({
      combine: values => {
          var _a, _b, _c;
          return ({
              position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
              parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
              tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
          });
      }
  });
  const knownHeight = /*@__PURE__*/new WeakMap();
  const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.above = [];
          this.inView = true;
          this.madeAbsolute = false;
          this.lastTransaction = 0;
          this.measureTimeout = -1;
          let config = view.state.facet(tooltipConfig);
          this.position = config.position;
          this.parent = config.parent;
          this.classes = view.themeClasses;
          this.createContainer();
          this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
          this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
          this.manager = new TooltipViewManager(view, showTooltip, (t, p) => this.createTooltip(t, p), t => {
              if (this.resizeObserver)
                  this.resizeObserver.unobserve(t.dom);
              t.dom.remove();
          });
          this.above = this.manager.tooltips.map(t => !!t.above);
          this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
              if (Date.now() > this.lastTransaction - 50 &&
                  entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                  this.measureSoon();
          }, { threshold: [1] }) : null;
          this.observeIntersection();
          view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
          this.maybeMeasure();
      }
      createContainer() {
          if (this.parent) {
              this.container = document.createElement("div");
              this.container.style.position = "relative";
              this.container.className = this.view.themeClasses;
              this.parent.appendChild(this.container);
          }
          else {
              this.container = this.view.dom;
          }
      }
      observeIntersection() {
          if (this.intersectionObserver) {
              this.intersectionObserver.disconnect();
              for (let tooltip of this.manager.tooltipViews)
                  this.intersectionObserver.observe(tooltip.dom);
          }
      }
      measureSoon() {
          if (this.measureTimeout < 0)
              this.measureTimeout = setTimeout(() => {
                  this.measureTimeout = -1;
                  this.maybeMeasure();
              }, 50);
      }
      update(update) {
          if (update.transactions.length)
              this.lastTransaction = Date.now();
          let updated = this.manager.update(update, this.above);
          if (updated)
              this.observeIntersection();
          let shouldMeasure = updated || update.geometryChanged;
          let newConfig = update.state.facet(tooltipConfig);
          if (newConfig.position != this.position && !this.madeAbsolute) {
              this.position = newConfig.position;
              for (let t of this.manager.tooltipViews)
                  t.dom.style.position = this.position;
              shouldMeasure = true;
          }
          if (newConfig.parent != this.parent) {
              if (this.parent)
                  this.container.remove();
              this.parent = newConfig.parent;
              this.createContainer();
              for (let t of this.manager.tooltipViews)
                  this.container.appendChild(t.dom);
              shouldMeasure = true;
          }
          else if (this.parent && this.view.themeClasses != this.classes) {
              this.classes = this.container.className = this.view.themeClasses;
          }
          if (shouldMeasure)
              this.maybeMeasure();
      }
      createTooltip(tooltip, prev) {
          let tooltipView = tooltip.create(this.view);
          let before = prev ? prev.dom : null;
          tooltipView.dom.classList.add("cm-tooltip");
          if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
              let arrow = document.createElement("div");
              arrow.className = "cm-tooltip-arrow";
              tooltipView.dom.appendChild(arrow);
          }
          tooltipView.dom.style.position = this.position;
          tooltipView.dom.style.top = Outside;
          tooltipView.dom.style.left = "0px";
          this.container.insertBefore(tooltipView.dom, before);
          if (tooltipView.mount)
              tooltipView.mount(this.view);
          if (this.resizeObserver)
              this.resizeObserver.observe(tooltipView.dom);
          return tooltipView;
      }
      destroy() {
          var _a, _b, _c;
          this.view.win.removeEventListener("resize", this.measureSoon);
          for (let tooltipView of this.manager.tooltipViews) {
              tooltipView.dom.remove();
              (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
          }
          if (this.parent)
              this.container.remove();
          (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
          clearTimeout(this.measureTimeout);
      }
      readMeasure() {
          let scaleX = 1, scaleY = 1, makeAbsolute = false;
          if (this.position == "fixed" && this.manager.tooltipViews.length) {
              let { dom } = this.manager.tooltipViews[0];
              if (browser.gecko) {
                  // Firefox sets the element's `offsetParent` to the
                  // transformed element when a transform interferes with fixed
                  // positioning.
                  makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
              }
              else if (dom.style.top == Outside && dom.style.left == "0px") {
                  // On other browsers, we have to awkwardly try and use other
                  // information to detect a transform.
                  let rect = dom.getBoundingClientRect();
                  makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
              }
          }
          if (makeAbsolute || this.position == "absolute") {
              if (this.parent) {
                  let rect = this.parent.getBoundingClientRect();
                  if (rect.width && rect.height) {
                      scaleX = rect.width / this.parent.offsetWidth;
                      scaleY = rect.height / this.parent.offsetHeight;
                  }
              }
              else {
                  ({ scaleX, scaleY } = this.view.viewState);
              }
          }
          let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
          return {
              visible: {
                  left: visible.left + margins.left, top: visible.top + margins.top,
                  right: visible.right - margins.right, bottom: visible.bottom - margins.bottom
              },
              parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
              pos: this.manager.tooltips.map((t, i) => {
                  let tv = this.manager.tooltipViews[i];
                  return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
              }),
              size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
              space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
              scaleX, scaleY, makeAbsolute
          };
      }
      writeMeasure(measured) {
          var _a;
          if (measured.makeAbsolute) {
              this.madeAbsolute = true;
              this.position = "absolute";
              for (let t of this.manager.tooltipViews)
                  t.dom.style.position = "absolute";
          }
          let { visible, space, scaleX, scaleY } = measured;
          let others = [];
          for (let i = 0; i < this.manager.tooltips.length; i++) {
              let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
              let pos = measured.pos[i], size = measured.size[i];
              // Hide tooltips that are outside of the editor.
              if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) ||
                  pos.top >= Math.min(visible.bottom, space.bottom) ||
                  pos.right < Math.max(visible.left, space.left) - .1 ||
                  pos.left > Math.min(visible.right, space.right) + .1)) {
                  dom.style.top = Outside;
                  continue;
              }
              let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
              let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
              let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
              let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
              let left = size.width > space.right - space.left
                  ? (ltr ? space.left : space.right - size.width)
                  : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width))
                      : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
              let above = this.above[i];
              if (!tooltip.strictSide && (above
                  ? pos.top - height - arrowHeight - offset.y < space.top
                  : pos.bottom + height + arrowHeight + offset.y > space.bottom) &&
                  above == (space.bottom - pos.bottom > pos.top - space.top))
                  above = this.above[i] = !above;
              let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
              if (spaceVert < height && tView.resize !== false) {
                  if (spaceVert < this.view.defaultLineHeight) {
                      dom.style.top = Outside;
                      continue;
                  }
                  knownHeight.set(tView, height);
                  dom.style.height = (height = spaceVert) / scaleY + "px";
              }
              else if (dom.style.height) {
                  dom.style.height = "";
              }
              let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
              let right = left + width;
              if (tView.overlap !== true)
                  for (let r of others)
                      if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                          top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
              if (this.position == "absolute") {
                  dom.style.top = (top - measured.parent.top) / scaleY + "px";
                  setLeftStyle(dom, (left - measured.parent.left) / scaleX);
              }
              else {
                  dom.style.top = top / scaleY + "px";
                  setLeftStyle(dom, left / scaleX);
              }
              if (arrow) {
                  let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
                  arrow.style.left = arrowLeft / scaleX + "px";
              }
              if (tView.overlap !== true)
                  others.push({ left, top, right, bottom: top + height });
              dom.classList.toggle("cm-tooltip-above", above);
              dom.classList.toggle("cm-tooltip-below", !above);
              if (tView.positioned)
                  tView.positioned(measured.space);
          }
      }
      maybeMeasure() {
          if (this.manager.tooltips.length) {
              if (this.view.inView)
                  this.view.requestMeasure(this.measureReq);
              if (this.inView != this.view.inView) {
                  this.inView = this.view.inView;
                  if (!this.inView)
                      for (let tv of this.manager.tooltipViews)
                          tv.dom.style.top = Outside;
              }
          }
      }
  }, {
      eventObservers: {
          scroll() { this.maybeMeasure(); }
      }
  });
  function setLeftStyle(elt, value) {
      let current = parseInt(elt.style.left, 10);
      if (isNaN(current) || Math.abs(value - current) > 1)
          elt.style.left = value + "px";
  }
  const baseTheme$5 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip": {
          zIndex: 500,
          boxSizing: "border-box"
      },
      "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
      },
      "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb",
      },
      "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tooltip-arrow": {
          height: `${7 /* Arrow.Size */}px`,
          width: `${7 /* Arrow.Size */ * 2}px`,
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
              content: "''",
              position: "absolute",
              width: 0,
              height: 0,
              borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
              borderRight: `${7 /* Arrow.Size */}px solid transparent`,
          },
          ".cm-tooltip-above &": {
              bottom: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  bottom: "1px"
              }
          },
          ".cm-tooltip-below &": {
              top: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  top: "1px"
              }
          },
      },
      "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
              borderTopColor: "#333338",
              borderBottomColor: "#333338"
          },
          "&:after": {
              borderTopColor: "transparent",
              borderBottomColor: "transparent"
          }
      }
  });
  const noOffset = { x: 0, y: 0 };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  const showTooltip = /*@__PURE__*/Facet.define({
      enables: [tooltipPlugin, baseTheme$5]
  });
  const showHoverTooltip = /*@__PURE__*/Facet.define({
      combine: inputs => inputs.reduce((a, i) => a.concat(i), [])
  });
  class HoverTooltipHost {
      // Needs to be static so that host tooltip instances always match
      static create(view) {
          return new HoverTooltipHost(view);
      }
      constructor(view) {
          this.view = view;
          this.mounted = false;
          this.dom = document.createElement("div");
          this.dom.classList.add("cm-tooltip-hover");
          this.manager = new TooltipViewManager(view, showHoverTooltip, (t, p) => this.createHostedView(t, p), t => t.dom.remove());
      }
      createHostedView(tooltip, prev) {
          let hostedView = tooltip.create(this.view);
          hostedView.dom.classList.add("cm-tooltip-section");
          this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
          if (this.mounted && hostedView.mount)
              hostedView.mount(this.view);
          return hostedView;
      }
      mount(view) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.mount)
                  hostedView.mount(view);
          }
          this.mounted = true;
      }
      positioned(space) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.positioned)
                  hostedView.positioned(space);
          }
      }
      update(update) {
          this.manager.update(update);
      }
      destroy() {
          var _a;
          for (let t of this.manager.tooltipViews)
              (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
      }
      passProp(name) {
          let value = undefined;
          for (let view of this.manager.tooltipViews) {
              let given = view[name];
              if (given !== undefined) {
                  if (value === undefined)
                      value = given;
                  else if (value !== given)
                      return undefined;
              }
          }
          return value;
      }
      get offset() { return this.passProp("offset"); }
      get getCoords() { return this.passProp("getCoords"); }
      get overlap() { return this.passProp("overlap"); }
      get resize() { return this.passProp("resize"); }
  }
  const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
      let tooltips = state.facet(showHoverTooltip);
      if (tooltips.length === 0)
          return null;
      return {
          pos: Math.min(...tooltips.map(t => t.pos)),
          end: Math.max(...tooltips.map(t => { var _a; return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos; })),
          create: HoverTooltipHost.create,
          above: tooltips[0].above,
          arrow: tooltips.some(t => t.arrow),
      };
  });
  class HoverPlugin {
      constructor(view, source, field, setHover, hoverTime) {
          this.view = view;
          this.source = source;
          this.field = field;
          this.setHover = setHover;
          this.hoverTime = hoverTime;
          this.hoverTimeout = -1;
          this.restartTimeout = -1;
          this.pending = null;
          this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
          this.checkHover = this.checkHover.bind(this);
          view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
          view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
      }
      update() {
          if (this.pending) {
              this.pending = null;
              clearTimeout(this.restartTimeout);
              this.restartTimeout = setTimeout(() => this.startHover(), 20);
          }
      }
      get active() {
          return this.view.state.field(this.field);
      }
      checkHover() {
          this.hoverTimeout = -1;
          if (this.active.length)
              return;
          let hovered = Date.now() - this.lastMove.time;
          if (hovered < this.hoverTime)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
          else
              this.startHover();
      }
      startHover() {
          clearTimeout(this.restartTimeout);
          let { view, lastMove } = this;
          let desc = view.docView.nearest(lastMove.target);
          if (!desc)
              return;
          let pos, side = 1;
          if (desc instanceof WidgetView) {
              pos = desc.posAtStart;
          }
          else {
              pos = view.posAtCoords(lastMove);
              if (pos == null)
                  return;
              let posCoords = view.coordsAtPos(pos);
              if (!posCoords ||
                  lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                  lastMove.x < posCoords.left - view.defaultCharacterWidth ||
                  lastMove.x > posCoords.right + view.defaultCharacterWidth)
                  return;
              let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
              let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
              side = (lastMove.x < posCoords.left ? -rtl : rtl);
          }
          let open = this.source(view, pos, side);
          if (open === null || open === void 0 ? void 0 : open.then) {
              let pending = this.pending = { pos };
              open.then(result => {
                  if (this.pending == pending) {
                      this.pending = null;
                      if (result && !(Array.isArray(result) && !result.length))
                          view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
                  }
              }, e => logException(view.state, e, "hover tooltip"));
          }
          else if (open && !(Array.isArray(open) && !open.length)) {
              view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
          }
      }
      get tooltip() {
          let plugin = this.view.plugin(tooltipPlugin);
          let index = plugin ? plugin.manager.tooltips.findIndex(t => t.create == HoverTooltipHost.create) : -1;
          return index > -1 ? plugin.manager.tooltipViews[index] : null;
      }
      mousemove(event) {
          var _a, _b;
          this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
          if (this.hoverTimeout < 0)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
          let { active, tooltip } = this;
          if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
              let { pos } = active[0] || this.pending, end = (_b = (_a = active[0]) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : pos;
              if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                  : !isOverRange(this.view, pos, end, event.clientX, event.clientY))) {
                  this.view.dispatch({ effects: this.setHover.of([]) });
                  this.pending = null;
              }
          }
      }
      mouseleave(event) {
          clearTimeout(this.hoverTimeout);
          this.hoverTimeout = -1;
          let { active } = this;
          if (active.length) {
              let { tooltip } = this;
              let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
              if (!inTooltip)
                  this.view.dispatch({ effects: this.setHover.of([]) });
              else
                  this.watchTooltipLeave(tooltip.dom);
          }
      }
      watchTooltipLeave(tooltip) {
          let watch = (event) => {
              tooltip.removeEventListener("mouseleave", watch);
              if (this.active.length && !this.view.dom.contains(event.relatedTarget))
                  this.view.dispatch({ effects: this.setHover.of([]) });
          };
          tooltip.addEventListener("mouseleave", watch);
      }
      destroy() {
          clearTimeout(this.hoverTimeout);
          this.view.dom.removeEventListener("mouseleave", this.mouseleave);
          this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
  }
  const tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
      let { left, right, top, bottom } = tooltip.getBoundingClientRect(), arrow;
      if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
          let arrowRect = arrow.getBoundingClientRect();
          top = Math.min(arrowRect.top, top);
          bottom = Math.max(arrowRect.bottom, bottom);
      }
      return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin &&
          event.clientY >= top - tooltipMargin && event.clientY <= bottom + tooltipMargin;
  }
  function isOverRange(view, from, to, x, y, margin) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
      if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
          return false;
      let pos = view.posAtCoords({ x, y }, false);
      return pos >= from && pos <= to;
  }
  /**
  Set up a hover tooltip, which shows up when the pointer hovers
  over ranges of text. The callback is called when the mouse hovers
  over the document text. It should, if there is a tooltip
  associated with position `pos`, return the tooltip description
  (either directly or in a promise). The `side` argument indicates
  on which side of the position the pointer is—it will be -1 if the
  pointer is before the position, 1 if after the position.

  Note that all hover tooltips are hosted within a single tooltip
  container element. This allows multiple tooltips over the same
  range to be "merged" together without overlapping.

  The return value is a valid [editor extension](https://codemirror.net/6/docs/ref/#state.Extension)
  but also provides an `active` property holding a state field that
  can be used to read the currently active tooltips produced by this
  extension.
  */
  function hoverTooltip(source, options = {}) {
      let setHover = StateEffect.define();
      let hoverState = StateField.define({
          create() { return []; },
          update(value, tr) {
              if (value.length) {
                  if (options.hideOnChange && (tr.docChanged || tr.selection))
                      value = [];
                  else if (options.hideOn)
                      value = value.filter(v => !options.hideOn(tr, v));
                  if (tr.docChanged) {
                      let mapped = [];
                      for (let tooltip of value) {
                          let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
                          if (newPos != null) {
                              let copy = Object.assign(Object.create(null), tooltip);
                              copy.pos = newPos;
                              if (copy.end != null)
                                  copy.end = tr.changes.mapPos(copy.end);
                              mapped.push(copy);
                          }
                      }
                      value = mapped;
                  }
              }
              for (let effect of tr.effects) {
                  if (effect.is(setHover))
                      value = effect.value;
                  if (effect.is(closeHoverTooltipEffect))
                      value = [];
              }
              return value;
          },
          provide: f => showHoverTooltip.from(f)
      });
      return {
          active: hoverState,
          extension: [
              hoverState,
              ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
              showHoverTooltipHost
          ]
      };
  }
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
      let plugin = view.plugin(tooltipPlugin);
      if (!plugin)
          return null;
      let found = plugin.manager.tooltips.indexOf(tooltip);
      return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

  const panelConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          let topContainer, bottomContainer;
          for (let c of configs) {
              topContainer = topContainer || c.topContainer;
              bottomContainer = bottomContainer || c.bottomContainer;
          }
          return { topContainer, bottomContainer };
      }
  });
  /**
  Get the active panel created by the given constructor, if any.
  This can be useful when you need access to your panels' DOM
  structure.
  */
  function getPanel(view, panel) {
      let plugin = view.plugin(panelPlugin);
      let index = plugin ? plugin.specs.indexOf(panel) : -1;
      return index > -1 ? plugin.panels[index] : null;
  }
  const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.input = view.state.facet(showPanel);
          this.specs = this.input.filter(s => s);
          this.panels = this.specs.map(spec => spec(view));
          let conf = view.state.facet(panelConfig);
          this.top = new PanelGroup(view, true, conf.topContainer);
          this.bottom = new PanelGroup(view, false, conf.bottomContainer);
          this.top.sync(this.panels.filter(p => p.top));
          this.bottom.sync(this.panels.filter(p => !p.top));
          for (let p of this.panels) {
              p.dom.classList.add("cm-panel");
              if (p.mount)
                  p.mount();
          }
      }
      update(update) {
          let conf = update.state.facet(panelConfig);
          if (this.top.container != conf.topContainer) {
              this.top.sync([]);
              this.top = new PanelGroup(update.view, true, conf.topContainer);
          }
          if (this.bottom.container != conf.bottomContainer) {
              this.bottom.sync([]);
              this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
          }
          this.top.syncClasses();
          this.bottom.syncClasses();
          let input = update.state.facet(showPanel);
          if (input != this.input) {
              let specs = input.filter(x => x);
              let panels = [], top = [], bottom = [], mount = [];
              for (let spec of specs) {
                  let known = this.specs.indexOf(spec), panel;
                  if (known < 0) {
                      panel = spec(update.view);
                      mount.push(panel);
                  }
                  else {
                      panel = this.panels[known];
                      if (panel.update)
                          panel.update(update);
                  }
                  panels.push(panel);
                  (panel.top ? top : bottom).push(panel);
              }
              this.specs = specs;
              this.panels = panels;
              this.top.sync(top);
              this.bottom.sync(bottom);
              for (let p of mount) {
                  p.dom.classList.add("cm-panel");
                  if (p.mount)
                      p.mount();
              }
          }
          else {
              for (let p of this.panels)
                  if (p.update)
                      p.update(update);
          }
      }
      destroy() {
          this.top.sync([]);
          this.bottom.sync([]);
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
      })
  });
  class PanelGroup {
      constructor(view, top, container) {
          this.view = view;
          this.top = top;
          this.container = container;
          this.dom = undefined;
          this.classes = "";
          this.panels = [];
          this.syncClasses();
      }
      sync(panels) {
          for (let p of this.panels)
              if (p.destroy && panels.indexOf(p) < 0)
                  p.destroy();
          this.panels = panels;
          this.syncDOM();
      }
      syncDOM() {
          if (this.panels.length == 0) {
              if (this.dom) {
                  this.dom.remove();
                  this.dom = undefined;
              }
              return;
          }
          if (!this.dom) {
              this.dom = document.createElement("div");
              this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
              this.dom.style[this.top ? "top" : "bottom"] = "0";
              let parent = this.container || this.view.dom;
              parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
          }
          let curDOM = this.dom.firstChild;
          for (let panel of this.panels) {
              if (panel.dom.parentNode == this.dom) {
                  while (curDOM != panel.dom)
                      curDOM = rm(curDOM);
                  curDOM = curDOM.nextSibling;
              }
              else {
                  this.dom.insertBefore(panel.dom, curDOM);
              }
          }
          while (curDOM)
              curDOM = rm(curDOM);
      }
      scrollMargin() {
          return !this.dom || this.container ? 0
              : Math.max(0, this.top ?
                  this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                  Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
      syncClasses() {
          if (!this.container || this.classes == this.view.themeClasses)
              return;
          for (let cls of this.classes.split(" "))
              if (cls)
                  this.container.classList.remove(cls);
          for (let cls of (this.classes = this.view.themeClasses).split(" "))
              if (cls)
                  this.container.classList.add(cls);
      }
  }
  function rm(node) {
      let next = node.nextSibling;
      node.remove();
      return next;
  }
  /**
  Opening a panel is done by providing a constructor function for
  the panel through this facet. (The panel is closed again when its
  constructor is no longer provided.) Values of `null` are ignored.
  */
  const showPanel = /*@__PURE__*/Facet.define({
      enables: panelPlugin
  });

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  class GutterMarker extends RangeValue {
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) { return false; }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) { }
  }
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  const gutterLineClass = /*@__PURE__*/Facet.define();
  /**
  Facet used to add a class to all gutter elements next to a widget.
  Should not provide widgets with a `toDOM` method.
  */
  const gutterWidgetClass = /*@__PURE__*/Facet.define();
  const defaults$1 = {
      class: "",
      renderEmptyElements: false,
      elementStyle: "",
      markers: () => RangeSet.empty,
      lineMarker: () => null,
      widgetMarker: () => null,
      lineMarkerChange: null,
      initialSpacer: null,
      updateSpacer: null,
      domEventHandlers: {},
      side: "before"
  };
  const activeGutters = /*@__PURE__*/Facet.define();
  /**
  Define an editor gutter. The order in which the gutters appear is
  determined by their extension priority.
  */
  function gutter(config) {
      return [gutters(), activeGutters.of({ ...defaults$1, ...config })];
  }
  const unfixGutters = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.

  Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
      let result = [
          gutterView,
      ];
      if (config && config.fixed === false)
          result.push(unfixGutters.of(true));
      return result;
  }
  const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.domAfter = null;
          this.prevViewport = view.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters cm-gutters-before";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
          this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
          this.fixed = !view.state.facet(unfixGutters);
          for (let gutter of this.gutters) {
              if (gutter.config.side == "after")
                  this.getDOMAfter().appendChild(gutter.dom);
              else
                  this.dom.appendChild(gutter.dom);
          }
          if (this.fixed) {
              // FIXME IE11 fallback, which doesn't support position: sticky,
              // by using position: relative + event handlers that realign the
              // gutter (or just force fixed=false on IE11?)
              this.dom.style.position = "sticky";
          }
          this.syncGutters(false);
          view.scrollDOM.insertBefore(this.dom, view.contentDOM);
      }
      getDOMAfter() {
          if (!this.domAfter) {
              this.domAfter = document.createElement("div");
              this.domAfter.className = "cm-gutters cm-gutters-after";
              this.domAfter.setAttribute("aria-hidden", "true");
              this.domAfter.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
              this.domAfter.style.position = this.fixed ? "sticky" : "";
              this.view.scrollDOM.appendChild(this.domAfter);
          }
          return this.domAfter;
      }
      update(update) {
          if (this.updateGutters(update)) {
              // Detach during sync when the viewport changed significantly
              // (such as during scrolling), since for large updates that is
              // faster.
              let vpA = this.prevViewport, vpB = update.view.viewport;
              let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
              this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
          }
          if (update.geometryChanged) {
              let min = (this.view.contentHeight / this.view.scaleY) + "px";
              this.dom.style.minHeight = min;
              if (this.domAfter)
                  this.domAfter.style.minHeight = min;
          }
          if (this.view.state.facet(unfixGutters) != !this.fixed) {
              this.fixed = !this.fixed;
              this.dom.style.position = this.fixed ? "sticky" : "";
              if (this.domAfter)
                  this.domAfter.style.position = this.fixed ? "sticky" : "";
          }
          this.prevViewport = update.view.viewport;
      }
      syncGutters(detach) {
          let after = this.dom.nextSibling;
          if (detach) {
              this.dom.remove();
              if (this.domAfter)
                  this.domAfter.remove();
          }
          let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
          let classSet = [];
          let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
          for (let line of this.view.viewportLineBlocks) {
              if (classSet.length)
                  classSet = [];
              if (Array.isArray(line.type)) {
                  let first = true;
                  for (let b of line.type) {
                      if (b.type == BlockType.Text && first) {
                          advanceCursor(lineClasses, classSet, b.from);
                          for (let cx of contexts)
                              cx.line(this.view, b, classSet);
                          first = false;
                      }
                      else if (b.widget) {
                          for (let cx of contexts)
                              cx.widget(this.view, b);
                      }
                  }
              }
              else if (line.type == BlockType.Text) {
                  advanceCursor(lineClasses, classSet, line.from);
                  for (let cx of contexts)
                      cx.line(this.view, line, classSet);
              }
              else if (line.widget) {
                  for (let cx of contexts)
                      cx.widget(this.view, line);
              }
          }
          for (let cx of contexts)
              cx.finish();
          if (detach) {
              this.view.scrollDOM.insertBefore(this.dom, after);
              if (this.domAfter)
                  this.view.scrollDOM.appendChild(this.domAfter);
          }
      }
      updateGutters(update) {
          let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
          let change = update.docChanged || update.heightChanged || update.viewportChanged ||
              !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
          if (prev == cur) {
              for (let gutter of this.gutters)
                  if (gutter.update(update))
                      change = true;
          }
          else {
              change = true;
              let gutters = [];
              for (let conf of cur) {
                  let known = prev.indexOf(conf);
                  if (known < 0) {
                      gutters.push(new SingleGutterView(this.view, conf));
                  }
                  else {
                      this.gutters[known].update(update);
                      gutters.push(this.gutters[known]);
                  }
              }
              for (let g of this.gutters) {
                  g.dom.remove();
                  if (gutters.indexOf(g) < 0)
                      g.destroy();
              }
              for (let g of gutters) {
                  if (g.config.side == "after")
                      this.getDOMAfter().appendChild(g.dom);
                  else
                      this.dom.appendChild(g.dom);
              }
              this.gutters = gutters;
          }
          return change;
      }
      destroy() {
          for (let view of this.gutters)
              view.destroy();
          this.dom.remove();
          if (this.domAfter)
              this.domAfter.remove();
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          if (!value || value.gutters.length == 0 || !value.fixed)
              return null;
          let before = value.dom.offsetWidth * view.scaleX, after = value.domAfter ? value.domAfter.offsetWidth * view.scaleX : 0;
          return view.textDirection == Direction.LTR
              ? { left: before, right: after }
              : { right: before, left: after };
      })
  });
  function asArray(val) { return (Array.isArray(val) ? val : [val]); }
  function advanceCursor(cursor, collect, pos) {
      while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos)
              collect.push(cursor.value);
          cursor.next();
      }
  }
  class UpdateContext {
      constructor(gutter, viewport, height) {
          this.gutter = gutter;
          this.height = height;
          this.i = 0;
          this.cursor = RangeSet.iter(gutter.markers, viewport.from);
      }
      addElement(view, block, markers) {
          let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
          if (this.i == gutter.elements.length) {
              let newElt = new GutterElement(view, height, above, markers);
              gutter.elements.push(newElt);
              gutter.dom.appendChild(newElt.dom);
          }
          else {
              gutter.elements[this.i].update(view, height, above, markers);
          }
          this.height = block.bottom;
          this.i++;
      }
      line(view, line, extraMarkers) {
          let localMarkers = [];
          advanceCursor(this.cursor, localMarkers, line.from);
          if (extraMarkers.length)
              localMarkers = localMarkers.concat(extraMarkers);
          let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
          if (forLine)
              localMarkers.unshift(forLine);
          let gutter = this.gutter;
          if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
              return;
          this.addElement(view, line, localMarkers);
      }
      widget(view, block) {
          let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
          for (let cls of view.state.facet(gutterWidgetClass)) {
              let marker = cls(view, block.widget, block);
              if (marker)
                  (markers || (markers = [])).push(marker);
          }
          if (markers)
              this.addElement(view, block, markers);
      }
      finish() {
          let gutter = this.gutter;
          while (gutter.elements.length > this.i) {
              let last = gutter.elements.pop();
              gutter.dom.removeChild(last.dom);
              last.destroy();
          }
      }
  }
  class SingleGutterView {
      constructor(view, config) {
          this.view = view;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
          for (let prop in config.domEventHandlers) {
              this.dom.addEventListener(prop, (event) => {
                  let target = event.target, y;
                  if (target != this.dom && this.dom.contains(target)) {
                      while (target.parentNode != this.dom)
                          target = target.parentNode;
                      let rect = target.getBoundingClientRect();
                      y = (rect.top + rect.bottom) / 2;
                  }
                  else {
                      y = event.clientY;
                  }
                  let line = view.lineBlockAtHeight(y - view.documentTop);
                  if (config.domEventHandlers[prop](view, line, event))
                      event.preventDefault();
              });
          }
          this.markers = asArray(config.markers(view));
          if (config.initialSpacer) {
              this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
              this.dom.appendChild(this.spacer.dom);
              this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
      }
      update(update) {
          let prevMarkers = this.markers;
          this.markers = asArray(this.config.markers(update.view));
          if (this.spacer && this.config.updateSpacer) {
              let updated = this.config.updateSpacer(this.spacer.markers[0], update);
              if (updated != this.spacer.markers[0])
                  this.spacer.update(update.view, 0, 0, [updated]);
          }
          let vp = update.view.viewport;
          return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
              (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
      }
      destroy() {
          for (let elt of this.elements)
              elt.destroy();
      }
  }
  class GutterElement {
      constructor(view, height, above, markers) {
          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutterElement";
          this.update(view, height, above, markers);
      }
      update(view, height, above, markers) {
          if (this.height != height) {
              this.height = height;
              this.dom.style.height = height + "px";
          }
          if (this.above != above)
              this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
          if (!sameMarkers(this.markers, markers))
              this.setMarkers(view, markers);
      }
      setMarkers(view, markers) {
          let cls = "cm-gutterElement", domPos = this.dom.firstChild;
          for (let iNew = 0, iOld = 0;;) {
              let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
              if (marker) {
                  let c = marker.elementClass;
                  if (c)
                      cls += " " + c;
                  for (let i = iOld; i < this.markers.length; i++)
                      if (this.markers[i].compare(marker)) {
                          skipTo = i;
                          matched = true;
                          break;
                      }
              }
              else {
                  skipTo = this.markers.length;
              }
              while (iOld < skipTo) {
                  let next = this.markers[iOld++];
                  if (next.toDOM) {
                      next.destroy(domPos);
                      let after = domPos.nextSibling;
                      domPos.remove();
                      domPos = after;
                  }
              }
              if (!marker)
                  break;
              if (marker.toDOM) {
                  if (matched)
                      domPos = domPos.nextSibling;
                  else
                      this.dom.insertBefore(marker.toDOM(view), domPos);
              }
              if (matched)
                  iOld++;
          }
          this.dom.className = cls;
          this.markers = markers;
      }
      destroy() {
          this.setMarkers(null, []); // First argument not used unless creating markers
      }
  }
  function sameMarkers(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!a[i].compare(b[i]))
              return false;
      return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  const lineNumberMarkers = /*@__PURE__*/Facet.define();
  /**
  Facet used to create markers in the line number gutter next to widgets.
  */
  const lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
  const lineNumberConfig = /*@__PURE__*/Facet.define({
      combine(values) {
          return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
              domEventHandlers(a, b) {
                  let result = Object.assign({}, a);
                  for (let event in b) {
                      let exists = result[event], add = b[event];
                      result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                  }
                  return result;
              }
          });
      }
  });
  class NumberMarker extends GutterMarker {
      constructor(number) {
          super();
          this.number = number;
      }
      eq(other) { return this.number == other.number; }
      toDOM() { return document.createTextNode(this.number); }
  }
  function formatNumber(view, number) {
      return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
      class: "cm-lineNumbers",
      renderEmptyElements: false,
      markers(view) { return view.state.facet(lineNumberMarkers); },
      lineMarker(view, line, others) {
          if (others.some(m => m.toDOM))
              return null;
          return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: (view, widget, block) => {
          for (let m of view.state.facet(lineNumberWidgetMarker)) {
              let result = m(view, widget, block);
              if (result)
                  return result;
          }
          return null;
      },
      lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
      initialSpacer(view) {
          return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer(spacer, update) {
          let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
          return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers,
      side: "before"
  }));
  /**
  Create a line number gutter extension.
  */
  function lineNumbers(config = {}) {
      return [
          lineNumberConfig.of(config),
          gutters(),
          lineNumberGutter
      ];
  }
  function maxLineNumber(lines) {
      let last = 9;
      while (last < lines)
          last = last * 10 + 9;
      return last;
  }
  const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
      constructor() {
          super(...arguments);
          this.elementClass = "cm-activeLineGutter";
      }
  };
  const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
      let marks = [], last = -1;
      for (let range of state.selection.ranges) {
          let linePos = state.doc.lineAt(range.head).from;
          if (linePos > last) {
              last = linePos;
              marks.push(activeLineGutterMarker.range(linePos));
          }
      }
      return RangeSet.of(marks);
  });
  /**
  Returns an extension that adds a `cm-activeLineGutter` class to
  all gutter elements on the [active
  line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
  */
  function highlightActiveLineGutter() {
      return activeLineGutterHighlighter;
  }

  /**
  The default maximum length of a `TreeBuffer` node.
  */
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  class Range {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  /**
  Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  can have metadata associated with it in props. Instances of this
  class represent prop names.
  */
  class NodeProp {
      /**
      Create a new node prop type.
      */
      constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
              throw new Error("This node type doesn't define a deserialize function");
          });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match) {
          if (this.perNode)
              throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
              match = NodeType.match(match);
          return (type) => {
              let result = match(type);
              return result === undefined ? null : [this, result];
          };
      }
  }
  /**
  Prop that is used to describe matching delimiters. For opening
  delimiters, this holds an array of node names (written as a
  space-separated string when declaring this prop in a grammar)
  for the node types of closing delimiters that match it.
  */
  NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  attached to closing delimiters, holding an array of node names
  of types of matching opening delimiters.
  */
  NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Used to assign node types to groups (for example, all node
  types that represent an expression could be tagged with an
  `"Expression"` group).
  */
  NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Attached to nodes to indicate these should be
  [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
  in a bidirectional text isolate, so that direction-neutral
  characters on their sides don't incorrectly get associated with
  surrounding text. You'll generally want to set this for nodes
  that contain arbitrary text, like strings and comments, and for
  nodes that appear _inside_ arbitrary text, like HTML tags. When
  not given a value, in a grammar declaration, defaults to
  `"auto"`.
  */
  NodeProp.isolate = new NodeProp({ deserialize: value => {
          if (value && value != "rtl" && value != "ltr" && value != "auto")
              throw new RangeError("Invalid value for isolate: " + value);
          return value || "auto";
      } });
  /**
  The hash of the [context](#lr.ContextTracker.constructor)
  that the node was parsed in, if any. Used to limit reuse of
  contextual nodes.
  */
  NodeProp.contextHash = new NodeProp({ perNode: true });
  /**
  The distance beyond the end of the node that the tokenizer
  looked ahead for any of the tokens inside the node. (The LR
  parser only stores this when it is larger than 25, for
  efficiency reasons.)
  */
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  /**
  This per-node prop is used to replace a given node, or part of a
  node, with another tree. This is useful to include trees from
  different languages in mixed-language parsers.
  */
  NodeProp.mounted = new NodeProp({ perNode: true });
  /**
  A mounted tree, which can be [stored](#common.NodeProp^mounted) on
  a tree node to indicate that parts of its content are
  represented by another tree.
  */
  class MountedTree {
      constructor(
      /**
      The inner tree.
      */
      tree, 
      /**
      If this is null, this tree replaces the entire node (it will
      be included in the regular iteration instead of its host
      node). If not, only the given ranges are considered to be
      covered by this tree. This is used for trees that are mixed in
      a way that isn't strictly hierarchical. Such mounted trees are
      only entered by [`resolveInner`](#common.Tree.resolveInner)
      and [`enter`](#common.SyntaxNode.enter).
      */
      overlay, 
      /**
      The parser used to create this subtree.
      */
      parser) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser;
      }
      /**
      @internal
      */
      static get(tree) {
          return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
  }
  const noProps = Object.create(null);
  /**
  Each node in a syntax tree has a node type associated with it.
  */
  class NodeType {
      /**
      @internal
      */
      constructor(
      /**
      The name of the node type. Not necessarily unique, but if the
      grammar was written properly, different node types with the
      same name within a node set should play the same semantic
      role.
      */
      name, 
      /**
      @internal
      */
      props, 
      /**
      The id of this node in its set. Corresponds to the term ids
      used in the parser.
      */
      id, 
      /**
      @internal
      */
      flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
              (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
              for (let src of spec.props) {
                  if (!Array.isArray(src))
                      src = src(type);
                  if (src) {
                      if (src[0].perNode)
                          throw new RangeError("Can't store a per-node prop on a node type");
                      props[src[0].id] = src[1];
                  }
              }
          return type;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) { return this.props[prop.id]; }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
      /**
      Indicates whether this is an error node.
      */
      get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name) {
          if (typeof name == 'string') {
              if (this.name == name)
                  return true;
              let group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
              for (let name of prop.split(" "))
                  direct[name] = map[prop];
          return (node) => {
              for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                  let found = direct[i < 0 ? node.name : groups[i]];
                  if (found)
                      return found;
              }
          };
      }
  }
  /**
  An empty dummy node type to use when no actual type is available.
  */
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /**
  A node set holds a collection of node types. It is used to
  compactly represent trees by storing their type ids, rather than a
  full pointer to the type object, in a numeric array. Each parser
  [has](#lr.LRParser.nodeSet) a node set, and [tree
  buffers](#common.TreeBuffer) can only store collections of nodes
  from the same set. A set can have a maximum of 2**16 (65536) node
  types in it, so that the ids fit into 16-bit typed array slots.
  */
  class NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(
      /**
      The node types in this set, by id.
      */
      types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
              if (types[i].id != i)
                  throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
              let newProps = null;
              for (let source of props) {
                  let add = source(type);
                  if (add) {
                      if (!newProps)
                          newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                  }
              }
              newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
      }
  }
  const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
  /**
  Options that control iteration. Can be combined with the `|`
  operator to enable multiple ones.
  */
  var IterMode;
  (function (IterMode) {
      /**
      When enabled, iteration will only visit [`Tree`](#common.Tree)
      objects, not nodes packed into
      [`TreeBuffer`](#common.TreeBuffer)s.
      */
      IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      /**
      Enable this to make iteration include anonymous nodes (such as
      the nodes that wrap repeated grammar constructs into a balanced
      tree).
      */
      IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      /**
      By default, regular [mounted](#common.NodeProp^mounted) nodes
      replace their base node in iteration. Enable this to ignore them
      instead.
      */
      IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
      /**
      This option only applies in
      [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
      library to not enter mounted overlays if one covers the given
      position.
      */
      IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /**
  A piece of syntax tree. There are two ways to approach these
  trees: the way they are actually stored in memory, and the
  convenient way.

  Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  objects. By packing detail information into `TreeBuffer` leaf
  nodes, the representation is made a lot more memory-efficient.

  However, when you want to actually work with tree nodes, this
  representation is very awkward, so most client code will want to
  use the [`TreeCursor`](#common.TreeCursor) or
  [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  a view on some part of this data structure, and can be used to
  move around to adjacent nodes.
  */
  class Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(
      /**
      The type of the top node.
      */
      type, 
      /**
      This node's child nodes.
      */
      children, 
      /**
      The positions (offsets relative to the start of this tree) of
      the children.
      */
      positions, 
      /**
      The total length of this tree
      */
      length, 
      /**
      Per-node [node props](#common.NodeProp) to associate with this node.
      */
      props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          /**
          @internal
          */
          this.props = null;
          if (props && props.length) {
              this.props = Object.create(null);
              for (let [prop, value] of props)
                  this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
      }
      /**
      @internal
      */
      toString() {
          let mounted = MountedTree.get(this);
          if (mounted && !mounted.overlay)
              return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
              let str = ch.toString();
              if (str) {
                  if (children)
                      children += ",";
                  children += str;
              }
          }
          return !this.type.name ? children :
              (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                  (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
          return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos, side = 0) {
          return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
          for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
              let entered = false;
              if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                  if (c.firstChild())
                      continue;
                  entered = true;
              }
              for (;;) {
                  if (entered && leave && (anon || !c.type.isAnonymous))
                      leave(c);
                  if (c.nextSibling())
                      break;
                  if (!c.parent())
                      return;
                  entered = true;
              }
          }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
          let result = [];
          if (this.props)
              for (let id in this.props)
                  result.push([+id, this.props[id]]);
          return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config = {}) {
          return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
              balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data) { return buildTree(data); }
  }
  /**
  The empty tree
  */
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
      constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      get pos() { return this.index; }
      next() { this.index -= 4; }
      fork() { return new FlatBufferCursor(this.buffer, this.index); }
  }
  /**
  Tree buffers contain (type, start, end, endIndex) quads for each
  node. In such a buffer, nodes are stored in prefix order (parents
  before children, with the endIndex of the parent indicating which
  children belong to it).
  */
  class TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(
      /**
      The buffer's content.
      */
      buffer, 
      /**
      The total length of the group of nodes in the buffer.
      */
      length, 
      /**
      The node set used in this buffer.
      */
      set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
      }
      /**
      @internal
      */
      get type() { return NodeType.none; }
      /**
      @internal
      */
      toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
              result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
              return result;
          let children = [];
          while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
              if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                  pick = i;
                  if (dir > 0)
                      break;
              }
          }
          return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI), len = 0;
          for (let i = startI, j = 0; i < endI;) {
              copy[j++] = b[i++];
              copy[j++] = b[i++] - from;
              let to = copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - startI;
              len = Math.max(len, to);
          }
          return new TreeBuffer(copy, len, this.set);
      }
  }
  function checkSide(side, pos, from, to) {
      switch (side) {
          case -2 /* Side.Before */: return from < pos;
          case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
          case 0 /* Side.Around */: return from < pos && to > pos;
          case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
          case 2 /* Side.After */: return to > pos;
          case 4 /* Side.DontCare */: return true;
      }
  }
  function resolveNode(node, pos, side, overlays) {
      var _a;
      // Move up to a node that actually holds the position, if possible
      while (node.from == node.to ||
          (side < 1 ? node.from >= pos : node.from > pos) ||
          (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
              return node;
          node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      // Must go up out of overlays when those do not overlap with pos
      if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
              if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                  node = parent;
          }
      for (;;) {
          let inner = node.enter(pos, side, mode);
          if (!inner)
              return node;
          node = inner;
      }
  }
  class BaseNode {
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      matchContext(context) {
          return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos) {
          let scan = this.childBefore(pos), node = this;
          while (scan) {
              let last = scan.lastChild;
              if (!last || last.to != scan.to)
                  break;
              if (last.type.isError && last.from == last.to) {
                  node = scan;
                  scan = last.prevSibling;
              }
              else {
                  scan = last;
              }
          }
          return node;
      }
      get node() { return this; }
      get next() { return this.parent; }
  }
  class TreeNode extends BaseNode {
      constructor(_tree, from, 
      // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
      index, _parent) {
          super();
          this._tree = _tree;
          this.from = from;
          this.index = index;
          this._parent = _parent;
      }
      get type() { return this._tree.type; }
      get name() { return this._tree.type.name; }
      get to() { return this.from + this._tree.length; }
      nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this;;) {
              for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                  let next = children[i], start = positions[i] + parent.from;
                  if (!checkSide(side, pos, start, start + next.length))
                      continue;
                  if (next instanceof TreeBuffer) {
                      if (mode & IterMode.ExcludeBuffers)
                          continue;
                      let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                      if (index > -1)
                          return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                  }
                  else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                      let mounted;
                      if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                          return new TreeNode(mounted.tree, start, i, parent);
                      let inner = new TreeNode(next, start, i, parent);
                      return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                          : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                  }
              }
              if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                  return null;
              if (parent.index >= 0)
                  i = parent.index + dir;
              else
                  i = dir < 0 ? -1 : parent._parent._tree.children.length;
              parent = parent._parent;
              if (!parent)
                  return null;
          }
      }
      get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
              let rPos = pos - this.from;
              for (let { from, to } of mounted.overlay) {
                  if ((side > 0 ? from <= rPos : from < rPos) &&
                      (side < 0 ? to >= rPos : to > rPos))
                      return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
              }
          }
          return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
              val = val._parent;
          return val;
      }
      get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
      }
      get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
      }
      get tree() { return this._tree; }
      toTree() { return this._tree; }
      /**
      @internal
      */
      toString() { return this._tree.toString(); }
  }
  function getChildren(node, type, before, after) {
      let cur = node.cursor(), result = [];
      if (!cur.firstChild())
          return result;
      if (before != null)
          for (let found = false; !found;) {
              found = cur.type.is(before);
              if (!cur.nextSibling())
                  return result;
          }
      for (;;) {
          if (after != null && cur.type.is(after))
              return result;
          if (cur.type.is(type))
              result.push(cur.node);
          if (!cur.nextSibling())
              return after == null ? result : [];
      }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
      for (let p = node; i >= 0; p = p.parent) {
          if (!p)
              return false;
          if (!p.type.isAnonymous) {
              if (context[i] && context[i] != p.name)
                  return false;
              i--;
          }
      }
      return true;
  }
  class BufferContext {
      constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
      }
  }
  class BufferNode extends BaseNode {
      get name() { return this.type.name; }
      get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
      get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
      constructor(context, _parent, index) {
          super();
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
              return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
      }
      get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
              return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
      }
      get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
              return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      }
      get tree() { return null; }
      toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
              let from = buffer.buffer[this.index + 1];
              children.push(buffer.slice(startI, endI, from));
              positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() { return this.context.buffer.childString(this.index); }
  }
  function iterStack(heads) {
      if (!heads.length)
          return null;
      let pick = 0, picked = heads[0];
      for (let i = 1; i < heads.length; i++) {
          let node = heads[i];
          if (node.from > picked.from || node.to < picked.to) {
              picked = node;
              pick = i;
          }
      }
      let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
      let newHeads = heads.slice();
      if (next)
          newHeads[pick] = next;
      else
          newHeads.splice(pick, 1);
      return new StackIterator(newHeads, picked);
  }
  class StackIterator {
      constructor(heads, node) {
          this.heads = heads;
          this.node = node;
      }
      get next() { return iterStack(this.heads); }
  }
  function stackIterator(tree, pos, side) {
      let inner = tree.resolveInner(pos, side), layers = null;
      for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
          if (scan.index < 0) { // This is an overlay root
              let parent = scan.parent;
              (layers || (layers = [inner])).push(parent.resolve(pos, side));
              scan = parent;
          }
          else {
              let mount = MountedTree.get(scan.tree);
              // Relevant overlay branching off
              if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                  let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                  (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
              }
          }
      }
      return layers ? iterStack(layers) : inner;
  }
  /**
  A tree cursor object focuses on a given node in a syntax tree, and
  allows you to move to adjacent nodes.
  */
  class TreeCursor {
      /**
      Shorthand for `.type.name`.
      */
      get name() { return this.type.name; }
      /**
      @internal
      */
      constructor(node, 
      /**
      @internal
      */
      mode = 0) {
          this.mode = mode;
          /**
          @internal
          */
          this.buffer = null;
          this.stack = [];
          /**
          @internal
          */
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
              this.yieldNode(node);
          }
          else {
              this._tree = node.context.parent;
              this.buffer = node.context;
              for (let n = node._parent; n; n = n._parent)
                  this.stack.unshift(n.index);
              this.bufferNode = node;
              this.yieldBuf(node.index);
          }
      }
      yieldNode(node) {
          if (!node)
              return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
      }
      yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
      }
      /**
      @internal
      */
      yield(node) {
          if (!node)
              return false;
          if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos, side) {
          if (!this.buffer)
              return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
              return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos, side, mode = this.mode) {
          if (!this.buffer)
              return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
          if (!this.buffer)
              return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
              return this.yieldBuf(this.stack.pop());
          let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
          if (!this.buffer)
              return !this._tree._parent ? false
                  : this.yield(this._tree.index < 0 ? null
                      : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
              let parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart)
                  return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
          }
          else {
              let after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                  return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() { return this.sibling(1); }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() { return this.sibling(-1); }
      atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
              if (dir > 0) {
                  if (this.index < buffer.buffer.buffer.length)
                      return false;
              }
              else {
                  for (let i = 0; i < this.index; i++)
                      if (buffer.buffer.buffer[i + 3] < this.index)
                          return false;
              }
              ({ index, parent } = buffer);
          }
          else {
              ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
              if (index > -1)
                  for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                      let child = parent._tree.children[i];
                      if ((this.mode & IterMode.IncludeAnonymous) ||
                          child instanceof TreeBuffer ||
                          !child.type.isAnonymous ||
                          hasChild(child))
                          return false;
                  }
          }
          return true;
      }
      move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
              return true;
          for (;;) {
              if (this.sibling(dir))
                  return true;
              if (this.atLastNode(dir) || !this.parent())
                  return false;
          }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) { return this.move(1, enter); }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) { return this.move(-1, enter); }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos, side = 0) {
          // Move up to a node that actually holds the position, if possible
          while (this.from == this.to ||
              (side < 1 ? this.from >= pos : this.from > pos) ||
              (side > -1 ? this.to <= pos : this.to < pos))
              if (!this.parent())
                  break;
          // Then scan down into child nodes as far as possible
          while (this.enterChild(1, pos, side)) { }
          return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
          if (!this.buffer)
              return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
              scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                  for (let c = cache; c; c = c._parent)
                      if (c.index == index) {
                          if (index == this.index)
                              return c;
                          result = c;
                          depth = d + 1;
                          break scan;
                      }
                  index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
              result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
          return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
          for (let depth = 0;;) {
              let mustLeave = false;
              if (this.type.isAnonymous || enter(this) !== false) {
                  if (this.firstChild()) {
                      depth++;
                      continue;
                  }
                  if (!this.type.isAnonymous)
                      mustLeave = true;
              }
              for (;;) {
                  if (mustLeave && leave)
                      leave(this);
                  mustLeave = this.type.isAnonymous;
                  if (!depth)
                      return;
                  if (this.nextSibling())
                      break;
                  this.parent();
                  depth--;
                  mustLeave = true;
              }
          }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
          if (!this.buffer)
              return matchNodeContext(this.node.parent, context);
          let { buffer } = this.buffer, { types } = buffer.set;
          for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
              if (d < 0)
                  return matchNodeContext(this._tree, context, i);
              let type = types[buffer.buffer[this.stack[d]]];
              if (!type.isAnonymous) {
                  if (context[i] && context[i] != type.name)
                      return false;
                  i--;
              }
          }
          return true;
      }
  }
  function hasChild(tree) {
      return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
      var _a;
      let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
      let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
      let types = nodeSet.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
          while (size < 0) {
              cursor.next();
              if (size == -1 /* SpecialRecord.Reuse */) {
                  let node = reused[id];
                  children.push(node);
                  positions.push(start - parentStart);
                  return;
              }
              else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                  contextHash = id;
                  return;
              }
              else if (size == -4 /* SpecialRecord.LookAhead */) {
                  lookAhead = id;
                  return;
              }
              else {
                  throw new RangeError(`Unrecognized record size: ${size}`);
              }
          }
          let type = types[id], node, buffer;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
              // Small enough for a buffer, and no reused nodes inside
              let data = new Uint16Array(buffer.size - buffer.skip);
              let endPos = cursor.pos - buffer.size, index = data.length;
              while (cursor.pos > endPos)
                  index = copyToBuffer(buffer.start, data, index);
              node = new TreeBuffer(data, end - buffer.start, nodeSet);
              startPos = buffer.start - parentStart;
          }
          else { // Make it a node
              let endPos = cursor.pos - size;
              cursor.next();
              let localChildren = [], localPositions = [];
              let localInRepeat = id >= minRepeatType ? id : -1;
              let lastGroup = 0, lastEnd = end;
              while (cursor.pos > endPos) {
                  if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                      if (cursor.end <= lastEnd - maxBufferLength) {
                          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                          lastGroup = localChildren.length;
                          lastEnd = cursor.end;
                      }
                      cursor.next();
                  }
                  else if (depth > 2500 /* CutOff.Depth */) {
                      takeFlatNode(start, endPos, localChildren, localPositions);
                  }
                  else {
                      takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                  }
              }
              if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              localChildren.reverse();
              localPositions.reverse();
              if (localInRepeat > -1 && lastGroup > 0) {
                  let make = makeBalanced(type, contextAtStart);
                  node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
              }
              else {
                  node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
              }
          }
          children.push(node);
          positions.push(startPos);
      }
      function takeFlatNode(parentStart, minPos, children, positions) {
          let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
          let nodeCount = 0, stopAt = -1;
          while (cursor.pos > minPos) {
              let { id, start, end, size } = cursor;
              if (size > 4) { // Not a leaf
                  cursor.next();
              }
              else if (stopAt > -1 && start < stopAt) {
                  break;
              }
              else {
                  if (stopAt < 0)
                      stopAt = end - maxBufferLength;
                  nodes.push(id, start, end);
                  nodeCount++;
                  cursor.next();
              }
          }
          if (nodeCount) {
              let buffer = new Uint16Array(nodeCount * 4);
              let start = nodes[nodes.length - 2];
              for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                  buffer[j++] = nodes[i];
                  buffer[j++] = nodes[i + 1] - start;
                  buffer[j++] = nodes[i + 2] - start;
                  buffer[j++] = j;
              }
              children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
              positions.push(start - parentStart);
          }
      }
      function makeBalanced(type, contextHash) {
          return (children, positions, length) => {
              let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
              if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                  if (!lastI && last.type == type && last.length == length)
                      return last;
                  if (lookAheadProp = last.prop(NodeProp.lookAhead))
                      lookAhead = positions[lastI] + last.length + lookAheadProp;
              }
              return makeTree(type, children, positions, length, lookAhead, contextHash);
          };
      }
      function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
          let localChildren = [], localPositions = [];
          while (children.length > i) {
              localChildren.push(children.pop());
              localPositions.push(positions.pop() + base - from);
          }
          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
          positions.push(from - base);
      }
      function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
          if (contextHash) {
              let pair = [NodeProp.contextHash, contextHash];
              props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead > 25) {
              let pair = [NodeProp.lookAhead, lookAhead];
              props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children, positions, length, props);
      }
      function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
              let nodeSize = fork.size;
              // Pretend nested repeat nodes of the same type don't exist
              if (fork.id == inRepeat && nodeSize >= 0) {
                  // Except that we store the current state as a valid return
                  // value.
                  result.size = size;
                  result.start = start;
                  result.skip = skip;
                  skip += 4;
                  size += 4;
                  fork.next();
                  continue;
              }
              let startPos = fork.pos - nodeSize;
              if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                  break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                  if (fork.size < 0) {
                      if (fork.size == -3 /* SpecialRecord.ContextChange */)
                          localSkipped += 4;
                      else
                          break scan;
                  }
                  else if (fork.id >= minRepeatType) {
                      localSkipped += 4;
                  }
                  fork.next();
              }
              start = nodeStart;
              size += nodeSize;
              skip += localSkipped;
          }
          if (inRepeat < 0 || size == maxSize) {
              result.size = size;
              result.start = start;
              result.skip = skip;
          }
          return result.size > 4 ? result : undefined;
      }
      function copyToBuffer(bufferStart, buffer, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
              let startIndex = index;
              if (size > 4) {
                  let endPos = cursor.pos - (size - 4);
                  while (cursor.pos > endPos)
                      index = copyToBuffer(bufferStart, buffer, index);
              }
              buffer[--index] = startIndex;
              buffer[--index] = end - bufferStart;
              buffer[--index] = start - bufferStart;
              buffer[--index] = id;
          }
          else if (size == -3 /* SpecialRecord.ContextChange */) {
              contextHash = id;
          }
          else if (size == -4 /* SpecialRecord.LookAhead */) {
              lookAhead = id;
          }
          return index;
      }
      let children = [], positions = [];
      while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
      let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
      return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap;
  function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
          size = 1;
          for (let child of node.children) {
              if (child.type != balanceType || !(child instanceof Tree)) {
                  size = 1;
                  break;
              }
              size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
      }
      return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType, 
  // The direct children and their positions
  children, positions, 
  // The index range in children/positions to use
  from, to, 
  // The start position of the nodes, relative to their parent.
  start, 
  // Length of the outer node
  length, 
  // Function to build the top node of the balanced tree
  mkTop, 
  // Function to build internal nodes for the balanced tree
  mkTree) {
      let total = 0;
      for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
      let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
      let localChildren = [], localPositions = [];
      function divide(children, positions, from, to, offset) {
          for (let i = from; i < to;) {
              let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
              i++;
              for (; i < to; i++) {
                  let nextSize = nodeSize(balanceType, children[i]);
                  if (groupSize + nextSize >= maxChild)
                      break;
                  groupSize += nextSize;
              }
              if (i == groupFrom + 1) {
                  if (groupSize > maxChild) {
                      let only = children[groupFrom]; // Only trees can have a size > 1
                      divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                      continue;
                  }
                  localChildren.push(children[groupFrom]);
              }
              else {
                  let length = positions[i - 1] + children[i - 1].length - groupStart;
                  localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
              }
              localPositions.push(groupStart + offset - start);
          }
      }
      divide(children, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
  }

  /**
  Tree fragments are used during [incremental
  parsing](#common.Parser.startParse) to track parts of old trees
  that can be reused in a new parse. An array of fragments is used
  to track regions of an old tree whose nodes might be reused in new
  parses. Use the static
  [`applyChanges`](#common.TreeFragment^applyChanges) method to
  update fragments for document changes.
  */
  class TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(
      /**
      The start of the unchanged range pointed to by this fragment.
      This refers to an offset in the _updated_ document (as opposed
      to the original tree).
      */
      from, 
      /**
      The end of the unchanged range.
      */
      to, 
      /**
      The tree that this fragment is based on.
      */
      tree, 
      /**
      The offset between the fragment's tree and the document that
      this fragment can be used against. Add this when going from
      document to tree positions, subtract it to go from tree to
      document positions.
      */
      offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
              if (f.to > tree.length)
                  result.push(f);
          return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
              return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0;; cI++) {
              let nextC = cI < changes.length ? changes[cI] : null;
              let nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap)
                  while (nextF && nextF.from < nextPos) {
                      let cut = nextF;
                      if (pos >= cut.from || nextPos <= cut.to || off) {
                          let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                      }
                      if (cut)
                          result.push(cut);
                      if (nextF.to > nextPos)
                          break;
                      nextF = fI < fragments.length ? fragments[fI++] : null;
                  }
              if (!nextC)
                  break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
          }
          return result;
      }
  }
  /**
  A superclass that parsers should extend.
  */
  let Parser$2 = class Parser {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
          if (typeof input == "string")
              input = new StringInput(input);
          ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
          return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (;;) {
              let done = parse.advance();
              if (done)
                  return done;
          }
      }
  };
  class StringInput {
      constructor(string) {
          this.string = string;
      }
      get length() { return this.string.length; }
      chunk(from) { return this.string.slice(from); }
      get lineChunks() { return false; }
      read(from, to) { return this.string.slice(from, to); }
  }
  new NodeProp({ perNode: true });

  let nextTagID = 0;
  /**
  Highlighting tags are markers that denote a highlighting category.
  They are [associated](#highlight.styleTags) with parts of a syntax
  tree by a language mode, and then mapped to an actual CSS style by
  a [highlighter](#highlight.Highlighter).

  Because syntax tree node types and highlight styles have to be
  able to talk the same language, CodeMirror uses a mostly _closed_
  [vocabulary](#highlight.tags) of syntax tags (as opposed to
  traditional open string-based systems, which make it hard for
  highlighting themes to cover all the tokens produced by the
  various languages).

  It _is_ possible to [define](#highlight.Tag^define) your own
  highlighting tags for system-internal use (where you control both
  the language package and the highlighter), but such tags will not
  be picked up by regular highlighters (though you can derive them
  from standard tags to allow highlighters to fall back to those).
  */
  class Tag {
      /**
      @internal
      */
      constructor(
      /**
      The optional name of the base tag @internal
      */
      name, 
      /**
      The set of this tag and all its parent tags, starting with
      this one itself and sorted in order of decreasing specificity.
      */
      set, 
      /**
      The base unmodified tag that this one is based on, if it's
      modified @internal
      */
      base, 
      /**
      The modifiers applied to this.base @internal
      */
      modified) {
          this.name = name;
          this.set = set;
          this.base = base;
          this.modified = modified;
          /**
          @internal
          */
          this.id = nextTagID++;
      }
      toString() {
          let { name } = this;
          for (let mod of this.modified)
              if (mod.name)
                  name = `${mod.name}(${name})`;
          return name;
      }
      static define(nameOrParent, parent) {
          let name = typeof nameOrParent == "string" ? nameOrParent : "?";
          if (nameOrParent instanceof Tag)
              parent = nameOrParent;
          if (parent === null || parent === void 0 ? void 0 : parent.base)
              throw new Error("Can not derive from a modified tag");
          let tag = new Tag(name, [], null, []);
          tag.set.push(tag);
          if (parent)
              for (let t of parent.set)
                  tag.set.push(t);
          return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name) {
          let mod = new Modifier(name);
          return (tag) => {
              if (tag.modified.indexOf(mod) > -1)
                  return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
      }
  }
  let nextModifierID = 0;
  class Modifier {
      constructor(name) {
          this.name = name;
          this.instances = [];
          this.id = nextModifierID++;
      }
      static get(base, mods) {
          if (!mods.length)
              return base;
          let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
          if (exists)
              return exists;
          let set = [], tag = new Tag(base.name, set, base, mods);
          for (let m of mods)
              m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base.set)
              if (!parent.modified.length)
                  for (let config of configs)
                      set.push(Modifier.get(parent, config));
          return tag;
      }
  }
  function sameArray(a, b) {
      return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
      let sets = [[]];
      for (let i = 0; i < array.length; i++) {
          for (let j = 0, e = sets.length; j < e; j++) {
              sets.push(sets[j].concat(array[i]));
          }
      }
      return sets.sort((a, b) => b.length - a.length);
  }
  /**
  This function is used to add a set of tags to a language syntax
  via [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.LRParser.configure).

  The argument object maps node selectors to [highlighting
  tags](#highlight.Tag) or arrays of tags.

  Node selectors may hold one or more (space-separated) node paths.
  Such a path can be a [node name](#common.NodeType.name), or
  multiple node names (or `*` wildcards) separated by slash
  characters, as in `"Block/Declaration/VariableName"`. Such a path
  matches the final node but only if its direct parent nodes are the
  other nodes mentioned. A `*` in such a path matches any parent,
  but only a single level—wildcards that match multiple parents
  aren't supported, both for efficiency reasons and because Lezer
  trees make it rather hard to reason about what they would match.)

  A path can be ended with `/...` to indicate that the tag assigned
  to the node should also apply to all child nodes, even if they
  match their own style (by default, only the innermost style is
  used).

  When a path ends in `!`, as in `Attribute!`, no further matching
  happens for the node's child nodes, and the entire node gets the
  given style.

  In this notation, node names that contain `/`, `!`, `*`, or `...`
  must be quoted as JSON strings.

  For example:

  ```javascript
  parser.withProps(
    styleTags({
      // Style Number and BigNumber nodes
      "Number BigNumber": tags.number,
      // Style Escape nodes whose parent is String
      "String/Escape": tags.escape,
      // Style anything inside Attributes nodes
      "Attributes!": tags.meta,
      // Add a style to all content inside Italic nodes
      "Italic/...": tags.emphasis,
      // Style InvalidString nodes as both `string` and `invalid`
      "InvalidString": [tags.string, tags.invalid],
      // Style the node named "/" as punctuation
      '"/"': tags.punctuation
    })
  )
  ```
  */
  function styleTags(spec) {
      let byName = Object.create(null);
      for (let prop in spec) {
          let tags = spec[prop];
          if (!Array.isArray(tags))
              tags = [tags];
          for (let part of prop.split(" "))
              if (part) {
                  let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                  for (let pos = 0;;) {
                      if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                          mode = 1 /* Mode.Inherit */;
                          break;
                      }
                      let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                      if (!m)
                          throw new RangeError("Invalid path: " + part);
                      pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                      pos += m[0].length;
                      if (pos == part.length)
                          break;
                      let next = part[pos++];
                      if (pos == part.length && next == "!") {
                          mode = 0 /* Mode.Opaque */;
                          break;
                      }
                      if (next != "/")
                          throw new RangeError("Invalid path: " + part);
                      rest = part.slice(pos);
                  }
                  let last = pieces.length - 1, inner = pieces[last];
                  if (!inner)
                      throw new RangeError("Invalid path: " + part);
                  let rule = new Rule$1(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                  byName[inner] = rule.sort(byName[inner]);
              }
      }
      return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  let Rule$1 = class Rule {
      constructor(tags, mode, context, next) {
          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
      }
      get opaque() { return this.mode == 0 /* Mode.Opaque */; }
      get inherit() { return this.mode == 1 /* Mode.Inherit */; }
      sort(other) {
          if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
          }
          other.next = this.sort(other.next);
          return other;
      }
      get depth() { return this.context ? this.context.length : 0; }
  };
  Rule$1.empty = new Rule$1([], 2 /* Mode.Normal */, null);
  /**
  Define a [highlighter](#highlight.Highlighter) from an array of
  tag/class pairs. Classes associated with more specific tags will
  take precedence.
  */
  function tagHighlighter(tags, options) {
      let map = Object.create(null);
      for (let style of tags) {
          if (!Array.isArray(style.tag))
              map[style.tag.id] = style.class;
          else
              for (let tag of style.tag)
                  map[tag.id] = style.class;
      }
      let { scope, all = null } = options || {};
      return {
          style: (tags) => {
              let cls = all;
              for (let tag of tags) {
                  for (let sub of tag.set) {
                      let tagClass = map[sub.id];
                      if (tagClass) {
                          cls = cls ? cls + " " + tagClass : tagClass;
                          break;
                      }
                  }
              }
              return cls;
          },
          scope
      };
  }
  function highlightTags(highlighters, tags) {
      let result = null;
      for (let highlighter of highlighters) {
          let value = highlighter.style(tags);
          if (value)
              result = result ? result + " " + value : value;
      }
      return result;
  }
  /**
  Highlight the given [tree](#common.Tree) with the given
  [highlighter](#highlight.Highlighter). Often, the higher-level
  [`highlightCode`](#highlight.highlightCode) function is easier to
  use.
  */
  function highlightTree(tree, highlighter, 
  /**
  Assign styling to a region of the text. Will be called, in order
  of position, for any ranges where more than zero classes apply.
  `classes` is a space separated string of CSS classes.
  */
  putStyle, 
  /**
  The start of the range to highlight.
  */
  from = 0, 
  /**
  The end of the range.
  */
  to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
  }
  class HighlightBuilder {
      constructor(at, highlighters, span) {
          this.at = at;
          this.highlighters = highlighters;
          this.span = span;
          this.class = "";
      }
      startSpan(at, cls) {
          if (cls != this.class) {
              this.flush(at);
              if (at > this.at)
                  this.at = at;
              this.class = cls;
          }
      }
      flush(to) {
          if (to > this.at && this.class)
              this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
              return;
          if (type.isTop)
              highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
          let cls = inheritedClass;
          let rule = getStyleTags(cursor) || Rule$1.empty;
          let tagCls = highlightTags(highlighters, rule.tags);
          if (tagCls) {
              if (cls)
                  cls += " ";
              cls += tagCls;
              if (rule.mode == 1 /* Mode.Inherit */)
                  inheritedClass += (inheritedClass ? " " : "") + tagCls;
          }
          this.startSpan(Math.max(from, start), cls);
          if (rule.opaque)
              return;
          let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
          if (mounted && mounted.overlay) {
              let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
              let hasChild = cursor.firstChild();
              for (let i = 0, pos = start;; i++) {
                  let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                  let nextPos = next ? next.from + start : end;
                  let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                  if (rangeFrom < rangeTo && hasChild) {
                      while (cursor.from < rangeTo) {
                          this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                          this.startSpan(Math.min(rangeTo, cursor.to), cls);
                          if (cursor.to >= nextPos || !cursor.nextSibling())
                              break;
                      }
                  }
                  if (!next || nextPos > to)
                      break;
                  pos = next.to + start;
                  if (pos > from) {
                      this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                      this.startSpan(Math.min(to, pos), cls);
                  }
              }
              if (hasChild)
                  cursor.parent();
          }
          else if (cursor.firstChild()) {
              if (mounted)
                  inheritedClass = "";
              do {
                  if (cursor.to <= from)
                      continue;
                  if (cursor.from >= to)
                      break;
                  this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                  this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());
              cursor.parent();
          }
      }
  }
  /**
  Match a syntax node's [highlight rules](#highlight.styleTags). If
  there's a match, return its set of tags, and whether it is
  opaque (uses a `!`) or applies to all child nodes (`/...`).
  */
  function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
          rule = rule.next;
      return rule || null;
  }
  const t = Tag.define;
  const comment$2 = t(), name = t(), typeName = t(name), propertyName = t(name), literal$1 = t(), string$1 = t(literal$1), number$1 = t(literal$1), content = t(), heading$1 = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
  /**
  The default set of highlighting [tags](#highlight.Tag).

  This collection is heavily biased towards programming languages,
  and necessarily incomplete. A full ontology of syntactic
  constructs would fill a stack of books, and be impractical to
  write themes for. So try to make do with this set. If all else
  fails, [open an
  issue](https://github.com/codemirror/codemirror.next) to propose a
  new tag, or [define](#highlight.Tag^define) a local custom tag for
  your use case.

  Note that it is not obligatory to always attach the most specific
  tag possible to an element—if your grammar can't easily
  distinguish a certain type of element (such as a local variable),
  it is okay to style it as its more general variant (a variable).

  For tags that extend some parent tag, the documentation links to
  the parent.
  */
  const tags = {
      /**
      A comment.
      */
      comment: comment$2,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment$2),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment$2),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment$2),
      /**
      Any kind of identifier.
      */
      name,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName: typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName: propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name),
      /**
      A literal value.
      */
      literal: literal$1,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string: string$1,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string$1),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string$1),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string$1),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number: number$1,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number$1),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number$1),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal$1),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal$1),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal$1),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal$1),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal$1),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading: heading$1,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading$1),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading$1),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading$1),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading$1),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading$1),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading$1),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag.defineModifier("special")
  };
  for (let name in tags) {
      let val = tags[name];
      if (val instanceof Tag)
          val.name = name;
  }
  /**
  This is a highlighter that adds stable, predictable classes to
  tokens, for styling with external CSS.

  The following tags are mapped to their name prefixed with `"tok-"`
  (for example `"tok-comment"`):

  * [`link`](#highlight.tags.link)
  * [`heading`](#highlight.tags.heading)
  * [`emphasis`](#highlight.tags.emphasis)
  * [`strong`](#highlight.tags.strong)
  * [`keyword`](#highlight.tags.keyword)
  * [`atom`](#highlight.tags.atom)
  * [`bool`](#highlight.tags.bool)
  * [`url`](#highlight.tags.url)
  * [`labelName`](#highlight.tags.labelName)
  * [`inserted`](#highlight.tags.inserted)
  * [`deleted`](#highlight.tags.deleted)
  * [`literal`](#highlight.tags.literal)
  * [`string`](#highlight.tags.string)
  * [`number`](#highlight.tags.number)
  * [`variableName`](#highlight.tags.variableName)
  * [`typeName`](#highlight.tags.typeName)
  * [`namespace`](#highlight.tags.namespace)
  * [`className`](#highlight.tags.className)
  * [`macroName`](#highlight.tags.macroName)
  * [`propertyName`](#highlight.tags.propertyName)
  * [`operator`](#highlight.tags.operator)
  * [`comment`](#highlight.tags.comment)
  * [`meta`](#highlight.tags.meta)
  * [`punctuation`](#highlight.tags.punctuation)
  * [`invalid`](#highlight.tags.invalid)

  In addition, these mappings are provided:

  * [`regexp`](#highlight.tags.regexp),
    [`escape`](#highlight.tags.escape), and
    [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    are mapped to `"tok-string2"`
  * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName2"`
  * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-local"`
  * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-definition"`
  * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    to `"tok-propertyName tok-definition"`
  */
  tagHighlighter([
      { tag: tags.link, class: "tok-link" },
      { tag: tags.heading, class: "tok-heading" },
      { tag: tags.emphasis, class: "tok-emphasis" },
      { tag: tags.strong, class: "tok-strong" },
      { tag: tags.keyword, class: "tok-keyword" },
      { tag: tags.atom, class: "tok-atom" },
      { tag: tags.bool, class: "tok-bool" },
      { tag: tags.url, class: "tok-url" },
      { tag: tags.labelName, class: "tok-labelName" },
      { tag: tags.inserted, class: "tok-inserted" },
      { tag: tags.deleted, class: "tok-deleted" },
      { tag: tags.literal, class: "tok-literal" },
      { tag: tags.string, class: "tok-string" },
      { tag: tags.number, class: "tok-number" },
      { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
      { tag: tags.variableName, class: "tok-variableName" },
      { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
      { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
      { tag: tags.special(tags.variableName), class: "tok-variableName2" },
      { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags.typeName, class: "tok-typeName" },
      { tag: tags.namespace, class: "tok-namespace" },
      { tag: tags.className, class: "tok-className" },
      { tag: tags.macroName, class: "tok-macroName" },
      { tag: tags.propertyName, class: "tok-propertyName" },
      { tag: tags.operator, class: "tok-operator" },
      { tag: tags.comment, class: "tok-comment" },
      { tag: tags.meta, class: "tok-meta" },
      { tag: tags.invalid, class: "tok-invalid" },
      { tag: tags.punctuation, class: "tok-punctuation" }
  ]);

  var _a$2;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  const languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
      return Facet.define({
          combine: baseData ? values => values.concat(baseData) : undefined
      });
  }
  /**
  Syntax node prop used to register sublanguages. Should be added to
  the top level node type for the language.
  */
  const sublanguageProp = /*@__PURE__*/new NodeProp();
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  class Language {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(
      /**
      The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
      used for this language.
      */
      data, parser, extraExtensions = [], 
      /**
      A language name.
      */
      name = "") {
          this.data = data;
          this.name = name;
          // Kludge to define EditorState.tree as a debugging helper,
          // without the EditorState package actually knowing about
          // languages and lezer trees.
          if (!EditorState.prototype.hasOwnProperty("tree"))
              Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
          this.parser = parser;
          this.extension = [
              language.of(this),
              EditorState.languageData.of((state, pos, side) => {
                  let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                  if (!data)
                      return [];
                  let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                  if (sub) {
                      let innerNode = top.resolve(pos - top.from, side);
                      for (let sublang of sub)
                          if (sublang.test(innerNode, state)) {
                              let data = state.facet(sublang.facet);
                              return sublang.type == "replace" ? data : data.concat(base);
                          }
                  }
                  return base;
              })
          ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos, side = -1) {
          return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
          let lang = state.facet(language);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
              return [{ from: 0, to: state.doc.length }];
          if (!lang || !lang.allowsNesting)
              return [];
          let result = [];
          let explore = (tree, from) => {
              if (tree.prop(languageDataProp) == this.data) {
                  result.push({ from, to: from + tree.length });
                  return;
              }
              let mount = tree.prop(NodeProp.mounted);
              if (mount) {
                  if (mount.tree.prop(languageDataProp) == this.data) {
                      if (mount.overlay)
                          for (let r of mount.overlay)
                              result.push({ from: r.from + from, to: r.to + from });
                      else
                          result.push({ from: from, to: from + tree.length });
                      return;
                  }
                  else if (mount.overlay) {
                      let size = result.length;
                      explore(mount.tree, mount.overlay[0].from + from);
                      if (result.length > size)
                          return;
                  }
              }
              for (let i = 0; i < tree.children.length; i++) {
                  let ch = tree.children[i];
                  if (ch instanceof Tree)
                      explore(ch, tree.positions[i] + from);
              }
          };
          explore(syntaxTree(state), 0);
          return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() { return true; }
  }
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function topNodeAt(state, pos, side) {
      let topLang = state.facet(language), tree = syntaxTree(state).topNode;
      if (!topLang || topLang.allowsNesting) {
          for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
              if (node.type.isTop)
                  tree = node;
      }
      return tree;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  class LRLanguage extends Language {
      constructor(data, parser, name) {
          super(data, parser, [], name);
          this.parser = parser;
      }
      /**
      Define a language from a parser.
      */
      static define(spec) {
          let data = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data, spec.parser.configure({
              props: [languageDataProp.add(type => type.isTop ? data : undefined)]
          }), spec.name);
      }
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      configure(options, name) {
          return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
      get allowsNesting() { return this.parser.hasWrappers(); }
  }
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
      let field = state.field(Language.state, false);
      return field ? field.tree : Tree.empty;
  }
  /**
  Lezer-style
  [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
  object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
  */
  class DocInput {
      /**
      Create an input object for the given document.
      */
      constructor(doc) {
          this.doc = doc;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
      }
      get length() { return this.doc.length; }
      syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
      }
      chunk(pos) {
          this.syncTo(pos);
          return this.string;
      }
      get lineChunks() { return true; }
      read(from, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from < stringStart || to >= this.cursorPos)
              return this.doc.sliceString(from, to);
          else
              return this.string.slice(from - stringStart, to - stringStart);
      }
  }
  let currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  class ParseContext {
      constructor(parser, 
      /**
      The current editor state.
      */
      state, 
      /**
      Tree fragments that can be reused by incremental re-parses.
      */
      fragments = [], 
      /**
      @internal
      */
      tree, 
      /**
      @internal
      */
      treeLen, 
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport, 
      /**
      @internal
      */
      skipped, 
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn) {
          this.parser = parser;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          /**
          @internal
          */
          this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser, state, viewport) {
          return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
      startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
          if (upto != null && upto >= this.state.doc.length)
              upto = undefined;
          if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
              this.takeTree();
              return true;
          }
          return this.withContext(() => {
              var _a;
              if (typeof until == "number") {
                  let endTime = Date.now() + until;
                  until = () => Date.now() > endTime;
              }
              if (!this.parse)
                  this.parse = this.startParse();
              if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                  upto < this.state.doc.length)
                  this.parse.stopAt(upto);
              for (;;) {
                  let done = this.parse.advance();
                  if (done) {
                      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                      this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                      this.tree = done;
                      this.parse = null;
                      if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                          this.parse = this.startParse();
                      else
                          return true;
                  }
                  if (until())
                      return false;
              }
          });
      }
      /**
      @internal
      */
      takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
              if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                  this.parse.stopAt(pos);
              this.withContext(() => { while (!(tree = this.parse.advance())) { } });
              this.treeLen = pos;
              this.tree = tree;
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
              this.parse = null;
          }
      }
      withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
              return f();
          }
          finally {
              currentContext = prev;
          }
      }
      withoutTempSkipped(fragments) {
          for (let r; r = this.tempSkipped.pop();)
              fragments = cutFragments(fragments, r.from, r.to);
          return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
              let ranges = [];
              changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
              fragments = TreeFragment.applyChanges(fragments, ranges);
              tree = Tree.empty;
              treeLen = 0;
              viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
              if (this.skipped.length) {
                  skipped = [];
                  for (let r of this.skipped) {
                      let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                      if (from < to)
                          skipped.push({ from, to });
                  }
              }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
              return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
              let { from, to } = this.skipped[i];
              if (from < viewport.to && to > viewport.from) {
                  this.fragments = cutFragments(this.fragments, from, to);
                  this.skipped.splice(i--, 1);
              }
          }
          if (this.skipped.length >= startLen)
              return false;
          this.reset();
          return true;
      }
      /**
      @internal
      */
      reset() {
          if (this.parse) {
              this.takeTree();
              this.parse = null;
          }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from, to) {
          this.skipped.push({ from, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
          return new class extends Parser$2 {
              createParse(input, fragments, ranges) {
                  let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                  let parser = {
                      parsedPos: from,
                      advance() {
                          let cx = currentContext;
                          if (cx) {
                              for (let r of ranges)
                                  cx.tempSkipped.push(r);
                              if (until)
                                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                          }
                          this.parsedPos = to;
                          return new Tree(NodeType.none, [], [], to - from);
                      },
                      stoppedAt: null,
                      stopAt() { }
                  };
                  return parser;
              }
          };
      }
      /**
      @internal
      */
      isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() { return currentContext; }
  }
  function cutFragments(fragments, from, to) {
      return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  class LanguageState {
      constructor(
      // A mutable parse state that is used to preserve work done during
      // the lifetime of a state when moving to the next state.
      context) {
          this.context = context;
          this.tree = context.tree;
      }
      apply(tr) {
          if (!tr.docChanged && this.tree == this.context.tree)
              return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          // If the previous parse wasn't done, go forward only up to its
          // end position or the end of the viewport, to avoid slowing down
          // state updates with parse work beyond the viewport.
          let upto = this.context.treeLen == tr.startState.doc.length ? undefined
              : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20 /* Work.Apply */, upto))
              newCx.takeTree();
          return new LanguageState(newCx);
      }
      static init(state) {
          let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
          let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
          if (!parseState.work(20 /* Work.Apply */, vpTo))
              parseState.takeTree();
          return new LanguageState(parseState);
      }
  }
  Language.state = /*@__PURE__*/StateField.define({
      create: LanguageState.init,
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(Language.setState))
                  return e.value;
          if (tr.startState.facet(language) != tr.state.facet(language))
              return LanguageState.init(tr.state);
          return value.apply(tr);
      }
  });
  let requestIdle = (callback) => {
      let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
      return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(() => {
              idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
          }, 100 /* Work.MinPause */);
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
  const isInputPending = typeof navigator != "undefined" && ((_a$2 = navigator.scheduling) === null || _a$2 === void 0 ? void 0 : _a$2.isInputPending)
      ? () => navigator.scheduling.isInputPending() : null;
  const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
          this.view = view;
          this.working = null;
          this.workScheduled = 0;
          // End of the current time chunk
          this.chunkEnd = -1;
          // Milliseconds of budget left for this chunk
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
      }
      update(update) {
          let cx = this.view.state.field(Language.state).context;
          if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
              this.scheduleWork();
          if (update.docChanged || update.selectionSet) {
              if (this.view.hasFocus)
                  this.chunkBudget += 50 /* Work.ChangeBonus */;
              this.scheduleWork();
          }
          this.checkAsyncSchedule(cx);
      }
      scheduleWork() {
          if (this.working)
              return;
          let { state } = this.view, field = state.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
              this.working = requestIdle(this.work);
      }
      work(deadline) {
          this.working = null;
          let now = Date.now();
          if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
              this.chunkEnd = now + 30000 /* Work.ChunkTime */;
              this.chunkBudget = 3000 /* Work.ChunkBudget */;
          }
          if (this.chunkBudget <= 0)
              return; // No more budget
          let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
              return;
          let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
          let done = field.context.work(() => {
              return isInputPending && isInputPending() || Date.now() > endTime;
          }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
          this.chunkBudget -= Date.now() - now;
          if (done || this.chunkBudget <= 0) {
              field.context.takeTree();
              this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
              this.scheduleWork();
          this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx) {
          if (cx.scheduleOn) {
              this.workScheduled++;
              cx.scheduleOn
                  .then(() => this.scheduleWork())
                  .catch(err => logException(this.view.state, err))
                  .then(() => this.workScheduled--);
              cx.scheduleOn = null;
          }
      }
      destroy() {
          if (this.working)
              this.working();
      }
      isWorking() {
          return !!(this.working || this.workScheduled > 0);
      }
  }, {
      eventHandlers: { focus() { this.scheduleWork(); } }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  const language = /*@__PURE__*/Facet.define({
      combine(languages) { return languages.length ? languages[0] : null; },
      enables: language => [
          Language.state,
          parseWorker,
          EditorView.contentAttributes.compute([language], state => {
              let lang = state.facet(language);
              return lang && lang.name ? { "data-language": lang.name } : {};
          })
      ]
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  class LanguageSupport {
      /**
      Create a language support object.
      */
      constructor(
      /**
      The language object.
      */
      language, 
      /**
      An optional set of supporting extensions. When nesting a
      language in another language, the outer language is encouraged
      to include the supporting extensions for its inner languages
      in its own set of support extensions.
      */
      support = []) {
          this.language = language;
          this.support = support;
          this.extension = [language, support];
      }
  }

  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  const indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens. Should
  be a string consisting entirely of the same whitespace character.
  When not set, this defaults to 2 spaces.
  */
  const indentUnit = /*@__PURE__*/Facet.define({
      combine: values => {
          if (!values.length)
              return "  ";
          let unit = values[0];
          if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
              throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return unit;
      }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
      let unit = state.facet(indentUnit);
      return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
      let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
      if (ch == "\t") {
          while (cols >= ts) {
              result += "\t";
              cols -= ts;
          }
          ch = " ";
      }
      for (let i = 0; i < cols; i++)
          result += ch;
      return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
      if (context instanceof EditorState)
          context = new IndentContext(context);
      for (let service of context.state.facet(indentService)) {
          let result = service(context, pos);
          if (result !== undefined)
              return result;
      }
      let tree = syntaxTree(context.state);
      return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  class IndentContext {
      /**
      Create an indent context.
      */
      constructor(
      /**
      The editor state.
      */
      state, 
      /**
      @internal
      */
      options = {}) {
          this.state = state;
          this.options = options;
          this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos, bias = 1) {
          let line = this.state.doc.lineAt(pos);
          let { simulateBreak, simulateDoubleBreak } = this.options;
          if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
              if (simulateDoubleBreak && simulateBreak == pos)
                  return { text: "", from: pos };
              else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                  return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
              else
                  return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
          }
          return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos, bias = 1) {
          if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
              return "";
          let { text, from } = this.lineAt(pos, bias);
          return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
      column(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let result = this.countColumn(text, pos - from);
          let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
          if (override > -1)
              result += override - this.countColumn(text, text.search(/\S|$/));
          return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line, pos = line.length) {
          return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let override = this.options.overrideIndentation;
          if (override) {
              let overriden = override(from);
              if (overriden > -1)
                  return overriden;
          }
          return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
          return this.options.simulateBreak || null;
      }
  }
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  const indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
      let stack = ast.resolveStack(pos);
      let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
      if (inner != stack.node) {
          let add = [];
          for (let cur = inner; cur && !(cur.from < stack.node.from || cur.to > stack.node.to ||
              cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
              add.push(cur);
          for (let i = add.length - 1; i >= 0; i--)
              stack = { node: add[i], next: stack };
      }
      return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
      for (let cur = stack; cur; cur = cur.next) {
          let strategy = indentStrategy(cur.node);
          if (strategy)
              return strategy(TreeIndentContext.create(cx, pos, cur));
      }
      return 0;
  }
  function ignoreClosed(cx) {
      return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
      let strategy = tree.type.prop(indentNodeProp);
      if (strategy)
          return strategy;
      let first = tree.firstChild, close;
      if (first && (close = first.type.prop(NodeProp.closedBy))) {
          let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
          return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      }
      return tree.parent == null ? topIndent : null;
  }
  function topIndent() { return 0; }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  class TreeIndentContext extends IndentContext {
      constructor(base, 
      /**
      The position at which indentation is being computed.
      */
      pos, 
      /**
      @internal
      */
      context) {
          super(base.state, base.options);
          this.base = base;
          this.pos = pos;
          this.context = context;
      }
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      get node() { return this.context.node; }
      /**
      @internal
      */
      static create(base, pos, context) {
          return new TreeIndentContext(base, pos, context);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
          return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
          return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
      baseIndentFor(node) {
          let line = this.state.doc.lineAt(node.from);
          // Skip line starts that are covered by a sibling (or cousin, etc)
          for (;;) {
              let atBreak = node.resolve(line.from);
              while (atBreak.parent && atBreak.parent.from == atBreak.from)
                  atBreak = atBreak.parent;
              if (isParent(atBreak, node))
                  break;
              line = this.state.doc.lineAt(atBreak.from);
          }
          return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
          return indentFor(this.context.next, this.base, this.pos);
      }
  }
  function isParent(parent, of) {
      for (let cur = of; cur; cur = cur.parent)
          if (parent == cur)
              return true;
      return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
      let tree = context.node;
      let openToken = tree.childAfter(tree.from), last = tree.lastChild;
      if (!openToken)
          return null;
      let sim = context.options.simulateBreak;
      let openLine = context.state.doc.lineAt(openToken.from);
      let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
      for (let pos = openToken.to;;) {
          let next = tree.childAfter(pos);
          if (!next || next == last)
              return null;
          if (!next.type.isSkipped) {
              if (next.from >= lineEnd)
                  return null;
              let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
              return { from: openToken.from, to: openToken.to + space };
          }
          pos = next.to;
      }
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
      let after = context.textAfter, space = after.match(/^\s*/)[0].length;
      let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
      let aligned = align ? bracketedAligned(context) : null;
      if (aligned)
          return closed ? context.column(aligned.from) : context.column(aligned.to);
      return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent({ except, units = 1 } = {}) {
      return (context) => {
          let matchExcept = except && except.test(context.textAfter);
          return context.baseIndent + (matchExcept ? 0 : units * context.unit);
      };
  }
  const DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.

  To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
      return EditorState.transactionFilter.of(tr => {
          if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
              return tr;
          let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
          if (!rules.length)
              return tr;
          let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
          if (head > line.from + DontIndentBeyond)
              return tr;
          let lineStart = doc.sliceString(line.from, head);
          if (!rules.some(r => r.test(lineStart)))
              return tr;
          let { state } = tr, last = -1, changes = [];
          for (let { head } of state.selection.ranges) {
              let line = state.doc.lineAt(head);
              if (line.from == last)
                  continue;
              last = line.from;
              let indent = getIndentation(state, line.from);
              if (indent == null)
                  continue;
              let cur = /^\s*/.exec(line.text)[0];
              let norm = indentString(state, indent);
              if (cur != norm)
                  changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
          return changes.length ? [tr, { changes, sequential: true }] : tr;
      });
  }

  /**
  A facet that registers a code folding service. When called with
  the extent of a line, such a function should return a foldable
  range that starts on that line (but continues beyond it), if one
  can be found.
  */
  const foldService = /*@__PURE__*/Facet.define();
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  const foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
      let first = node.firstChild, last = node.lastChild;
      return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
  }
  function syntaxFolding(state, start, end) {
      let tree = syntaxTree(state);
      if (tree.length < end)
          return null;
      let stack = tree.resolveStack(end, 1);
      let found = null;
      for (let iter = stack; iter; iter = iter.next) {
          let cur = iter.node;
          if (cur.to <= end || cur.from > end)
              continue;
          if (found && cur.from < start)
              break;
          let prop = cur.type.prop(foldNodeProp);
          if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
              let value = prop(cur, state);
              if (value && value.from <= end && value.from >= start && value.to > end)
                  found = value;
          }
      }
      return found;
  }
  function isUnfinished(node) {
      let ch = node.lastChild;
      return ch && ch.to == node.to && ch.type.isError;
  }
  /**
  Check whether the given line is foldable. First asks any fold
  services registered through
  [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
  a result, tries to query the [fold node
  prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
  of the line.
  */
  function foldable(state, lineStart, lineEnd) {
      for (let service of state.facet(foldService)) {
          let result = service(state, lineStart, lineEnd);
          if (result)
              return result;
      }
      return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
      let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
      return from >= to ? undefined : { from, to };
  }
  /**
  State effect that can be attached to a transaction to fold the
  given range. (You probably only need this in exceptional
  circumstances—usually you'll just want to let
  [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
  gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
  */
  const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  /**
  State effect that unfolds the given range (if it was folded).
  */
  const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  function selectedLines(view) {
      let lines = [];
      for (let { head } of view.state.selection.ranges) {
          if (lines.some(l => l.from <= head && l.to >= head))
              continue;
          lines.push(view.lineBlockAt(head));
      }
      return lines;
  }
  /**
  The state field that stores the folded ranges (as a [decoration
  set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
  [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
  [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
  state.
  */
  const foldState = /*@__PURE__*/StateField.define({
      create() {
          return Decoration.none;
      },
      update(folded, tr) {
          if (tr.isUserEvent("delete"))
              tr.changes.iterChangedRanges((fromA, toA) => folded = clearTouchedFolds(folded, fromA, toA));
          folded = folded.map(tr.changes);
          for (let e of tr.effects) {
              if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
                  let { preparePlaceholder } = tr.state.facet(foldConfig);
                  let widget = !preparePlaceholder ? foldWidget :
                      Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
                  folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
              }
              else if (e.is(unfoldEffect)) {
                  folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                      filterFrom: e.value.from, filterTo: e.value.to });
              }
          }
          // Clear folded ranges that cover the selection head
          if (tr.selection)
              folded = clearTouchedFolds(folded, tr.selection.main.head);
          return folded;
      },
      provide: f => EditorView.decorations.from(f),
      toJSON(folded, state) {
          let ranges = [];
          folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
          return ranges;
      },
      fromJSON(value) {
          if (!Array.isArray(value) || value.length % 2)
              throw new RangeError("Invalid JSON for fold state");
          let ranges = [];
          for (let i = 0; i < value.length;) {
              let from = value[i++], to = value[i++];
              if (typeof from != "number" || typeof to != "number")
                  throw new RangeError("Invalid JSON for fold state");
              ranges.push(foldWidget.range(from, to));
          }
          return Decoration.set(ranges, true);
      }
  });
  function clearTouchedFolds(folded, from, to = from) {
      let touched = false;
      folded.between(from, to, (a, b) => { if (a < to && b > from)
          touched = true; });
      return !touched ? folded : folded.update({
          filterFrom: from,
          filterTo: to,
          filter: (a, b) => a >= to || b <= from
      });
  }
  function findFold(state, from, to) {
      var _a;
      let found = null;
      (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
          if (!found || found.from > from)
              found = { from, to };
      });
      return found;
  }
  function foldExists(folded, from, to) {
      let found = false;
      folded.between(from, from, (a, b) => { if (a == from && b == to)
          found = true; });
      return found;
  }
  function maybeEnable(state, other) {
      return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  /**
  Fold the lines that are selected, if possible.
  */
  const foldCode = view => {
      for (let line of selectedLines(view)) {
          let range = foldable(view.state, line.from, line.to);
          if (range) {
              view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
              return true;
          }
      }
      return false;
  };
  /**
  Unfold folded ranges on selected lines.
  */
  const unfoldCode = view => {
      if (!view.state.field(foldState, false))
          return false;
      let effects = [];
      for (let line of selectedLines(view)) {
          let folded = findFold(view.state, line.from, line.to);
          if (folded)
              effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      }
      if (effects.length)
          view.dispatch({ effects });
      return effects.length > 0;
  };
  function announceFold(view, range, fold = true) {
      let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
      return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
  }
  /**
  Fold all top-level foldable ranges. Note that, in most cases,
  folding information will depend on the [syntax
  tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
  reliably when the document hasn't been fully parsed (either
  because the editor state was only just initialized, or because the
  document is so big that the parser decided not to parse it
  entirely).
  */
  const foldAll = view => {
      let { state } = view, effects = [];
      for (let pos = 0; pos < state.doc.length;) {
          let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
          if (range)
              effects.push(foldEffect.of(range));
          pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
      }
      if (effects.length)
          view.dispatch({ effects: maybeEnable(view.state, effects) });
      return !!effects.length;
  };
  /**
  Unfold all folded code.
  */
  const unfoldAll = view => {
      let field = view.state.field(foldState, false);
      if (!field || !field.size)
          return false;
      let effects = [];
      field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
      view.dispatch({ effects });
      return true;
  };
  /**
  Default fold-related key bindings.

   - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
   - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
   - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
   - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
  */
  const foldKeymap = [
      { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
      { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
      { key: "Ctrl-Alt-[", run: foldAll },
      { key: "Ctrl-Alt-]", run: unfoldAll }
  ];
  const defaultConfig = {
      placeholderDOM: null,
      preparePlaceholder: null,
      placeholderText: "…"
  };
  const foldConfig = /*@__PURE__*/Facet.define({
      combine(values) { return combineConfig(values, defaultConfig); }
  });
  /**
  Create an extension that configures code folding.
  */
  function codeFolding(config) {
      let result = [foldState, baseTheme$1$1];
      if (config)
          result.push(foldConfig.of(config));
      return result;
  }
  function widgetToDOM(view, prepared) {
      let { state } = view, conf = state.facet(foldConfig);
      let onclick = (event) => {
          let line = view.lineBlockAt(view.posAtDOM(event.target));
          let folded = findFold(view.state, line.from, line.to);
          if (folded)
              view.dispatch({ effects: unfoldEffect.of(folded) });
          event.preventDefault();
      };
      if (conf.placeholderDOM)
          return conf.placeholderDOM(view, onclick, prepared);
      let element = document.createElement("span");
      element.textContent = conf.placeholderText;
      element.setAttribute("aria-label", state.phrase("folded code"));
      element.title = state.phrase("unfold");
      element.className = "cm-foldPlaceholder";
      element.onclick = onclick;
      return element;
  }
  const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM(view) { return widgetToDOM(view, null); }
      } });
  class PreparedFoldWidget extends WidgetType {
      constructor(value) {
          super();
          this.value = value;
      }
      eq(other) { return this.value == other.value; }
      toDOM(view) { return widgetToDOM(view, this.value); }
  }
  const foldGutterDefaults = {
      openText: "⌄",
      closedText: "›",
      markerDOM: null,
      domEventHandlers: {},
      foldingChanged: () => false
  };
  class FoldMarker extends GutterMarker {
      constructor(config, open) {
          super();
          this.config = config;
          this.open = open;
      }
      eq(other) { return this.config == other.config && this.open == other.open; }
      toDOM(view) {
          if (this.config.markerDOM)
              return this.config.markerDOM(this.open);
          let span = document.createElement("span");
          span.textContent = this.open ? this.config.openText : this.config.closedText;
          span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
          return span;
      }
  }
  /**
  Create an extension that registers a fold gutter, which shows a
  fold status indicator before foldable lines (which can be clicked
  to fold or unfold the line).
  */
  function foldGutter(config = {}) {
      let fullConfig = { ...foldGutterDefaults, ...config };
      let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
      let markers = ViewPlugin.fromClass(class {
          constructor(view) {
              this.from = view.viewport.from;
              this.markers = this.buildMarkers(view);
          }
          update(update) {
              if (update.docChanged || update.viewportChanged ||
                  update.startState.facet(language) != update.state.facet(language) ||
                  update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                  syntaxTree(update.startState) != syntaxTree(update.state) ||
                  fullConfig.foldingChanged(update))
                  this.markers = this.buildMarkers(update.view);
          }
          buildMarkers(view) {
              let builder = new RangeSetBuilder();
              for (let line of view.viewportLineBlocks) {
                  let mark = findFold(view.state, line.from, line.to) ? canUnfold
                      : foldable(view.state, line.from, line.to) ? canFold : null;
                  if (mark)
                      builder.add(line.from, line.from, mark);
              }
              return builder.finish();
          }
      });
      let { domEventHandlers } = fullConfig;
      return [
          markers,
          gutter({
              class: "cm-foldGutter",
              markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
              initialSpacer() {
                  return new FoldMarker(fullConfig, false);
              },
              domEventHandlers: {
                  ...domEventHandlers,
                  click: (view, line, event) => {
                      if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                          return true;
                      let folded = findFold(view.state, line.from, line.to);
                      if (folded) {
                          view.dispatch({ effects: unfoldEffect.of(folded) });
                          return true;
                      }
                      let range = foldable(view.state, line.from, line.to);
                      if (range) {
                          view.dispatch({ effects: foldEffect.of(range) });
                          return true;
                      }
                      return false;
                  }
              }
          }),
          codeFolding()
      ];
  }
  const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-foldPlaceholder": {
          backgroundColor: "#eee",
          border: "1px solid #ddd",
          color: "#888",
          borderRadius: ".2em",
          margin: "0 1px",
          padding: "0 1px",
          cursor: "pointer"
      },
      ".cm-foldGutter span": {
          padding: "0 1px",
          cursor: "pointer"
      }
  });

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  class HighlightStyle {
      constructor(
      /**
      The tag styles used to create this highlight style.
      */
      specs, options) {
          this.specs = specs;
          let modSpec;
          function def(spec) {
              let cls = StyleModule.newName();
              (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
              return cls;
          }
          const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
          const scopeOpt = options.scope;
          this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
              : scopeOpt ? (type) => type == scopeOpt : undefined;
          this.style = tagHighlighter(specs.map(style => ({
              tag: style.tag,
              class: style.class || def(Object.assign({}, style, { tag: null }))
          })), {
              all,
          }).style;
          this.module = modSpec ? new StyleModule(modSpec) : null;
          this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
          return new HighlightStyle(specs, options || {});
      }
  }
  const highlighterFacet = /*@__PURE__*/Facet.define();
  const fallbackHighlighter = /*@__PURE__*/Facet.define({
      combine(values) { return values.length ? [values[0]] : null; }
  });
  function getHighlighters(state) {
      let main = state.facet(highlighterFacet);
      return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
      let ext = [treeHighlighter], themeType;
      if (highlighter instanceof HighlightStyle) {
          if (highlighter.module)
              ext.push(EditorView.styleModule.of(highlighter.module));
          themeType = highlighter.themeType;
      }
      if (options === null || options === void 0 ? void 0 : options.fallback)
          ext.push(fallbackHighlighter.of(highlighter));
      else if (themeType)
          ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
              return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
          }));
      else
          ext.push(highlighterFacet.of(highlighter));
      return ext;
  }
  class TreeHighlighter {
      constructor(view) {
          this.markCache = Object.create(null);
          this.tree = syntaxTree(view.state);
          this.decorations = this.buildDeco(view, getHighlighters(view.state));
          this.decoratedTo = view.viewport.to;
      }
      update(update) {
          let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
          let styleChange = highlighters != getHighlighters(update.startState);
          let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
          if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
              this.decorations = this.decorations.map(update.changes);
              this.decoratedTo = decoratedToMapped;
          }
          else if (tree != this.tree || update.viewportChanged || styleChange) {
              this.tree = tree;
              this.decorations = this.buildDeco(update.view, highlighters);
              this.decoratedTo = viewport.to;
          }
      }
      buildDeco(view, highlighters) {
          if (!highlighters || !this.tree.length)
              return Decoration.none;
          let builder = new RangeSetBuilder();
          for (let { from, to } of view.visibleRanges) {
              highlightTree(this.tree, highlighters, (from, to, style) => {
                  builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
              }, from, to);
          }
          return builder.finish();
      }
  }
  const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
      decorations: v => v.decorations
  }));
  /**
  A default highlight style (works well with light themes).
  */
  const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
      { tag: tags.meta,
          color: "#404740" },
      { tag: tags.link,
          textDecoration: "underline" },
      { tag: tags.heading,
          textDecoration: "underline",
          fontWeight: "bold" },
      { tag: tags.emphasis,
          fontStyle: "italic" },
      { tag: tags.strong,
          fontWeight: "bold" },
      { tag: tags.strikethrough,
          textDecoration: "line-through" },
      { tag: tags.keyword,
          color: "#708" },
      { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
          color: "#219" },
      { tag: [tags.literal, tags.inserted],
          color: "#164" },
      { tag: [tags.string, tags.deleted],
          color: "#a11" },
      { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
          color: "#e40" },
      { tag: /*@__PURE__*/tags.definition(tags.variableName),
          color: "#00f" },
      { tag: /*@__PURE__*/tags.local(tags.variableName),
          color: "#30a" },
      { tag: [tags.typeName, tags.namespace],
          color: "#085" },
      { tag: tags.className,
          color: "#167" },
      { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
          color: "#256" },
      { tag: /*@__PURE__*/tags.definition(tags.propertyName),
          color: "#00c" },
      { tag: tags.comment,
          color: "#940" },
      { tag: tags.invalid,
          color: "#f00" }
  ]);

  const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
  const bracketMatchingConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              afterCursor: true,
              brackets: DefaultBrackets,
              maxScanDistance: DefaultScanDist,
              renderMatch: defaultRenderMatch
          });
      }
  });
  const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
      let decorations = [];
      let mark = match.matched ? matchingMark : nonmatchingMark;
      decorations.push(mark.range(match.start.from, match.start.to));
      if (match.end)
          decorations.push(mark.range(match.end.from, match.end.to));
      return decorations;
  }
  const bracketMatchingState = /*@__PURE__*/StateField.define({
      create() { return Decoration.none; },
      update(deco, tr) {
          if (!tr.docChanged && !tr.selection)
              return deco;
          let decorations = [];
          let config = tr.state.facet(bracketMatchingConfig);
          for (let range of tr.state.selection.ranges) {
              if (!range.empty)
                  continue;
              let match = matchBrackets(tr.state, range.head, -1, config)
                  || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                  || (config.afterCursor &&
                      (matchBrackets(tr.state, range.head, 1, config) ||
                          (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
              if (match)
                  decorations = decorations.concat(config.renderMatch(match, tr.state));
          }
          return Decoration.set(decorations, true);
      },
      provide: f => EditorView.decorations.from(f)
  });
  const bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme$4
  ];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching(config = {}) {
      return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  /**
  When larger syntax nodes, such as HTML tags, are marked as
  opening/closing, it can be a bit messy to treat the whole node as
  a matchable bracket. This node prop allows you to define, for such
  a node, a ‘handle’—the part of the node that is highlighted, and
  that the cursor must be on to activate highlighting in the first
  place.
  */
  const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
  function matchingNodes(node, dir, brackets) {
      let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
      if (byProp)
          return byProp;
      if (node.name.length == 1) {
          let index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
              return [brackets[index + dir]];
      }
      return null;
  }
  function findHandle(node) {
      let hasHandle = node.type.prop(bracketMatchingHandle);
      return hasHandle ? hasHandle(node.node) : node;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir, config = {}) {
      let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
      let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
      for (let cur = node; cur; cur = cur.parent) {
          let matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to) {
              let handle = findHandle(cur);
              if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                  return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
          }
      }
      return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
      let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
      let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
      if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
          do {
              if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                  if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                      let endHandle = findHandle(cursor);
                      return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                  }
                  else if (matchingNodes(cursor.type, dir, brackets)) {
                      depth++;
                  }
                  else if (matchingNodes(cursor.type, -dir, brackets)) {
                      if (depth == 0) {
                          let endHandle = findHandle(cursor);
                          return {
                              start: firstToken,
                              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                              matched: false
                          };
                      }
                      depth--;
                  }
              }
          } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
      return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
      let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
      let bracket = brackets.indexOf(startCh);
      if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
          return null;
      let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
      let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
      for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
          let text = iter.value;
          if (dir < 0)
              distance += text.length;
          let basePos = pos + distance * dir;
          for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
              let found = brackets.indexOf(text[pos]);
              if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                  continue;
              if ((found % 2 == 0) == (dir > 0)) {
                  depth++;
              }
              else if (depth == 1) { // Closing
                  return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
              }
              else {
                  depth--;
              }
          }
          if (dir > 0)
              distance += text.length;
      }
      return iter.done ? { start: startToken, matched: false } : null;
  }
  const noTokens = /*@__PURE__*/Object.create(null);
  const typeArray = [NodeType.none];
  const warned = [];
  // Cache of node types by name and tags
  const byTag = /*@__PURE__*/Object.create(null);
  const defaultTable = /*@__PURE__*/Object.create(null);
  for (let [legacyName, name] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
  ])
      defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  function warnForPart(part, msg) {
      if (warned.indexOf(part) > -1)
          return;
      warned.push(part);
      console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
      let tags$1 = [];
      for (let name of tagStr.split(" ")) {
          let found = [];
          for (let part of name.split(".")) {
              let value = (extra[part] || tags[part]);
              if (!value) {
                  warnForPart(part, `Unknown highlighting tag ${part}`);
              }
              else if (typeof value == "function") {
                  if (!found.length)
                      warnForPart(part, `Modifier ${part} used at start of tag`);
                  else
                      found = found.map(value);
              }
              else {
                  if (found.length)
                      warnForPart(part, `Tag ${part} used as modifier`);
                  else
                      found = Array.isArray(value) ? value : [value];
              }
          }
          for (let tag of found)
              tags$1.push(tag);
      }
      if (!tags$1.length)
          return 0;
      let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1.map(t => t.id);
      let known = byTag[key];
      if (known)
          return known.id;
      let type = byTag[key] = NodeType.define({
          id: typeArray.length,
          name,
          props: [styleTags({ [name]: tags$1 })]
      });
      typeArray.push(type);
      return type.id;
  }
  ({
      rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
      ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
      auto: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
  });

  /**
  An instance of this is passed to completion source functions.
  */
  class CompletionContext {
      /**
      Create a new completion context. (Mostly useful for testing
      completion sources—in the editor, the extension will create
      these for you.)
      */
      constructor(
      /**
      The editor state that the completion happens in.
      */
      state, 
      /**
      The position at which the completion is happening.
      */
      pos, 
      /**
      Indicates whether completion was activated explicitly, or
      implicitly by typing. The usual way to respond to this is to
      only return completions when either there is part of a
      completable entity before the cursor, or `explicit` is true.
      */
      explicit, 
      /**
      The editor view. May be undefined if the context was created
      in a situation where there is no such view available, such as
      in synchronous updates via
      [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
      or when called by test code.
      */
      view) {
          this.state = state;
          this.pos = pos;
          this.explicit = explicit;
          this.view = view;
          /**
          @internal
          */
          this.abortListeners = [];
          /**
          @internal
          */
          this.abortOnDocChange = false;
      }
      /**
      Get the extent, content, and (if there is a token) type of the
      token before `this.pos`.
      */
      tokenBefore(types) {
          let token = syntaxTree(this.state).resolveInner(this.pos, -1);
          while (token && types.indexOf(token.name) < 0)
              token = token.parent;
          return token ? { from: token.from, to: this.pos,
              text: this.state.sliceDoc(token.from, this.pos),
              type: token.type } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
      matchBefore(expr) {
          let line = this.state.doc.lineAt(this.pos);
          let start = Math.max(line.from, this.pos - 250);
          let str = line.text.slice(start - line.from, this.pos - line.from);
          let found = str.search(ensureAnchor(expr, false));
          return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
      get aborted() { return this.abortListeners == null; }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
      addEventListener(type, listener, options) {
          if (type == "abort" && this.abortListeners) {
              this.abortListeners.push(listener);
              if (options && options.onDocChange)
                  this.abortOnDocChange = true;
          }
      }
  }
  function toSet(chars) {
      let flat = Object.keys(chars).join("");
      let words = /\w/.test(flat);
      if (words)
          flat = flat.replace(/\w/g, "");
      return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
      let first = Object.create(null), rest = Object.create(null);
      for (let { label } of options) {
          first[label[0]] = true;
          for (let i = 1; i < label.length; i++)
              rest[label[i]] = true;
      }
      let source = toSet(first) + toSet(rest) + "*$";
      return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
      let options = list.map(o => typeof o == "string" ? { label: o } : o);
      let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
      return (context) => {
          let token = context.matchBefore(match);
          return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
      };
  }
  class Option {
      constructor(completion, source, match, score) {
          this.completion = completion;
          this.source = source;
          this.match = match;
          this.score = score;
      }
  }
  function cur(state) { return state.selection.main.from; }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
      var _a;
      let { source } = expr;
      let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
      if (!addStart && !addEnd)
          return expr;
      return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  const pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
      let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
      return Object.assign(Object.assign({}, state.changeByRange(range => {
          if (range != main && from != to &&
              state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
              return { range };
          let lines = state.toText(text);
          return {
              changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
              range: EditorSelection.cursor(range.from + fromOff + lines.length)
          };
      })), { scrollIntoView: true, userEvent: "input.complete" });
  }
  const SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
      if (!Array.isArray(source))
          return source;
      let known = SourceCache.get(source);
      if (!known)
          SourceCache.set(source, known = completeFromList(source));
      return known;
  }
  const startCompletionEffect = /*@__PURE__*/StateEffect.define();
  const closeCompletionEffect = /*@__PURE__*/StateEffect.define();

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  class FuzzyMatcher {
      constructor(pattern) {
          this.pattern = pattern;
          this.chars = [];
          this.folded = [];
          // Buffers reused by calls to `match` to track matched character
          // positions.
          this.any = [];
          this.precise = [];
          this.byWord = [];
          this.score = 0;
          this.matched = [];
          for (let p = 0; p < pattern.length;) {
              let char = codePointAt(pattern, p), size = codePointSize(char);
              this.chars.push(char);
              let part = pattern.slice(p, p + size), upper = part.toUpperCase();
              this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
              p += size;
          }
          this.astral = pattern.length != this.chars.length;
      }
      ret(score, matched) {
          this.score = score;
          this.matched = matched;
          return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
      match(word) {
          if (this.pattern.length == 0)
              return this.ret(-100 /* Penalty.NotFull */, []);
          if (word.length < this.pattern.length)
              return null;
          let { chars, folded, any, precise, byWord } = this;
          // For single-character queries, only match when they occur right
          // at the start
          if (chars.length == 1) {
              let first = codePointAt(word, 0), firstSize = codePointSize(first);
              let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
              if (first == chars[0]) ;
              else if (first == folded[0])
                  score += -200 /* Penalty.CaseFold */;
              else
                  return null;
              return this.ret(score, [0, firstSize]);
          }
          let direct = word.indexOf(this.pattern);
          if (direct == 0)
              return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
          let len = chars.length, anyTo = 0;
          if (direct < 0) {
              for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                  let next = codePointAt(word, i);
                  if (next == chars[anyTo] || next == folded[anyTo])
                      any[anyTo++] = i;
                  i += codePointSize(next);
              }
              // No match, exit immediately
              if (anyTo < len)
                  return null;
          }
          // This tracks the extent of the precise (non-folded, not
          // necessarily adjacent) match
          let preciseTo = 0;
          // Tracks whether there is a match that hits only characters that
          // appear to be starting words. `byWordFolded` is set to true when
          // a case folded character is encountered in such a match
          let byWordTo = 0, byWordFolded = false;
          // If we've found a partial adjacent match, these track its state
          let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
          let hasLower = /[a-z]/.test(word), wordAdjacent = true;
          // Go over the option's text, scanning for the various kinds of matches
          for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
              let next = codePointAt(word, i);
              if (direct < 0) {
                  if (preciseTo < len && next == chars[preciseTo])
                      precise[preciseTo++] = i;
                  if (adjacentTo < len) {
                      if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                          if (adjacentTo == 0)
                              adjacentStart = i;
                          adjacentEnd = i + 1;
                          adjacentTo++;
                      }
                      else {
                          adjacentTo = 0;
                      }
                  }
              }
              let ch, type = next < 0xff
                  ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                  : ((ch = fromCodePoint$2(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
              if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                  if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                      byWord[byWordTo++] = i;
                  else if (byWord.length)
                      wordAdjacent = false;
              }
              prevType = type;
              i += codePointSize(next);
          }
          if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
          if (adjacentTo == len && adjacentStart == 0)
              return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
          if (direct > -1)
              return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
          if (adjacentTo == len)
              return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
          if (byWordTo == len)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                  (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
          return chars.length == 2 ? null
              : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
      }
      result(score, positions, word) {
          let result = [], i = 0;
          for (let pos of positions) {
              let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
              if (i && result[i - 1] == pos)
                  result[i - 1] = to;
              else {
                  result[i++] = pos;
                  result[i++] = to;
              }
          }
          return this.ret(score - word.length, result);
      }
  }
  class StrictMatcher {
      constructor(pattern) {
          this.pattern = pattern;
          this.matched = [];
          this.score = 0;
          this.folded = pattern.toLowerCase();
      }
      match(word) {
          if (word.length < this.pattern.length)
              return null;
          let start = word.slice(0, this.pattern.length);
          let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
          if (match == null)
              return null;
          this.matched = [0, start.length];
          this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
          return this;
      }
  }

  const completionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              activateOnTyping: true,
              activateOnCompletion: () => false,
              activateOnTypingDelay: 100,
              selectOnOpen: true,
              override: null,
              closeOnBlur: true,
              maxRenderedOptions: 100,
              defaultKeymap: true,
              tooltipClass: () => "",
              optionClass: () => "",
              aboveCursor: false,
              icons: true,
              addToOptions: [],
              positionInfo: defaultPositionInfo,
              filterStrict: false,
              compareCompletions: (a, b) => a.label.localeCompare(b.label),
              interactionDelay: 75,
              updateSyncTime: 100
          }, {
              defaultKeymap: (a, b) => a && b,
              closeOnBlur: (a, b) => a && b,
              icons: (a, b) => a && b,
              tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
              optionClass: (a, b) => c => joinClass(a(c), b(c)),
              addToOptions: (a, b) => a.concat(b),
              filterStrict: (a, b) => a || b,
          });
      }
  });
  function joinClass(a, b) {
      return a ? b ? a + " " + b : a : b;
  }
  function defaultPositionInfo(view, list, option, info, space, tooltip) {
      let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
      let side = "top", offset, maxWidth;
      let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
      let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
      if (left && spaceLeft < Math.min(infoWidth, spaceRight))
          left = false;
      else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
          left = true;
      if (infoWidth <= (left ? spaceLeft : spaceRight)) {
          offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
          maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
      }
      else {
          narrow = true;
          maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
          let spaceBelow = space.bottom - list.bottom;
          if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
              offset = option.bottom - list.top;
          }
          else { // Above it
              side = "bottom";
              offset = list.bottom - option.top;
          }
      }
      let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
      let scaleX = (list.right - list.left) / tooltip.offsetWidth;
      return {
          style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
          class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
      };
  }

  function optionContent(config) {
      let content = config.addToOptions.slice();
      if (config.icons)
          content.push({
              render(completion) {
                  let icon = document.createElement("div");
                  icon.classList.add("cm-completionIcon");
                  if (completion.type)
                      icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                  icon.setAttribute("aria-hidden", "true");
                  return icon;
              },
              position: 20
          });
      content.push({
          render(completion, _s, _v, match) {
              let labelElt = document.createElement("span");
              labelElt.className = "cm-completionLabel";
              let label = completion.displayLabel || completion.label, off = 0;
              for (let j = 0; j < match.length;) {
                  let from = match[j++], to = match[j++];
                  if (from > off)
                      labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                  let span = labelElt.appendChild(document.createElement("span"));
                  span.appendChild(document.createTextNode(label.slice(from, to)));
                  span.className = "cm-completionMatchedText";
                  off = to;
              }
              if (off < label.length)
                  labelElt.appendChild(document.createTextNode(label.slice(off)));
              return labelElt;
          },
          position: 50
      }, {
          render(completion) {
              if (!completion.detail)
                  return null;
              let detailElt = document.createElement("span");
              detailElt.className = "cm-completionDetail";
              detailElt.textContent = completion.detail;
              return detailElt;
          },
          position: 80
      });
      return content.sort((a, b) => a.position - b.position).map(a => a.render);
  }
  function rangeAroundSelected(total, selected, max) {
      if (total <= max)
          return { from: 0, to: total };
      if (selected < 0)
          selected = 0;
      if (selected <= (total >> 1)) {
          let off = Math.floor(selected / max);
          return { from: off * max, to: (off + 1) * max };
      }
      let off = Math.floor((total - selected) / max);
      return { from: total - (off + 1) * max, to: total - off * max };
  }
  class CompletionTooltip {
      constructor(view, stateField, applyCompletion) {
          this.view = view;
          this.stateField = stateField;
          this.applyCompletion = applyCompletion;
          this.info = null;
          this.infoDestroy = null;
          this.placeInfoReq = {
              read: () => this.measureInfo(),
              write: (pos) => this.placeInfo(pos),
              key: this
          };
          this.space = null;
          this.currentClass = "";
          let cState = view.state.field(stateField);
          let { options, selected } = cState.open;
          let config = view.state.facet(completionConfig);
          this.optionContent = optionContent(config);
          this.optionClass = config.optionClass;
          this.tooltipClass = config.tooltipClass;
          this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
          this.dom = document.createElement("div");
          this.dom.className = "cm-tooltip-autocomplete";
          this.updateTooltipClass(view.state);
          this.dom.addEventListener("mousedown", (e) => {
              let { options } = view.state.field(stateField).open;
              for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                  if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                      this.applyCompletion(view, options[+match[1]]);
                      e.preventDefault();
                      return;
                  }
              }
          });
          this.dom.addEventListener("focusout", (e) => {
              let state = view.state.field(this.stateField, false);
              if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
                  e.relatedTarget != view.contentDOM)
                  view.dispatch({ effects: closeCompletionEffect.of(null) });
          });
          this.showOptions(options, cState.id);
      }
      mount() { this.updateSel(); }
      showOptions(options, id) {
          if (this.list)
              this.list.remove();
          this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
          this.list.addEventListener("scroll", () => {
              if (this.info)
                  this.view.requestMeasure(this.placeInfoReq);
          });
      }
      update(update) {
          var _a;
          let cState = update.state.field(this.stateField);
          let prevState = update.startState.field(this.stateField);
          this.updateTooltipClass(update.state);
          if (cState != prevState) {
              let { options, selected, disabled } = cState.open;
              if (!prevState.open || prevState.open.options != options) {
                  this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
                  this.showOptions(options, cState.id);
              }
              this.updateSel();
              if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))
                  this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
          }
      }
      updateTooltipClass(state) {
          let cls = this.tooltipClass(state);
          if (cls != this.currentClass) {
              for (let c of this.currentClass.split(" "))
                  if (c)
                      this.dom.classList.remove(c);
              for (let c of cls.split(" "))
                  if (c)
                      this.dom.classList.add(c);
              this.currentClass = cls;
          }
      }
      positioned(space) {
          this.space = space;
          if (this.info)
              this.view.requestMeasure(this.placeInfoReq);
      }
      updateSel() {
          let cState = this.view.state.field(this.stateField), open = cState.open;
          if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
              this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
              this.showOptions(open.options, cState.id);
          }
          if (this.updateSelectedOption(open.selected)) {
              this.destroyInfo();
              let { completion } = open.options[open.selected];
              let { info } = completion;
              if (!info)
                  return;
              let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
              if (!infoResult)
                  return;
              if ("then" in infoResult) {
                  infoResult.then(obj => {
                      if (obj && this.view.state.field(this.stateField, false) == cState)
                          this.addInfoPane(obj, completion);
                  }).catch(e => logException(this.view.state, e, "completion info"));
              }
              else {
                  this.addInfoPane(infoResult, completion);
              }
          }
      }
      addInfoPane(content, completion) {
          this.destroyInfo();
          let wrap = this.info = document.createElement("div");
          wrap.className = "cm-tooltip cm-completionInfo";
          if (content.nodeType != null) {
              wrap.appendChild(content);
              this.infoDestroy = null;
          }
          else {
              let { dom, destroy } = content;
              wrap.appendChild(dom);
              this.infoDestroy = destroy || null;
          }
          this.dom.appendChild(wrap);
          this.view.requestMeasure(this.placeInfoReq);
      }
      updateSelectedOption(selected) {
          let set = null;
          for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
              if (opt.nodeName != "LI" || !opt.id) {
                  i--; // A section header
              }
              else if (i == selected) {
                  if (!opt.hasAttribute("aria-selected")) {
                      opt.setAttribute("aria-selected", "true");
                      set = opt;
                  }
              }
              else {
                  if (opt.hasAttribute("aria-selected"))
                      opt.removeAttribute("aria-selected");
              }
          }
          if (set)
              scrollIntoView(this.list, set);
          return set;
      }
      measureInfo() {
          let sel = this.dom.querySelector("[aria-selected]");
          if (!sel || !this.info)
              return null;
          let listRect = this.dom.getBoundingClientRect();
          let infoRect = this.info.getBoundingClientRect();
          let selRect = sel.getBoundingClientRect();
          let space = this.space;
          if (!space) {
              let docElt = this.dom.ownerDocument.documentElement;
              space = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
          }
          if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
              selRect.bottom < Math.max(space.top, listRect.top) + 10)
              return null;
          return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
      }
      placeInfo(pos) {
          if (this.info) {
              if (pos) {
                  if (pos.style)
                      this.info.style.cssText = pos.style;
                  this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
              }
              else {
                  this.info.style.cssText = "top: -1e6px";
              }
          }
      }
      createListBox(options, id, range) {
          const ul = document.createElement("ul");
          ul.id = id;
          ul.setAttribute("role", "listbox");
          ul.setAttribute("aria-expanded", "true");
          ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
          ul.addEventListener("mousedown", e => {
              // Prevent focus change when clicking the scrollbar
              if (e.target == ul)
                  e.preventDefault();
          });
          let curSection = null;
          for (let i = range.from; i < range.to; i++) {
              let { completion, match } = options[i], { section } = completion;
              if (section) {
                  let name = typeof section == "string" ? section : section.name;
                  if (name != curSection && (i > range.from || range.from == 0)) {
                      curSection = name;
                      if (typeof section != "string" && section.header) {
                          ul.appendChild(section.header(section));
                      }
                      else {
                          let header = ul.appendChild(document.createElement("completion-section"));
                          header.textContent = name;
                      }
                  }
              }
              const li = ul.appendChild(document.createElement("li"));
              li.id = id + "-" + i;
              li.setAttribute("role", "option");
              let cls = this.optionClass(completion);
              if (cls)
                  li.className = cls;
              for (let source of this.optionContent) {
                  let node = source(completion, this.view.state, this.view, match);
                  if (node)
                      li.appendChild(node);
              }
          }
          if (range.from)
              ul.classList.add("cm-completionListIncompleteTop");
          if (range.to < options.length)
              ul.classList.add("cm-completionListIncompleteBottom");
          return ul;
      }
      destroyInfo() {
          if (this.info) {
              if (this.infoDestroy)
                  this.infoDestroy();
              this.info.remove();
              this.info = null;
          }
      }
      destroy() {
          this.destroyInfo();
      }
  }
  function completionTooltip(stateField, applyCompletion) {
      return (view) => new CompletionTooltip(view, stateField, applyCompletion);
  }
  function scrollIntoView(container, element) {
      let parent = container.getBoundingClientRect();
      let self = element.getBoundingClientRect();
      let scaleY = parent.height / container.offsetHeight;
      if (self.top < parent.top)
          container.scrollTop -= (parent.top - self.top) / scaleY;
      else if (self.bottom > parent.bottom)
          container.scrollTop += (self.bottom - parent.bottom) / scaleY;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
      return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
          (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
      let options = [];
      let sections = null;
      let addOption = (option) => {
          options.push(option);
          let { section } = option.completion;
          if (section) {
              if (!sections)
                  sections = [];
              let name = typeof section == "string" ? section : section.name;
              if (!sections.some(s => s.name == name))
                  sections.push(typeof section == "string" ? { name } : section);
          }
      };
      let conf = state.facet(completionConfig);
      for (let a of active)
          if (a.hasResult()) {
              let getMatch = a.result.getMatch;
              if (a.result.filter === false) {
                  for (let option of a.result.options) {
                      addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
                  }
              }
              else {
                  let pattern = state.sliceDoc(a.from, a.to), match;
                  let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
                  for (let option of a.result.options)
                      if (match = matcher.match(option.label)) {
                          let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
                          addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
                      }
              }
          }
      if (sections) {
          let sectionOrder = Object.create(null), pos = 0;
          let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
          for (let s of sections.sort(cmp)) {
              pos -= 1e5;
              sectionOrder[s.name] = pos;
          }
          for (let option of options) {
              let { section } = option.completion;
              if (section)
                  option.score += sectionOrder[typeof section == "string" ? section : section.name];
          }
      }
      let result = [], prev = null;
      let compare = conf.compareCompletions;
      for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
          let cur = opt.completion;
          if (!prev || prev.label != cur.label || prev.detail != cur.detail ||
              (prev.type != null && cur.type != null && prev.type != cur.type) ||
              prev.apply != cur.apply || prev.boost != cur.boost)
              result.push(opt);
          else if (score(opt.completion) > score(prev))
              result[result.length - 1] = opt;
          prev = opt.completion;
      }
      return result;
  }
  class CompletionDialog {
      constructor(options, attrs, tooltip, timestamp, selected, disabled) {
          this.options = options;
          this.attrs = attrs;
          this.tooltip = tooltip;
          this.timestamp = timestamp;
          this.selected = selected;
          this.disabled = disabled;
      }
      setSelected(selected, id) {
          return selected == this.selected || selected >= this.options.length ? this
              : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
      static build(active, state, id, prev, conf, didSetActive) {
          if (prev && !didSetActive && active.some(s => s.isPending))
              return prev.setDisabled();
          let options = sortOptions(active, state);
          if (!options.length)
              return prev && active.some(a => a.isPending) ? prev.setDisabled() : null;
          let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
          if (prev && prev.selected != selected && prev.selected != -1) {
              let selectedValue = prev.options[prev.selected].completion;
              for (let i = 0; i < options.length; i++)
                  if (options[i].completion == selectedValue) {
                      selected = i;
                      break;
                  }
          }
          return new CompletionDialog(options, makeAttrs(id, selected), {
              pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
              create: createTooltip,
              above: conf.aboveCursor,
          }, prev ? prev.timestamp : Date.now(), selected, false);
      }
      map(changes) {
          return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
      }
      setDisabled() {
          return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
  }
  class CompletionState {
      constructor(active, id, open) {
          this.active = active;
          this.id = id;
          this.open = open;
      }
      static start() {
          return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
      update(tr) {
          let { state } = tr, conf = state.facet(completionConfig);
          let sources = conf.override ||
              state.languageDataAt("autocomplete", cur(state)).map(asSource);
          let active = sources.map(source => {
              let value = this.active.find(s => s.source == source) ||
                  new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
              return value.update(tr, conf);
          });
          if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
              active = this.active;
          let open = this.open, didSet = tr.effects.some(e => e.is(setActiveEffect));
          if (open && tr.docChanged)
              open = open.map(tr.changes);
          if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
              !sameResults(active, this.active) || didSet)
              open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
          else if (open && open.disabled && !active.some(a => a.isPending))
              open = null;
          if (!open && active.every(a => !a.isPending) && active.some(a => a.hasResult()))
              active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
          for (let effect of tr.effects)
              if (effect.is(setSelectedEffect))
                  open = open && open.setSelected(effect.value, this.id);
          return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
      get tooltip() { return this.open ? this.open.tooltip : null; }
      get attrs() { return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs; }
  }
  function sameResults(a, b) {
      if (a == b)
          return true;
      for (let iA = 0, iB = 0;;) {
          while (iA < a.length && !a[iA].hasResult())
              iA++;
          while (iB < b.length && !b[iB].hasResult())
              iB++;
          let endA = iA == a.length, endB = iB == b.length;
          if (endA || endB)
              return endA == endB;
          if (a[iA++].result != b[iB++].result)
              return false;
      }
  }
  const baseAttrs = {
      "aria-autocomplete": "list"
  };
  const noAttrs = {};
  function makeAttrs(id, selected) {
      let result = {
          "aria-autocomplete": "list",
          "aria-haspopup": "listbox",
          "aria-controls": id
      };
      if (selected > -1)
          result["aria-activedescendant"] = id + "-" + selected;
      return result;
  }
  const none$1 = [];
  function getUpdateType(tr, conf) {
      if (tr.isUserEvent("input.complete")) {
          let completion = tr.annotation(pickedCompletion);
          if (completion && conf.activateOnCompletion(completion))
              return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
      }
      let typing = tr.isUserEvent("input.type");
      return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */
          : typing ? 1 /* UpdateType.Typing */
              : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */
                  : tr.selection ? 8 /* UpdateType.Reset */
                      : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
  }
  class ActiveSource {
      constructor(source, state, explicit = false) {
          this.source = source;
          this.state = state;
          this.explicit = explicit;
      }
      hasResult() { return false; }
      get isPending() { return this.state == 1 /* State.Pending */; }
      update(tr, conf) {
          let type = getUpdateType(tr, conf), value = this;
          if ((type & 8 /* UpdateType.Reset */) || (type & 16 /* UpdateType.ResetIfTouching */) && this.touches(tr))
              value = new ActiveSource(value.source, 0 /* State.Inactive */);
          if ((type & 4 /* UpdateType.Activate */) && value.state == 0 /* State.Inactive */)
              value = new ActiveSource(this.source, 1 /* State.Pending */);
          value = value.updateFor(tr, type);
          for (let effect of tr.effects) {
              if (effect.is(startCompletionEffect))
                  value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);
              else if (effect.is(closeCompletionEffect))
                  value = new ActiveSource(value.source, 0 /* State.Inactive */);
              else if (effect.is(setActiveEffect))
                  for (let active of effect.value)
                      if (active.source == value.source)
                          value = active;
          }
          return value;
      }
      updateFor(tr, type) { return this.map(tr.changes); }
      map(changes) { return this; }
      touches(tr) {
          return tr.changes.touchesRange(cur(tr.state));
      }
  }
  class ActiveResult extends ActiveSource {
      constructor(source, explicit, limit, result, from, to) {
          super(source, 3 /* State.Result */, explicit);
          this.limit = limit;
          this.result = result;
          this.from = from;
          this.to = to;
      }
      hasResult() { return true; }
      updateFor(tr, type) {
          var _a;
          if (!(type & 3 /* UpdateType.SimpleInteraction */))
              return this.map(tr.changes);
          let result = this.result;
          if (result.map && !tr.changes.empty)
              result = result.map(result, tr.changes);
          let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
          let pos = cur(tr.state);
          if (pos > to || !result ||
              (type & 2 /* UpdateType.Backspacing */) && (cur(tr.startState) == this.from || pos < this.limit))
              return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
          let limit = tr.changes.mapPos(this.limit);
          if (checkValid(result.validFor, tr.state, from, to))
              return new ActiveResult(this.source, this.explicit, limit, result, from, to);
          if (result.update &&
              (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
              return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
          return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
      }
      map(mapping) {
          if (mapping.empty)
              return this;
          let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
          if (!result)
              return new ActiveSource(this.source, 0 /* State.Inactive */);
          return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
      touches(tr) {
          return tr.changes.touchesRange(this.from, this.to);
      }
  }
  function checkValid(validFor, state, from, to) {
      if (!validFor)
          return false;
      let text = state.sliceDoc(from, to);
      return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  const setActiveEffect = /*@__PURE__*/StateEffect.define({
      map(sources, mapping) { return sources.map(s => s.map(mapping)); }
  });
  const setSelectedEffect = /*@__PURE__*/StateEffect.define();
  const completionState = /*@__PURE__*/StateField.define({
      create() { return CompletionState.start(); },
      update(value, tr) { return value.update(tr); },
      provide: f => [
          showTooltip.from(f, val => val.tooltip),
          EditorView.contentAttributes.from(f, state => state.attrs)
      ]
  });
  function applyCompletion(view, option) {
      const apply = option.completion.apply || option.completion.label;
      let result = view.state.field(completionState).active.find(a => a.source == option.source);
      if (!(result instanceof ActiveResult))
          return false;
      if (typeof apply == "string")
          view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
      else
          apply(view, option.completion, result.from, result.to);
      return true;
  }
  const createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward, by = "option") {
      return (view) => {
          let cState = view.state.field(completionState, false);
          if (!cState || !cState.open || cState.open.disabled ||
              Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
              return false;
          let step = 1, tooltip;
          if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
              step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                  tooltip.dom.querySelector("li").offsetHeight) - 1);
          let { length } = cState.open.options;
          let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
          if (selected < 0)
              selected = by == "page" ? 0 : length - 1;
          else if (selected >= length)
              selected = by == "page" ? length - 1 : 0;
          view.dispatch({ effects: setSelectedEffect.of(selected) });
          return true;
      };
  }
  /**
  Accept the current completion.
  */
  const acceptCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||
          Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
          return false;
      return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  /**
  Explicitly start autocompletion.
  */
  const startCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState)
          return false;
      view.dispatch({ effects: startCompletionEffect.of(true) });
      return true;
  };
  /**
  Close the currently active completion.
  */
  const closeCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
          return false;
      view.dispatch({ effects: closeCompletionEffect.of(null) });
      return true;
  };
  class RunningQuery {
      constructor(active, context) {
          this.active = active;
          this.context = context;
          this.time = Date.now();
          this.updates = [];
          // Note that 'undefined' means 'not done yet', whereas 'null' means
          // 'query returned null'.
          this.done = undefined;
      }
  }
  const MaxUpdateCount = 50, MinAbortTime = 1000;
  const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.debounceUpdate = -1;
          this.running = [];
          this.debounceAccept = -1;
          this.pendingStart = false;
          this.composing = 0 /* CompositionState.None */;
          for (let active of view.state.field(completionState).active)
              if (active.isPending)
                  this.startQuery(active);
      }
      update(update) {
          let cState = update.state.field(completionState);
          let conf = update.state.facet(completionConfig);
          if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
              return;
          let doesReset = update.transactions.some(tr => {
              let type = getUpdateType(tr, conf);
              return (type & 8 /* UpdateType.Reset */) || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
          });
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (doesReset ||
                  query.context.abortOnDocChange && update.docChanged ||
                  query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                  for (let handler of query.context.abortListeners) {
                      try {
                          handler();
                      }
                      catch (e) {
                          logException(this.view.state, e);
                      }
                  }
                  query.context.abortListeners = null;
                  this.running.splice(i--, 1);
              }
              else {
                  query.updates.push(...update.transactions);
              }
          }
          if (this.debounceUpdate > -1)
              clearTimeout(this.debounceUpdate);
          if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect))))
              this.pendingStart = true;
          let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
          this.debounceUpdate = cState.active.some(a => a.isPending && !this.running.some(q => q.active.source == a.source))
              ? setTimeout(() => this.startUpdate(), delay) : -1;
          if (this.composing != 0 /* CompositionState.None */)
              for (let tr of update.transactions) {
                  if (tr.isUserEvent("input.type"))
                      this.composing = 2 /* CompositionState.Changed */;
                  else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                      this.composing = 3 /* CompositionState.ChangedAndMoved */;
              }
      }
      startUpdate() {
          this.debounceUpdate = -1;
          this.pendingStart = false;
          let { state } = this.view, cState = state.field(completionState);
          for (let active of cState.active) {
              if (active.isPending && !this.running.some(r => r.active.source == active.source))
                  this.startQuery(active);
          }
          if (this.running.length && cState.open && cState.open.disabled)
              this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      startQuery(active) {
          let { state } = this.view, pos = cur(state);
          let context = new CompletionContext(state, pos, active.explicit, this.view);
          let pending = new RunningQuery(active, context);
          this.running.push(pending);
          Promise.resolve(active.source(context)).then(result => {
              if (!pending.context.aborted) {
                  pending.done = result || null;
                  this.scheduleAccept();
              }
          }, err => {
              this.view.dispatch({ effects: closeCompletionEffect.of(null) });
              logException(this.view.state, err);
          });
      }
      scheduleAccept() {
          if (this.running.every(q => q.done !== undefined))
              this.accept();
          else if (this.debounceAccept < 0)
              this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
          var _a;
          if (this.debounceAccept > -1)
              clearTimeout(this.debounceAccept);
          this.debounceAccept = -1;
          let updated = [];
          let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (query.done === undefined)
                  continue;
              this.running.splice(i--, 1);
              if (query.done) {
                  let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
                  let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
                  let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
                  // Replay the transactions that happened since the start of
                  // the request and see if that preserves the result
                  for (let tr of query.updates)
                      active = active.update(tr, conf);
                  if (active.hasResult()) {
                      updated.push(active);
                      continue;
                  }
              }
              let current = cState.active.find(a => a.source == query.active.source);
              if (current && current.isPending) {
                  if (query.done == null) {
                      // Explicitly failed. Should clear the pending status if it
                      // hasn't been re-set in the meantime.
                      let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                      for (let tr of query.updates)
                          active = active.update(tr, conf);
                      if (!active.isPending)
                          updated.push(active);
                  }
                  else {
                      // Cleared by subsequent transactions. Restart.
                      this.startQuery(current);
                  }
              }
          }
          if (updated.length || cState.open && cState.open.disabled)
              this.view.dispatch({ effects: setActiveEffect.of(updated) });
      }
  }, {
      eventHandlers: {
          blur(event) {
              let state = this.view.state.field(completionState, false);
              if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
                  let dialog = state.open && getTooltip(this.view, state.open.tooltip);
                  if (!dialog || !dialog.dom.contains(event.relatedTarget))
                      setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
              }
          },
          compositionstart() {
              this.composing = 1 /* CompositionState.Started */;
          },
          compositionend() {
              if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                  // Safari fires compositionend events synchronously, possibly
                  // from inside an update, so dispatch asynchronously to avoid reentrancy
                  setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
              }
              this.composing = 0 /* CompositionState.None */;
          }
      }
  });
  const windows = typeof navigator == "object" && /*@__PURE__*//Win/.test(navigator.platform);
  const commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          let field = view.state.field(completionState, false);
          if (!field || !field.open || field.open.disabled || field.open.selected < 0 ||
              event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
              return false;
          let option = field.open.options[field.open.selected];
          let result = field.active.find(a => a.source == option.source);
          let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
          if (commitChars && commitChars.indexOf(event.key) > -1)
              applyCompletion(view, option);
          return false;
      }
  }));

  const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
              fontFamily: "monospace",
              whiteSpace: "nowrap",
              overflow: "hidden auto",
              maxWidth_fallback: "700px",
              maxWidth: "min(700px, 95vw)",
              minWidth: "250px",
              maxHeight: "10em",
              height: "100%",
              listStyle: "none",
              margin: 0,
              padding: 0,
              "& > li, & > completion-section": {
                  padding: "1px 3px",
                  lineHeight: 1.2
              },
              "& > li": {
                  overflowX: "hidden",
                  textOverflow: "ellipsis",
                  cursor: "pointer"
              },
              "& > completion-section": {
                  display: "list-item",
                  borderBottom: "1px solid silver",
                  paddingLeft: "0.5em",
                  opacity: 0.7
              }
          }
      },
      "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#17c",
          color: "white",
      },
      "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#777",
      },
      "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#347",
          color: "white",
      },
      "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#444",
      },
      ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"···"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
      },
      ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: `${400 /* Info.Width */}px`,
          boxSizing: "border-box",
          whiteSpace: "pre-line"
      },
      ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
      ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
      ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
      ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
      "&light .cm-snippetField": { backgroundColor: "#00000022" },
      "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
      ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          display: "inline-block",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
      },
      ".cm-completionMatchedText": {
          textDecoration: "underline"
      },
      ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
      },
      ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6",
          boxSizing: "content-box"
      },
      ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": { content: "'ƒ'" }
      },
      ".cm-completionIcon-class": {
          "&:after": { content: "'○'" }
      },
      ".cm-completionIcon-interface": {
          "&:after": { content: "'◌'" }
      },
      ".cm-completionIcon-variable": {
          "&:after": { content: "'𝑥'" }
      },
      ".cm-completionIcon-constant": {
          "&:after": { content: "'𝐶'" }
      },
      ".cm-completionIcon-type": {
          "&:after": { content: "'𝑡'" }
      },
      ".cm-completionIcon-enum": {
          "&:after": { content: "'∪'" }
      },
      ".cm-completionIcon-property": {
          "&:after": { content: "'□'" }
      },
      ".cm-completionIcon-keyword": {
          "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
      },
      ".cm-completionIcon-namespace": {
          "&:after": { content: "'▢'" }
      },
      ".cm-completionIcon-text": {
          "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
      }
  });

  class FieldPos {
      constructor(field, line, from, to) {
          this.field = field;
          this.line = line;
          this.from = from;
          this.to = to;
      }
  }
  class FieldRange {
      constructor(field, from, to) {
          this.field = field;
          this.from = from;
          this.to = to;
      }
      map(changes) {
          let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
          let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
          return from == null || to == null ? null : new FieldRange(this.field, from, to);
      }
  }
  class Snippet {
      constructor(lines, fieldPositions) {
          this.lines = lines;
          this.fieldPositions = fieldPositions;
      }
      instantiate(state, pos) {
          let text = [], lineStart = [pos];
          let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
          for (let line of this.lines) {
              if (text.length) {
                  let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                  for (let i = 0; i < tabs; i++)
                      indent += state.facet(indentUnit);
                  lineStart.push(pos + indent.length - tabs);
                  line = indent + line.slice(tabs);
              }
              text.push(line);
              pos += line.length + 1;
          }
          let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
          return { text, ranges };
      }
      static parse(template) {
          let fields = [];
          let lines = [], positions = [], m;
          for (let line of template.split(/\r\n?|\n/)) {
              while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
                  let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
                  let name = rawName.replace(/\\[{}]/g, m => m[1]);
                  for (let i = 0; i < fields.length; i++) {
                      if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                          found = i;
                  }
                  if (found < 0) {
                      let i = 0;
                      while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                          i++;
                      fields.splice(i, 0, { seq, name });
                      found = i;
                      for (let pos of positions)
                          if (pos.field >= found)
                              pos.field++;
                  }
                  positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                  line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
              }
              line = line.replace(/\\([{}])/g, (_, brace, index) => {
                  for (let pos of positions)
                      if (pos.line == lines.length && pos.from > index) {
                          pos.from--;
                          pos.to--;
                      }
                  return brace;
              });
              lines.push(line);
          }
          return new Snippet(lines, positions);
      }
  }
  let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM() {
              let span = document.createElement("span");
              span.className = "cm-snippetFieldPosition";
              return span;
          }
          ignoreEvent() { return false; }
      } });
  let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
  class ActiveSnippet {
      constructor(ranges, active) {
          this.ranges = ranges;
          this.active = active;
          this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
      }
      map(changes) {
          let ranges = [];
          for (let r of this.ranges) {
              let mapped = r.map(changes);
              if (!mapped)
                  return null;
              ranges.push(mapped);
          }
          return new ActiveSnippet(ranges, this.active);
      }
      selectionInsideField(sel) {
          return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
      }
  }
  const setActive = /*@__PURE__*/StateEffect.define({
      map(value, changes) { return value && value.map(changes); }
  });
  const moveToField = /*@__PURE__*/StateEffect.define();
  const snippetState = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(value, tr) {
          for (let effect of tr.effects) {
              if (effect.is(setActive))
                  return effect.value;
              if (effect.is(moveToField) && value)
                  return new ActiveSnippet(value.ranges, effect.value);
          }
          if (value && tr.docChanged)
              value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection))
              value = null;
          return value;
      },
      provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
      return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:

      "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

  Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.

  When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.

  On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.

  The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.

  To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
      let snippet = Snippet.parse(template);
      return (editor, completion, from, to) => {
          let { text, ranges } = snippet.instantiate(editor.state, from);
          let { main } = editor.state.selection;
          let spec = {
              changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
              scrollIntoView: true,
              annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
          };
          if (ranges.length)
              spec.selection = fieldSelection(ranges, 0);
          if (ranges.some(r => r.field > 0)) {
              let active = new ActiveSnippet(ranges, 0);
              let effects = spec.effects = [setActive.of(active)];
              if (editor.state.field(snippetState, false) === undefined)
                  effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$3]));
          }
          editor.dispatch(editor.state.update(spec));
      };
  }
  function moveField(dir) {
      return ({ state, dispatch }) => {
          let active = state.field(snippetState, false);
          if (!active || dir < 0 && active.active == 0)
              return false;
          let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
          dispatch(state.update({
              selection: fieldSelection(active.ranges, next),
              effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
              scrollIntoView: true
          }));
          return true;
      };
  }
  /**
  A command that clears the active snippet, if any.
  */
  const clearSnippet = ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active)
          return false;
      dispatch(state.update({ effects: setActive.of(null) }));
      return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  const nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  const prevSnippetField = /*@__PURE__*/moveField(-1);
  const defaultSnippetKeymap = [
      { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
      { key: "Escape", run: clearSnippet }
  ];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  const snippetKeymap = /*@__PURE__*/Facet.define({
      combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
  });
  const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
      return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
      mousedown(event, view) {
          let active = view.state.field(snippetState, false), pos;
          if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
              return false;
          let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
          if (!match || match.field == active.active)
              return false;
          view.dispatch({
              selection: fieldSelection(active.ranges, match.field),
              effects: setActive.of(active.ranges.some(r => r.field > match.field)
                  ? new ActiveSnippet(active.ranges, match.field) : null),
              scrollIntoView: true
          });
          return true;
      }
  });

  const defaults = {
      brackets: ["(", "[", "{", "'", '"'],
      before: ")]}:;>",
      stringPrefixes: []
  };
  const closeBracketEffect = /*@__PURE__*/StateEffect.define({
      map(value, mapping) {
          let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
          return mapped == null ? undefined : mapped;
      }
  });
  const closedBracket = /*@__PURE__*/new class extends RangeValue {
  };
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  const bracketState = /*@__PURE__*/StateField.define({
      create() { return RangeSet.empty; },
      update(value, tr) {
          value = value.map(tr.changes);
          if (tr.selection) {
              let line = tr.state.doc.lineAt(tr.selection.main.head);
              value = value.update({ filter: from => from >= line.from && from <= line.to });
          }
          for (let effect of tr.effects)
              if (effect.is(closeBracketEffect))
                  value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
          return value;
      }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
      return [inputHandler, bracketState];
  }
  const definedClosing = "()[]{}<>«»»«［］｛｝";
  function closing$1(ch) {
      for (let i = 0; i < definedClosing.length; i += 2)
          if (definedClosing.charCodeAt(i) == ch)
              return definedClosing.charAt(i + 1);
      return fromCodePoint$2(ch < 128 ? ch : ch + 1);
  }
  function config$1(state, pos) {
      return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
      if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
          return false;
      let sel = view.state.selection.main;
      if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
          from != sel.from || to != sel.to)
          return false;
      let tr = insertBracket(view.state, insert);
      if (!tr)
          return false;
      view.dispatch(tr);
      return true;
  });
  /**
  Command that implements deleting a pair of matching brackets when
  the cursor is between them.
  */
  const deleteBracketPair = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let conf = config$1(state, state.selection.main.head);
      let tokens = conf.brackets || defaults.brackets;
      let dont = null, changes = state.changeByRange(range => {
          if (range.empty) {
              let before = prevChar(state.doc, range.head);
              for (let token of tokens) {
                  if (token == before && nextChar(state.doc, range.head) == closing$1(codePointAt(token, 0)))
                      return { changes: { from: range.head - token.length, to: range.head + token.length },
                          range: EditorSelection.cursor(range.head - token.length) };
              }
          }
          return { range: dont = range };
      });
      if (!dont)
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
      return !dont;
  };
  /**
  Close-brackets related key bindings. Binds Backspace to
  [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
  */
  const closeBracketsKeymap = [
      { key: "Backspace", run: deleteBracketPair }
  ];
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
      let conf = config$1(state, state.selection.main.head);
      let tokens = conf.brackets || defaults.brackets;
      for (let tok of tokens) {
          let closed = closing$1(codePointAt(tok, 0));
          if (bracket == tok)
              return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                  : handleOpen(state, tok, closed, conf.before || defaults.before);
          if (bracket == closed && closedBracketAt(state, state.selection.main.from))
              return handleClose(state, tok, closed);
      }
      return null;
  }
  function closedBracketAt(state, pos) {
      let found = false;
      state.field(bracketState).between(0, state.doc.length, from => {
          if (from == pos)
              found = true;
      });
      return found;
  }
  function nextChar(doc, pos) {
      let next = doc.sliceString(pos, pos + 2);
      return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function prevChar(doc, pos) {
      let prev = doc.sliceString(pos - 2, pos);
      return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close, closeBefore) {
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                  effects: closeBracketEffect.of(range.to + open.length),
                  range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
          let next = nextChar(state.doc, range.head);
          if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
              return { changes: { insert: open + close, from: range.head },
                  effects: closeBracketEffect.of(range.head + open.length),
                  range: EditorSelection.cursor(range.head + open.length) };
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function handleClose(state, _open, close) {
      let dont = null, changes = state.changeByRange(range => {
          if (range.empty && nextChar(state.doc, range.head) == close)
              return { changes: { from: range.head, to: range.head + close.length, insert: close },
                  range: EditorSelection.cursor(range.head + close.length) };
          return dont = { range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
      let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                  effects: closeBracketEffect.of(range.to + token.length),
                  range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
          let pos = range.head, next = nextChar(state.doc, pos), start;
          if (next == token) {
              if (nodeStart(state, pos)) {
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
              }
              else if (closedBracketAt(state, pos)) {
                  let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                  let content = isTriple ? token + token + token : token;
                  return { changes: { from: pos, to: pos + content.length, insert: content },
                      range: EditorSelection.cursor(pos + content.length) };
              }
          }
          else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
              (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
              nodeStart(state, start)) {
              return { changes: { insert: token + token + token + token, from: pos },
                  effects: closeBracketEffect.of(pos + token.length),
                  range: EditorSelection.cursor(pos + token.length) };
          }
          else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
              if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
          }
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function nodeStart(state, pos) {
      let tree = syntaxTree(state).resolveInner(pos + 1);
      return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
      let node = syntaxTree(state).resolveInner(pos, -1);
      let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
      for (let i = 0; i < 5; i++) {
          let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
          let quotePos = start.indexOf(quoteToken);
          if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
              let first = node.firstChild;
              while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                  if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                      return false;
                  first = first.firstChild;
              }
              return true;
          }
          let parent = node.to == pos && node.parent;
          if (!parent)
              break;
          node = parent;
      }
      return false;
  }
  function canStartStringAt(state, pos, prefixes) {
      let charCat = state.charCategorizer(pos);
      if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
          return pos;
      for (let prefix of prefixes) {
          let start = pos - prefix.length;
          if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
              return start;
      }
      return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion(config = {}) {
      return [
          commitCharacters,
          completionState,
          completionConfig.of(config),
          completionPlugin,
          completionKeymapExt,
          baseTheme$3
      ];
  }
  /**
  Basic keybindings for autocompletion.

   - Ctrl-Space (and Alt-\` on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  const completionKeymap = [
      { key: "Ctrl-Space", run: startCompletion },
      { mac: "Alt-`", run: startCompletion },
      { key: "Escape", run: closeCompletion },
      { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
      { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
      { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
      { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
      { key: "Enter", run: acceptCompletion }
  ];
  const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var loglevel$1 = {exports: {}};

  /*
  * loglevel - https://github.com/pimterry/loglevel
  *
  * Copyright (c) 2013 Tim Perry
  * Licensed under the MIT license.
  */
  var loglevel = loglevel$1.exports;

  var hasRequiredLoglevel;

  function requireLoglevel () {
  	if (hasRequiredLoglevel) return loglevel$1.exports;
  	hasRequiredLoglevel = 1;
  	(function (module) {
  		(function (root, definition) {
  		    if (module.exports) {
  		        module.exports = definition();
  		    } else {
  		        root.log = definition();
  		    }
  		}(loglevel, function () {

  		    // Slightly dubious tricks to cut down minimized file size
  		    var noop = function() {};
  		    var undefinedType = "undefined";
  		    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
  		        /Trident\/|MSIE /.test(window.navigator.userAgent)
  		    );

  		    var logMethods = [
  		        "trace",
  		        "debug",
  		        "info",
  		        "warn",
  		        "error"
  		    ];

  		    var _loggersByName = {};
  		    var defaultLogger = null;

  		    // Cross-browser bind equivalent that works at least back to IE6
  		    function bindMethod(obj, methodName) {
  		        var method = obj[methodName];
  		        if (typeof method.bind === 'function') {
  		            return method.bind(obj);
  		        } else {
  		            try {
  		                return Function.prototype.bind.call(method, obj);
  		            } catch (e) {
  		                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
  		                return function() {
  		                    return Function.prototype.apply.apply(method, [obj, arguments]);
  		                };
  		            }
  		        }
  		    }

  		    // Trace() doesn't print the message in IE, so for that case we need to wrap it
  		    function traceForIE() {
  		        if (console.log) {
  		            if (console.log.apply) {
  		                console.log.apply(console, arguments);
  		            } else {
  		                // In old IE, native console methods themselves don't have apply().
  		                Function.prototype.apply.apply(console.log, [console, arguments]);
  		            }
  		        }
  		        if (console.trace) console.trace();
  		    }

  		    // Build the best logging method possible for this env
  		    // Wherever possible we want to bind, not wrap, to preserve stack traces
  		    function realMethod(methodName) {
  		        if (methodName === 'debug') {
  		            methodName = 'log';
  		        }

  		        if (typeof console === undefinedType) {
  		            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
  		        } else if (methodName === 'trace' && isIE) {
  		            return traceForIE;
  		        } else if (console[methodName] !== undefined) {
  		            return bindMethod(console, methodName);
  		        } else if (console.log !== undefined) {
  		            return bindMethod(console, 'log');
  		        } else {
  		            return noop;
  		        }
  		    }

  		    // These private functions always need `this` to be set properly

  		    function replaceLoggingMethods() {
  		        /*jshint validthis:true */
  		        var level = this.getLevel();

  		        // Replace the actual methods.
  		        for (var i = 0; i < logMethods.length; i++) {
  		            var methodName = logMethods[i];
  		            this[methodName] = (i < level) ?
  		                noop :
  		                this.methodFactory(methodName, level, this.name);
  		        }

  		        // Define log.log as an alias for log.debug
  		        this.log = this.debug;

  		        // Return any important warnings.
  		        if (typeof console === undefinedType && level < this.levels.SILENT) {
  		            return "No console available for logging";
  		        }
  		    }

  		    // In old IE versions, the console isn't present until you first open it.
  		    // We build realMethod() replacements here that regenerate logging methods
  		    function enableLoggingWhenConsoleArrives(methodName) {
  		        return function () {
  		            if (typeof console !== undefinedType) {
  		                replaceLoggingMethods.call(this);
  		                this[methodName].apply(this, arguments);
  		            }
  		        };
  		    }

  		    // By default, we use closely bound real methods wherever possible, and
  		    // otherwise we wait for a console to appear, and then try again.
  		    function defaultMethodFactory(methodName, _level, _loggerName) {
  		        /*jshint validthis:true */
  		        return realMethod(methodName) ||
  		               enableLoggingWhenConsoleArrives.apply(this, arguments);
  		    }

  		    function Logger(name, factory) {
  		      // Private instance variables.
  		      var self = this;
  		      /**
  		       * The level inherited from a parent logger (or a global default). We
  		       * cache this here rather than delegating to the parent so that it stays
  		       * in sync with the actual logging methods that we have installed (the
  		       * parent could change levels but we might not have rebuilt the loggers
  		       * in this child yet).
  		       * @type {number}
  		       */
  		      var inheritedLevel;
  		      /**
  		       * The default level for this logger, if any. If set, this overrides
  		       * `inheritedLevel`.
  		       * @type {number|null}
  		       */
  		      var defaultLevel;
  		      /**
  		       * A user-specific level for this logger. If set, this overrides
  		       * `defaultLevel`.
  		       * @type {number|null}
  		       */
  		      var userLevel;

  		      var storageKey = "loglevel";
  		      if (typeof name === "string") {
  		        storageKey += ":" + name;
  		      } else if (typeof name === "symbol") {
  		        storageKey = undefined;
  		      }

  		      function persistLevelIfPossible(levelNum) {
  		          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

  		          if (typeof window === undefinedType || !storageKey) return;

  		          // Use localStorage if available
  		          try {
  		              window.localStorage[storageKey] = levelName;
  		              return;
  		          } catch (ignore) {}

  		          // Use session cookie as fallback
  		          try {
  		              window.document.cookie =
  		                encodeURIComponent(storageKey) + "=" + levelName + ";";
  		          } catch (ignore) {}
  		      }

  		      function getPersistedLevel() {
  		          var storedLevel;

  		          if (typeof window === undefinedType || !storageKey) return;

  		          try {
  		              storedLevel = window.localStorage[storageKey];
  		          } catch (ignore) {}

  		          // Fallback to cookies if local storage gives us nothing
  		          if (typeof storedLevel === undefinedType) {
  		              try {
  		                  var cookie = window.document.cookie;
  		                  var cookieName = encodeURIComponent(storageKey);
  		                  var location = cookie.indexOf(cookieName + "=");
  		                  if (location !== -1) {
  		                      storedLevel = /^([^;]+)/.exec(
  		                          cookie.slice(location + cookieName.length + 1)
  		                      )[1];
  		                  }
  		              } catch (ignore) {}
  		          }

  		          // If the stored level is not valid, treat it as if nothing was stored.
  		          if (self.levels[storedLevel] === undefined) {
  		              storedLevel = undefined;
  		          }

  		          return storedLevel;
  		      }

  		      function clearPersistedLevel() {
  		          if (typeof window === undefinedType || !storageKey) return;

  		          // Use localStorage if available
  		          try {
  		              window.localStorage.removeItem(storageKey);
  		          } catch (ignore) {}

  		          // Use session cookie as fallback
  		          try {
  		              window.document.cookie =
  		                encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
  		          } catch (ignore) {}
  		      }

  		      function normalizeLevel(input) {
  		          var level = input;
  		          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
  		              level = self.levels[level.toUpperCase()];
  		          }
  		          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
  		              return level;
  		          } else {
  		              throw new TypeError("log.setLevel() called with invalid level: " + input);
  		          }
  		      }

  		      /*
  		       *
  		       * Public logger API - see https://github.com/pimterry/loglevel for details
  		       *
  		       */

  		      self.name = name;

  		      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
  		          "ERROR": 4, "SILENT": 5};

  		      self.methodFactory = factory || defaultMethodFactory;

  		      self.getLevel = function () {
  		          if (userLevel != null) {
  		            return userLevel;
  		          } else if (defaultLevel != null) {
  		            return defaultLevel;
  		          } else {
  		            return inheritedLevel;
  		          }
  		      };

  		      self.setLevel = function (level, persist) {
  		          userLevel = normalizeLevel(level);
  		          if (persist !== false) {  // defaults to true
  		              persistLevelIfPossible(userLevel);
  		          }

  		          // NOTE: in v2, this should call rebuild(), which updates children.
  		          return replaceLoggingMethods.call(self);
  		      };

  		      self.setDefaultLevel = function (level) {
  		          defaultLevel = normalizeLevel(level);
  		          if (!getPersistedLevel()) {
  		              self.setLevel(level, false);
  		          }
  		      };

  		      self.resetLevel = function () {
  		          userLevel = null;
  		          clearPersistedLevel();
  		          replaceLoggingMethods.call(self);
  		      };

  		      self.enableAll = function(persist) {
  		          self.setLevel(self.levels.TRACE, persist);
  		      };

  		      self.disableAll = function(persist) {
  		          self.setLevel(self.levels.SILENT, persist);
  		      };

  		      self.rebuild = function () {
  		          if (defaultLogger !== self) {
  		              inheritedLevel = normalizeLevel(defaultLogger.getLevel());
  		          }
  		          replaceLoggingMethods.call(self);

  		          if (defaultLogger === self) {
  		              for (var childName in _loggersByName) {
  		                _loggersByName[childName].rebuild();
  		              }
  		          }
  		      };

  		      // Initialize all the internal levels.
  		      inheritedLevel = normalizeLevel(
  		          defaultLogger ? defaultLogger.getLevel() : "WARN"
  		      );
  		      var initialLevel = getPersistedLevel();
  		      if (initialLevel != null) {
  		          userLevel = normalizeLevel(initialLevel);
  		      }
  		      replaceLoggingMethods.call(self);
  		    }

  		    /*
  		     *
  		     * Top-level API
  		     *
  		     */

  		    defaultLogger = new Logger();

  		    defaultLogger.getLogger = function getLogger(name) {
  		        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
  		            throw new TypeError("You must supply a name when creating a logger.");
  		        }

  		        var logger = _loggersByName[name];
  		        if (!logger) {
  		            logger = _loggersByName[name] = new Logger(
  		                name,
  		                defaultLogger.methodFactory
  		            );
  		        }
  		        return logger;
  		    };

  		    // Grab the current global log variable in case of overwrite
  		    var _log = (typeof window !== undefinedType) ? window.log : undefined;
  		    defaultLogger.noConflict = function() {
  		        if (typeof window !== undefinedType &&
  		               window.log === defaultLogger) {
  		            window.log = _log;
  		        }

  		        return defaultLogger;
  		    };

  		    defaultLogger.getLoggers = function getLoggers() {
  		        return _loggersByName;
  		    };

  		    // ES6 default export, for compatibility
  		    defaultLogger['default'] = defaultLogger;

  		    return defaultLogger;
  		})); 
  	} (loglevel$1));
  	return loglevel$1.exports;
  }

  var loglevelExports = requireLoglevel();
  var log = /*@__PURE__*/getDefaultExportFromCjs(loglevelExports);

  log.setLevel("silent" );
  const debug = log;

  const TOKENS = {
      STRING: "String",
      NUMBER: "Number",
      TRUE: "True",
      FALSE: "False",
      NULL: "Null",
      OBJECT: "Object",
      ARRAY: "Array",
      PROPERTY: "Property",
      PROPERTY_NAME: "PropertyName",
      PROPERTY_COLON: "PropertyColon", // used in json5 grammar
      ITEM: "Item", // used in yaml grammar
      JSON_TEXT: "JsonText",
      INVALID: "⚠",
  };
  // TODO: To ensure that the YAML tokens are always mapped correctly,
  // we should change the TOKENS values to some other values and also create
  // mappings for the JSON tokens, which will force us to update all the token mappings whenever there is a change.
  const YAML_TOKENS_MAPPING = {
      Pair: TOKENS.PROPERTY,
      Key: TOKENS.PROPERTY_NAME,
      BlockSequence: TOKENS.ARRAY,
      BlockMapping: TOKENS.OBJECT,
      FlowSequence: TOKENS.ARRAY,
      FlowMapping: TOKENS.OBJECT,
      QuotedLiteral: TOKENS.STRING,
      Literal: TOKENS.STRING, // best guess
      Stream: TOKENS.JSON_TEXT,
      Document: TOKENS.OBJECT,
  };
  const JSON5_TOKENS_MAPPING = {
      File: TOKENS.JSON_TEXT,
  };
  const PRIMITIVE_TYPES = [
      TOKENS.STRING,
      TOKENS.NUMBER,
      TOKENS.TRUE,
      TOKENS.FALSE,
      TOKENS.NULL,
  ];
  const COMPLEX_TYPES = [TOKENS.OBJECT, TOKENS.ARRAY, TOKENS.ITEM];
  const MODES = {
      JSON5: "json5",
      JSON: "json4",
      YAML: "yaml",
  };

  const resolveTokenName = (nodeName, mode) => {
      var _a, _b;
      switch (mode) {
          case MODES.YAML:
              return (_a = YAML_TOKENS_MAPPING[nodeName]) !== null && _a !== void 0 ? _a : nodeName;
          case MODES.JSON5:
              return (_b = JSON5_TOKENS_MAPPING[nodeName]) !== null && _b !== void 0 ? _b : nodeName;
          default:
              return nodeName;
      }
  };
  // adapted from https://discuss.codemirror.net/t/json-pointer-at-cursor-seeking-implementation-critique/4793/3
  // this could be useful for other things later!
  function getJsonPointerAt(docText, node, mode) {
      const path = [];
      for (let n = node; n === null || n === void 0 ? void 0 : n.parent; n = n.parent) {
          switch (resolveTokenName(n.parent.name, mode)) {
              case TOKENS.PROPERTY: {
                  const name = getMatchingChildNode(n.parent, TOKENS.PROPERTY_NAME, mode);
                  if (name) {
                      let word = getWord(docText, name).replace(/[/~]/g, (v) => v === "~" ? "~0" : "~1");
                      // TODO generally filter out pointers to objects being started?
                      // if (word !== '') {
                      path.unshift(word);
                      // }
                  }
                  break;
              }
              case TOKENS.ARRAY: {
                  if (isValueNode(n, mode)) {
                      const index = findNodeIndexInArrayNode(n.parent, n, mode);
                      path.unshift(`${index}`);
                  }
                  break;
              }
          }
      }
      if (path.length === 0) {
          // TODO json-schema-library does not seem to like / as root pointer (it probably just uses split and it will return two empty strings). So is this fine? And why is it not prefixed with #?
          return "";
      }
      return "/" + path.join("/");
  }
  /**
   * retrieve a JSON pointer for a given position in the editor
   * @group Utilities
   */
  const jsonPointerForPosition = (state, pos, side = -1, mode) => {
      return getJsonPointerAt(state.doc, syntaxTree(state).resolve(pos, side), mode);
  };
  /**
   * retrieve a Map of all the json pointers in a document
   * @group Utilities
   */
  const getJsonPointers = (state, mode) => {
      const tree = syntaxTree(state);
      const pointers = new Map();
      tree.iterate({
          enter: (type) => {
              var _a, _b, _c, _d, _e, _f, _g, _h;
              if ([TOKENS.PROPERTY_NAME, TOKENS.OBJECT].includes(resolveTokenName(type.name, mode))) {
                  const pointer = getJsonPointerAt(state.doc, type.node, mode);
                  const { from: keyFrom, to: keyTo } = type.node;
                  // if there's no value, we can't get the valueFrom/to
                  if (!((_b = (_a = type.node) === null || _a === void 0 ? void 0 : _a.nextSibling) === null || _b === void 0 ? void 0 : _b.node)) {
                      pointers.set(pointer, { keyFrom, keyTo });
                      return true;
                  }
                  // TODO: Make this generic enough to avoid mode-specific checks
                  const nextNode = mode === MODES.JSON
                      ? (_d = (_c = type.node) === null || _c === void 0 ? void 0 : _c.nextSibling) === null || _d === void 0 ? void 0 : _d.node
                      : (_h = (_g = (_f = (_e = type.node) === null || _e === void 0 ? void 0 : _e.nextSibling) === null || _f === void 0 ? void 0 : _f.node) === null || _g === void 0 ? void 0 : _g.nextSibling) === null || _h === void 0 ? void 0 : _h.node;
                  if (!nextNode) {
                      pointers.set(pointer, { keyFrom, keyTo });
                      return true;
                  }
                  const { from: valueFrom, to: valueTo } = nextNode;
                  pointers.set(pointer, { keyFrom, keyTo, valueFrom, valueTo });
                  return true;
              }
          },
      });
      return pointers;
  };

  const getNodeAtPosition = (state, pos, side = -1) => {
      return syntaxTree(state).resolveInner(pos, side);
  };
  const stripSurroundingQuotes = (str) => {
      return str.replace(/^"(.*)"$/, "$1").replace(/^'(.*)'$/, "$1");
  };
  const surroundingDoubleQuotesToSingle = (str) => {
      return str.replace(/^"(.*)"$/, "'$1'");
  };
  const getWord = (doc, node, stripQuotes = true, onlyEvenQuotes = true) => {
      const word = node ? doc.sliceString(node.from, node.to) : "";
      if (!stripQuotes) {
          return word;
      }
      if (onlyEvenQuotes) {
          return stripSurroundingQuotes(word);
      }
      return word.replace(/(^["'])|(["']$)/g, "");
  };
  const isInvalidValueNode = (node, mode) => {
      var _a, _b, _c, _d;
      return (resolveTokenName(node.name, mode) === TOKENS.INVALID &&
          (resolveTokenName((_b = (_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "", mode) ===
              TOKENS.PROPERTY_NAME ||
              resolveTokenName((_d = (_c = node.prevSibling) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : "", mode) ===
                  TOKENS.PROPERTY_COLON));
  };
  const isPrimitiveValueNode = (node, mode) => {
      return (PRIMITIVE_TYPES.includes(resolveTokenName(node.name, mode)) ||
          isInvalidValueNode(node, mode));
  };
  const isValueNode = (node, mode) => {
      return ([...PRIMITIVE_TYPES, ...COMPLEX_TYPES].includes(resolveTokenName(node.name, mode)) || isInvalidValueNode(node, mode));
  };
  const isPropertyNameNode = (node, mode) => {
      var _a, _b, _c, _d, _e, _f;
      return (resolveTokenName(node.name, mode) === TOKENS.PROPERTY_NAME ||
          (resolveTokenName(node.name, mode) === TOKENS.INVALID &&
              (resolveTokenName((_b = (_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "", mode) ===
                  TOKENS.PROPERTY ||
                  resolveTokenName((_d = (_c = node.prevSibling) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : "", mode) === "{")) ||
          // TODO: Can we make this work without checking for the mode?
          (mode === MODES.YAML &&
              resolveTokenName((_f = (_e = node.parent) === null || _e === void 0 ? void 0 : _e.name) !== null && _f !== void 0 ? _f : "", mode) === TOKENS.OBJECT));
  };
  const getChildrenNodes = (node) => {
      const children = [];
      let child = node.firstChild;
      while (child) {
          if (child) {
              children.push(child);
          }
          child = child === null || child === void 0 ? void 0 : child.nextSibling;
      }
      return children;
  };
  const getMatchingChildrenNodes = (node, nodeName, mode) => {
      return getChildrenNodes(node).filter((n) => resolveTokenName(n.name, mode) === nodeName);
  };
  const getMatchingChildNode = (node, nodeName, mode) => {
      var _a;
      return ((_a = getChildrenNodes(node).find((n) => resolveTokenName(n.name, mode) === nodeName)) !== null && _a !== void 0 ? _a : null);
  };
  const getChildValueNode = (node, mode) => {
      return getChildrenNodes(node).find((n) => isPrimitiveValueNode(n, mode));
  };
  const getArrayNodeChildren = (node, mode) => {
      return getChildrenNodes(node).filter((n) => PRIMITIVE_TYPES.includes(resolveTokenName(n.name, mode)) ||
          COMPLEX_TYPES.includes(resolveTokenName(n.name, mode)));
  };
  const findNodeIndexInArrayNode = (arrayNode, valueNode, mode) => {
      return getArrayNodeChildren(arrayNode, mode).findIndex((nd) => nd.from === valueNode.from && nd.to === valueNode.to);
  };
  const getClosestNode = (node, nodeName, mode, depth = Infinity) => {
      let n = node;
      while (n && depth > 0) {
          if (resolveTokenName(n.name, mode) === nodeName) {
              return n;
          }
          n = n.parent;
          depth--;
      }
      return null;
  };

  const schemaEffect = StateEffect.define();
  const schemaStateField = StateField.define({
      create() { },
      update(schema, tr) {
          for (const e of tr.effects) {
              if (e.is(schemaEffect)) {
                  return e.value;
              }
          }
          return schema;
      },
  });
  const getJSONSchema = (state) => {
      return state.field(schemaStateField);
  };
  const stateExtensions = (schema) => [
      schemaStateField.init(() => schema),
  ];

  /* eslint max-len: 0 */
  var strings = {
      // validation errors
      AdditionalItemsError: "Array at `{{pointer}}` may not have an additional item `{{key}}`",
      AdditionalPropertiesError: "Additional property `{{property}}` on `{{pointer}}` does not match schema `{{schema}}`",
      AllOfError: "Value `{{value}}` at `{{pointer}}` does not match schema of `{{allOf}}`",
      AnyOfError: "Value `{{value}}` at `{{pointer}}` does not match any schema of `{{anyOf}}`",
      ConstError: "Expected value at `{{pointer}}` to be `{{expected}}`, but value given is `{{value}}`",
      containsAnyError: "The array at `{{pointer}}` must contain at least one item",
      ContainsArrayError: "The property at `{{pointer}}` must not be an array",
      ContainsError: "The array at `{{pointer}}` must contain an element that matches `{{schema}}`",
      EnumError: "Expected given value `{{value}}` in `{{pointer}}` to be one of `{{values}}`",
      ForbiddenPropertyError: "Property name `{{property}}` at `{{pointer}}` is not allowed",
      FormatDateError: "Value `{{value}}` at `{{pointer}}` is not a valid date",
      FormatDateTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid date-time",
      FormatEmailError: "Value `{{value}}` at `{{pointer}}` is not a valid email",
      FormatHostnameError: "Value `{{value}}` at `{{pointer}}` is not a valid hostname",
      FormatIPV4Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv4 address",
      FormatIPV4LeadingZeroError: "IPv4 addresses starting with zero are invalid, since they are interpreted as octals",
      FormatIPV6Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv6 address",
      FormatIPV6LeadingZeroError: "IPv6 addresses starting with zero are invalid, since they are interpreted as octals",
      FormatJsonPointerError: "Value `{{value}}` at `{{pointer}}` is not a valid json-pointer",
      FormatRegExError: "Value `{{value}}` at `{{pointer}}` is not a valid regular expression",
      FormatTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid time",
      FormatURIError: "Value `{{value}}` at `{{pointer}}` is not a valid uri",
      FormatURIReferenceError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-reference",
      FormatURITemplateError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-template",
      FormatURLError: "Value `{{value}}` at `{{pointer}}` is not a valid url",
      InvalidDataError: "No value may be specified in `{{pointer}}`",
      InvalidPropertyNameError: "Invalid property name `{{property}}` at `{{pointer}}`",
      MaximumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{maximum}}` at maximum",
      MaxItemsError: "Too many items in `{{pointer}}`, should be `{{maximum}}` at most, but got `{{length}}`",
      MaxLengthError: "Value `{{pointer}}` should have a maximum length of `{{maxLength}}`, but got `{{length}}`.",
      MaxPropertiesError: "Too many properties in `{{pointer}}`, should be `{{maximum}}` at most, but got `{{length}}`",
      MinimumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{minimum}}` at minimum",
      MinItemsError: "Too few items in `{{pointer}}`, should be at least `{{minItems}}`, but got `{{length}}`",
      MinItemsOneError: "At least one item is required in `{{pointer}}`",
      MinLengthError: "Value `{{pointer}}` should have a minimum length of `{{minLength}}`, but got `{{length}}`.",
      MinLengthOneError: "A value is required in `{{pointer}}`",
      MinPropertiesError: "Too few properties in `{{pointer}}`, should be at least `{{minimum}}`, but got `{{length}}`",
      MissingDependencyError: "The required propery '{{missingProperty}}' in `{{pointer}}` is missing",
      MissingOneOfPropertyError: "Value at `{{pointer}}` property: `{{property}}`",
      MultipleOfError: "Expected `{{value}}` in `{{pointer}}` to be multiple of `{{multipleOf}}`",
      MultipleOneOfError: "Value `{{value}}` should not match multiple schemas in oneOf `{{matches}}`",
      NoAdditionalPropertiesError: "Additional property `{{property}}` in `{{pointer}}` is not allowed",
      NotError: "Value `{{value}}` at pointer should not match schema `{{not}}`",
      OneOfError: "Value `{{value}}` in `{{pointer}}` does not match any given oneof schema",
      OneOfPropertyError: "Failed finding a matching oneOfProperty schema in `{{pointer}}` where `{{property}}` matches `{{value}}`",
      PatternError: "Value in `{{pointer}}` should match `{{description}}`, but received `{{received}}`",
      PatternPropertiesError: "Property `{{key}}` does not match any patterns in `{{pointer}}`. Valid patterns are: {{patterns}}",
      RequiredPropertyError: "The required property `{{key}}` is missing at `{{pointer}}`",
      SchemaWarning: "Failed retrieving a schema from '{{pointer}}' to key '{{key}}'",
      TypeError: "Expected `{{value}}` ({{received}}) in `{{pointer}}` to be of type `{{expected}}`",
      UndefinedValueError: "Value must not be undefined in `{{pointer}}`",
      UniqueItemsError: "Items in array must be unique. Value `{{value}}` in `{{pointer}}` is a duplicate of {{duplicatePointer}}.",
      UnknownPropertyError: "Could not find a valid schema for property `{{pointer}}` within object",
      ValueNotEmptyError: "A value for `{{property}}` is required at `{{pointer}}`"
  };

  const toString$1 = Object.prototype.toString;
  function getTypeOf$1(value) {
      const type = toString$1
          .call(value)
          .match(/\s([^\]]+)\]/)
          .pop()
          .toLowerCase();
      if (type === "file") {
          return "object";
      }
      return type;
  }

  const OBJECT_TYPE = "object";
  const ARRAY_TYPE = "array";
  /**
   * Renders data into a string by {{variables}}.
   * Given a template string, removes all {{property}} substrings and replaces them with the property in the given data
   *
   * @param template - template string containing variables in handelbars/mustache style
   * @param data - flat object containing properties matching variables
   * @return rendered string
   */
  function render(template, data = {}) {
      return template.replace(/\{\{\w+\}\}/g, (match) => {
          const key = match.replace(/[{}]/g, "");
          const variable = data[key];
          const variableType = getTypeOf$1(variable);
          if (variableType === OBJECT_TYPE || variableType === ARRAY_TYPE) {
              return JSON.stringify(variable);
          }
          return variable;
      });
  }

  /**
   * Renders the given string as defined in __@see config/strings.js__
   * @param keyword
   * @param data - template data
   * @param fallback - fallback template
   * @return resulting string
   */
  function __(keyword, data, fallback = keyword) {
      var _a;
      const template = (_a = strings[keyword]) !== null && _a !== void 0 ? _a : fallback;
      return render(template, data);
  }

  function dashCase(text) {
      return text.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }
  function createError(name, data) {
      return {
          type: "error",
          name,
          code: dashCase(name),
          message: __(name, data),
          data
      };
  }
  /**
   * Creates a custom Error Creator. Its messages are defined by strings-object @see config/strings.ts
   *
   * @param name - id of error (camelcased)
   * @return error constructor function
   */
  function createCustomError(name) {
      return createError.bind(null, name);
  }

  function flattenArray(list, result = []) {
      for (let i = 0; i < list.length; i += 1) {
          const item = list[i];
          if (Array.isArray(item)) {
              flattenArray(item, result);
          }
          else {
              result.push(item);
          }
      }
      return result;
  }

  var settings = {
      DECLARATOR_ONEOF: "oneOfProperty",
      GET_TEMPLATE_RECURSION_LIMIT: 1,
      propertyBlacklist: ["_id"],
      templateDefaultOptions: {
          addOptionalProps: false,
          removeInvalidData: false,
          extendDefaults: true
      }
  };

  function createOneOfSchemaResult(schema, oneOfSchema, oneOfIndex) {
      const childSchema = { ...oneOfSchema };
      Object.defineProperty(childSchema, "getOneOfOrigin", {
          enumerable: false,
          value: () => ({
              index: oneOfIndex,
              schema
          })
      });
      return childSchema;
  }

  /**
   * ts type guard for json error
   * @returns true if passed type is a JsonError
   */
  function isJsonError(error) {
      return (error === null || error === void 0 ? void 0 : error.type) === "error";
  }

  function isPromise(obj) {
      return obj instanceof Promise;
  }
  function errorOrPromise(error) {
      return isJsonError(error) || isPromise(error);
  }

  /**
   * @draft-04
   */
  const { DECLARATOR_ONEOF } = settings;
  /**
   * Selects and returns a oneOf schema for the given data
   *
   * @param draft - validator
   * @param data
   * @param schema - current json schema containing property oneOf
   * @param pointer - json pointer to data
   * @return oneOf schema or an error
   */
  function resolveOneOf(draft, data, schema = draft.rootSchema, pointer = "#") {
      // !keyword: oneOfProperty
      // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the
      // oneOf value (if set in data)
      // @fixme
      // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)
      // this case (data != null) should not be necessary
      if (data != null && schema[DECLARATOR_ONEOF]) {
          const errors = [];
          const oneOfProperty = schema[DECLARATOR_ONEOF];
          const oneOfValue = data[schema[DECLARATOR_ONEOF]];
          if (oneOfValue === undefined) {
              return draft.errors.missingOneOfPropertyError({
                  property: oneOfProperty,
                  pointer,
                  schema,
                  value: data
              });
          }
          for (let i = 0; i < schema.oneOf.length; i += 1) {
              const one = draft.resolveRef(schema.oneOf[i]);
              const oneOfPropertySchema = draft.step(oneOfProperty, one, data, pointer);
              if (isJsonError(oneOfPropertySchema)) {
                  return oneOfPropertySchema;
              }
              let result = flattenArray(draft.validate(oneOfValue, oneOfPropertySchema, pointer));
              result = result.filter(errorOrPromise);
              if (result.length > 0) {
                  errors.push(...result);
              }
              else {
                  return createOneOfSchemaResult(schema, one, i); // return resolved schema
              }
          }
          return draft.errors.oneOfPropertyError({
              property: oneOfProperty,
              value: oneOfValue,
              pointer,
              schema,
              errors
          });
      }
      const matches = [];
      const errors = [];
      for (let i = 0; i < schema.oneOf.length; i += 1) {
          const one = draft.resolveRef(schema.oneOf[i]);
          let result = flattenArray(draft.validate(data, one, pointer));
          result = result.filter(errorOrPromise);
          if (result.length > 0) {
              errors.push(...result);
          }
          else {
              matches.push({ index: i, schema: one });
          }
      }
      if (matches.length === 1) {
          return createOneOfSchemaResult(schema, matches[0].schema, matches[0].index); // return resolved schema
      }
      if (matches.length > 1) {
          return draft.errors.multipleOneOfError({
              value: data,
              pointer,
              schema,
              matches
          });
      }
      return draft.errors.oneOfError({
          value: JSON.stringify(data),
          pointer,
          schema,
          oneOf: schema.oneOf,
          errors
      });
  }
  /**
   * Returns a ranking for the data and given schema
   *
   * @param draft
   * @param - json schema type: object
   * @param data
   * @param [pointer]
   * @return ranking value (higher is better)
   */
  function fuzzyObjectValue(draft, one, data, pointer) {
      if (data == null || one.properties == null) {
          return -1;
      }
      let value = 0;
      const keys = Object.keys(one.properties);
      for (let i = 0; i < keys.length; i += 1) {
          const key = keys[i];
          if (data[key] != null && draft.isValid(data[key], one.properties[key], pointer)) {
              value += 1;
          }
      }
      return value;
  }
  /**
   * Selects and returns a oneOf schema for the given data
   *
   * @param draft
   * @param data
   * @param [schema] - current json schema containing property oneOf
   * @param [pointer] - json pointer to data
   * @return oneOf schema or an error
   */
  function resolveOneOfFuzzy(draft, data, schema = draft.rootSchema, pointer = "#") {
      // !keyword: oneOfProperty
      // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the
      // oneOf value (if set in data)
      // @fixme
      // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)
      // this case (data != null) should not be necessary
      if (data != null && schema[DECLARATOR_ONEOF]) {
          const errors = [];
          const oneOfProperty = schema[DECLARATOR_ONEOF];
          const oneOfValue = data[schema[DECLARATOR_ONEOF]];
          if (oneOfValue === undefined) {
              return draft.errors.missingOneOfPropertyError({
                  property: oneOfProperty,
                  pointer,
                  schema,
                  value: data
              });
          }
          for (let i = 0; i < schema.oneOf.length; i += 1) {
              const one = draft.resolveRef(schema.oneOf[i]);
              const oneOfPropertySchema = draft.step(oneOfProperty, one, data, pointer);
              if (isJsonError(oneOfPropertySchema)) {
                  return oneOfPropertySchema;
              }
              let result = flattenArray(draft.validate(oneOfValue, oneOfPropertySchema, pointer));
              result = result.filter(errorOrPromise);
              if (result.length > 0) {
                  errors.push(...result);
              }
              else {
                  return createOneOfSchemaResult(schema, one, i);
              }
          }
          return draft.errors.oneOfPropertyError({
              property: oneOfProperty,
              value: oneOfValue,
              pointer,
              schema,
              errors
          });
      }
      // keyword: oneOf
      const matches = [];
      for (let i = 0; i < schema.oneOf.length; i += 1) {
          const one = draft.resolveRef(schema.oneOf[i]);
          if (draft.isValid(data, one, pointer)) {
              matches.push({ schema: one, index: i });
          }
      }
      if (matches.length === 1) {
          return createOneOfSchemaResult(schema, matches[0].schema, matches[0].index);
      }
      // fuzzy match oneOf
      if (getTypeOf$1(data) === "object") {
          let schemaOfItem;
          let schemaOfIndex = -1;
          let fuzzyGreatest = 0;
          for (let i = 0; i < schema.oneOf.length; i += 1) {
              const one = draft.resolveRef(schema.oneOf[i]);
              const fuzzyValue = fuzzyObjectValue(draft, one, data);
              if (fuzzyGreatest < fuzzyValue) {
                  fuzzyGreatest = fuzzyValue;
                  schemaOfItem = schema.oneOf[i];
                  schemaOfIndex = i;
              }
          }
          if (schemaOfItem === undefined) {
              return draft.errors.oneOfError({
                  value: JSON.stringify(data),
                  pointer,
                  schema,
                  oneOf: schema.oneOf
              });
          }
          return createOneOfSchemaResult(schema, schemaOfItem, schemaOfIndex);
      }
      if (matches.length > 1) {
          return draft.errors.multipleOneOfError({ matches, pointer, schema, value: data });
      }
      return draft.errors.oneOfError({
          value: JSON.stringify(data),
          pointer,
          schema,
          oneOf: schema.oneOf
      });
  }
  /**
   * validates oneOf definition for given input data
   */
  const validateOneOf = (draft, schema, value, pointer) => {
      if (Array.isArray(schema.oneOf)) {
          const schemaOrError = draft.resolveOneOf(value, schema, pointer);
          if (isJsonError(schemaOrError)) {
              return schemaOrError;
          }
      }
  };

  var cjs;
  var hasRequiredCjs;

  function requireCjs () {
  	if (hasRequiredCjs) return cjs;
  	hasRequiredCjs = 1;

  	var isMergeableObject = function isMergeableObject(value) {
  		return isNonNullObject(value)
  			&& !isSpecial(value)
  	};

  	function isNonNullObject(value) {
  		return !!value && typeof value === 'object'
  	}

  	function isSpecial(value) {
  		var stringValue = Object.prototype.toString.call(value);

  		return stringValue === '[object RegExp]'
  			|| stringValue === '[object Date]'
  			|| isReactElement(value)
  	}

  	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
  	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
  	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

  	function isReactElement(value) {
  		return value.$$typeof === REACT_ELEMENT_TYPE
  	}

  	function emptyTarget(val) {
  		return Array.isArray(val) ? [] : {}
  	}

  	function cloneUnlessOtherwiseSpecified(value, options) {
  		return (options.clone !== false && options.isMergeableObject(value))
  			? deepmerge(emptyTarget(value), value, options)
  			: value
  	}

  	function defaultArrayMerge(target, source, options) {
  		return target.concat(source).map(function(element) {
  			return cloneUnlessOtherwiseSpecified(element, options)
  		})
  	}

  	function getMergeFunction(key, options) {
  		if (!options.customMerge) {
  			return deepmerge
  		}
  		var customMerge = options.customMerge(key);
  		return typeof customMerge === 'function' ? customMerge : deepmerge
  	}

  	function getEnumerableOwnPropertySymbols(target) {
  		return Object.getOwnPropertySymbols
  			? Object.getOwnPropertySymbols(target).filter(function(symbol) {
  				return Object.propertyIsEnumerable.call(target, symbol)
  			})
  			: []
  	}

  	function getKeys(target) {
  		return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
  	}

  	function propertyIsOnObject(object, property) {
  		try {
  			return property in object
  		} catch(_) {
  			return false
  		}
  	}

  	// Protects from prototype poisoning and unexpected merging up the prototype chain.
  	function propertyIsUnsafe(target, key) {
  		return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
  			&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  				&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
  	}

  	function mergeObject(target, source, options) {
  		var destination = {};
  		if (options.isMergeableObject(target)) {
  			getKeys(target).forEach(function(key) {
  				destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
  			});
  		}
  		getKeys(source).forEach(function(key) {
  			if (propertyIsUnsafe(target, key)) {
  				return
  			}

  			if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
  				destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
  			} else {
  				destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
  			}
  		});
  		return destination
  	}

  	function deepmerge(target, source, options) {
  		options = options || {};
  		options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  		options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  		// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  		// implementations can use it. The caller may not replace it.
  		options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

  		var sourceIsArray = Array.isArray(source);
  		var targetIsArray = Array.isArray(target);
  		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  		if (!sourceAndTargetTypesMatch) {
  			return cloneUnlessOtherwiseSpecified(source, options)
  		} else if (sourceIsArray) {
  			return options.arrayMerge(target, source, options)
  		} else {
  			return mergeObject(target, source, options)
  		}
  	}

  	deepmerge.all = function deepmergeAll(array, options) {
  		if (!Array.isArray(array)) {
  			throw new Error('first argument should be an array')
  		}

  		return array.reduce(function(prev, next) {
  			return deepmerge(prev, next, options)
  		}, {})
  	};

  	var deepmerge_1 = deepmerge;

  	cjs = deepmerge_1;
  	return cjs;
  }

  var cjsExports = requireCjs();
  var deepmerge = /*@__PURE__*/getDefaultExportFromCjs(cjsExports);

  const overwriteMerge = (destinationArray, sourceArray) => sourceArray;
  /**
   * returns a new json-schema, where properties are combined and arrays are replaced
   */
  var merge$2 = (a, b) => deepmerge(a, b, { arrayMerge: overwriteMerge });
  // var d = c.filter((item, pos) => c.indexOf(item) === pos)
  const mergeUniqueItems = (destinationArray, sourceArray) => {
      const all = destinationArray.concat(sourceArray);
      return all.filter((item, pos) => all.indexOf(item) === pos);
  };
  /**
   * returns a new json-schema, where properties are combined and arrays are replaced
   */
  const mergeArraysUnique = (a, b) => deepmerge(a, b, { arrayMerge: mergeUniqueItems });

  /**
   * merges to two json schema. In case of conflicts, will use overwrite first
   * schema or directly return first json schema.
   */
  function mergeSchema(a, b) {
      const aType = getTypeOf$1(a);
      const bType = getTypeOf$1(b);
      if (aType !== bType) {
          return a;
      }
      const result = mergeArraysUnique(a, b);
      if (a.getOneOfOrigin) {
          Object.defineProperty(result, "getOneOfOrigin", {
              enumerable: false,
              value: a.getOneOfOrigin
          });
      }
      else if (b.getOneOfOrigin) {
          Object.defineProperty(result, "getOneOfOrigin", {
              enumerable: false,
              value: b.getOneOfOrigin
          });
      }
      return result;
  }

  /**
   * Omit properties from input object. Accepts any number of properties to
   * remove. Example:
   *
   * ```ts
   * omit(myObject, "if", "dependencies");
   * ```
   *
   * @returns shallow copy of input object without specified properties
   */
  function omit(object, ...keysToOmit) {
      const result = {};
      Object.keys(object).forEach((key) => {
          if (!keysToOmit.includes(key)) {
              result[key] = object[key];
          }
      });
      if (object.getOneOfOrigin) {
          Object.defineProperty(result, "getOneOfOrigin", {
              enumerable: false,
              value: object.getOneOfOrigin
          });
      }
      return result;
  }

  var toStringFunction = Function.prototype.toString;
  var create$1 = Object.create;
  var toStringObject = Object.prototype.toString;
  /**
   * @classdesc Fallback cache for when WeakMap is not natively supported
   */
  var LegacyCache = /** @class */ (function () {
      function LegacyCache() {
          this._keys = [];
          this._values = [];
      }
      LegacyCache.prototype.has = function (key) {
          return !!~this._keys.indexOf(key);
      };
      LegacyCache.prototype.get = function (key) {
          return this._values[this._keys.indexOf(key)];
      };
      LegacyCache.prototype.set = function (key, value) {
          this._keys.push(key);
          this._values.push(value);
      };
      return LegacyCache;
  }());
  function createCacheLegacy() {
      return new LegacyCache();
  }
  function createCacheModern() {
      return new WeakMap();
  }
  /**
   * Get a new cache object to prevent circular references.
   */
  var createCache = typeof WeakMap !== 'undefined' ? createCacheModern : createCacheLegacy;
  /**
   * Get an empty version of the object with the same prototype it has.
   */
  function getCleanClone(prototype) {
      if (!prototype) {
          return create$1(null);
      }
      var Constructor = prototype.constructor;
      if (Constructor === Object) {
          return prototype === Object.prototype ? {} : create$1(prototype);
      }
      if (Constructor &&
          ~toStringFunction.call(Constructor).indexOf('[native code]')) {
          try {
              return new Constructor();
          }
          catch (_a) { }
      }
      return create$1(prototype);
  }
  function getRegExpFlagsLegacy(regExp) {
      var flags = '';
      if (regExp.global) {
          flags += 'g';
      }
      if (regExp.ignoreCase) {
          flags += 'i';
      }
      if (regExp.multiline) {
          flags += 'm';
      }
      if (regExp.unicode) {
          flags += 'u';
      }
      if (regExp.sticky) {
          flags += 'y';
      }
      return flags;
  }
  function getRegExpFlagsModern(regExp) {
      return regExp.flags;
  }
  /**
   * Get the flags to apply to the copied regexp.
   */
  var getRegExpFlags = /test/g.flags === 'g' ? getRegExpFlagsModern : getRegExpFlagsLegacy;
  function getTagLegacy(value) {
      var type = toStringObject.call(value);
      return type.substring(8, type.length - 1);
  }
  function getTagModern(value) {
      return value[Symbol.toStringTag] || getTagLegacy(value);
  }
  /**
   * Get the tag of the value passed, so that the correct copier can be used.
   */
  var getTag = typeof Symbol !== 'undefined' ? getTagModern : getTagLegacy;

  var defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var _a$1 = Object.prototype, hasOwnProperty$2 = _a$1.hasOwnProperty, propertyIsEnumerable = _a$1.propertyIsEnumerable;
  var SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === 'function';
  function getStrictPropertiesModern(object) {
      return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
  }
  /**
   * Get the properites used when copying objects strictly. This includes both keys and symbols.
   */
  var getStrictProperties = SUPPORTS_SYMBOL
      ? getStrictPropertiesModern
      : getOwnPropertyNames;
  /**
   * Striclty copy all properties contained on the object.
   */
  function copyOwnPropertiesStrict(value, clone, state) {
      var properties = getStrictProperties(value);
      for (var index = 0, length_1 = properties.length, property = void 0, descriptor = void 0; index < length_1; ++index) {
          property = properties[index];
          if (property === 'callee' || property === 'caller') {
              continue;
          }
          descriptor = getOwnPropertyDescriptor(value, property);
          if (!descriptor) {
              // In extra edge cases where the property descriptor cannot be retrived, fall back to
              // the loose assignment.
              clone[property] = state.copier(value[property], state);
              continue;
          }
          // Only clone the value if actually a value, not a getter / setter.
          if (!descriptor.get && !descriptor.set) {
              descriptor.value = state.copier(descriptor.value, state);
          }
          try {
              defineProperty(clone, property, descriptor);
          }
          catch (error) {
              // Tee above can fail on node in edge cases, so fall back to the loose assignment.
              clone[property] = descriptor.value;
          }
      }
      return clone;
  }
  /**
   * Deeply copy the indexed values in the array.
   */
  function copyArrayLoose(array, state) {
      var clone = new state.Constructor();
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(array, clone);
      for (var index = 0, length_2 = array.length; index < length_2; ++index) {
          clone[index] = state.copier(array[index], state);
      }
      return clone;
  }
  /**
   * Deeply copy the indexed values in the array, as well as any custom properties.
   */
  function copyArrayStrict(array, state) {
      var clone = new state.Constructor();
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(array, clone);
      return copyOwnPropertiesStrict(array, clone, state);
  }
  /**
   * Copy the contents of the ArrayBuffer.
   */
  function copyArrayBuffer(arrayBuffer, _state) {
      return arrayBuffer.slice(0);
  }
  /**
   * Create a new Blob with the contents of the original.
   */
  function copyBlob(blob, _state) {
      return blob.slice(0, blob.size, blob.type);
  }
  /**
   * Create a new DataView with the contents of the original.
   */
  function copyDataView(dataView, state) {
      return new state.Constructor(copyArrayBuffer(dataView.buffer));
  }
  /**
   * Create a new Date based on the time of the original.
   */
  function copyDate(date, state) {
      return new state.Constructor(date.getTime());
  }
  /**
   * Deeply copy the keys and values of the original.
   */
  function copyMapLoose(map, state) {
      var clone = new state.Constructor();
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(map, clone);
      map.forEach(function (value, key) {
          clone.set(key, state.copier(value, state));
      });
      return clone;
  }
  /**
   * Deeply copy the keys and values of the original, as well as any custom properties.
   */
  function copyMapStrict(map, state) {
      return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);
  }
  function copyObjectLooseLegacy(object, state) {
      var clone = getCleanClone(state.prototype);
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(object, clone);
      for (var key in object) {
          if (hasOwnProperty$2.call(object, key)) {
              clone[key] = state.copier(object[key], state);
          }
      }
      return clone;
  }
  function copyObjectLooseModern(object, state) {
      var clone = getCleanClone(state.prototype);
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(object, clone);
      for (var key in object) {
          if (hasOwnProperty$2.call(object, key)) {
              clone[key] = state.copier(object[key], state);
          }
      }
      var symbols = getOwnPropertySymbols(object);
      for (var index = 0, length_3 = symbols.length, symbol = void 0; index < length_3; ++index) {
          symbol = symbols[index];
          if (propertyIsEnumerable.call(object, symbol)) {
              clone[symbol] = state.copier(object[symbol], state);
          }
      }
      return clone;
  }
  /**
   * Deeply copy the properties (keys and symbols) and values of the original.
   */
  var copyObjectLoose = SUPPORTS_SYMBOL
      ? copyObjectLooseModern
      : copyObjectLooseLegacy;
  /**
   * Deeply copy the properties (keys and symbols) and values of the original, as well
   * as any hidden or non-enumerable properties.
   */
  function copyObjectStrict(object, state) {
      var clone = getCleanClone(state.prototype);
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(object, clone);
      return copyOwnPropertiesStrict(object, clone, state);
  }
  /**
   * Create a new primitive wrapper from the value of the original.
   */
  function copyPrimitiveWrapper(primitiveObject, state) {
      return new state.Constructor(primitiveObject.valueOf());
  }
  /**
   * Create a new RegExp based on the value and flags of the original.
   */
  function copyRegExp(regExp, state) {
      var clone = new state.Constructor(regExp.source, getRegExpFlags(regExp));
      clone.lastIndex = regExp.lastIndex;
      return clone;
  }
  /**
   * Return the original value (an identity function).
   *
   * @note
   * THis is used for objects that cannot be copied, such as WeakMap.
   */
  function copySelf(value, _state) {
      return value;
  }
  /**
   * Deeply copy the values of the original.
   */
  function copySetLoose(set, state) {
      var clone = new state.Constructor();
      // set in the cache immediately to be able to reuse the object recursively
      state.cache.set(set, clone);
      set.forEach(function (value) {
          clone.add(state.copier(value, state));
      });
      return clone;
  }
  /**
   * Deeply copy the values of the original, as well as any custom properties.
   */
  function copySetStrict(set, state) {
      return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);
  }

  var isArray = Array.isArray;
  var assign$2 = Object.assign;
  var getPrototypeOf = Object.getPrototypeOf || (function (obj) { return obj.__proto__; });
  var DEFAULT_LOOSE_OPTIONS = {
      array: copyArrayLoose,
      arrayBuffer: copyArrayBuffer,
      blob: copyBlob,
      dataView: copyDataView,
      date: copyDate,
      error: copySelf,
      map: copyMapLoose,
      object: copyObjectLoose,
      regExp: copyRegExp,
      set: copySetLoose,
  };
  var DEFAULT_STRICT_OPTIONS = assign$2({}, DEFAULT_LOOSE_OPTIONS, {
      array: copyArrayStrict,
      map: copyMapStrict,
      object: copyObjectStrict,
      set: copySetStrict,
  });
  /**
   * Get the copiers used for each specific object tag.
   */
  function getTagSpecificCopiers(options) {
      return {
          Arguments: options.object,
          Array: options.array,
          ArrayBuffer: options.arrayBuffer,
          Blob: options.blob,
          Boolean: copyPrimitiveWrapper,
          DataView: options.dataView,
          Date: options.date,
          Error: options.error,
          Float32Array: options.arrayBuffer,
          Float64Array: options.arrayBuffer,
          Int8Array: options.arrayBuffer,
          Int16Array: options.arrayBuffer,
          Int32Array: options.arrayBuffer,
          Map: options.map,
          Number: copyPrimitiveWrapper,
          Object: options.object,
          Promise: copySelf,
          RegExp: options.regExp,
          Set: options.set,
          String: copyPrimitiveWrapper,
          WeakMap: copySelf,
          WeakSet: copySelf,
          Uint8Array: options.arrayBuffer,
          Uint8ClampedArray: options.arrayBuffer,
          Uint16Array: options.arrayBuffer,
          Uint32Array: options.arrayBuffer,
          Uint64Array: options.arrayBuffer,
      };
  }
  /**
   * Create a custom copier based on the object-specific copy methods passed.
   */
  function createCopier(options) {
      var normalizedOptions = assign$2({}, DEFAULT_LOOSE_OPTIONS, options);
      var tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);
      var array = tagSpecificCopiers.Array, object = tagSpecificCopiers.Object;
      function copier(value, state) {
          state.prototype = state.Constructor = undefined;
          if (!value || typeof value !== 'object') {
              return value;
          }
          if (state.cache.has(value)) {
              return state.cache.get(value);
          }
          state.prototype = getPrototypeOf(value);
          state.Constructor = state.prototype && state.prototype.constructor;
          // plain objects
          if (!state.Constructor || state.Constructor === Object) {
              return object(value, state);
          }
          // arrays
          if (isArray(value)) {
              return array(value, state);
          }
          var tagSpecificCopier = tagSpecificCopiers[getTag(value)];
          if (tagSpecificCopier) {
              return tagSpecificCopier(value, state);
          }
          return typeof value.then === 'function' ? value : object(value, state);
      }
      return function copy(value) {
          return copier(value, {
              Constructor: undefined,
              cache: createCache(),
              copier: copier,
              prototype: undefined,
          });
      };
  }
  /**
   * Create a custom copier based on the object-specific copy methods passed, defaulting to the
   * same internals as `copyStrict`.
   */
  function createStrictCopier(options) {
      return createCopier(assign$2({}, DEFAULT_STRICT_OPTIONS, options));
  }
  /**
   * Copy an value deeply as much as possible, where strict recreation of object properties
   * are maintained. All properties (including non-enumerable ones) are copied with their
   * original property descriptors on both objects and arrays.
   */
  createStrictCopier({});
  /**
   * Copy an value deeply as much as possible.
   */
  var index = createCopier({});

  /**
   * returns if-then-else as a json schema. does not merge with input
   * json schema. you probably will need to do so to correctly resolve
   * references.
   *
   * @returns json schema defined by if-then-else or undefined
   */
  function resolveIfSchema(draft, schema, data) {
      if (schema.if == null) {
          return undefined;
      }
      if (schema.if === false) {
          return schema.else;
      }
      if (schema.if && (schema.then || schema.else)) {
          const ifErrors = draft.validate(data, draft.resolveRef(schema.if));
          if (ifErrors.length === 0 && schema.then) {
              return draft.resolveRef(schema.then);
          }
          if (ifErrors.length !== 0 && schema.else) {
              return draft.resolveRef(schema.else);
          }
      }
  }
  /**
   * @returns validation result of it-then-else schema
   */
  const validateIf = (draft, schema, value, pointer) => {
      const resolvedSchema = resolveIfSchema(draft, schema, value);
      if (resolvedSchema) {
          return draft.validate(value, resolvedSchema, pointer);
      }
  };

  /**
   * resolves schema
   * when complete this will have much duplication to step.object etc
   */
  function resolveSchema(draft, schemaToResolve, data) {
      var _a;
      const schema = { ...((_a = draft.resolveRef(schemaToResolve)) !== null && _a !== void 0 ? _a : {}) };
      const ifSchema = resolveIfSchema(draft, schema, data);
      if (ifSchema) {
          return ifSchema;
      }
      return omit(schema, "if", "then", "else");
  }
  function resolveAllOf(draft, data, schema = draft.rootSchema) {
      let mergedSchema = index(schema);
      for (let i = 0; i < schema.allOf.length; i += 1) {
          // @todo introduce draft.resolveSchema to iteratively resolve
          const allOfSchema = resolveSchema(draft, schema.allOf[i], data);
          mergedSchema = mergeSchema(mergedSchema, allOfSchema);
      }
      delete mergedSchema.allOf;
      return mergedSchema;
  }
  /**
   * @attention: subschemas have to be resolved upfront (e.g. if-else that do not apply)
   * Merge all allOf sub schema into a single schema. Returns undefined for
   * missing allOf definition.
   *
   * @returns json schema defined by allOf or undefined
   */
  function mergeAllOfSchema(draft, schema) {
      const { allOf } = schema;
      if (!Array.isArray(allOf) || allOf.length === 0) {
          return;
      }
      let resolvedSchema = {};
      allOf.forEach((subschema) => {
          resolvedSchema = mergeSchema(resolvedSchema, draft.resolveRef(subschema));
      });
      return resolvedSchema;
  }
  /**
   * validate allOf definition for given input data
   */
  const validateAllOf = (draft, schema, value, pointer) => {
      const { allOf } = schema;
      if (!Array.isArray(allOf) || allOf.length === 0) {
          return;
      }
      const errors = [];
      schema.allOf.forEach((subSchema) => {
          errors.push(...draft.validate(value, subSchema, pointer));
      });
      return errors;
  };

  function resolveRef$1(schema, rootSchema) {
      if (schema == null || schema.$ref == null) {
          return schema;
      }
      if (schema.getRoot) {
          // we actually always need to resolve the schema like this, since returned subschemas
          // must resolve relative from their schema
          const resolvedSchema = schema.getRoot().getRef(schema);
          // console.log(schema.$ref, "=>", resolvedSchema);
          return resolvedSchema;
      }
      // tryout - this should never be called, except we missed something
      const resolvedSchema = rootSchema.getRef(schema);
      return resolvedSchema;
  }

  function resolveRefMerge(schema, rootSchema) {
      if (schema == null || schema.$ref == null) {
          return schema;
      }
      const resolvedSchema = rootSchema.getRef(schema);
      const mergedSchema = Object.assign({}, resolvedSchema, schema);
      delete mergedSchema.$ref;
      // @todo the following might not be safe nor incomplete
      Object.defineProperty(mergedSchema, "__ref", { enumerable: false, value: schema.__ref });
      Object.defineProperty(mergedSchema, "getRoot", { enumerable: false, value: schema.getRoot });
      return mergedSchema;
  }

  /**
   * @returns list with unique values only
   */
  function uniqueItems(list) {
      return list.filter((item, index) => list.indexOf(item) === index);
  }

  function isObject$2(v) {
      return getTypeOf$1(v) === "object";
  }

  /**
   * returns dependencies as an object json schema. does not merge with input
   * json schema. you probably will need to do so to correctly resolve
   * references.
   *
   * @returns merged json schema defined by dependencies or undefined
   */
  function resolveDependencies(draft, schema, data) {
      const { dependencies } = schema;
      if (!isObject$2(dependencies) || !isObject$2(data)) {
          return;
      }
      let updated = false;
      let resolvedSchema = { required: [] };
      Object.keys(dependencies).forEach((prop) => {
          var _a, _b;
          if (data[prop] == null &&
              !(((_a = schema.required) === null || _a === void 0 ? void 0 : _a.includes(prop)) || ((_b = resolvedSchema.required) === null || _b === void 0 ? void 0 : _b.includes(prop)))) {
              return;
          }
          const dependency = dependencies[prop];
          // dependency array
          if (Array.isArray(dependency)) {
              updated = true;
              resolvedSchema.required.push(...dependency);
              return;
          }
          // dependency schema
          if (isObject$2(dependency)) {
              updated = true;
              resolvedSchema = mergeSchema(resolvedSchema, draft.resolveRef(dependency));
              return;
          }
      });
      if (updated) {
          resolvedSchema.required = uniqueItems(resolvedSchema.required);
          return resolvedSchema;
      }
  }
  /**
   * validate dependencies definition for given input data
   */
  const validateDependencies = (draft, schema, value, pointer) => {
      if (getTypeOf$1(schema.dependencies) !== "object") {
          return undefined;
      }
      const errors = [];
      Object.keys(value).forEach((property) => {
          if (schema.dependencies[property] === undefined) {
              return;
          }
          // @draft >= 6 boolean schema
          if (schema.dependencies[property] === true) {
              return;
          }
          if (schema.dependencies[property] === false) {
              errors.push(draft.errors.missingDependencyError({ pointer, schema, value }));
              return;
          }
          let dependencyErrors;
          const type = getTypeOf$1(schema.dependencies[property]);
          if (type === "array") {
              dependencyErrors = schema.dependencies[property]
                  .filter((dependency) => value[dependency] === undefined)
                  .map((missingProperty) => draft.errors.missingDependencyError({ missingProperty, pointer, schema, value }));
          }
          else if (type === "object") {
              dependencyErrors = draft.validate(value, schema.dependencies[property], pointer);
          }
          else {
              throw new Error(`Invalid dependency definition for ${pointer}/${property}. Must be string[] or schema`);
          }
          errors.push(...dependencyErrors);
      });
      return errors.length > 0 ? errors : undefined;
  };

  /**
   * @draft-04
   */
  /**
   * returns merged schema of all valid anyOf subschemas for the given input data.
   * Does not merge with rest input schema.
   *
   * @returns merged anyOf subschemas which are valid to the given input data.
   */
  function mergeValidAnyOfSchema(draft, schema, data) {
      if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {
          return;
      }
      let resolvedSchema;
      schema.anyOf.forEach((anySchema) => {
          anySchema = draft.resolveRef(anySchema);
          if (draft.isValid(data, anySchema)) {
              resolvedSchema = resolvedSchema ? mergeSchema(resolvedSchema, anySchema) : anySchema;
          }
      });
      return resolvedSchema;
  }
  /**
   * @returns extended input schema with valid anyOf subschemas or JsonError if
   * no anyOf schema matches input data
   */
  function resolveAnyOf(draft, data, schema = draft.rootSchema, pointer = "#") {
      const { anyOf } = schema;
      if (!Array.isArray(anyOf) || anyOf.length === 0) {
          return schema;
      }
      const resolvedSchema = mergeValidAnyOfSchema(draft, schema, data);
      if (resolvedSchema == null) {
          return draft.errors.anyOfError({ pointer, schema, value: data, anyOf: JSON.stringify(anyOf) });
      }
      const mergedSchema = mergeSchema(schema, resolvedSchema);
      return omit(mergedSchema, "anyOf");
  }
  /**
   * validate anyOf definition for given input data
   */
  const validateAnyOf = (draft, schema, value, pointer) => {
      if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {
          return undefined;
      }
      for (let i = 0; i < schema.anyOf.length; i += 1) {
          if (draft.isValid(value, schema.anyOf[i])) {
              return undefined;
          }
      }
      return draft.errors.anyOfError({ pointer, schema, value, anyOf: schema.anyOf });
  };

  const toOmit$1 = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];
  const dynamicProperties = ["allOf", "anyOf", "oneOf", "dependencies", "if"];
  function isDynamicSchema(schema) {
      const givenProps = Object.keys(schema);
      return dynamicProperties.findIndex((prop) => givenProps.includes(prop)) !== -1;
  }
  /**
   * @note this utility does not reference draft methods for resolution
   * @todo consider using draft methods
   *
   * Resolves all dynamic schema definitions for the given input data and returns
   * the resulting json-schema without any dynamic schema definitions. The result
   * is not merged with the original input schema, thus static definitions of the
   * input schema are untouched and missing. For a full schema definition of this
   * input data you have to merge the result with the original schema
   * (@see reduceSchema)
   *
   * dynamic schema definitions: dependencies, allOf, anyOf, oneOf, if
   *
   * @returns static schema from resolved dynamic schema definitions for this
   *  specific input data
   */
  function resolveDynamicSchema(draft, schema, data, pointer) {
      let resolvedSchema;
      let error;
      schema = draft.resolveRef(schema);
      // @feature oneOf
      if (schema.oneOf) {
          const oneOfSchema = resolveOneOfFuzzy(draft, data, schema, pointer);
          if (isJsonError(oneOfSchema)) {
              error = oneOfSchema;
          }
          else if (oneOfSchema) {
              resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, oneOfSchema);
          }
      }
      // @feature allOf
      if (Array.isArray(schema.allOf)) {
          const allOf = schema.allOf.map((s) => {
              // before merging allOf schema we need to resolve all subschemas
              // if not, we would wrongly merge oneOf, if-then statements, etc
              if (isDynamicSchema(s)) {
                  // copy of reduceSchema
                  let result = resolveDynamicSchema(draft, s, data, pointer);
                  if (result) {
                      result = mergeSchema(s, result);
                      return omit(result, ...toOmit$1);
                  }
                  return undefined;
              }
              return s;
          });
          if (allOf.length > 0) {
              const allOfSchema = mergeAllOfSchema(draft, { allOf });
              resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, allOfSchema);
          }
      }
      // @feature anyOf
      const anyOfSchema = mergeValidAnyOfSchema(draft, schema, data);
      if (anyOfSchema) {
          resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, anyOfSchema);
      }
      // @feature dependencies
      const dependenciesSchema = resolveDependencies(draft, schema, data);
      if (dependenciesSchema) {
          resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, dependenciesSchema);
      }
      // @feature if-then-else
      const ifSchema = resolveIfSchema(draft, schema, data);
      if (ifSchema) {
          resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, ifSchema);
      }
      if (resolvedSchema == null) {
          return error;
      }
      const nestedSchema = resolveDynamicSchema(draft, resolvedSchema, data, pointer);
      if (nestedSchema) {
          resolvedSchema = mergeSchema(resolvedSchema, nestedSchema);
      }
      return omit(resolvedSchema, ...toOmit$1);
  }

  const toOmit = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];
  /**
   * reduces json schema by merging dynamic constructs like if-then-else,
   * dependencies, allOf, anyOf, oneOf, etc into a static json schema
   * omitting those properties.
   *
   * @returns input schema reduced by dynamic schema definitions for the given
   * input data
   */
  function reduceSchema(draft, schema, data, pointer) {
      let resolvedSchema = resolveDynamicSchema(draft, schema, data, pointer);
      if (resolvedSchema) {
          resolvedSchema = mergeSchema(schema, resolvedSchema);
          return omit(resolvedSchema, ...toOmit);
      }
      return schema;
  }

  class Draft {
      constructor(config, schema) {
          /** cache for remote schemas */
          this.remotes = {};
          /** error creators by id */
          this.errors = {};
          /** map for valid keywords of a type  */
          this.typeKeywords = {};
          /** keyword validators  */
          this.validateKeyword = {};
          /** type validators  */
          this.validateType = {};
          /** format validators  */
          this.validateFormat = {};
          this.config = config;
          this.typeKeywords = index(config.typeKeywords);
          this.validateKeyword = Object.assign({}, config.validateKeyword);
          this.validateType = Object.assign({}, config.validateType);
          this.validateFormat = Object.assign({}, config.validateFormat);
          this.errors = Object.assign({}, config.errors);
          this.setSchema(schema);
      }
      get rootSchema() {
          return this.__rootSchema;
      }
      set rootSchema(rootSchema) {
          if (rootSchema == null) {
              return;
          }
          this.__rootSchema = this.config.compileSchema(this, rootSchema);
      }
      /**
       * register a json-schema to be referenced from another json-schema
       * @param url - base-url of json-schema (aka id)
       * @param schema - json-schema root
       */
      addRemoteSchema(url, schema) {
          this.config.addRemoteSchema(this, url, schema);
      }
      compileSchema(schema) {
          var _a;
          return this.config.compileSchema(this, schema, (_a = this.rootSchema) !== null && _a !== void 0 ? _a : schema);
      }
      createSchemaOf(data) {
          return this.config.createSchemaOf(data);
      }
      /**
       * Iterates over data, retrieving its schema
       *
       * @param data - the data to iterate
       * @param callback - will be called with (schema, data, pointer) on each item
       * @param [schema] - the schema matching the data. Defaults to rootSchema
       * @param [pointer] - pointer to current data. Default to rootPointer
       */
      each(data, callback, schema, pointer) {
          return this.config.each(this, data, callback, schema, pointer);
      }
      eachSchema(callback, schema = this.rootSchema) {
          return this.config.eachSchema(schema, callback);
      }
      getChildSchemaSelection(property, schema) {
          return this.config.getChildSchemaSelection(this, property, schema);
      }
      /**
       * Returns the json-schema of a data-json-pointer.
       *
       * To resolve dynamic schema where the type of json-schema is evaluated by
       * its value, a data object has to be passed in options.
       *
       * Per default this function will return `undefined` for valid properties that
       * do not have a defined schema. Use the option `withSchemaWarning: true` to
       * receive an error with `code: schema-warning` containing the location of its
       * last evaluated json-schema.
       *
       * Notes
       *      - uses draft.step to walk through data and schema
       *
       * @param draft
       * @param pointer - json pointer in data to get the json schema for
       * @param [options.data] - the data object, which includes the json pointers value. This is optional, as
       *    long as no oneOf, anyOf, etc statement is part of the pointers schema
       * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema
       * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition
       * @return resolved json-schema object of requested json-pointer location
       */
      getSchema(options) {
          return this.config.getSchema(this, options);
      }
      /**
       * Create data object matching the given schema
       *
       * @param [data] - optional template data
       * @param [schema] - json schema, defaults to rootSchema
       * @return created template data
       */
      getTemplate(data, schema, opts = this.config.templateDefaultOptions) {
          return this.config.getTemplate(this, data, schema, opts);
      }
      isValid(data, schema, pointer) {
          return this.config.isValid(this, data, schema, pointer);
      }
      resolveAnyOf(data, schema, pointer) {
          return this.config.resolveAnyOf(this, data, schema, pointer);
      }
      resolveAllOf(data, schema) {
          return this.config.resolveAllOf(this, data, schema);
      }
      resolveRef(schema) {
          return this.config.resolveRef(schema, this.rootSchema);
      }
      resolveOneOf(data, schema, pointer) {
          return this.config.resolveOneOf(this, data, schema, pointer);
      }
      setSchema(schema) {
          this.rootSchema = schema;
      }
      /**
       * Returns the json-schema of the given object property or array item.
       * e.g. it steps by one key into the data
       *
       *  This helper determines the location of the property within the schema (additional properties, oneOf, ...) and
       *  returns the correct schema.
       *
       * @param  key       - property-name or array-index
       * @param  schema    - json schema of current data
       * @param  data      - parent of key
       * @param  [pointer] - pointer to schema and data (parent of key)
       * @return Schema or Error if failed resolving key
       */
      step(key, schema, data, pointer) {
          return this.config.step(this, key, schema, data, pointer);
      }
      /**
       * Validate data by a json schema
       *
       * @param value - value to validate
       * @param [schema] - json schema, defaults to rootSchema
       * @param [pointer] - json pointer pointing to value (used for error-messages only)
       * @return list of errors or empty
       */
      validate(data, schema, pointer) {
          return this.config.validate(this, data, schema, pointer);
      }
  }

  /**
   * register a json-schema to be referenced from another json-schema
   * @param url    base-url of json-schema (aka id)
   * @param schema
   */
  function addRemoteSchema(draft, url, schema) {
      schema.id = schema.id || url;
      draft.remotes[url] = draft.compileSchema(schema);
  }

  var jsonPointer$1 = {exports: {}};

  var jsonPointer = jsonPointer$1.exports;

  var hasRequiredJsonPointer;

  function requireJsonPointer () {
  	if (hasRequiredJsonPointer) return jsonPointer$1.exports;
  	hasRequiredJsonPointer = 1;
  	(function (module, exports) {
  		!function(e,t){module.exports=t();}("undefined"!=typeof self?self:jsonPointer,(()=>(()=>{var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]});},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});}},t={};function n(e){return "#"===e||""===e||Array.isArray(e)&&0===e.length||!1}e.r(t),e.d(t,{default:()=>S,get:()=>c,isRoot:()=>n,join:()=>_,remove:()=>j,removeUndefinedItems:()=>v,set:()=>y,split:()=>s,splitLast:()=>x});const r=/~1/g,o=/~0/g,i=/\/+/g,l=/(^[#/]*|\/+$)/g;function u(e){return e.replace(r,"/").replace(o,"~")}function f(e){return u(decodeURIComponent(e))}function s(e){if(null==e||"string"!=typeof e||n(e))return Array.isArray(e)?e:[];const t=e.indexOf("#")>=0?f:u,r=(e=(e=e.replace(i,"/")).replace(l,"")).split("/");for(let e=0,n=r.length;e<n;e+=1)r[e]=t(r[e]);return r}function c(e,t,r=void 0){if(null==t||null==e)return r;if(n(t))return e;const o=p(e,s(t));return void 0===o?r:o}function p(e,t){const n=t.shift();if(void 0!==e)return void 0!==n?p(e[n],t):e}const a=/^\[.*\]$/,d=/^\[(.+)\]$/;function g(e,t){return "__proto__"===e||"constructor"==e&&t.length>0&&"prototype"==t[0]}function y(e,t,n){if(null==t)return e;const r=s(t);if(0===r.length)return e;null==e&&(e=a.test(r[0])?[]:{});let o,i,l=e;for(;r.length>1;)o=r.shift(),i=a.test(r[0]),g(o,r)||(l=m(l,o,i));return o=r.pop(),h(l,o,n),e}function h(e,t,n){let r;const o=t.match(d);"[]"===t&&Array.isArray(e)?e.push(n):o?(r=o.pop(),e[r]=n):e[t]=n;}function m(e,t,n){if(null!=e[t])return e[t];const r=n?[]:{};return h(e,t,r),r}function v(e){let t=0,n=0;for(;t+n<e.length;)void 0===e[t+n]&&(n+=1),e[t]=e[t+n],t+=1;return e.length=e.length-n,e}function j(e,t,n){const r=s(t),o=r.pop(),i=c(e,r);return i&&delete i[o],Array.isArray(i)&&!0!==n&&v(i),e}const b=/\/+/g,A=/~/g,P=/\//g;function O(e,t){if(0===e.length)return t?"#":"";for(let n=0,r=e.length;n<r;n+=1)e[n]=e[n].replace(A,"~0").replace(P,"~1"),t&&(e[n]=encodeURIComponent(e[n]));return ((t?"#/":"/")+e.join("/")).replace(b,"/")}function _(e,...t){const n=[];if(Array.isArray(e))return O(e,!0===arguments[1]);const r=arguments[arguments.length-1],o="boolean"==typeof r?r:e&&"#"===e[0];for(let e=0,t=arguments.length;e<t;e+=1)n.push.apply(n,s(arguments[e]));const i=[];for(let e=0,t=n.length;e<t;e+=1)if(".."===n[e]){if(0===i.length)return o?"#":"";i.pop();}else i.push(n[e]);return O(i,o)}function x(e){const t=s(e);if(0===t.length)return "string"==typeof e&&"#"===e[0]?["#",t[0]]:["",void 0];if(1===t.length)return "#"===e[0]?["#",t[0]]:["",t[0]];const n=t.pop();return [_(t,"#"===e[0]),n]}const S={get:c,set:y,remove:j,join:_,split:s,splitLast:x,isRoot:n,removeUndefinedItems:v};return t})())); 
  	} (jsonPointer$1));
  	return jsonPointer$1.exports;
  }

  var jsonPointerExports = requireJsonPointer();
  var gp = /*@__PURE__*/getDefaultExportFromCjs(jsonPointerExports);

  var W3CEBNF = {};

  var Parser$1 = {};

  var TokenError = {};

  var hasRequiredTokenError;

  function requireTokenError () {
  	if (hasRequiredTokenError) return TokenError;
  	hasRequiredTokenError = 1;
  	Object.defineProperty(TokenError, "__esModule", { value: true });
  	TokenError.TokenError = void 0;
  	let TokenError$1 = class TokenError extends Error {
  	    constructor(message, token) {
  	        super(message);
  	        this.message = message;
  	        this.token = token;
  	        if (token && token.errors)
  	            token.errors.push(this);
  	        else
  	            throw this;
  	    }
  	    inspect() {
  	        return 'SyntaxError: ' + this.message;
  	    }
  	};
  	TokenError.TokenError = TokenError$1;
  	
  	return TokenError;
  }

  var hasRequiredParser;

  function requireParser () {
  	if (hasRequiredParser) return Parser$1;
  	hasRequiredParser = 1;
  	// https://www.ics.uci.edu/~pattis/ICS-33/lectures/ebnf.pdf
  	Object.defineProperty(Parser$1, "__esModule", { value: true });
  	Parser$1.Parser = Parser$1.findRuleByName = Parser$1.parseRuleName = Parser$1.escapeRegExp = Parser$1.readToken = void 0;
  	const UPPER_SNAKE_RE = /^[A-Z0-9_]+$/;
  	const decorationRE = /(\?|\+|\*)$/;
  	const preDecorationRE = /^(@|&|!)/;
  	const WS_RULE = 'WS';
  	const TokenError_1 = requireTokenError();
  	function readToken(txt, expr) {
  	    let result = expr.exec(txt);
  	    if (result && result.index == 0) {
  	        if (result[0].length == 0 && expr.source.length > 0)
  	            return null;
  	        return {
  	            type: null,
  	            text: result[0],
  	            rest: txt.substr(result[0].length),
  	            start: 0,
  	            end: result[0].length - 1,
  	            fullText: result[0],
  	            errors: [],
  	            children: [],
  	            parent: null
  	        };
  	    }
  	    return null;
  	}
  	Parser$1.readToken = readToken;
  	function escapeRegExp(str) {
  	    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  	}
  	Parser$1.escapeRegExp = escapeRegExp;
  	function fixRest(token) {
  	    token.rest = '';
  	    token.children && token.children.forEach(c => fixRest(c));
  	}
  	function fixPositions(token, start) {
  	    token.start += start;
  	    token.end += start;
  	    token.children && token.children.forEach(c => fixPositions(c, token.start));
  	}
  	function agregateErrors(errors, token) {
  	    if (token.errors && token.errors.length)
  	        token.errors.forEach(err => errors.push(err));
  	    token.children && token.children.forEach(tok => agregateErrors(errors, tok));
  	}
  	function parseRuleName(name) {
  	    let postDecoration = decorationRE.exec(name);
  	    let preDecoration = preDecorationRE.exec(name);
  	    let postDecorationText = (postDecoration && postDecoration[0]) || '';
  	    let preDecorationText = (preDecoration && preDecoration[0]) || '';
  	    let out = {
  	        raw: name,
  	        name: name.replace(decorationRE, '').replace(preDecorationRE, ''),
  	        isOptional: postDecorationText == '?' || postDecorationText == '*',
  	        allowRepetition: postDecorationText == '+' || postDecorationText == '*',
  	        atLeastOne: postDecorationText == '+',
  	        lookupPositive: preDecorationText == '&',
  	        lookupNegative: preDecorationText == '!',
  	        pinned: preDecorationText == '@',
  	        lookup: false,
  	        isLiteral: false
  	    };
  	    out.isLiteral = out.name[0] == "'" || out.name[0] == '"';
  	    out.lookup = out.lookupNegative || out.lookupPositive;
  	    return out;
  	}
  	Parser$1.parseRuleName = parseRuleName;
  	function findRuleByName(name, parser) {
  	    let parsed = parseRuleName(name);
  	    return parser.cachedRules[parsed.name] || null;
  	}
  	Parser$1.findRuleByName = findRuleByName;
  	/// Removes all the nodes starting with 'RULE_'
  	function stripRules(token, re) {
  	    if (token.children) {
  	        let localRules = token.children.filter(x => x.type && re.test(x.type));
  	        for (let i = 0; i < localRules.length; i++) {
  	            let indexOnChildren = token.children.indexOf(localRules[i]);
  	            if (indexOnChildren != -1) {
  	                token.children.splice(indexOnChildren, 1);
  	            }
  	        }
  	        token.children.forEach(c => stripRules(c, re));
  	    }
  	}
  	const ignoreMissingRules = ['EOF'];
  	class Parser {
  	    constructor(grammarRules, options) {
  	        this.grammarRules = grammarRules;
  	        this.options = options;
  	        this.cachedRules = {};
  	        this.debug = options ? options.debug === true : false;
  	        let errors = [];
  	        let neededRules = [];
  	        grammarRules.forEach(rule => {
  	            let parsedName = parseRuleName(rule.name);
  	            if (parsedName.name in this.cachedRules) {
  	                errors.push('Duplicated rule ' + parsedName.name);
  	                return;
  	            }
  	            else {
  	                this.cachedRules[parsedName.name] = rule;
  	            }
  	            if (!rule.bnf || !rule.bnf.length) {
  	                let error = 'Missing rule content, rule: ' + rule.name;
  	                if (errors.indexOf(error) == -1)
  	                    errors.push(error);
  	            }
  	            else {
  	                rule.bnf.forEach(options => {
  	                    if (typeof options[0] === 'string') {
  	                        let parsed = parseRuleName(options[0]);
  	                        if (parsed.name == rule.name) {
  	                            let error = 'Left recursion is not allowed, rule: ' + rule.name;
  	                            if (errors.indexOf(error) == -1)
  	                                errors.push(error);
  	                        }
  	                    }
  	                    options.forEach(option => {
  	                        if (typeof option == 'string') {
  	                            let name = parseRuleName(option);
  	                            if (!name.isLiteral &&
  	                                neededRules.indexOf(name.name) == -1 &&
  	                                ignoreMissingRules.indexOf(name.name) == -1)
  	                                neededRules.push(name.name);
  	                        }
  	                    });
  	                });
  	            }
  	            if (WS_RULE == rule.name)
  	                rule.implicitWs = false;
  	            if (rule.implicitWs) {
  	                if (neededRules.indexOf(WS_RULE) == -1)
  	                    neededRules.push(WS_RULE);
  	            }
  	            if (rule.recover) {
  	                if (neededRules.indexOf(rule.recover) == -1)
  	                    neededRules.push(rule.recover);
  	            }
  	        });
  	        neededRules.forEach(ruleName => {
  	            if (!(ruleName in this.cachedRules)) {
  	                errors.push('Missing rule ' + ruleName);
  	            }
  	        });
  	        if (errors.length)
  	            throw new Error(errors.join('\n'));
  	    }
  	    getAST(txt, target) {
  	        if (!target) {
  	            target = this.grammarRules.filter(x => !x.fragment && x.name.indexOf('%') != 0)[0].name;
  	        }
  	        let result = this.parse(txt, target);
  	        if (result) {
  	            agregateErrors(result.errors, result);
  	            fixPositions(result, 0);
  	            // REMOVE ALL THE TAGS MATCHING /^%/
  	            stripRules(result, /^%/);
  	            if (!this.options || !this.options.keepUpperRules)
  	                stripRules(result, UPPER_SNAKE_RE);
  	            let rest = result.rest;
  	            if (rest) {
  	                new TokenError_1.TokenError('Unexpected end of input: \n' + rest, result);
  	            }
  	            fixRest(result);
  	            result.rest = rest;
  	        }
  	        return result;
  	    }
  	    emitSource() {
  	        return 'CANNOT EMIT SOURCE FROM BASE Parser';
  	    }
  	    parse(txt, target, recursion = 0) {
  	        let out = null;
  	        let type = parseRuleName(target);
  	        let expr;
  	        let printable = this.debug && /*!isLiteral &*/ !UPPER_SNAKE_RE.test(type.name);
  	        printable &&
  	            console.log(new Array(recursion).join('│  ') + 'Trying to get ' + target + ' from ' + JSON.stringify(txt.split('\n')[0]));
  	        let realType = type.name;
  	        let targetLex = findRuleByName(type.name, this);
  	        if (type.name == 'EOF') {
  	            if (txt.length) {
  	                return null;
  	            }
  	            else if (txt.length == 0) {
  	                return {
  	                    type: 'EOF',
  	                    text: '',
  	                    rest: '',
  	                    start: 0,
  	                    end: 0,
  	                    fullText: '',
  	                    errors: [],
  	                    children: [],
  	                    parent: null
  	                };
  	            }
  	        }
  	        try {
  	            if (!targetLex && type.isLiteral) {
  	                let src = type.name.trim();
  	                if (src.startsWith('"')) {
  	                    src = JSON.parse(src);
  	                }
  	                else if (src.startsWith("'")) {
  	                    src = src.replace(/^'(.+)'$/, '$1').replace(/\\'/g, "'");
  	                }
  	                if (src === '') {
  	                    return {
  	                        type: '%%EMPTY%%',
  	                        text: '',
  	                        rest: txt,
  	                        start: 0,
  	                        end: 0,
  	                        fullText: '',
  	                        errors: [],
  	                        children: [],
  	                        parent: null
  	                    };
  	                }
  	                expr = new RegExp(escapeRegExp(src));
  	                realType = null;
  	            }
  	        }
  	        catch (e) {
  	            if (e instanceof ReferenceError) {
  	                console.error(e);
  	            }
  	            return null;
  	        }
  	        if (expr) {
  	            let result = readToken(txt, expr);
  	            if (result) {
  	                result.type = realType;
  	                return result;
  	            }
  	        }
  	        else {
  	            let options = targetLex.bnf;
  	            if (options instanceof Array) {
  	                options.forEach(phases => {
  	                    if (out)
  	                        return;
  	                    let pinned = null;
  	                    let tmp = {
  	                        type: type.name,
  	                        text: '',
  	                        children: [],
  	                        end: 0,
  	                        errors: [],
  	                        fullText: '',
  	                        parent: null,
  	                        start: 0,
  	                        rest: txt
  	                    };
  	                    if (targetLex.fragment)
  	                        tmp.fragment = true;
  	                    let tmpTxt = txt;
  	                    let position = 0;
  	                    let allOptional = phases.length > 0;
  	                    let foundSomething = false;
  	                    for (let i = 0; i < phases.length; i++) {
  	                        if (typeof phases[i] == 'string') {
  	                            let localTarget = parseRuleName(phases[i]);
  	                            allOptional = allOptional && localTarget.isOptional;
  	                            let got;
  	                            let foundAtLeastOne = false;
  	                            do {
  	                                got = null;
  	                                if (targetLex.implicitWs) {
  	                                    got = this.parse(tmpTxt, localTarget.name, recursion + 1);
  	                                    if (!got) {
  	                                        let WS;
  	                                        do {
  	                                            WS = this.parse(tmpTxt, WS_RULE, recursion + 1);
  	                                            if (WS) {
  	                                                tmp.text = tmp.text + WS.text;
  	                                                tmp.end = tmp.text.length;
  	                                                WS.parent = tmp;
  	                                                tmp.children.push(WS);
  	                                                tmpTxt = tmpTxt.substr(WS.text.length);
  	                                                position += WS.text.length;
  	                                            }
  	                                            else {
  	                                                break;
  	                                            }
  	                                        } while (WS && WS.text.length);
  	                                    }
  	                                }
  	                                got = got || this.parse(tmpTxt, localTarget.name, recursion + 1);
  	                                // rule ::= "true" ![a-zA-Z]
  	                                // negative lookup, if it does not match, we should continue
  	                                if (localTarget.lookupNegative) {
  	                                    if (got)
  	                                        return /* cancel this path */;
  	                                    break;
  	                                }
  	                                if (localTarget.lookupPositive) {
  	                                    if (!got)
  	                                        return;
  	                                }
  	                                if (!got) {
  	                                    if (localTarget.isOptional)
  	                                        break;
  	                                    if (localTarget.atLeastOne && foundAtLeastOne)
  	                                        break;
  	                                }
  	                                if (got && targetLex.pinned == i + 1) {
  	                                    pinned = got;
  	                                    printable && console.log(new Array(recursion + 1).join('│  ') + '└─ ' + got.type + ' PINNED');
  	                                }
  	                                if (!got)
  	                                    got = this.parseRecovery(targetLex, tmpTxt, recursion + 1);
  	                                if (!got) {
  	                                    if (pinned) {
  	                                        out = tmp;
  	                                        got = {
  	                                            type: 'SyntaxError',
  	                                            text: tmpTxt,
  	                                            children: [],
  	                                            end: tmpTxt.length,
  	                                            errors: [],
  	                                            fullText: '',
  	                                            parent: null,
  	                                            start: 0,
  	                                            rest: ''
  	                                        };
  	                                        if (tmpTxt.length) {
  	                                            new TokenError_1.TokenError(`Unexpected end of input. Expecting ${localTarget.name} Got: ${tmpTxt}`, got);
  	                                        }
  	                                        else {
  	                                            new TokenError_1.TokenError(`Unexpected end of input. Missing ${localTarget.name}`, got);
  	                                        }
  	                                        printable &&
  	                                            console.log(new Array(recursion + 1).join('│  ') + '└─ ' + got.type + ' ' + JSON.stringify(got.text));
  	                                    }
  	                                    else {
  	                                        return;
  	                                    }
  	                                }
  	                                foundAtLeastOne = true;
  	                                foundSomething = true;
  	                                if (got.type == '%%EMPTY%%') {
  	                                    break;
  	                                }
  	                                got.start += position;
  	                                got.end += position;
  	                                if (!localTarget.lookupPositive && got.type) {
  	                                    if (got.fragment) {
  	                                        got.children &&
  	                                            got.children.forEach(x => {
  	                                                x.start += position;
  	                                                x.end += position;
  	                                                x.parent = tmp;
  	                                                tmp.children.push(x);
  	                                            });
  	                                    }
  	                                    else {
  	                                        got.parent = tmp;
  	                                        tmp.children.push(got);
  	                                    }
  	                                }
  	                                if (localTarget.lookup)
  	                                    got.lookup = true;
  	                                printable &&
  	                                    console.log(new Array(recursion + 1).join('│  ') + '└─ ' + got.type + ' ' + JSON.stringify(got.text));
  	                                // Eat it from the input stream, only if it is not a lookup
  	                                if (!localTarget.lookup && !got.lookup) {
  	                                    tmp.text = tmp.text + got.text;
  	                                    tmp.end = tmp.text.length;
  	                                    tmpTxt = tmpTxt.substr(got.text.length);
  	                                    position += got.text.length;
  	                                }
  	                                tmp.rest = tmpTxt;
  	                            } while (got && localTarget.allowRepetition && tmpTxt.length && !got.lookup);
  	                        } /* IS A REGEXP */
  	                        else {
  	                            let got = readToken(tmpTxt, phases[i]);
  	                            if (!got) {
  	                                return;
  	                            }
  	                            printable &&
  	                                console.log(new Array(recursion + 1).join('│  ') + '└> ' + JSON.stringify(got.text) + phases[i].source);
  	                            foundSomething = true;
  	                            got.start += position;
  	                            got.end += position;
  	                            tmp.text = tmp.text + got.text;
  	                            tmp.end = tmp.text.length;
  	                            tmpTxt = tmpTxt.substr(got.text.length);
  	                            position += got.text.length;
  	                            tmp.rest = tmpTxt;
  	                        }
  	                    }
  	                    if (foundSomething) {
  	                        out = tmp;
  	                        printable &&
  	                            console.log(new Array(recursion).join('│  ') + '├<─┴< PUSHING ' + out.type + ' ' + JSON.stringify(out.text));
  	                    }
  	                });
  	            }
  	            if (out && targetLex.simplifyWhenOneChildren && out.children.length == 1) {
  	                out = out.children[0];
  	            }
  	        }
  	        if (!out) {
  	            printable && console.log(target + ' NOT RESOLVED FROM ' + txt);
  	        }
  	        return out;
  	    }
  	    parseRecovery(recoverableToken, tmpTxt, recursion) {
  	        if (recoverableToken.recover && tmpTxt.length) {
  	            let printable = this.debug;
  	            printable &&
  	                console.log(new Array(recursion + 1).join('│  ') +
  	                    'Trying to recover until token ' +
  	                    recoverableToken.recover +
  	                    ' from ' +
  	                    JSON.stringify(tmpTxt.split('\n')[0] + tmpTxt.split('\n')[1]));
  	            let tmp = {
  	                type: 'SyntaxError',
  	                text: '',
  	                children: [],
  	                end: 0,
  	                errors: [],
  	                fullText: '',
  	                parent: null,
  	                start: 0,
  	                rest: ''
  	            };
  	            let got;
  	            do {
  	                got = this.parse(tmpTxt, recoverableToken.recover, recursion + 1);
  	                if (got) {
  	                    new TokenError_1.TokenError('Unexpected input: "' + tmp.text + `" Expecting: ${recoverableToken.name}`, tmp);
  	                    break;
  	                }
  	                else {
  	                    tmp.text = tmp.text + tmpTxt[0];
  	                    tmp.end = tmp.text.length;
  	                    tmpTxt = tmpTxt.substr(1);
  	                }
  	            } while (!got && tmpTxt.length > 0);
  	            if (tmp.text.length > 0 && got) {
  	                printable && console.log(new Array(recursion + 1).join('│  ') + 'Recovered text: ' + JSON.stringify(tmp.text));
  	                return tmp;
  	            }
  	        }
  	        return null;
  	    }
  	}
  	Parser$1.Parser = Parser;
  	Parser$1.default = Parser;
  	
  	return Parser$1;
  }

  var hasRequiredW3CEBNF;

  function requireW3CEBNF () {
  	if (hasRequiredW3CEBNF) return W3CEBNF;
  	hasRequiredW3CEBNF = 1;
  	// https://www.w3.org/TR/REC-xml/#NT-Name
  	// http://www.bottlecaps.de/rr/ui
  	Object.defineProperty(W3CEBNF, "__esModule", { value: true });
  	// Grammar	::=	Production*
  	// Production	::=	NCName '::=' Choice
  	// NCName	::=	[http://www.w3.org/TR/xml-names/#NT-NCName]
  	// Choice	::=	SequenceOrDifference ( '|' SequenceOrDifference )*
  	// SequenceOrDifference	::=	(Item ( '-' Item | Item* ))?
  	// Item	::=	Primary ( '?' | '*' | '+' )?
  	// Primary	::=	NCName | StringLiteral | CharCode | CharClass | '(' Choice ')'
  	// StringLiteral	::=	'"' [^"]* '"' | "'" [^']* "'"
  	// CharCode	::=	'#x' [0-9a-fA-F]+
  	// CharClass	::=	'[' '^'? ( RULE_Char | CharCode | CharRange | CharCodeRange )+ ']'
  	// RULE_Char	::=	[http://www.w3.org/TR/xml#NT-RULE_Char]
  	// CharRange	::=	RULE_Char '-' ( RULE_Char - ']' )
  	// CharCodeRange	::=	CharCode '-' CharCode
  	// RULE_WHITESPACE	::=	RULE_S | Comment
  	// RULE_S	::=	#x9 | #xA | #xD | #x20
  	// Comment	::=	'/*' ( [^*] | '*'+ [^*/] )* '*'* '*/'
  	const Parser_1 = requireParser();
  	var BNF;
  	(function (BNF) {
  	    BNF.RULES = [
  	        {
  	            name: 'Grammar',
  	            bnf: [['RULE_S*', '%Atomic*', 'EOF']]
  	        },
  	        {
  	            name: '%Atomic',
  	            bnf: [['Production', 'RULE_S*']],
  	            fragment: true
  	        },
  	        {
  	            name: 'Production',
  	            bnf: [['NCName', 'RULE_S*', '"::="', 'RULE_WHITESPACE*', 'Choice', 'RULE_WHITESPACE*', 'RULE_EOL+', 'RULE_S*']]
  	        },
  	        {
  	            name: 'NCName',
  	            bnf: [[/[a-zA-Z][a-zA-Z_0-9]*/]]
  	        },
  	        {
  	            name: 'Choice',
  	            bnf: [['SequenceOrDifference', '%_Choice_1*']],
  	            fragment: true
  	        },
  	        {
  	            name: '%_Choice_1',
  	            bnf: [['RULE_WHITESPACE*', '"|"', 'RULE_WHITESPACE*', 'SequenceOrDifference']],
  	            fragment: true
  	        },
  	        {
  	            name: 'SequenceOrDifference',
  	            bnf: [['Item', 'RULE_WHITESPACE*', '%_Item_1?']]
  	        },
  	        {
  	            name: '%_Item_1',
  	            bnf: [['Minus', 'Item'], ['Item*']],
  	            fragment: true
  	        },
  	        {
  	            name: 'Minus',
  	            bnf: [['"-"']]
  	        },
  	        {
  	            name: 'Item',
  	            bnf: [['RULE_WHITESPACE*', '%Primary', 'PrimaryDecoration?']],
  	            fragment: true
  	        },
  	        {
  	            name: 'PrimaryDecoration',
  	            bnf: [['"?"'], ['"*"'], ['"+"']]
  	        },
  	        {
  	            name: 'DecorationName',
  	            bnf: [['"ebnf://"', /[^\x5D#]+/]]
  	        },
  	        {
  	            name: '%Primary',
  	            bnf: [['NCName'], ['StringLiteral'], ['CharCode'], ['CharClass'], ['SubItem']],
  	            fragment: true
  	        },
  	        {
  	            name: 'SubItem',
  	            bnf: [['"("', 'RULE_WHITESPACE*', 'Choice', 'RULE_WHITESPACE*', '")"']]
  	        },
  	        {
  	            name: 'StringLiteral',
  	            bnf: [[`'"'`, /[^"]*/, `'"'`], [`"'"`, /[^']*/, `"'"`]],
  	            pinned: 1
  	        },
  	        {
  	            name: 'CharCode',
  	            bnf: [['"#x"', /[0-9a-zA-Z]+/]]
  	        },
  	        {
  	            name: 'CharClass',
  	            bnf: [["'['", "'^'?", '%RULE_CharClass_1+', '"]"']]
  	        },
  	        {
  	            name: '%RULE_CharClass_1',
  	            bnf: [['CharCodeRange'], ['CharRange'], ['CharCode'], ['RULE_Char']],
  	            fragment: true
  	        },
  	        {
  	            name: 'RULE_Char',
  	            bnf: [[/\x09/], [/\x0A/], [/\x0D/], [/[\x20-\x5c]/], [/[\x5e-\uD7FF]/], [/[\uE000-\uFFFD]/]]
  	        },
  	        {
  	            name: 'CharRange',
  	            bnf: [['RULE_Char', '"-"', 'RULE_Char']]
  	        },
  	        {
  	            name: 'CharCodeRange',
  	            bnf: [['CharCode', '"-"', 'CharCode']]
  	        },
  	        {
  	            name: 'RULE_WHITESPACE',
  	            bnf: [['%RULE_WHITESPACE_CHAR*'], ['Comment', 'RULE_WHITESPACE*']]
  	        },
  	        {
  	            name: 'RULE_S',
  	            bnf: [['RULE_WHITESPACE', 'RULE_S*'], ['RULE_EOL', 'RULE_S*']]
  	        },
  	        {
  	            name: '%RULE_WHITESPACE_CHAR',
  	            bnf: [[/\x09/], [/\x20/]],
  	            fragment: true
  	        },
  	        {
  	            name: 'Comment',
  	            bnf: [['"/*"', '%RULE_Comment_Body*', '"*/"']]
  	        },
  	        {
  	            name: '%RULE_Comment_Body',
  	            bnf: [['!"*/"', /[^*]/]],
  	            fragment: true
  	        },
  	        {
  	            name: 'RULE_EOL',
  	            bnf: [[/\x0D/, /\x0A/], [/\x0A/], [/\x0D/]]
  	        },
  	        {
  	            name: 'Link',
  	            bnf: [["'['", 'Url', "']'"]]
  	        },
  	        {
  	            name: 'Url',
  	            bnf: [[/[^\x5D:/?#]/, '"://"', /[^\x5D#]+/, '%Url1?']]
  	        },
  	        {
  	            name: '%Url1',
  	            bnf: [['"#"', 'NCName']],
  	            fragment: true
  	        }
  	    ];
  	    BNF.defaultParser = new Parser_1.Parser(BNF.RULES, { debug: false });
  	    const preDecorationRE = /^(!|&)/;
  	    const decorationRE = /(\?|\+|\*)$/;
  	    const subExpressionRE = /^%/;
  	    function getBNFRule(name, parser) {
  	        if (typeof name == 'string') {
  	            if (preDecorationRE.test(name))
  	                return '';
  	            let subexpression = subExpressionRE.test(name);
  	            if (subexpression) {
  	                let decoration = decorationRE.exec(name);
  	                let decorationText = decoration ? decoration[0] + ' ' : '';
  	                let lonely = isLonelyRule(name, parser);
  	                if (lonely)
  	                    return getBNFBody(name, parser) + decorationText;
  	                return '(' + getBNFBody(name, parser) + ')' + decorationText;
  	            }
  	            return name;
  	        }
  	        else {
  	            return name.source
  	                .replace(/\\(?:x|u)([a-zA-Z0-9]+)/g, '#x$1')
  	                .replace(/\[\\(?:x|u)([a-zA-Z0-9]+)-\\(?:x|u)([a-zA-Z0-9]+)\]/g, '[#x$1-#x$2]');
  	        }
  	    }
  	    /// Returns true if the rule is a string literal or regular expression without a descendant tree
  	    function isLonelyRule(name, parser) {
  	        let rule = Parser_1.findRuleByName(name, parser);
  	        return (rule &&
  	            rule.bnf.length == 1 &&
  	            rule.bnf[0].length == 1 &&
  	            (rule.bnf[0][0] instanceof RegExp || rule.bnf[0][0][0] == '"' || rule.bnf[0][0][0] == "'"));
  	    }
  	    function getBNFChoice(rules, parser) {
  	        return rules.map(x => getBNFRule(x, parser)).join(' ');
  	    }
  	    function getBNFBody(name, parser) {
  	        let rule = Parser_1.findRuleByName(name, parser);
  	        if (rule)
  	            return rule.bnf.map(x => getBNFChoice(x, parser)).join(' | ');
  	        return 'RULE_NOT_FOUND {' + name + '}';
  	    }
  	    function emit(parser) {
  	        let acumulator = [];
  	        parser.grammarRules.forEach(l => {
  	            if (!/^%/.test(l.name)) {
  	                let recover = l.recover ? ' /* { recoverUntil=' + l.recover + ' } */' : '';
  	                acumulator.push(l.name + ' ::= ' + getBNFBody(l.name, parser) + recover);
  	            }
  	        });
  	        return acumulator.join('\n');
  	    }
  	    BNF.emit = emit;
  	    let subitems = 0;
  	    function restar(total, resta) {
  	        console.log('reberia restar ' + resta + ' a ' + total);
  	        throw new Error('Difference not supported yet');
  	    }
  	    function convertRegex(txt) {
  	        return new RegExp(txt
  	            .replace(/#x([a-zA-Z0-9]{4})/g, '\\u$1')
  	            .replace(/#x([a-zA-Z0-9]{3})/g, '\\u0$1')
  	            .replace(/#x([a-zA-Z0-9]{2})/g, '\\x$1')
  	            .replace(/#x([a-zA-Z0-9]{1})/g, '\\x0$1'));
  	    }
  	    function getSubItems(tmpRules, seq, parentName) {
  	        let anterior = null;
  	        let bnfSeq = [];
  	        seq.children.forEach((x, i) => {
  	            if (x.type == 'Minus') {
  	                restar(anterior, x);
  	            }
  	            let decoration = seq.children[i + 1];
  	            decoration = (decoration && decoration.type == 'PrimaryDecoration' && decoration.text) || '';
  	            let preDecoration = '';
  	            switch (x.type) {
  	                case 'SubItem':
  	                    let name = '%' + (parentName + subitems++);
  	                    createRule(tmpRules, x, name);
  	                    bnfSeq.push(preDecoration + name + decoration);
  	                    break;
  	                case 'NCName':
  	                case 'StringLiteral':
  	                    bnfSeq.push(preDecoration + x.text + decoration);
  	                    break;
  	                case 'CharCode':
  	                case 'CharClass':
  	                    if (decoration || preDecoration) {
  	                        let newRule = {
  	                            name: '%' + (parentName + subitems++),
  	                            bnf: [[convertRegex(x.text)]]
  	                        };
  	                        tmpRules.push(newRule);
  	                        bnfSeq.push(preDecoration + newRule.name + decoration);
  	                    }
  	                    else {
  	                        bnfSeq.push(convertRegex(x.text));
  	                    }
  	                    break;
  	                case 'PrimaryDecoration':
  	                    break;
  	                default:
  	                    throw new Error(' HOW SHOULD I PARSE THIS? ' + x.type + ' -> ' + JSON.stringify(x.text));
  	            }
  	            anterior = x;
  	        });
  	        return bnfSeq;
  	    }
  	    function createRule(tmpRules, token, name) {
  	        let bnf = token.children.filter(x => x.type == 'SequenceOrDifference').map(s => getSubItems(tmpRules, s, name));
  	        let rule = {
  	            name,
  	            bnf
  	        };
  	        let recover = null;
  	        bnf.forEach(x => {
  	            recover = recover || x['recover'];
  	            delete x['recover'];
  	        });
  	        if (name.indexOf('%') == 0)
  	            rule.fragment = true;
  	        if (recover)
  	            rule.recover = recover;
  	        tmpRules.push(rule);
  	    }
  	    function getRules(source, parser = BNF.defaultParser) {
  	        let ast = parser.getAST(source);
  	        if (!ast)
  	            throw new Error('Could not parse ' + source);
  	        if (ast.errors && ast.errors.length) {
  	            throw ast.errors[0];
  	        }
  	        let tmpRules = [];
  	        ast.children.filter(x => x.type == 'Production').map((x) => {
  	            let name = x.children.filter(x => x.type == 'NCName')[0].text;
  	            createRule(tmpRules, x, name);
  	        });
  	        return tmpRules;
  	    }
  	    BNF.getRules = getRules;
  	    function Transform(source, subParser = BNF.defaultParser) {
  	        return getRules(source.join(''), subParser);
  	    }
  	    BNF.Transform = Transform;
  	    class Parser extends Parser_1.Parser {
  	        constructor(source, options) {
  	            const subParser = options && options.debugRulesParser === true ? new Parser_1.Parser(BNF.RULES, { debug: true }) : BNF.defaultParser;
  	            super(getRules(source, subParser), options);
  	        }
  	        emitSource() {
  	            return emit(this);
  	        }
  	    }
  	    BNF.Parser = Parser;
  	})(BNF || (BNF = {}));
  	W3CEBNF.default = BNF;
  	
  	return W3CEBNF;
  }

  var W3CEBNFExports = requireW3CEBNF();
  var EBNF = /*@__PURE__*/getDefaultExportFromCjs(W3CEBNFExports);

  const propertyRegex = "[^?/{}*,()#]+";
  // W3C ENBF grammar
  // https://github.com/lys-lang/node-ebnf/blob/master/test/W3CEBNF.spec.ts
  // https://www.w3.org/TR/xml/#sec-notation
  const jsonQueryGrammar = `
root ::= ("#" recursion | recursion | (query | pattern) recursion* | "#" SEP? | SEP)
recursion ::= (SEP query | pattern)*

query ::= (ESC escaped ESC | property | all | any | regex) typecheck? lookahead?
property ::= ${propertyRegex}
regex ::= "{" [^}]+ "}"
SEP ::= "/"
all ::= "**"
any ::= "*"

typecheck ::= "?:" ("value" | "boolean" | "string" | "number" | "object" | "array")
lookahead ::= "?" expression ((andExpr | orExpr) expression)*
andExpr ::= S? "&&" S?
orExpr ::= S? "||" S?

expression ::= (exprProperty | ESC escaped ESC) ((isnot | is) (exprProperty | regex | ESC escaped ESC))*
exprProperty ::= [a-zA-Z0-9-_ $]+
escaped ::= [^"]+
is ::= ":"
isnot ::= ":!"
ESC ::= '"'

pattern ::= S? "(" (SEP query | pattern (orPattern? pattern)*)* ")" quantifier? S? lookahead?
quantifier ::= "+" | "*" | [0-9]+
orPattern ::= S? "," S?

S ::= [ ]*
`;

  const parser$1 = new EBNF.Parser(jsonQueryGrammar);
  const parse$3 = (query) => parser$1.getAST(query);

  const VALUE_INDEX = 0;
  const POINTER_INDEX = 3;

  const join = (a, b) => `${a}/${b}`;
  const toString = Object.prototype.toString;
  const rContainer = /Object|Array/;
  const isContainer = (v) => rContainer.test(toString.call(v));
  const getTypeOf = (v) => toString
      .call(v)
      .match(/\s([^\]]+)\]/)
      .pop()
      .toLowerCase();
  function nodeAsRegex(node) {
      return new RegExp(node.text.replace(/(^{|}$)/g, ""));
  }
  /**
   * Iterates over object or array, passing each key, value and parentObject to the callback
   * @param value - to iterate
   * @param callback - receiving key on given input value
   */
  function forEach(parent, callback) {
      if (Array.isArray(parent)) {
          parent.forEach(callback);
      }
      else if (Object.prototype.toString.call(parent) === "[object Object]") {
          Object.keys(parent).forEach(function (key) {
              callback(parent[key], key, parent);
          });
      }
  }
  /**
   * Returns all keys of the given input data
   * @param  value
   * @return {Array} containing keys of given value
   */
  function getKeys(value) {
      if (Array.isArray(value)) {
          return value.map(function (value, index) {
              return `${index}`;
          });
      }
      if (Object.prototype.toString.call(value) === "[object Object]") {
          return Object.keys(value);
      }
      return [];
  }
  const cache$1 = {
      mem: [],
      get(entry, prop) {
          const v = entry[VALUE_INDEX][prop];
          if (cache$1.mem.includes(v)) {
              return undefined;
          }
          if (isContainer(v)) {
              cache$1.mem.push(v);
          }
          return [v, prop, entry[VALUE_INDEX], join(entry[POINTER_INDEX], prop)];
      },
      reset() {
          cache$1.mem.length = 0;
      },
  };
  const expand = {
      any(node, entry) {
          const value = entry[VALUE_INDEX];
          return (getKeys(value)
              // .map(prop => cache.get(entry, prop));
              .map((prop) => [
              value[prop],
              prop,
              value,
              join(entry[POINTER_INDEX], prop),
          ]));
      },
      all(node, entry) {
          const result = [entry];
          forEach(entry[VALUE_INDEX], (value, prop) => {
              const childEntry = cache$1.get(entry, prop);
              // const childEntry = [value, prop, entry[VALUE_INDEX], join(entry[POINTER_INDEX], prop)];
              childEntry && result.push(...expand.all(node, childEntry));
          });
          return result;
      },
      regex(node, entry) {
          const regex = nodeAsRegex(node);
          const value = entry[VALUE_INDEX];
          return getKeys(value)
              .filter((prop) => regex.test(prop))
              .map((prop) => [
              value[prop],
              prop,
              value,
              join(entry[POINTER_INDEX], prop),
          ]);
      },
  };
  const select = {
      // alias to property (but escaped)
      escaped: (node, entry) => select.property(node, entry),
      property: (node, entry) => {
          const prop = node.text;
          if (entry[VALUE_INDEX] && entry[VALUE_INDEX][prop] !== undefined) {
              return [
                  entry[VALUE_INDEX][prop],
                  prop,
                  entry[VALUE_INDEX],
                  join(entry[POINTER_INDEX], prop),
              ];
          }
      },
      typecheck: (node, entry) => {
          const checkedTyped = node.text.replace(/^\?:/, "");
          if (checkedTyped === "value") {
              return isContainer(entry[VALUE_INDEX]) ? undefined : entry;
          }
          const type = getTypeOf(entry[VALUE_INDEX]);
          if (type === checkedTyped) {
              return entry;
          }
      },
      lookahead: (node, entry) => {
          let valid = true;
          let or = false;
          node.children.forEach((expr) => {
              if (expr.type === "expression") {
                  const isValid = select.expression(expr, entry) !== undefined;
                  valid = or === true ? valid || isValid : valid && isValid;
              }
              else {
                  or = expr.type === "orExpr";
              }
          });
          return valid ? entry : undefined;
      },
      expression: (node, entry) => {
          const prop = node.children[0].text;
          const cmp = node.children[1];
          const test = node.children[2];
          const value = entry[VALUE_INDEX];
          if (isContainer(value) === false) {
              return undefined;
          }
          return expressionMatches(value[prop], cmp, test) ? entry : undefined;
      },
  };
  function expressionMatches(value, cmp, test) {
      if (cmp === undefined) {
          return value !== undefined;
      }
      let valid;
      const valueString = `${value}`;
      if (test.type === "regex") {
          const regex = nodeAsRegex(test);
          valid = regex.test(valueString);
      }
      else {
          valid = valueString === test.text;
      }
      if (cmp.type === "isnot") {
          valid = valid === false && value !== undefined;
      }
      return valid;
  }

  function collect(func, input, node, pointer) {
      const result = [];
      for (let i = 0, l = input.length; i < l; i += 1) {
          result.push(...func(node, input[i], node, pointer));
      }
      return result;
  }
  function reduce(func, input, node, pointer) {
      const result = [];
      for (let i = 0, l = input.length; i < l; i += 1) {
          const output = func(node, input[i], pointer);
          if (output) {
              result.push(output);
          }
      }
      return result;
  }
  function query(data, ast, pointer) {
      let result = data;
      ast.children.forEach((node) => {
          if (expand[node.type]) {
              result = collect(expand[node.type], result, node, pointer);
          }
          else if (select[node.type]) {
              result = reduce(select[node.type], result, node, pointer);
          }
          else {
              throw new Error(`Unknown filter ${node.type}`);
          }
      });
      return result;
  }
  function runPatternOnce(inputSet, ast, pointer) {
      const resultingSet = [];
      let workingSet = inputSet;
      ast.children.forEach((node) => {
          if (node.type === "orPattern") {
              resultingSet.push(...workingSet);
              workingSet = inputSet;
              return;
          }
          workingSet = runNode(workingSet, node, pointer);
      });
      resultingSet.push(...workingSet);
      return resultingSet;
  }
  function getIterationCount(quantifier) {
      if (quantifier == null) {
          return 1; // default, simple group
      }
      if (quantifier === "*" || quantifier === "+") {
          return Infinity;
      }
      const count = parseInt(quantifier);
      return isNaN(count) ? 1 : count;
  }
  function pattern(data, ast, pointer) {
      const result = [];
      const quantifier = ast.children.find((node) => node.type === "quantifier");
      const iterationCount = getIterationCount(quantifier && quantifier.text);
      let workingSet = data;
      if (quantifier && quantifier.text === "*") {
          result.push(...workingSet);
      }
      let count = 0;
      while (workingSet.length > 0 && count < iterationCount) {
          workingSet = runPatternOnce(workingSet, ast, pointer);
          result.push(...workingSet);
          count += 1;
      }
      return result;
  }
  function skip(data, ast, pointer) {
      let result = data;
      ast.children.forEach((n) => (result = runNode(result, n, pointer)));
      return result;
  }
  function runNode(data, ast, pointer) {
      let result;
      if (ast.type === "query") {
          result = query(data, ast, pointer);
      }
      else if (ast.type === "pattern") {
          result = pattern(data, ast, pointer);
      }
      else {
          result = skip(data, ast, pointer);
      }
      // after each query or pattern, reset the cache, to (re)enable nested queries
      cache$1.reset();
      cache$1.mem.push(data);
      return result;
  }
  function run(data, ast) {
      cache$1.reset();
      cache$1.mem.push(data);
      return runNode([[data, null, null, "#"]], ast);
  }

  const returnTypes = {
      value: (r) => r.map((e) => e[VALUE_INDEX]),
      pointer: (r) => r.map((e) => e[POINTER_INDEX]),
      all: (r) => r,
      map: (r) => {
          const map = {};
          r.forEach((e) => (map[e[POINTER_INDEX]] = e[VALUE_INDEX]));
          return map;
      },
  };
  var ReturnType;
  (function (ReturnType) {
      ReturnType["POINTER"] = "pointer";
      ReturnType["VALUE"] = "value";
      ReturnType["ALL"] = "all";
      ReturnType["MAP"] = "map";
  })(ReturnType || (ReturnType = {}));
  // export return types on function
  get.POINTER = ReturnType.POINTER;
  get.VALUE = ReturnType.VALUE;
  get.ALL = ReturnType.ALL;
  get.MAP = ReturnType.MAP;
  /**
   * Runs query on input data and returns the results
   * @param data - input data
   * @param queryString - json-query string
   * @param returnType - result format or a custom callback
   */
  function get(data, queryString, returnType = ReturnType.VALUE) {
      if (queryString == null) {
          return [];
      }
      queryString = queryString.replace(/(\/$)/g, "");
      if (queryString === "") {
          queryString = "#";
      }
      const ast = parse$3(queryString);
      if (ast == null) {
          throw new Error(`empty ast for '${queryString}'`);
      }
      if (ast.rest !== "") {
          throw new Error(`Failed parsing queryString from: '${ast.rest}'`);
      }
      const result = run(data, ast);
      if (typeof returnType === "function") {
          return result.map((r) => returnType(...r));
      }
      else if (returnTypes[returnType]) {
          return returnTypes[returnType](result);
      }
      return result;
  }

  var InsertMode;
  (function (InsertMode) {
      InsertMode["REPLACE_ITEMS"] = "replace";
      InsertMode["INSERT_ITEMS"] = "insert";
  })(InsertMode || (InsertMode = {}));
  // for all array-indices within path, replace the values, ignoring insertion syntax /[1]/
  InsertMode.REPLACE_ITEMS;
  // for all array-indices within path, insert the values, ignoring replace syntax /1/
  InsertMode.INSERT_ITEMS;

  const Types = {
      $ref: {
          type: false
      },
      allOf: {
          type: false,
          definitions: ["allOf/*"]
      },
      anyOf: {
          type: false,
          definitions: ["anyOf/*"]
      },
      array: {
          type: true,
          // ignore additionalItems:TypeDef, when items:TypeDef
          definitions: [
              "allOf/*",
              "anyOf/*",
              "oneOf/*",
              "not",
              "items",
              "items/*",
              "additionalItems"
          ],
          validationKeywords: ["minItems", "maxItems", "uniqueItems"],
          keywords: ["items", "additionalItems", "minItems", "maxItems", "uniqueItems"]
      },
      boolean: {
          type: true
      },
      enum: {
          type: false
      },
      integer: {
          type: true,
          definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],
          validationKeywords: ["minimum", "maximum", "multipleOf"]
      },
      not: {
          type: false,
          definitions: ["not"]
      },
      number: {
          type: true,
          definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],
          validationKeywords: ["minimum", "maximum", "multipleOf"]
      },
      null: {
          type: true
      },
      object: {
          type: true,
          // patternProperties also validate properties
          // dependencies:(string, TypeDef) extend current TypeDef
          // additional Properties validate only remaining properties (after properties & pattern)
          definitions: [
              "allOf/*",
              "anyOf/*",
              "oneOf/*",
              "not",
              "properties/*",
              "additionalProperties",
              "patternProperties/*",
              "dependencies/*"
          ],
          validationKeywords: ["minProperties", "maxProperties", "required"],
          keywords: [
              "properties",
              "additionalProperties",
              "patternProperties",
              "dependencies",
              "minProperties",
              "maxProperties",
              "required"
          ]
      },
      oneOf: {
          type: false,
          definitions: ["oneOf/*"]
      },
      string: {
          type: true,
          definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],
          validationKeywords: ["minLength", "maxLength", "pattern"]
      }
  };

  const typeKeywords = Object.keys(Types).filter((id) => Types[id].type === false);
  const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  /**
   * @throws Error    on multiple matches (invalid schema)
   *
   * Returns the type id of a schema object
   * @param schema
   * @return type id, if found
   */
  function getTypeId(schema) {
      if (isObject$2(schema) === false) {
          return undefined;
      }
      if (schema.enum) {
          return "enum";
      }
      const type = schema.type;
      if (Array.isArray(type) || Types[type]) {
          return type;
      }
      const ids = typeKeywords.filter((type) => schema[type]);
      if (ids.length === 1) {
          return ids[0];
      }
      if (ids.length === 0) {
          // @expensive, guess type object
          for (let i = 0, l = Types.object.keywords.length; i < l; i += 1) {
              const keyword = Types.object.keywords[i];
              if (hasOwnProperty$1.call(schema, keyword)) {
                  // eslint-disable-line
                  return "object";
              }
          }
          // @expensive, guess type array
          for (let i = 0, l = Types.array.keywords.length; i < l; i += 1) {
              const keyword = Types.array.keywords[i];
              if (hasOwnProperty$1.call(schema, keyword)) {
                  // eslint-disable-line
                  return "array";
              }
          }
          return undefined;
      }
      throw new Error(`Mutiple typeIds [${ids.join(", ")}] matched in ${JSON.stringify(schema)}`);
  }

  /**
   * Returns a list of all (direct) type definitions from the given schema
   * @param schema
   * @return list of type definition, given as { pointer, def }
   */
  function getTypeDefs(schema) {
      const defs = [];
      const id = getTypeId(schema);
      if (id == null) {
          return defs;
      }
      let type;
      if (Array.isArray(id)) {
          // since types can also be declared as a set of types, merge the definitions
          // maybe this will require a more sophisticated approach
          type = {};
          for (let i = 0, l = id.length; i < l; i += 1) {
              Object.assign(type, Types[id[i]]);
          }
      }
      else {
          type = Types[id];
      }
      if (type.definitions == null) {
          return defs;
      }
      type.definitions.forEach((query) => {
          get(schema, query, (value, key, parent, pointer) => {
              if (isObject$2(value) && getTypeId(value)) {
                  defs.push({ pointer: gp.join(gp.split(pointer), false), def: value });
              }
          });
      });
      return defs;
  }

  function nextTypeDefs(schema, pointer) {
      if (this.callback(schema, pointer) === true) {
          // eslint-disable-line no-invalid-this
          return; // stop iteration
      }
      const defs = getTypeDefs(schema);
      // eslint-disable-next-line no-invalid-this
      defs.forEach((next) => this.nextTypeDefs(next.def, gp.join(pointer, next.pointer, false)));
  }
  function eachDefinition(walk, schema, pointer, key = "definitions") {
      const defs = schema[key];
      Object.keys(defs).forEach((defId) => {
          if (defs[defId] === false || isObject$2(defs[defId])) {
              walk.nextTypeDefs(defs[defId], gp.join(pointer, key, defId, false));
              return;
          }
          // console.log(`Invalid schema in ${pointer}/${key}/${defId}`);
      });
  }
  function eachSchema(schema, callback, pointer = "#") {
      const walk = { callback, nextTypeDefs };
      walk.nextTypeDefs(schema, pointer);
      if (schema.definitions != null) {
          walk.callback = (defschema, schemaPointer) => {
              callback(defschema, schemaPointer);
              if (defschema.definitions != null) {
                  eachDefinition(walk, defschema, schemaPointer);
              }
          };
          eachDefinition(walk, schema, pointer);
      }
      if (schema.$defs != null) {
          walk.callback = (defschema, schemaPointer) => {
              callback(defschema, schemaPointer);
              if (defschema.definitions != null) {
                  eachDefinition(walk, defschema, schemaPointer);
              }
          };
          eachDefinition(walk, schema, pointer, "$defs");
      }
  }

  /* eslint max-statements-per-line: ["error", { "max": 2 }] */
  const suffixes$4 = /(#|\/)+$/;
  const trailingHash = /#$/;
  const isDomain = /^[^:]+:\/\/[^/]+\//;
  const trailingFragments = /\/[^/]*$/;
  const idAndPointer = /#.*$/;
  function joinScope(previous, id) {
      if (previous == null && id == null) {
          return "#";
      }
      if (id == null) {
          return previous.replace(trailingHash, "");
      }
      if (previous == null) {
          return id.replace(trailingHash, "");
      }
      if (id[0] === "#") {
          return `${previous.replace(idAndPointer, "")}${id.replace(suffixes$4, "")}`;
      }
      if (isDomain.test(id)) {
          return id.replace(trailingHash, "");
      }
      return `${previous.replace(trailingFragments, "")}/${id.replace(trailingHash, "")}`;
  }

  const suffixes$3 = /(#|\/)+$/g;
  const emptyValues = ["", null, "#"];
  function splitRef($ref) {
      if (emptyValues.includes($ref)) {
          return [];
      }
      $ref = $ref.replace(suffixes$3, "");
      if ($ref.indexOf("#") === -1) {
          return [$ref.replace(suffixes$3, "")];
      }
      if ($ref.indexOf("#") === 0) {
          return [$ref.replace(suffixes$3, "")];
      }
      const result = $ref.split("#");
      result[0] = result[0].replace(suffixes$3, "");
      result[1] = `#${result[1].replace(suffixes$3, "")}`;
      return result;
  }

  const suffixes$2 = /(#|\/)+$/g;
  const isObject$1 = (val) => getTypeOf$1(val) === "object";
  // 1. combined is known
  // 2. base or pointer is known
  // 3. base + pointer is known
  function getRef(context, rootSchema, $ref) {
      if (isObject$1($ref)) {
          $ref = $ref.__ref || $ref.$ref;
      }
      if ($ref == null) {
          return rootSchema;
      }
      let schema;
      // is it a known $ref?
      const $remote = $ref.replace(suffixes$2, "");
      if (context.remotes[$remote]) {
          schema = context.remotes[$remote];
          if (schema && schema.$ref) {
              return getRef(context, rootSchema, schema.$ref);
          }
          return schema;
      }
      if (context.ids[$ref]) {
          schema = jsonPointerExports.get(rootSchema, context.ids[$ref]);
          if (schema && schema.$ref) {
              return getRef(context, rootSchema, schema.$ref);
          }
          return schema;
      }
      // is it a ref with host/pointer?
      const fragments = splitRef($ref);
      if (fragments.length === 0) {
          return rootSchema;
      }
      if (fragments.length === 1) {
          $ref = fragments[0];
          if (context.remotes[$ref]) {
              schema = context.remotes[$ref];
              return getRef(context, rootSchema, schema.$ref);
          }
          if (context.ids[$ref]) {
              schema = jsonPointerExports.get(rootSchema, context.ids[$ref]);
              if (schema && schema.$ref) {
                  return getRef(context, rootSchema, schema.$ref);
              }
              return schema;
          }
      }
      if (fragments.length === 2) {
          const base = fragments[0];
          $ref = fragments[1];
          if (context.remotes[base]) {
              if (context.remotes[base].getRef) {
                  return context.remotes[base].getRef($ref);
              }
              // console.log("warning: uncompiled remote - context may be wrong", base);
              return getRef(context, context.remotes[base], $ref);
          }
          if (context.ids[base]) {
              return getRef(context, jsonPointerExports.get(rootSchema, context.ids[base]), $ref);
          }
      }
      schema = jsonPointerExports.get(rootSchema, context.ids[$ref] || $ref);
      if (schema && schema.$ref) {
          return getRef(context, rootSchema, schema.$ref);
      }
      return schema;
  }

  /* eslint max-statements-per-line: ["error", { "max": 2 }] */
  const COMPILED$1 = "__compiled";
  const COMPILED_REF$1 = "__ref";
  const GET_REF$1 = "getRef";
  const GET_ROOT$1 = "getRoot";
  const suffixes$1 = /(#|\/)+$/g;
  /**
   * compiles the input root schema for `$ref` resolution and returns it again
   * @attention this modifies input schema but maintains data-structure and thus returns
   * the same object with JSON.stringify
   *
   * for a compiled json-schema you can call getRef on any contained schema (location of type).
   * this resolves a $ref target to a valid schema (for a valid $ref)
   *
   * @param draft
   * @param schemaToCompile - json-schema to compile
   * @param [rootSchema] - compiled root json-schema to use for definitions resolution
   * @param [force] = false - force compile json-schema
   * @return compiled input json-schema
   */
  function compileSchema$1(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {
      if (!schemaToCompile || schemaToCompile[COMPILED$1] !== undefined) {
          return schemaToCompile;
      }
      const context = { ids: {}, remotes: draft.remotes };
      const rootSchemaAsString = JSON.stringify(schemaToCompile);
      const compiledSchema = JSON.parse(rootSchemaAsString);
      // flag this schema as compiled
      Object.defineProperty(compiledSchema, COMPILED$1, { enumerable: false, value: true });
      // add getRef-helper to this object
      Object.defineProperty(compiledSchema, GET_REF$1, {
          enumerable: false,
          value: getRef.bind(null, context, compiledSchema)
      });
      // bail early, when no $refs are defined
      if (force === false && rootSchemaAsString.includes("$ref") === false) {
          return compiledSchema;
      }
      // compile this schema under rootSchema, making definitions available to $ref-resolution
      if (schemaToCompile !== rootSchema) {
          Object.defineProperty(compiledSchema, "definitions", {
              enumerable: false,
              value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, schemaToCompile.definitions, schemaToCompile.$defs)
          });
      }
      const scopes = {};
      const getRoot = () => compiledSchema;
      eachSchema(compiledSchema, (schema, pointer) => {
          var _a;
          if (schema.id) {
              // if this is a schema being merged on root object, we cannot override
              // parents locations, but must reuse it
              if (schema.id.startsWith("http") && /(allOf|anyOf|oneOf)\/\d+$/.test(pointer)) {
                  const parentPointer = pointer.replace(/\/(allOf|anyOf|oneOf)\/\d+$/, "");
                  const parentSchema = jsonPointerExports.get(compiledSchema, parentPointer);
                  schema.id = (_a = parentSchema.id) !== null && _a !== void 0 ? _a : schema.id;
              }
              context.ids[schema.id.replace(suffixes$1, "")] = pointer;
          }
          // build up scopes and add them to $ref-resolution map
          pointer = `#${pointer}`.replace(/##+/, "#");
          const previousPointer = pointer.replace(/\/[^/]+$/, "");
          const parentPointer = pointer.replace(/\/[^/]+\/[^/]+$/, "");
          const previousScope = scopes[previousPointer] || scopes[parentPointer];
          const scope = joinScope(previousScope, schema.id);
          scopes[pointer] = scope;
          if (context.ids[scope] == null) {
              context.ids[scope] = pointer;
          }
          if (schema.$ref && !schema[COMPILED_REF$1]) {
              Object.defineProperty(schema, COMPILED_REF$1, {
                  enumerable: false,
                  value: joinScope(scope, schema.$ref)
              });
              // @todo currently not used:
              Object.defineProperty(schema, GET_ROOT$1, { enumerable: false, value: getRoot });
              // console.log("compiled ref", scope, schema.$ref, "=>", joinScope(scope, schema.$ref));
          }
      });
      // console.log(JSON.stringify(context.ids, null, 2));
      return compiledSchema;
  }

  /**
   * Iterates over data, retrieving its schema
   *
   * @param draft - validator
   * @param data - the data to iterate
   * @param callback - will be called with (schema, data, pointer) on each item
   * @param [schema] - the schema matching the data. Defaults to rootSchema
   * @param [pointer] - pointer to current data. Default to rootPointer
   */
  function each(draft, data, callback, schema = draft.rootSchema, pointer = "#") {
      schema = draft.resolveRef(schema);
      callback(schema, data, pointer);
      const dataType = getTypeOf$1(data);
      if (dataType === "object") {
          Object.keys(data).forEach((key) => {
              const nextSchema = draft.step(key, schema, data, pointer); // not save
              const next = data[key]; // save
              draft.each(next, callback, nextSchema, `${pointer}/${key}`);
          });
      }
      else if (dataType === "array") {
          data.forEach((next, key) => {
              const nextSchema = draft.step(key, schema, data, pointer);
              draft.each(next, callback, nextSchema, `${pointer}/${key}`);
          });
      }
  }

  /* eslint no-invalid-this: 0 */
  const errors$1 = {
      additionalItemsError: createCustomError("AdditionalItemsError"),
      additionalPropertiesError: createCustomError("AdditionalPropertiesError"),
      anyOfError: createCustomError("AnyOfError"),
      allOfError: createCustomError("AllOfError"),
      constError: createCustomError("ConstError"),
      containsError: createCustomError("ContainsError"),
      containsArrayError: createCustomError("ContainsArrayError"),
      containsAnyError: createCustomError("ContainsAnyError"),
      enumError: createCustomError("EnumError"),
      forbiddenPropertyError: createCustomError("ForbiddenPropertyError"),
      formatURLError: createCustomError("FormatURLError"),
      formatURIError: createCustomError("FormatURIError"),
      formatURIReferenceError: createCustomError("FormatURIReferenceError"),
      formatURITemplateError: createCustomError("FormatURITemplateError"),
      formatDateError: createCustomError("FormatDateError"),
      formatDateTimeError: createCustomError("FormatDateTimeError"),
      formatEmailError: createCustomError("FormatEmailError"),
      formatHostnameError: createCustomError("FormatHostnameError"),
      formatIPV4Error: createCustomError("FormatIPV4Error"),
      formatIPV4LeadingZeroError: createCustomError("FormatIPV4LeadingZeroError"),
      formatIPV6Error: createCustomError("FormatIPV6Error"),
      formatIPV6LeadingZeroError: createCustomError("FormatIPV6LeadingZeroError"),
      formatJsonPointerError: createCustomError("FormatJsonPointerError"),
      formatRegExError: createCustomError("FormatRegExError"),
      formatTimeError: createCustomError("FormatTimeError"),
      invalidSchemaError: createCustomError("InvalidSchemaError"),
      invalidDataError: createCustomError("InvalidDataError"),
      invalidTypeError: createCustomError("InvalidTypeError"),
      invalidPropertyNameError: createCustomError("InvalidPropertyNameError"),
      maximumError: createCustomError("MaximumError"),
      maxItemsError: createCustomError("MaxItemsError"),
      maxLengthError: createCustomError("MaxLengthError"),
      maxPropertiesError: createCustomError("MaxPropertiesError"),
      minimumError: createCustomError("MinimumError"),
      minItemsError: createCustomError("MinItemsError"),
      minItemsOneError: createCustomError("MinItemsOneError"),
      minLengthError: createCustomError("MinLengthError"),
      minLengthOneError: createCustomError("MinLengthOneError"),
      minPropertiesError: createCustomError("MinPropertiesError"),
      missingDependencyError: createCustomError("MissingDependencyError"),
      missingOneOfPropertyError: createCustomError("MissingOneOfPropertyError"),
      multipleOfError: createCustomError("MultipleOfError"),
      multipleOneOfError: createCustomError("MultipleOneOfError"),
      noAdditionalPropertiesError: createCustomError("NoAdditionalPropertiesError"),
      notError: createCustomError("NotError"),
      oneOfError: createCustomError("OneOfError"),
      oneOfPropertyError: createCustomError("OneOfPropertyError"),
      patternError: createCustomError("PatternError"),
      patternPropertiesError: createCustomError("PatternPropertiesError"),
      requiredPropertyError: createCustomError("RequiredPropertyError"),
      schemaWarning: createCustomError("SchemaWarning"),
      typeError: createCustomError("TypeError"),
      undefinedValueError: createCustomError("UndefinedValueError"),
      uniqueItemsError: createCustomError("UniqueItemsError"),
      unknownPropertyError: createCustomError("UnknownPropertyError"),
      valueNotEmptyError: createCustomError("ValueNotEmptyError")
  };

  var validUrl$1 = {exports: {}};

  var hasRequiredValidUrl;

  function requireValidUrl () {
  	if (hasRequiredValidUrl) return validUrl$1.exports;
  	hasRequiredValidUrl = 1;
  	(function (module) {
  		(function(module) {

  		    module.exports.is_uri = is_iri;
  		    module.exports.is_http_uri = is_http_iri;
  		    module.exports.is_https_uri = is_https_iri;
  		    module.exports.is_web_uri = is_web_iri;
  		    // Create aliases
  		    module.exports.isUri = is_iri;
  		    module.exports.isHttpUri = is_http_iri;
  		    module.exports.isHttpsUri = is_https_iri;
  		    module.exports.isWebUri = is_web_iri;


  		    // private function
  		    // internal URI spitter method - direct from RFC 3986
  		    var splitUri = function(uri) {
  		        var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
  		        return splitted;
  		    };

  		    function is_iri(value) {
  		        if (!value) {
  		            return;
  		        }

  		        // check for illegal characters
  		        if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value)) return;

  		        // check for hex escapes that aren't complete
  		        if (/%[^0-9a-f]/i.test(value)) return;
  		        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;

  		        var splitted = [];
  		        var scheme = '';
  		        var authority = '';
  		        var path = '';
  		        var query = '';
  		        var fragment = '';
  		        var out = '';

  		        // from RFC 3986
  		        splitted = splitUri(value);
  		        scheme = splitted[1]; 
  		        authority = splitted[2];
  		        path = splitted[3];
  		        query = splitted[4];
  		        fragment = splitted[5];

  		        // scheme and path are required, though the path can be empty
  		        if (!(scheme && scheme.length && path.length >= 0)) return;

  		        // if authority is present, the path must be empty or begin with a /
  		        if (authority && authority.length) {
  		            if (!(path.length === 0 || /^\//.test(path))) return;
  		        } else {
  		            // if authority is not present, the path must not start with //
  		            if (/^\/\//.test(path)) return;
  		        }

  		        // scheme must begin with a letter, then consist of letters, digits, +, ., or -
  		        if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))  return;

  		        // re-assemble the URL per section 5.3 in RFC 3986
  		        out += scheme + ':';
  		        if (authority && authority.length) {
  		            out += '//' + authority;
  		        }

  		        out += path;

  		        if (query && query.length) {
  		            out += '?' + query;
  		        }

  		        if (fragment && fragment.length) {
  		            out += '#' + fragment;
  		        }

  		        return out;
  		    }

  		    function is_http_iri(value, allowHttps) {
  		        if (!is_iri(value)) {
  		            return;
  		        }

  		        var splitted = [];
  		        var scheme = '';
  		        var authority = '';
  		        var path = '';
  		        var port = '';
  		        var query = '';
  		        var fragment = '';
  		        var out = '';

  		        // from RFC 3986
  		        splitted = splitUri(value);
  		        scheme = splitted[1]; 
  		        authority = splitted[2];
  		        path = splitted[3];
  		        query = splitted[4];
  		        fragment = splitted[5];

  		        if (!scheme)  return;

  		        if(allowHttps) {
  		            if (scheme.toLowerCase() != 'https') return;
  		        } else {
  		            if (scheme.toLowerCase() != 'http') return;
  		        }

  		        // fully-qualified URIs must have an authority section that is
  		        // a valid host
  		        if (!authority) {
  		            return;
  		        }

  		        // enable port component
  		        if (/:(\d+)$/.test(authority)) {
  		            port = authority.match(/:(\d+)$/)[0];
  		            authority = authority.replace(/:\d+$/, '');
  		        }

  		        out += scheme + ':';
  		        out += '//' + authority;
  		        
  		        if (port) {
  		            out += port;
  		        }
  		        
  		        out += path;
  		        
  		        if(query && query.length){
  		            out += '?' + query;
  		        }

  		        if(fragment && fragment.length){
  		            out += '#' + fragment;
  		        }
  		        
  		        return out;
  		    }

  		    function is_https_iri(value) {
  		        return is_http_iri(value, true);
  		    }

  		    function is_web_iri(value) {
  		        return (is_http_iri(value) || is_https_iri(value));
  		    }

  		})(module); 
  	} (validUrl$1));
  	return validUrl$1.exports;
  }

  var validUrlExports = requireValidUrl();
  var validUrl = /*@__PURE__*/getDefaultExportFromCjs(validUrlExports);

  var lib$2 = {};

  var nearley$1 = {exports: {}};

  var nearley = nearley$1.exports;

  var hasRequiredNearley;

  function requireNearley () {
  	if (hasRequiredNearley) return nearley$1.exports;
  	hasRequiredNearley = 1;
  	(function (module) {
  		(function(root, factory) {
  		    if (module.exports) {
  		        module.exports = factory();
  		    } else {
  		        root.nearley = factory();
  		    }
  		}(nearley, function() {

  		    function Rule(name, symbols, postprocess) {
  		        this.id = ++Rule.highestId;
  		        this.name = name;
  		        this.symbols = symbols;        // a list of literal | regex class | nonterminal
  		        this.postprocess = postprocess;
  		        return this;
  		    }
  		    Rule.highestId = 0;

  		    Rule.prototype.toString = function(withCursorAt) {
  		        var symbolSequence = (typeof withCursorAt === "undefined")
  		                             ? this.symbols.map(getSymbolShortDisplay).join(' ')
  		                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')
  		                                 + " ● "
  		                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );
  		        return this.name + " → " + symbolSequence;
  		    };


  		    // a State is a rule at a position from a given starting point in the input stream (reference)
  		    function State(rule, dot, reference, wantedBy) {
  		        this.rule = rule;
  		        this.dot = dot;
  		        this.reference = reference;
  		        this.data = [];
  		        this.wantedBy = wantedBy;
  		        this.isComplete = this.dot === rule.symbols.length;
  		    }

  		    State.prototype.toString = function() {
  		        return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
  		    };

  		    State.prototype.nextState = function(child) {
  		        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
  		        state.left = this;
  		        state.right = child;
  		        if (state.isComplete) {
  		            state.data = state.build();
  		            // Having right set here will prevent the right state and its children
  		            // form being garbage collected
  		            state.right = undefined;
  		        }
  		        return state;
  		    };

  		    State.prototype.build = function() {
  		        var children = [];
  		        var node = this;
  		        do {
  		            children.push(node.right.data);
  		            node = node.left;
  		        } while (node.left);
  		        children.reverse();
  		        return children;
  		    };

  		    State.prototype.finish = function() {
  		        if (this.rule.postprocess) {
  		            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
  		        }
  		    };


  		    function Column(grammar, index) {
  		        this.grammar = grammar;
  		        this.index = index;
  		        this.states = [];
  		        this.wants = {}; // states indexed by the non-terminal they expect
  		        this.scannable = []; // list of states that expect a token
  		        this.completed = {}; // states that are nullable
  		    }


  		    Column.prototype.process = function(nextColumn) {
  		        var states = this.states;
  		        var wants = this.wants;
  		        var completed = this.completed;

  		        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration
  		            var state = states[w];

  		            if (state.isComplete) {
  		                state.finish();
  		                if (state.data !== Parser.fail) {
  		                    // complete
  		                    var wantedBy = state.wantedBy;
  		                    for (var i = wantedBy.length; i--; ) { // this line is hot
  		                        var left = wantedBy[i];
  		                        this.complete(left, state);
  		                    }

  		                    // special-case nullables
  		                    if (state.reference === this.index) {
  		                        // make sure future predictors of this rule get completed.
  		                        var exp = state.rule.name;
  		                        (this.completed[exp] = this.completed[exp] || []).push(state);
  		                    }
  		                }

  		            } else {
  		                // queue scannable states
  		                var exp = state.rule.symbols[state.dot];
  		                if (typeof exp !== 'string') {
  		                    this.scannable.push(state);
  		                    continue;
  		                }

  		                // predict
  		                if (wants[exp]) {
  		                    wants[exp].push(state);

  		                    if (completed.hasOwnProperty(exp)) {
  		                        var nulls = completed[exp];
  		                        for (var i = 0; i < nulls.length; i++) {
  		                            var right = nulls[i];
  		                            this.complete(state, right);
  		                        }
  		                    }
  		                } else {
  		                    wants[exp] = [state];
  		                    this.predict(exp);
  		                }
  		            }
  		        }
  		    };

  		    Column.prototype.predict = function(exp) {
  		        var rules = this.grammar.byName[exp] || [];

  		        for (var i = 0; i < rules.length; i++) {
  		            var r = rules[i];
  		            var wantedBy = this.wants[exp];
  		            var s = new State(r, 0, this.index, wantedBy);
  		            this.states.push(s);
  		        }
  		    };

  		    Column.prototype.complete = function(left, right) {
  		        var copy = left.nextState(right);
  		        this.states.push(copy);
  		    };


  		    function Grammar(rules, start) {
  		        this.rules = rules;
  		        this.start = start || this.rules[0].name;
  		        var byName = this.byName = {};
  		        this.rules.forEach(function(rule) {
  		            if (!byName.hasOwnProperty(rule.name)) {
  		                byName[rule.name] = [];
  		            }
  		            byName[rule.name].push(rule);
  		        });
  		    }

  		    // So we can allow passing (rules, start) directly to Parser for backwards compatibility
  		    Grammar.fromCompiled = function(rules, start) {
  		        var lexer = rules.Lexer;
  		        if (rules.ParserStart) {
  		          start = rules.ParserStart;
  		          rules = rules.ParserRules;
  		        }
  		        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });
  		        var g = new Grammar(rules, start);
  		        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable
  		        return g;
  		    };


  		    function StreamLexer() {
  		      this.reset("");
  		    }

  		    StreamLexer.prototype.reset = function(data, state) {
  		        this.buffer = data;
  		        this.index = 0;
  		        this.line = state ? state.line : 1;
  		        this.lastLineBreak = state ? -state.col : 0;
  		    };

  		    StreamLexer.prototype.next = function() {
  		        if (this.index < this.buffer.length) {
  		            var ch = this.buffer[this.index++];
  		            if (ch === '\n') {
  		              this.line += 1;
  		              this.lastLineBreak = this.index;
  		            }
  		            return {value: ch};
  		        }
  		    };

  		    StreamLexer.prototype.save = function() {
  		      return {
  		        line: this.line,
  		        col: this.index - this.lastLineBreak,
  		      }
  		    };

  		    StreamLexer.prototype.formatError = function(token, message) {
  		        // nb. this gets called after consuming the offending token,
  		        // so the culprit is index-1
  		        var buffer = this.buffer;
  		        if (typeof buffer === 'string') {
  		            var lines = buffer
  		                .split("\n")
  		                .slice(
  		                    Math.max(0, this.line - 5), 
  		                    this.line
  		                );

  		            var nextLineBreak = buffer.indexOf('\n', this.index);
  		            if (nextLineBreak === -1) nextLineBreak = buffer.length;
  		            var col = this.index - this.lastLineBreak;
  		            var lastLineDigits = String(this.line).length;
  		            message += " at line " + this.line + " col " + col + ":\n\n";
  		            message += lines
  		                .map(function(line, i) {
  		                    return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;
  		                }, this)
  		                .join("\n");
  		            message += "\n" + pad("", lastLineDigits + col) + "^\n";
  		            return message;
  		        } else {
  		            return message + " at index " + (this.index - 1);
  		        }

  		        function pad(n, length) {
  		            var s = String(n);
  		            return Array(length - s.length + 1).join(" ") + s;
  		        }
  		    };

  		    function Parser(rules, start, options) {
  		        if (rules instanceof Grammar) {
  		            var grammar = rules;
  		            var options = start;
  		        } else {
  		            var grammar = Grammar.fromCompiled(rules, start);
  		        }
  		        this.grammar = grammar;

  		        // Read options
  		        this.options = {
  		            keepHistory: false,
  		            lexer: grammar.lexer || new StreamLexer,
  		        };
  		        for (var key in (options || {})) {
  		            this.options[key] = options[key];
  		        }

  		        // Setup lexer
  		        this.lexer = this.options.lexer;
  		        this.lexerState = undefined;

  		        // Setup a table
  		        var column = new Column(grammar, 0);
  		        this.table = [column];

  		        // I could be expecting anything.
  		        column.wants[grammar.start] = [];
  		        column.predict(grammar.start);
  		        // TODO what if start rule is nullable?
  		        column.process();
  		        this.current = 0; // token index
  		    }

  		    // create a reserved token for indicating a parse fail
  		    Parser.fail = {};

  		    Parser.prototype.feed = function(chunk) {
  		        var lexer = this.lexer;
  		        lexer.reset(chunk, this.lexerState);

  		        var token;
  		        while (true) {
  		            try {
  		                token = lexer.next();
  		                if (!token) {
  		                    break;
  		                }
  		            } catch (e) {
  		                // Create the next column so that the error reporter
  		                // can display the correctly predicted states.
  		                var nextColumn = new Column(this.grammar, this.current + 1);
  		                this.table.push(nextColumn);
  		                var err = new Error(this.reportLexerError(e));
  		                err.offset = this.current;
  		                err.token = e.token;
  		                throw err;
  		            }
  		            // We add new states to table[current+1]
  		            var column = this.table[this.current];

  		            // GC unused states
  		            if (!this.options.keepHistory) {
  		                delete this.table[this.current - 1];
  		            }

  		            var n = this.current + 1;
  		            var nextColumn = new Column(this.grammar, n);
  		            this.table.push(nextColumn);

  		            // Advance all tokens that expect the symbol
  		            var literal = token.text !== undefined ? token.text : token.value;
  		            var value = lexer.constructor === StreamLexer ? token.value : token;
  		            var scannable = column.scannable;
  		            for (var w = scannable.length; w--; ) {
  		                var state = scannable[w];
  		                var expect = state.rule.symbols[state.dot];
  		                // Try to consume the token
  		                // either regex or literal
  		                if (expect.test ? expect.test(value) :
  		                    expect.type ? expect.type === token.type
  		                                : expect.literal === literal) {
  		                    // Add it
  		                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});
  		                    nextColumn.states.push(next);
  		                }
  		            }

  		            // Next, for each of the rules, we either
  		            // (a) complete it, and try to see if the reference row expected that
  		            //     rule
  		            // (b) predict the next nonterminal it expects by adding that
  		            //     nonterminal's start state
  		            // To prevent duplication, we also keep track of rules we have already
  		            // added

  		            nextColumn.process();

  		            // If needed, throw an error:
  		            if (nextColumn.states.length === 0) {
  		                // No states at all! This is not good.
  		                var err = new Error(this.reportError(token));
  		                err.offset = this.current;
  		                err.token = token;
  		                throw err;
  		            }

  		            // maybe save lexer state
  		            if (this.options.keepHistory) {
  		              column.lexerState = lexer.save();
  		            }

  		            this.current++;
  		        }
  		        if (column) {
  		          this.lexerState = lexer.save();
  		        }

  		        // Incrementally keep track of results
  		        this.results = this.finish();

  		        // Allow chaining, for whatever it's worth
  		        return this;
  		    };

  		    Parser.prototype.reportLexerError = function(lexerError) {
  		        var tokenDisplay, lexerMessage;
  		        // Planning to add a token property to moo's thrown error
  		        // even on erroring tokens to be used in error display below
  		        var token = lexerError.token;
  		        if (token) {
  		            tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";
  		            lexerMessage = this.lexer.formatError(token, "Syntax error");
  		        } else {
  		            tokenDisplay = "input (lexer error)";
  		            lexerMessage = lexerError.message;
  		        }
  		        return this.reportErrorCommon(lexerMessage, tokenDisplay);
  		    };

  		    Parser.prototype.reportError = function(token) {
  		        var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== undefined ? token.value : token);
  		        var lexerMessage = this.lexer.formatError(token, "Syntax error");
  		        return this.reportErrorCommon(lexerMessage, tokenDisplay);
  		    };

  		    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {
  		        var lines = [];
  		        lines.push(lexerMessage);
  		        var lastColumnIndex = this.table.length - 2;
  		        var lastColumn = this.table[lastColumnIndex];
  		        var expectantStates = lastColumn.states
  		            .filter(function(state) {
  		                var nextSymbol = state.rule.symbols[state.dot];
  		                return nextSymbol && typeof nextSymbol !== "string";
  		            });

  		        if (expectantStates.length === 0) {
  		            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\n');
  		            this.displayStateStack(lastColumn.states, lines);
  		        } else {
  		            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\n');
  		            // Display a "state stack" for each expectant state
  		            // - which shows you how this state came to be, step by step.
  		            // If there is more than one derivation, we only display the first one.
  		            var stateStacks = expectantStates
  		                .map(function(state) {
  		                    return this.buildFirstStateStack(state, []) || [state];
  		                }, this);
  		            // Display each state that is expecting a terminal symbol next.
  		            stateStacks.forEach(function(stateStack) {
  		                var state = stateStack[0];
  		                var nextSymbol = state.rule.symbols[state.dot];
  		                var symbolDisplay = this.getSymbolDisplay(nextSymbol);
  		                lines.push('A ' + symbolDisplay + ' based on:');
  		                this.displayStateStack(stateStack, lines);
  		            }, this);
  		        }
  		        lines.push("");
  		        return lines.join("\n");
  		    };
  		    
  		    Parser.prototype.displayStateStack = function(stateStack, lines) {
  		        var lastDisplay;
  		        var sameDisplayCount = 0;
  		        for (var j = 0; j < stateStack.length; j++) {
  		            var state = stateStack[j];
  		            var display = state.rule.toString(state.dot);
  		            if (display === lastDisplay) {
  		                sameDisplayCount++;
  		            } else {
  		                if (sameDisplayCount > 0) {
  		                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');
  		                }
  		                sameDisplayCount = 0;
  		                lines.push('    ' + display);
  		            }
  		            lastDisplay = display;
  		        }
  		    };

  		    Parser.prototype.getSymbolDisplay = function(symbol) {
  		        return getSymbolLongDisplay(symbol);
  		    };

  		    /*
  		    Builds a the first state stack. You can think of a state stack as the call stack
  		    of the recursive-descent parser which the Nearley parse algorithm simulates.
  		    A state stack is represented as an array of state objects. Within a
  		    state stack, the first item of the array will be the starting
  		    state, with each successive item in the array going further back into history.

  		    This function needs to be given a starting state and an empty array representing
  		    the visited states, and it returns an single state stack.

  		    */
  		    Parser.prototype.buildFirstStateStack = function(state, visited) {
  		        if (visited.indexOf(state) !== -1) {
  		            // Found cycle, return null
  		            // to eliminate this path from the results, because
  		            // we don't know how to display it meaningfully
  		            return null;
  		        }
  		        if (state.wantedBy.length === 0) {
  		            return [state];
  		        }
  		        var prevState = state.wantedBy[0];
  		        var childVisited = [state].concat(visited);
  		        var childResult = this.buildFirstStateStack(prevState, childVisited);
  		        if (childResult === null) {
  		            return null;
  		        }
  		        return [state].concat(childResult);
  		    };

  		    Parser.prototype.save = function() {
  		        var column = this.table[this.current];
  		        column.lexerState = this.lexerState;
  		        return column;
  		    };

  		    Parser.prototype.restore = function(column) {
  		        var index = column.index;
  		        this.current = index;
  		        this.table[index] = column;
  		        this.table.splice(index + 1);
  		        this.lexerState = column.lexerState;

  		        // Incrementally keep track of results
  		        this.results = this.finish();
  		    };

  		    // nb. deprecated: use save/restore instead!
  		    Parser.prototype.rewind = function(index) {
  		        if (!this.options.keepHistory) {
  		            throw new Error('set option `keepHistory` to enable rewinding')
  		        }
  		        // nb. recall column (table) indicies fall between token indicies.
  		        //        col 0   --   token 0   --   col 1
  		        this.restore(this.table[index]);
  		    };

  		    Parser.prototype.finish = function() {
  		        // Return the possible parsings
  		        var considerations = [];
  		        var start = this.grammar.start;
  		        var column = this.table[this.table.length - 1];
  		        column.states.forEach(function (t) {
  		            if (t.rule.name === start
  		                    && t.dot === t.rule.symbols.length
  		                    && t.reference === 0
  		                    && t.data !== Parser.fail) {
  		                considerations.push(t);
  		            }
  		        });
  		        return considerations.map(function(c) {return c.data; });
  		    };

  		    function getSymbolLongDisplay(symbol) {
  		        var type = typeof symbol;
  		        if (type === "string") {
  		            return symbol;
  		        } else if (type === "object") {
  		            if (symbol.literal) {
  		                return JSON.stringify(symbol.literal);
  		            } else if (symbol instanceof RegExp) {
  		                return 'character matching ' + symbol;
  		            } else if (symbol.type) {
  		                return symbol.type + ' token';
  		            } else if (symbol.test) {
  		                return 'token matching ' + String(symbol.test);
  		            } else {
  		                throw new Error('Unknown symbol type: ' + symbol);
  		            }
  		        }
  		    }

  		    function getSymbolShortDisplay(symbol) {
  		        var type = typeof symbol;
  		        if (type === "string") {
  		            return symbol;
  		        } else if (type === "object") {
  		            if (symbol.literal) {
  		                return JSON.stringify(symbol.literal);
  		            } else if (symbol instanceof RegExp) {
  		                return symbol.toString();
  		            } else if (symbol.type) {
  		                return '%' + symbol.type;
  		            } else if (symbol.test) {
  		                return '<' + String(symbol.test) + '>';
  		            } else {
  		                throw new Error('Unknown symbol type: ' + symbol);
  		            }
  		        }
  		    }

  		    return {
  		        Parser: Parser,
  		        Grammar: Grammar,
  		        Rule: Rule,
  		    };

  		})); 
  	} (nearley$1));
  	return nearley$1.exports;
  }

  var grammar = {};

  var hasRequiredGrammar;

  function requireGrammar () {
  	if (hasRequiredGrammar) return grammar;
  	hasRequiredGrammar = 1;
  	Object.defineProperty(grammar, "__esModule", { value: true });
  	// Generated automatically by nearley, version 2.20.1
  	// http://github.com/Hardmath123/nearley
  	// Bypasses TS6133. Allow declared but unused functions.
  	// @ts-ignore
  	function id(d) { return d[0]; }
  	const deepFlatten = (arr) => [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)));
  	function flat_string(d) {
  	    if (d) {
  	        if (Array.isArray(d))
  	            return deepFlatten(d).join("");
  	        return d;
  	    }
  	    return "";
  	}
  	const grammar$1 = {
  	    Lexer: undefined,
  	    ParserRules: [
  	        { "name": "Reverse_path", "symbols": ["Path"] },
  	        { "name": "Reverse_path$string$1", "symbols": [{ "literal": "<" }, { "literal": ">" }], "postprocess": (d) => d.join('') },
  	        { "name": "Reverse_path", "symbols": ["Reverse_path$string$1"] },
  	        { "name": "Forward_path$subexpression$1$subexpression$1", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": "@" }], "postprocess": function (d) { return d.join(""); } },
  	        { "name": "Forward_path$subexpression$1", "symbols": ["Forward_path$subexpression$1$subexpression$1", "Domain", { "literal": ">" }] },
  	        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$1"] },
  	        { "name": "Forward_path$subexpression$2", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": ">" }], "postprocess": function (d) { return d.join(""); } },
  	        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$2"] },
  	        { "name": "Forward_path", "symbols": ["Path"] },
  	        { "name": "Path$ebnf$1$subexpression$1", "symbols": ["A_d_l", { "literal": ":" }] },
  	        { "name": "Path$ebnf$1", "symbols": ["Path$ebnf$1$subexpression$1"], "postprocess": id },
  	        { "name": "Path$ebnf$1", "symbols": [], "postprocess": () => null },
  	        { "name": "Path", "symbols": [{ "literal": "<" }, "Path$ebnf$1", "Mailbox", { "literal": ">" }] },
  	        { "name": "A_d_l$ebnf$1", "symbols": [] },
  	        { "name": "A_d_l$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "At_domain"] },
  	        { "name": "A_d_l$ebnf$1", "symbols": ["A_d_l$ebnf$1", "A_d_l$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "A_d_l", "symbols": ["At_domain", "A_d_l$ebnf$1"] },
  	        { "name": "At_domain", "symbols": [{ "literal": "@" }, "Domain"] },
  	        { "name": "Domain$ebnf$1", "symbols": [] },
  	        { "name": "Domain$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "sub_domain"] },
  	        { "name": "Domain$ebnf$1", "symbols": ["Domain$ebnf$1", "Domain$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "Domain", "symbols": ["sub_domain", "Domain$ebnf$1"] },
  	        { "name": "sub_domain", "symbols": ["U_label"] },
  	        { "name": "Let_dig", "symbols": ["ALPHA_DIGIT"], "postprocess": id },
  	        { "name": "Ldh_str$ebnf$1", "symbols": [] },
  	        { "name": "Ldh_str$ebnf$1", "symbols": ["Ldh_str$ebnf$1", "ALPHA_DIG_DASH"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "Ldh_str", "symbols": ["Ldh_str$ebnf$1", "Let_dig"] },
  	        { "name": "U_Let_dig", "symbols": ["ALPHA_DIGIT_U"], "postprocess": id },
  	        { "name": "U_Ldh_str$ebnf$1", "symbols": [] },
  	        { "name": "U_Ldh_str$ebnf$1", "symbols": ["U_Ldh_str$ebnf$1", "ALPHA_DIG_DASH_U"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "U_Ldh_str", "symbols": ["U_Ldh_str$ebnf$1", "U_Let_dig"] },
  	        { "name": "U_label$ebnf$1$subexpression$1", "symbols": ["U_Ldh_str"] },
  	        { "name": "U_label$ebnf$1", "symbols": ["U_label$ebnf$1$subexpression$1"], "postprocess": id },
  	        { "name": "U_label$ebnf$1", "symbols": [], "postprocess": () => null },
  	        { "name": "U_label", "symbols": ["U_Let_dig", "U_label$ebnf$1"] },
  	        { "name": "address_literal$subexpression$1", "symbols": ["IPv4_address_literal"] },
  	        { "name": "address_literal$subexpression$1", "symbols": ["IPv6_address_literal"] },
  	        { "name": "address_literal$subexpression$1", "symbols": ["General_address_literal"] },
  	        { "name": "address_literal", "symbols": [{ "literal": "[" }, "address_literal$subexpression$1", { "literal": "]" }] },
  	        { "name": "non_local_part", "symbols": ["Domain"], "postprocess": function (d) {
  	                return { DomainName: flat_string(d[0]) };
  	            }
  	        },
  	        { "name": "non_local_part", "symbols": ["address_literal"], "postprocess": function (d) {
  	                return { AddressLiteral: flat_string(d[0]) };
  	            }
  	        },
  	        { "name": "Mailbox", "symbols": ["Local_part", { "literal": "@" }, "non_local_part"], "postprocess": function (d) {
  	                return { localPart: flat_string(d[0]), domainPart: flat_string(d[2]) };
  	            }
  	        },
  	        { "name": "Local_part", "symbols": ["Dot_string"], "postprocess": function (d) {
  	                return { DotString: flat_string(d[0]) };
  	            }
  	        },
  	        { "name": "Local_part", "symbols": ["Quoted_string"], "postprocess": function (d) {
  	                return { QuotedString: flat_string(d[0]) };
  	            }
  	        },
  	        { "name": "Dot_string$ebnf$1", "symbols": [] },
  	        { "name": "Dot_string$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "Atom"] },
  	        { "name": "Dot_string$ebnf$1", "symbols": ["Dot_string$ebnf$1", "Dot_string$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "Dot_string", "symbols": ["Atom", "Dot_string$ebnf$1"] },
  	        { "name": "Atom$ebnf$1", "symbols": [/[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/] },
  	        { "name": "Atom$ebnf$1", "symbols": ["Atom$ebnf$1", /[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "Atom", "symbols": ["Atom$ebnf$1"] },
  	        { "name": "Quoted_string$ebnf$1", "symbols": [] },
  	        { "name": "Quoted_string$ebnf$1", "symbols": ["Quoted_string$ebnf$1", "QcontentSMTP"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "Quoted_string", "symbols": ["DQUOTE", "Quoted_string$ebnf$1", "DQUOTE"] },
  	        { "name": "QcontentSMTP", "symbols": ["qtextSMTP"] },
  	        { "name": "QcontentSMTP", "symbols": ["quoted_pairSMTP"] },
  	        { "name": "quoted_pairSMTP", "symbols": [{ "literal": "\\" }, /[\x20-\x7e]/] },
  	        { "name": "qtextSMTP", "symbols": [/[\x20-\x21\x23-\x5b\x5d-\x7e\u0080-\uFFFF]/], "postprocess": id },
  	        { "name": "IPv4_address_literal$macrocall$2", "symbols": [{ "literal": "." }, "Snum"] },
  	        { "name": "IPv4_address_literal$macrocall$1", "symbols": ["IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2"] },
  	        { "name": "IPv4_address_literal", "symbols": ["Snum", "IPv4_address_literal$macrocall$1"] },
  	        { "name": "IPv6_address_literal$subexpression$1", "symbols": [/[iI]/, /[pP]/, /[vV]/, { "literal": "6" }, { "literal": ":" }], "postprocess": function (d) { return d.join(""); } },
  	        { "name": "IPv6_address_literal", "symbols": ["IPv6_address_literal$subexpression$1", "IPv6_addr"] },
  	        { "name": "General_address_literal$ebnf$1", "symbols": ["dcontent"] },
  	        { "name": "General_address_literal$ebnf$1", "symbols": ["General_address_literal$ebnf$1", "dcontent"], "postprocess": (d) => d[0].concat([d[1]]) },
  	        { "name": "General_address_literal", "symbols": ["Standardized_tag", { "literal": ":" }, "General_address_literal$ebnf$1"] },
  	        { "name": "Standardized_tag", "symbols": ["Ldh_str"] },
  	        { "name": "dcontent", "symbols": [/[\x21-\x5a\x5e-\x7e]/], "postprocess": id },
  	        { "name": "Snum", "symbols": ["DIGIT"] },
  	        { "name": "Snum$subexpression$1", "symbols": [/[1-9]/, "DIGIT"] },
  	        { "name": "Snum", "symbols": ["Snum$subexpression$1"] },
  	        { "name": "Snum$subexpression$2", "symbols": [{ "literal": "1" }, "DIGIT", "DIGIT"] },
  	        { "name": "Snum", "symbols": ["Snum$subexpression$2"] },
  	        { "name": "Snum$subexpression$3", "symbols": [{ "literal": "2" }, /[0-4]/, "DIGIT"] },
  	        { "name": "Snum", "symbols": ["Snum$subexpression$3"] },
  	        { "name": "Snum$subexpression$4", "symbols": [{ "literal": "2" }, { "literal": "5" }, /[0-5]/] },
  	        { "name": "Snum", "symbols": ["Snum$subexpression$4"] },
  	        { "name": "IPv6_addr", "symbols": ["IPv6_full"] },
  	        { "name": "IPv6_addr", "symbols": ["IPv6_comp"] },
  	        { "name": "IPv6_addr", "symbols": ["IPv6v4_full"] },
  	        { "name": "IPv6_addr", "symbols": ["IPv6v4_comp"] },
  	        { "name": "IPv6_hex", "symbols": ["HEXDIG"] },
  	        { "name": "IPv6_hex$subexpression$1", "symbols": ["HEXDIG", "HEXDIG"] },
  	        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$1"] },
  	        { "name": "IPv6_hex$subexpression$2", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"] },
  	        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$2"] },
  	        { "name": "IPv6_hex$subexpression$3", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"] },
  	        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$3"] },
  	        { "name": "IPv6_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6_full$macrocall$1", "symbols": ["IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2"] },
  	        { "name": "IPv6_full", "symbols": ["IPv6_hex", "IPv6_full$macrocall$1"] },
  	        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2"] },
  	        { "name": "IPv6_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$1$subexpression$1$macrocall$1"] },
  	        { "name": "IPv6_comp$ebnf$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1"], "postprocess": id },
  	        { "name": "IPv6_comp$ebnf$1", "symbols": [], "postprocess": () => null },
  	        { "name": "IPv6_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join('') },
  	        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2"] },
  	        { "name": "IPv6_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$2$subexpression$1$macrocall$1"] },
  	        { "name": "IPv6_comp$ebnf$2", "symbols": ["IPv6_comp$ebnf$2$subexpression$1"], "postprocess": id },
  	        { "name": "IPv6_comp$ebnf$2", "symbols": [], "postprocess": () => null },
  	        { "name": "IPv6_comp", "symbols": ["IPv6_comp$ebnf$1", "IPv6_comp$string$1", "IPv6_comp$ebnf$2"] },
  	        { "name": "IPv6v4_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6v4_full$macrocall$1", "symbols": ["IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2"] },
  	        { "name": "IPv6v4_full", "symbols": ["IPv6_hex", "IPv6v4_full$macrocall$1", { "literal": ":" }, "IPv4_address_literal"] },
  	        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2"] },
  	        { "name": "IPv6v4_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1"] },
  	        { "name": "IPv6v4_comp$ebnf$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1"], "postprocess": id },
  	        { "name": "IPv6v4_comp$ebnf$1", "symbols": [], "postprocess": () => null },
  	        { "name": "IPv6v4_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join('') },
  	        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },
  	        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2"] },
  	        { "name": "IPv6v4_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", { "literal": ":" }] },
  	        { "name": "IPv6v4_comp$ebnf$2", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1"], "postprocess": id },
  	        { "name": "IPv6v4_comp$ebnf$2", "symbols": [], "postprocess": () => null },
  	        { "name": "IPv6v4_comp", "symbols": ["IPv6v4_comp$ebnf$1", "IPv6v4_comp$string$1", "IPv6v4_comp$ebnf$2", "IPv4_address_literal"] },
  	        { "name": "DIGIT", "symbols": [/[0-9]/], "postprocess": id },
  	        { "name": "ALPHA_DIGIT_U", "symbols": [/[0-9A-Za-z\u0080-\uFFFF]/], "postprocess": id },
  	        { "name": "ALPHA_DIGIT", "symbols": [/[0-9A-Za-z]/], "postprocess": id },
  	        { "name": "ALPHA_DIG_DASH", "symbols": [/[-0-9A-Za-z]/], "postprocess": id },
  	        { "name": "ALPHA_DIG_DASH_U", "symbols": [/[-0-9A-Za-z\u0080-\uFFFF]/], "postprocess": id },
  	        { "name": "HEXDIG", "symbols": [/[0-9A-Fa-f]/], "postprocess": id },
  	        { "name": "DQUOTE", "symbols": [{ "literal": "\"" }], "postprocess": id }
  	    ],
  	    ParserStart: "Reverse_path",
  	};
  	grammar.default = grammar$1;
  	
  	return grammar;
  }

  var hasRequiredLib;

  function requireLib () {
  	if (hasRequiredLib) return lib$2;
  	hasRequiredLib = 1;
  	var __importDefault = (lib$2 && lib$2.__importDefault) || function (mod) {
  	    return (mod && mod.__esModule) ? mod : { "default": mod };
  	};
  	Object.defineProperty(lib$2, "__esModule", { value: true });
  	lib$2.canonicalize = lib$2.canonicalize_quoted_string = lib$2.normalize = lib$2.normalize_dot_string = lib$2.parse = void 0;
  	// const punycode = require('punycode');
  	const nearley = requireNearley();
  	const grammar_1 = __importDefault(requireGrammar());
  	grammar_1.default.ParserStart = "Mailbox";
  	const grammar = nearley.Grammar.fromCompiled(grammar_1.default);
  	// <https://tools.ietf.org/html/rfc5321#section-4.1.2>
  	function parse(address) {
  	    const parser = new nearley.Parser(grammar);
  	    parser.feed(address);
  	    if (parser.results.length !== 1) {
  	        throw new Error("address parsing failed: ambiguous grammar");
  	    }
  	    return parser.results[0];
  	}
  	lib$2.parse = parse;
  	/** Strip +something, strip '.'s, and map to lower case.
  	 */
  	function normalize_dot_string(dot_string) {
  	    const tagless = (function () {
  	        const plus_loc = dot_string.indexOf("+");
  	        if (plus_loc === -1) {
  	            return dot_string;
  	        }
  	        return dot_string.substr(0, plus_loc);
  	    })();
  	    const dotless = tagless.replace(/\./g, "");
  	    return dotless.toLowerCase();
  	}
  	lib$2.normalize_dot_string = normalize_dot_string;
  	/** The G style address normalization.
  	 */
  	function normalize(address) {
  	    var _a, _b;
  	    const a = parse(address);
  	    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();
  	    const local = (_b = a.localPart.QuotedString) !== null && _b !== void 0 ? _b : normalize_dot_string(a.localPart.DotString);
  	    return `${local}@${domain}`;
  	}
  	lib$2.normalize = normalize;
  	function canonicalize_quoted_string(quoted_string) {
  	    const unquoted = quoted_string.substr(1).substr(0, quoted_string.length - 2);
  	    const unescaped = unquoted.replace(/(?:\\(.))/g, "$1");
  	    const reescaped = unescaped.replace(/(?:(["\\]))/g, "\\$1");
  	    return `"${reescaped}"`; // re-quote
  	}
  	lib$2.canonicalize_quoted_string = canonicalize_quoted_string;
  	/**
  	 * Apply a canonicalization consistent with standards to support
  	 * comparison as a string.
  	 */
  	function canonicalize(address) {
  	    var _a;
  	    const a = parse(address);
  	    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();
  	    const local = a.localPart.QuotedString
  	        ? canonicalize_quoted_string(a.localPart.QuotedString)
  	        : a.localPart.DotString;
  	    return `${local}@${domain}`;
  	}
  	lib$2.canonicalize = canonicalize;
  	
  	return lib$2;
  }

  var libExports = requireLib();

  // referenced
  // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts
  // https://gist.github.com/marcelotmelo/b67f58a08bee6c2468f8
  const isValidDateTime = new RegExp("^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(([Zz])|([\\+|\\-]([01][0-9]|2[0-3]):[0-5][0-9]))$");
  const isValidIPV4 = /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
  const isValidIPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i;
  const isValidHostname = /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/;
  const matchDate = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  // const matchTime = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
  const matchTime = /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i;
  const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  const isValidJsonPointer = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
  const isValidRelativeJsonPointer = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
  const isValidURIRef = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  // uri-template: https://tools.ietf.org/html/rfc6570
  const isValidURITemplate = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
  // Default Json-Schema formats: date-time, email, hostname, ipv4, ipv6, uri, uriref
  const formatValidators = {
      date: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts
          // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
          const matches = value.match(matchDate);
          if (!matches) {
              return draft.errors.formatDateTimeError({ value, pointer, schema });
          }
          const year = +matches[1];
          const month = +matches[2];
          const day = +matches[3];
          // https://tools.ietf.org/html/rfc3339#appendix-C
          const isLeapYear = year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
          if (month >= 1 &&
              month <= 12 &&
              day >= 1 &&
              day <= (month == 2 && isLeapYear ? 29 : DAYS[month])) {
              return undefined;
          }
          return draft.errors.formatDateError({ value, pointer, schema });
      },
      "date-time": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (value === "" || isValidDateTime.test(value)) {
              if (new Date(value).toString() === "Invalid Date") {
                  return draft.errors.formatDateTimeError({ value, pointer, schema });
              }
              return undefined;
          }
          return draft.errors.formatDateTimeError({ value, pointer, schema });
      },
      email: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          // taken from https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
          if (value[0] === '"') {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
          const [name, host, ...rest] = value.split("@");
          if (!name || !host || rest.length !== 0 || name.length > 64 || host.length > 253) {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
          if (name[0] === "." || name.endsWith(".") || name.includes("..")) {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
          if (!/^[a-z0-9.-]+$/i.test(host) || !/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(name)) {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
          if (!host.split(".").every((part) => /^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part))) {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
          return undefined;
      },
      /**
       * @draft 7
       * [RFC6531] https://json-schema.org/draft-07/json-schema-validation.html#RFC6531
       */
      "idn-email": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          try {
              libExports.parse(value);
              return undefined;
          }
          catch (e) {
              return draft.errors.formatEmailError({ value, pointer, schema });
          }
      },
      hostname: (draft, schema, value, pointer) => {
          if (typeof value !== "string") {
              return undefined;
          }
          if (value === "" || isValidHostname.test(value)) {
              return undefined;
          }
          return draft.errors.formatHostnameError({ value, pointer, schema });
      },
      ipv4: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (value && value[0] === "0") {
              // leading zeroes should be rejected, as they are treated as octals
              return draft.errors.formatIPV4LeadingZeroError({ value, pointer, schema });
          }
          if (value.length <= 15 && isValidIPV4.test(value)) {
              return undefined;
          }
          return draft.errors.formatIPV4Error({ value, pointer, schema });
      },
      ipv6: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (value && value[0] === "0") {
              // leading zeroes should be rejected, as they are treated as octals
              return draft.errors.formatIPV6LeadingZeroError({ value, pointer, schema });
          }
          if (value.length <= 45 && isValidIPV6.test(value)) {
              return undefined;
          }
          return draft.errors.formatIPV6Error({ value, pointer, schema });
      },
      "json-pointer": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (isValidJsonPointer.test(value)) {
              return undefined;
          }
          return draft.errors.formatJsonPointerError({ value, pointer, schema });
      },
      "relative-json-pointer": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (isValidRelativeJsonPointer.test(value)) {
              return undefined;
          }
          return draft.errors.formatJsonPointerError({ value, pointer, schema });
      },
      regex: (draft, schema, value, pointer) => {
          if (typeof value === "string" && /\\Z$/.test(value) === false) {
              try {
                  new RegExp(value);
                  return undefined;
              }
              catch (e) { } // eslint-disable-line no-empty
              return draft.errors.formatRegExError({ value, pointer, schema });
          }
          // v7 tests, ignore non-regex values
          if (typeof value === "object" || typeof value === "number" || Array.isArray(value)) {
              return undefined;
          }
          return draft.errors.formatRegExError({ value, pointer, schema });
      },
      // hh:mm:ss.sTZD
      // https://opis.io/json-schema/2.x/formats.html
      // regex https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html
      time: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts
          const matches = value.match(matchTime);
          return matches ? undefined : draft.errors.formatDateTimeError({ value, pointer, schema });
          // if (!matches) {
          //     return errors.formatDateTimeError({ value, pointer, schema });
          // }
          // const hour = +matches[1];
          // const minute = +matches[2];
          // const second = +matches[3];
          // const timeZone = !!matches[5];
          // if (
          //     ((hour <= 23 && minute <= 59 && second <= 59) ||
          //         (hour == 23 && minute == 59 && second == 60)) &&
          //     timeZone
          // ) {
          //     return undefined;
          // }
          // return errors.formatTimeError({ value, pointer, schema });
      },
      uri: (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (validUrl.isUri(value)) {
              return undefined;
          }
          return draft.errors.formatURIError({ value, pointer, schema });
      },
      "uri-reference": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (isValidURIRef.test(value)) {
              return undefined;
          }
          return draft.errors.formatURIReferenceError({ value, pointer, schema });
      },
      "uri-template": (draft, schema, value, pointer) => {
          if (typeof value !== "string" || value === "") {
              return undefined;
          }
          if (isValidURITemplate.test(value)) {
              return undefined;
          }
          return draft.errors.formatURITemplateError({ value, pointer, schema });
      },
      url: (draft, schema, value, pointer) => {
          if (value === "" || validUrl.isWebUri(value)) {
              return undefined;
          }
          return draft.errors.formatURLError({ value, pointer, schema });
      }
  };

  const emptyObject = {};
  /**
   * Returns the json-schema of a data-json-pointer.
   *
   * To resolve dynamic schema where the type of json-schema is evaluated by
   * its value, a data object has to be passed in options.
   *
   * Per default this function will return `undefined` for valid properties that
   * do not have a defined schema. Use the option `withSchemaWarning: true` to
   * receive an error with `code: schema-warning` containing the location of its
   * last evaluated json-schema.
   *
   * Notes
   *      - uses draft.step to walk through data and schema
   *
   * @param draft
   * @param pointer - json pointer in data to get the json schema for
   * @param [options.data] - the data object, which includes the json pointers value. This is optional, as
   *    long as no oneOf, anyOf, etc statement is part of the pointers schema
   * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema
   * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition
   * @return resolved json-schema object of requested json-pointer location or json-error
   */
  function getSchema(draft, options = emptyObject) {
      const { pointer = "#", data, schema = draft.rootSchema, withSchemaWarning = false } = options;
      const path = gp.split(pointer);
      const result = _getSchema(draft, draft.resolveRef(schema), path, "#", data);
      if (!withSchemaWarning && (result === null || result === void 0 ? void 0 : result.code) === "schema-warning") {
          return undefined;
      }
      return result;
  }
  function _getSchema(draft, schema, path, pointer, data = emptyObject) {
      if (path.length === 0) {
          return draft.resolveRef(schema);
      }
      const key = path.shift(); // step key
      schema = draft.step(key, schema, data, pointer); // step schema
      if (isJsonError(schema)) {
          return schema;
      }
      // @ts-expect-error data
      data = data[key]; // step data
      return _getSchema(draft, schema, path, `${pointer}/${key}`, data);
  }

  function isEmpty$1(v) {
      const type = getTypeOf$1(v);
      switch (type) {
          case "string":
          case "array":
              // @ts-expect-error tested as array - could use ts type guard
              return (v === null || v === void 0 ? void 0 : v.length) === 0;
          case "null":
          case "undefined":
              return true;
          case "object":
              return Object.keys(v).length === 0;
          default:
              return false;
      }
  }

  /* eslint quote-props: 0, max-statements-per-line: ["error", { "max": 2 }] */
  const defaultOptions$1 = settings.templateDefaultOptions;
  let cache;
  function shouldResolveRef(schema, pointer) {
      const { $ref } = schema;
      if ($ref == null) {
          return true;
      }
      const value = cache[pointer] == null || cache[pointer][$ref] == null ? 0 : cache[pointer][$ref];
      return value < settings.GET_TEMPLATE_RECURSION_LIMIT;
  }
  function resolveRef(draft, schema, pointer) {
      const { $ref } = schema;
      if ($ref == null) {
          return schema;
      }
      // @todo pointer + ref is redundant?
      cache[pointer] = cache[pointer] || {};
      cache[pointer][$ref] = cache[pointer][$ref] || 0;
      cache[pointer][$ref] += 1;
      return draft.resolveRef(schema);
  }
  function convertValue(type, value) {
      if (type === "string") {
          return JSON.stringify(value);
      }
      else if (typeof value !== "string") {
          return null;
      }
      try {
          value = JSON.parse(value);
          if (typeof value === type) {
              return value;
          }
      }
      catch (e) { } // eslint-disable-line no-empty
      return null;
  }
  /**
   * Resolves $ref, allOf and anyOf schema-options, returning a combined json-schema.
   * Also returns a pointer-property on schema, that must be used as current pointer.
   *
   * @param draft
   * @param schema
   * @param data
   * @param pointer
   * @return resolved json-schema or input-schema
   */
  function createTemplateSchema(draft, schema, data, pointer, opts) {
      // invalid schema
      if (getTypeOf$1(schema) !== "object") {
          return Object.assign({ pointer }, schema);
      }
      // return if reached recursion limit
      if (shouldResolveRef(schema, pointer) === false && data == null) {
          return false;
      }
      // resolve $ref and copy schema
      let templateSchema = index(resolveRef(draft, schema, pointer));
      // @feature anyOf
      if (Array.isArray(schema.anyOf) && schema.anyOf.length > 0) {
          // test if we may resolve
          if (shouldResolveRef(schema.anyOf[0], `${pointer}/anyOf/0`)) {
              const resolvedAnyOf = resolveRef(draft, schema.anyOf[0], `${pointer}/anyOf/0`);
              templateSchema = merge$2(templateSchema, resolvedAnyOf);
              // add pointer return-value, if any
              templateSchema.pointer = schema.anyOf[0].$ref || templateSchema.pointer;
          }
          delete templateSchema.anyOf;
      }
      // @feature allOf
      if (Array.isArray(schema.allOf)) {
          const mayResolve = schema.allOf
              .map((allOf, index) => shouldResolveRef(allOf, `${pointer}/allOf/${index}`))
              .reduceRight((next, before) => next && before, true);
          if (mayResolve) {
              // before merging all-of, we need to resolve all if-then-else statesments
              // we need to udpate data on the way to trigger if-then-else schemas sequentially.
              // Note that this will make if-then-else order-dependent
              const allOf = [];
              let extendedData = index(data);
              for (let i = 0; i < schema.allOf.length; i += 1) {
                  allOf.push(resolveSchema(draft, schema.allOf[i], extendedData));
                  extendedData = getTemplate(draft, extendedData, { type: schema.type, ...allOf[i] }, `${pointer}/allOf/${i}`, opts);
              }
              const resolvedSchema = mergeAllOfSchema(draft, { allOf });
              if (resolvedSchema) {
                  templateSchema = mergeSchema(templateSchema, resolvedSchema);
              }
          }
      }
      templateSchema.pointer = templateSchema.pointer || schema.$ref || pointer;
      return templateSchema;
  }
  const isJsonSchema = (template) => template && typeof template === "object";
  /**
   * Create data object matching the given schema
   *
   * @param draft - json schema draft
   * @param [data] - optional template data
   * @param [schema] - json schema, defaults to rootSchema
   * @return created template data
   */
  function getTemplate(draft, data, _schema, pointer, opts) {
      var _a;
      if (_schema == null) {
          throw new Error(`getTemplate: missing schema for data: ${JSON.stringify(data)}`);
      }
      if (pointer == null) {
          throw new Error("Missing pointer");
      }
      // resolve $ref references, allOf and first anyOf definitions
      let schema = createTemplateSchema(draft, _schema, data, pointer, opts);
      if (!isJsonSchema(schema)) {
          return undefined;
      }
      pointer = schema.pointer;
      if (schema === null || schema === void 0 ? void 0 : schema.const) {
          return schema.const;
      }
      // @feature oneOf
      if (Array.isArray(schema.oneOf)) {
          if (isEmpty$1(data)) {
              const type = schema.oneOf[0].type ||
                  schema.type ||
                  (schema.const && typeof schema.const) ||
                  getTypeOf$1(data);
              schema = { ...schema.oneOf[0], type };
          }
          else {
              // find correct schema for data
              const resolvedSchema = resolveOneOfFuzzy(draft, data, schema);
              if (isJsonError(resolvedSchema)) {
                  if (data != null && opts.removeInvalidData !== true) {
                      return data;
                  }
                  // override
                  schema = schema.oneOf[0];
                  data = undefined;
              }
              else {
                  resolvedSchema.type = (_a = resolvedSchema.type) !== null && _a !== void 0 ? _a : schema.type;
                  schema = resolvedSchema;
              }
          }
      }
      // @todo Array.isArray(schema.type)
      // -> hasDefault? return
      // if not -> pick first types
      if (!isJsonSchema(schema) || schema.type == null) {
          return undefined;
      }
      // @attention - very special case to support file instances
      if (data instanceof File) {
          return data;
      }
      const type = Array.isArray(schema.type)
          ? selectType(schema.type, data, schema.default)
          : schema.type;
      // reset invalid type
      const javascriptTypeOfData = getTypeOf$1(data);
      if (data != null &&
          javascriptTypeOfData !== type &&
          !(javascriptTypeOfData === "number" && type === "integer")) {
          data = convertValue(type, data);
      }
      if (TYPE[type] == null) {
          // in case we could not resolve the type
          // (schema-type could not be resolved and returned an error)
          if (opts.removeInvalidData) {
              return undefined;
          }
          return data;
      }
      const templateData = TYPE[type](draft, schema, data, pointer, opts);
      return templateData;
  }
  function selectType(types, data, defaultValue) {
      if (data == undefined) {
          if (defaultValue != null) {
              const defaultType = getTypeOf$1(defaultValue);
              if (types.includes(defaultType)) {
                  return defaultType;
              }
          }
          return types[0];
      }
      const dataType = getTypeOf$1(data);
      if (types.includes(dataType)) {
          return dataType;
      }
      return types[0];
  }
  const TYPE = {
      null: (draft, schema, data) => getDefault(schema, data, null),
      string: (draft, schema, data) => getDefault(schema, data, ""),
      number: (draft, schema, data) => getDefault(schema, data, 0),
      integer: (draft, schema, data) => getDefault(schema, data, 0),
      boolean: (draft, schema, data) => getDefault(schema, data, false),
      object: (draft, schema, data, pointer, opts) => {
          var _a;
          const template = schema.default === undefined ? {} : schema.default;
          const d = {}; // do not assign data here, to keep ordering from json-schema
          const required = (opts.extendDefaults === false && schema.default !== undefined) ? [] : ((_a = schema.required) !== null && _a !== void 0 ? _a : []);
          if (schema.properties) {
              Object.keys(schema.properties).forEach((key) => {
                  const value = data == null || data[key] == null ? template[key] : data[key];
                  const isRequired = required.includes(key);
                  // Omit adding a property if it is not required or optional props should be added
                  if (value != null || isRequired || opts.addOptionalProps) {
                      d[key] = getTemplate(draft, value, schema.properties[key], `${pointer}/properties/${key}`, opts);
                  }
              });
          }
          // @feature dependencies
          // has to be done after resolving properties so dependency may trigger
          let dependenciesSchema = resolveDependencies(draft, schema, d);
          if (dependenciesSchema) {
              dependenciesSchema = mergeSchema(schema, dependenciesSchema);
              delete dependenciesSchema.dependencies;
              const dependencyData = getTemplate(draft, data, dependenciesSchema, `${pointer}/dependencies`, opts);
              Object.assign(d, dependencyData);
          }
          if (data) {
              if (opts.removeInvalidData === true &&
                  (schema.additionalProperties === false ||
                      getTypeOf$1(schema.additionalProperties) === "object")) {
                  if (getTypeOf$1(schema.additionalProperties) === "object") {
                      Object.keys(data).forEach((key) => {
                          if (d[key] == null) {
                              // merge valid missing data (additionals) to resulting object
                              if (draft.isValid(data[key], schema.additionalProperties)) {
                                  d[key] = data[key];
                              }
                          }
                      });
                  }
              }
              else {
                  // merge any missing data (additionals) to resulting object
                  Object.keys(data).forEach((key) => d[key] == null && (d[key] = data[key]));
              }
          }
          // @feature if-then-else
          const ifSchema = resolveIfSchema(draft, schema, d);
          if (ifSchema) {
              const additionalData = getTemplate(draft, d, { type: "object", ...ifSchema }, pointer, opts);
              Object.assign(d, additionalData);
          }
          // returns object, which is ordered by json-schema
          return d;
      },
      // build array type of items, ignores additionalItems
      array: (draft, schema, data, pointer, opts) => {
          var _a, _b;
          if (schema.items == null) {
              return data || []; // items are undefined
          }
          const template = schema.default === undefined ? [] : schema.default;
          const d = data || template;
          const minItems = (opts.extendDefaults === false && schema.default !== undefined) ? 0 : (schema.minItems || 0);
          // build defined set of items
          if (Array.isArray(schema.items)) {
              for (let i = 0, l = Math.max(minItems !== null && minItems !== void 0 ? minItems : 0, (_b = (_a = schema.items) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i < l; i += 1) {
                  d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], schema.items[i], `${pointer}/items/${i}`, opts);
              }
              return d;
          }
          // abort if the schema is invalid
          if (getTypeOf$1(schema.items) !== "object") {
              return d;
          }
          // resolve allOf and first anyOf definition
          const templateSchema = createTemplateSchema(draft, schema.items, data, pointer, opts);
          if (templateSchema === false) {
              return d;
          }
          pointer = templateSchema.pointer || pointer;
          // build data for first oneOf-schema
          if (templateSchema.oneOf && d.length === 0) {
              const oneOfSchema = templateSchema.oneOf[0];
              for (let i = 0; i < minItems; i += 1) {
                  d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], oneOfSchema, `${pointer}/oneOf/0`, opts);
              }
              return d;
          }
          // complete data selecting correct oneOf-schema
          if (templateSchema.oneOf && d.length > 0) {
              const itemCount = Math.max(minItems, d.length);
              for (let i = 0; i < itemCount; i += 1) {
                  let value = d[i] == null ? template[i] : d[i];
                  let one = resolveOneOfFuzzy(draft, value, templateSchema);
                  if (one == null || isJsonError(one)) {
                      // schema could not be resolved or data is invalid
                      if (value != null && opts.removeInvalidData !== true) {
                          // keep invalid value
                          d[i] = value;
                      }
                      else {
                          // replace invalid value
                          value = undefined;
                          one = templateSchema.oneOf[0];
                          d[i] = getTemplate(draft, value, one, `${pointer}/oneOf/${i}`, opts);
                      }
                  }
                  else {
                      // schema is valid
                      d[i] = getTemplate(draft, value, one, `${pointer}/oneOf/${i}`, opts);
                  }
              }
              return d;
          }
          // build data from items-definition
          if (templateSchema.type) {
              for (let i = 0, l = Math.max(minItems, d.length); i < l; i += 1) {
                  d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], templateSchema, `${pointer}/items`, opts);
              }
              return d;
          }
          return d;
      }
  };
  function getDefault(schema, templateValue, initValue) {
      if (templateValue != null) {
          return templateValue;
      }
      else if (schema.const) {
          return schema.const;
      }
      else if (schema.default === undefined && Array.isArray(schema.enum)) {
          return schema.enum[0];
      }
      else if (schema.default === undefined) {
          return initValue;
      }
      return schema.default;
  }
  var getTemplate$1 = (draft, data, schema = draft.rootSchema, opts) => {
      cache = {};
      if (opts) {
          return getTemplate(draft, data, schema, "#", { ...defaultOptions$1, ...opts });
      }
      return getTemplate(draft, data, schema, "#", defaultOptions$1);
  };

  /**
   * Test if the data is valid according to the given schema
   *
   * @param draft - validator
   * @param value - value to validate
   * @param [schema] - json schema
   * @param [pointer] - json pointer pointing to value
   * @return if schema does match given value
   */
  function isValid(draft, value, schema = draft.rootSchema, pointer = "#") {
      return draft.validate(value, schema, pointer).length === 0;
  }

  /* eslint no-bitwise: 0 */
  /**
   * taken from punycode@2.1.0
   *
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param string The Unicode input string (UCS-2).
   * @returns The new array of code points.
   */
  function ucs2decode$1(string) {
      const output = [];
      let counter = 0;
      const length = string.length;
      while (counter < length) {
          const value = string.charCodeAt(counter++);
          if (value >= 0xd800 && value <= 0xdbff && counter < length) {
              // It's a high surrogate, and there is a next character.
              const extra = string.charCodeAt(counter++);
              // eslint-disable-next-line eqeqeq
              if ((extra & 0xfc00) == 0xdc00) {
                  // Low surrogate.
                  output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);
              }
              else {
                  // It's an unmatched surrogate; only append this code unit, in case the
                  // next code unit is the high surrogate of a surrogate pair.
                  output.push(value);
                  counter--;
              }
          }
          else {
              output.push(value);
          }
      }
      return output;
  }

  /**
   * returns the floating point precision of a decimal number or 0
   */
  function getPrecision(value) {
      const string = `${value}`;
      const index = string.indexOf(".");
      return index === -1 ? 0 : string.length - (index + 1);
  }

  var fastDeepEqual;
  var hasRequiredFastDeepEqual;

  function requireFastDeepEqual () {
  	if (hasRequiredFastDeepEqual) return fastDeepEqual;
  	hasRequiredFastDeepEqual = 1;

  	// do not edit .js files directly - edit src/index.jst



  	fastDeepEqual = function equal(a, b) {
  	  if (a === b) return true;

  	  if (a && b && typeof a == 'object' && typeof b == 'object') {
  	    if (a.constructor !== b.constructor) return false;

  	    var length, i, keys;
  	    if (Array.isArray(a)) {
  	      length = a.length;
  	      if (length != b.length) return false;
  	      for (i = length; i-- !== 0;)
  	        if (!equal(a[i], b[i])) return false;
  	      return true;
  	    }



  	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
  	    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
  	    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

  	    keys = Object.keys(a);
  	    length = keys.length;
  	    if (length !== Object.keys(b).length) return false;

  	    for (i = length; i-- !== 0;)
  	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

  	    for (i = length; i-- !== 0;) {
  	      var key = keys[i];

  	      if (!equal(a[key], b[key])) return false;
  	    }

  	    return true;
  	  }

  	  // true if both NaN, false otherwise
  	  return a!==a && b!==b;
  	};
  	return fastDeepEqual;
  }

  var fastDeepEqualExports = requireFastDeepEqual();
  var equal = /*@__PURE__*/getDefaultExportFromCjs(fastDeepEqualExports);

  const hasOwnProperty = Object.prototype.hasOwnProperty;
  const hasProperty = (value, property) => !(value[property] === undefined || !hasOwnProperty.call(value, property));
  // list of validation keywords: http://json-schema.org/latest/json-schema-validation.html#rfc.section.5
  const KeywordValidation$1 = {
      additionalProperties: (draft, schema, value, pointer) => {
          if (schema.additionalProperties === true || schema.additionalProperties == null) {
              return undefined;
          }
          if (getTypeOf$1(schema.patternProperties) === "object" &&
              schema.additionalProperties === false) {
              // this is an arrangement with patternProperties. patternProperties validate before additionalProperties:
              // https://spacetelescope.github.io/understanding-json-schema/reference/object.html#index-5
              return undefined;
          }
          const errors = [];
          let receivedProperties = Object.keys(value).filter((prop) => settings.propertyBlacklist.includes(prop) === false);
          const expectedProperties = Object.keys(schema.properties || {});
          if (getTypeOf$1(schema.patternProperties) === "object") {
              // filter received properties by matching patternProperties
              const patterns = Object.keys(schema.patternProperties).map((pattern) => new RegExp(pattern));
              receivedProperties = receivedProperties.filter((prop) => {
                  for (let i = 0; i < patterns.length; i += 1) {
                      if (patterns[i].test(prop)) {
                          return false; // remove
                      }
                  }
                  return true;
              });
          }
          // adds an error for each an unexpected property
          for (let i = 0, l = receivedProperties.length; i < l; i += 1) {
              const property = receivedProperties[i];
              if (expectedProperties.indexOf(property) === -1) {
                  const additionalIsObject = isObject$2(schema.additionalProperties);
                  // additionalProperties { oneOf: [] }
                  if (additionalIsObject && Array.isArray(schema.additionalProperties.oneOf)) {
                      const result = draft.resolveOneOf(value[property], schema.additionalProperties, `${pointer}/${property}`);
                      if (isJsonError(result)) {
                          errors.push(draft.errors.additionalPropertiesError({
                              pointer,
                              schema: schema.additionalProperties,
                              value,
                              property: receivedProperties[i],
                              properties: expectedProperties,
                              // pass all validation errors
                              errors: result.data.errors
                          }));
                      }
                      else {
                          errors.push(...draft.validate(value[property], result, pointer));
                      }
                      // additionalProperties {}
                  }
                  else if (additionalIsObject) {
                      errors.push(...draft.validate(value[property], schema.additionalProperties, `${pointer}/${property}`));
                  }
                  else {
                      errors.push(draft.errors.noAdditionalPropertiesError({
                          pointer,
                          schema,
                          value,
                          property: receivedProperties[i],
                          properties: expectedProperties
                      }));
                  }
              }
          }
          return errors;
      },
      allOf: validateAllOf,
      anyOf: validateAnyOf,
      dependencies: validateDependencies,
      enum: (draft, schema, value, pointer) => {
          const type = getTypeOf$1(value);
          if (type === "object" || type === "array") {
              const valueStr = JSON.stringify(value);
              for (let i = 0; i < schema.enum.length; i += 1) {
                  if (JSON.stringify(schema.enum[i]) === valueStr) {
                      return undefined;
                  }
              }
          }
          else if (schema.enum.includes(value)) {
              return undefined;
          }
          return draft.errors.enumError({ pointer, schema, value, values: schema.enum });
      },
      format: (draft, schema, value, pointer) => {
          if (draft.validateFormat[schema.format]) {
              const errors = draft.validateFormat[schema.format](draft, schema, value, pointer);
              return errors;
          }
          // fail silently if given format is not defined
          return undefined;
      },
      items: (draft, schema, value, pointer) => {
          // @draft >= 7 bool schema
          if (schema.items === false) {
              if (Array.isArray(value) && value.length === 0) {
                  return undefined;
              }
              return draft.errors.invalidDataError({ pointer, value, schema });
          }
          const errors = [];
          for (let i = 0; i < value.length; i += 1) {
              const itemData = value[i];
              // @todo reevaluate: incomplete schema is created here
              const itemSchema = draft.step(i, schema, value, pointer);
              if (isJsonError(itemSchema)) {
                  return [itemSchema];
              }
              const itemErrors = draft.validate(itemData, itemSchema, `${pointer}/${i}`);
              errors.push(...itemErrors);
          }
          return errors;
      },
      maximum: (draft, schema, value, pointer) => {
          if (isNaN(schema.maximum)) {
              return undefined;
          }
          if (schema.maximum && schema.maximum < value) {
              return draft.errors.maximumError({
                  maximum: schema.maximum,
                  length: value,
                  value,
                  pointer,
                  schema
              });
          }
          if (schema.maximum && schema.exclusiveMaximum === true && schema.maximum === value) {
              return draft.errors.maximumError({
                  maximum: schema.maximum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      maxItems: (draft, schema, value, pointer) => {
          if (isNaN(schema.maxItems)) {
              return undefined;
          }
          if (schema.maxItems < value.length) {
              return draft.errors.maxItemsError({
                  maximum: schema.maxItems,
                  length: value.length,
                  schema,
                  value,
                  pointer
              });
          }
          return undefined;
      },
      maxLength: (draft, schema, value, pointer) => {
          if (isNaN(schema.maxLength)) {
              return undefined;
          }
          const lengthOfString = ucs2decode$1(value).length;
          if (schema.maxLength < lengthOfString) {
              return draft.errors.maxLengthError({
                  maxLength: schema.maxLength,
                  length: lengthOfString,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      maxProperties: (draft, schema, value, pointer) => {
          const propertyCount = Object.keys(value).length;
          if (isNaN(schema.maxProperties) === false && schema.maxProperties < propertyCount) {
              return draft.errors.maxPropertiesError({
                  maxProperties: schema.maxProperties,
                  length: propertyCount,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      minLength: (draft, schema, value, pointer) => {
          if (isNaN(schema.minLength)) {
              return undefined;
          }
          const lengthOfString = ucs2decode$1(value).length;
          if (schema.minLength > lengthOfString) {
              if (schema.minLength === 1) {
                  return draft.errors.minLengthOneError({
                      minLength: schema.minLength,
                      length: lengthOfString,
                      pointer,
                      schema,
                      value
                  });
              }
              return draft.errors.minLengthError({
                  minLength: schema.minLength,
                  length: lengthOfString,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      minimum: (draft, schema, value, pointer) => {
          if (isNaN(schema.minimum)) {
              return undefined;
          }
          if (schema.minimum > value) {
              return draft.errors.minimumError({
                  minimum: schema.minimum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          if (schema.exclusiveMinimum === true && schema.minimum === value) {
              return draft.errors.minimumError({
                  minimum: schema.minimum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      minItems: (draft, schema, value, pointer) => {
          if (isNaN(schema.minItems)) {
              return undefined;
          }
          if (schema.minItems > value.length) {
              if (schema.minItems === 1) {
                  return draft.errors.minItemsOneError({
                      minItems: schema.minItems,
                      length: value.length,
                      pointer,
                      schema,
                      value
                  });
              }
              return draft.errors.minItemsError({
                  minItems: schema.minItems,
                  length: value.length,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      minProperties: (draft, schema, value, pointer) => {
          if (isNaN(schema.minProperties)) {
              return undefined;
          }
          const propertyCount = Object.keys(value).length;
          if (schema.minProperties > propertyCount) {
              return draft.errors.minPropertiesError({
                  minProperties: schema.minProperties,
                  length: propertyCount,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      multipleOf: (draft, schema, value, pointer) => {
          if (isNaN(schema.multipleOf) || typeof value !== "number") {
              return undefined;
          }
          const valuePrecision = getPrecision(value);
          const multiplePrecision = getPrecision(schema.multipleOf);
          if (valuePrecision > multiplePrecision) {
              // value with higher precision then multipleOf-precision can never be multiple
              return draft.errors.multipleOfError({
                  multipleOf: schema.multipleOf,
                  value,
                  pointer,
                  schema
              });
          }
          const precision = Math.pow(10, multiplePrecision);
          const val = Math.round(value * precision);
          const multiple = Math.round(schema.multipleOf * precision);
          if ((val % multiple) / precision !== 0) {
              return draft.errors.multipleOfError({
                  multipleOf: schema.multipleOf,
                  value,
                  pointer,
                  schema
              });
          }
          // maybe also check overflow
          // https://stackoverflow.com/questions/1815367/catch-and-compute-overflow-during-multiplication-of-two-large-integers
          return undefined;
      },
      not: (draft, schema, value, pointer) => {
          const errors = [];
          if (draft.validate(value, schema.not, pointer).length === 0) {
              errors.push(draft.errors.notError({ value, not: schema.not, pointer, schema }));
          }
          return errors;
      },
      oneOf: validateOneOf,
      pattern: (draft, schema, value, pointer) => {
          const pattern = new RegExp(schema.pattern, "u");
          if (pattern.test(value) === false) {
              return draft.errors.patternError({
                  pattern: schema.pattern,
                  description: schema.patternExample || schema.pattern,
                  received: value,
                  schema,
                  value,
                  pointer
              });
          }
          return undefined;
      },
      patternProperties: (draft, schema, value, pointer) => {
          const properties = schema.properties || {};
          const pp = schema.patternProperties;
          if (getTypeOf$1(pp) !== "object") {
              return undefined;
          }
          const errors = [];
          const keys = Object.keys(value);
          const patterns = Object.keys(pp).map((expr) => ({
              regex: new RegExp(expr),
              patternSchema: pp[expr]
          }));
          keys.forEach((key) => {
              let patternFound = false;
              for (let i = 0, l = patterns.length; i < l; i += 1) {
                  if (patterns[i].regex.test(key)) {
                      patternFound = true;
                      const valErrors = draft.validate(value[key], patterns[i].patternSchema, `${pointer}/${key}`);
                      if (valErrors && valErrors.length > 0) {
                          errors.push(...valErrors);
                      }
                  }
              }
              if (properties[key]) {
                  return;
              }
              if (patternFound === false && schema.additionalProperties === false) {
                  // this is an arrangement with additionalProperties
                  errors.push(draft.errors.patternPropertiesError({
                      key,
                      pointer,
                      schema,
                      value,
                      patterns: Object.keys(pp).join(",")
                  }));
              }
          });
          return errors;
      },
      properties: (draft, schema, value, pointer) => {
          const errors = [];
          const keys = Object.keys(schema.properties || {});
          for (let i = 0; i < keys.length; i += 1) {
              const key = keys[i];
              if (hasProperty(value, key)) {
                  const itemSchema = draft.step(key, schema, value, pointer);
                  const keyErrors = draft.validate(value[key], itemSchema, `${pointer}/${key}`);
                  errors.push(...keyErrors);
              }
          }
          return errors;
      },
      // @todo move to separate file: this is custom keyword validation for JsonEditor.properties keyword
      propertiesRequired: (draft, schema, value, pointer) => {
          const errors = [];
          const keys = Object.keys(schema.properties || {});
          for (let i = 0; i < keys.length; i += 1) {
              const key = keys[i];
              if (value[key] === undefined) {
                  errors.push(draft.errors.requiredPropertyError({ key, pointer, schema, value }));
              }
              else {
                  const itemSchema = draft.step(key, schema, value, pointer);
                  const keyErrors = draft.validate(value[key], itemSchema, `${pointer}/${key}`);
                  errors.push(...keyErrors);
              }
          }
          return errors;
      },
      required: (draft, schema, value, pointer) => {
          if (Array.isArray(schema.required) === false) {
              return undefined;
          }
          return schema.required.map((property) => {
              if (!hasProperty(value, property)) {
                  return draft.errors.requiredPropertyError({
                      key: property,
                      pointer,
                      schema,
                      value
                  });
              }
              return undefined;
          });
      },
      // @todo move to separate file: this is custom keyword validation for JsonEditor.required keyword
      requiredNotEmpty: (draft, schema, value, pointer) => {
          if (Array.isArray(schema.required) === false) {
              return undefined;
          }
          return schema.required.map((property) => {
              if (value[property] == null || value[property] === "") {
                  return draft.errors.valueNotEmptyError({
                      property,
                      pointer: `${pointer}/${property}`,
                      schema,
                      value
                  });
              }
              return undefined;
          });
      },
      uniqueItems: (draft, schema, value, pointer) => {
          if ((Array.isArray(value) && schema.uniqueItems) === false) {
              return undefined;
          }
          const duplicates = [];
          const errors = [];
          value.forEach((item, index) => {
              for (let i = index + 1; i < value.length; i += 1) {
                  if (equal(item, value[i]) && !duplicates.includes(i)) {
                      errors.push(draft.errors.uniqueItemsError({
                          pointer: `${pointer}/${i}`,
                          duplicatePointer: `${pointer}/${index}`,
                          arrayPointer: pointer,
                          value: JSON.stringify(item),
                          schema
                      }));
                      duplicates.push(i);
                  }
              }
          });
          return errors;
      }
  };

  /**
   * Create a simple json schema for the given input data
   * @param  data - data to get json schema for
   */
  function createSchemaOf(data) {
      if (data === undefined) {
          return undefined;
      }
      const schema = {
          type: getTypeOf$1(data)
      };
      if (schema.type === "object" && isObject$2(data)) {
          schema.properties = {};
          Object.keys(data).forEach((key) => (schema.properties[key] = createSchemaOf(data[key])));
      }
      if (schema.type === "array" && Array.isArray(data)) {
          if (data.length === 1) {
              schema.items = createSchemaOf(data[0]);
          }
          else {
              schema.items = data.map(createSchemaOf);
          }
      }
      return schema;
  }

  const stepType = {
      array: (draft, key, schema, data, pointer) => {
          const itemValue = data === null || data === void 0 ? void 0 : data[key];
          const itemsType = getTypeOf$1(schema.items);
          if (itemsType === "object") {
              // @spec: ignore additionalItems, when items is schema-object
              return (reduceSchema(draft, schema.items, itemValue, `${pointer}/${key}`) ||
                  draft.resolveRef(schema.items));
          }
          if (itemsType === "array") {
              // @draft >= 7 bool schema, items:[true, false]
              if (schema.items[key] === true) {
                  return createSchemaOf(itemValue);
              }
              // @draft >= 7 bool schema, items:[true, false]
              if (schema.items[key] === false) {
                  return draft.errors.invalidDataError({
                      key,
                      value: itemValue,
                      pointer,
                      schema
                  });
              }
              if (schema.items[key]) {
                  return draft.resolveRef(schema.items[key]);
              }
              if (schema.additionalItems === false) {
                  return draft.errors.additionalItemsError({
                      key,
                      value: itemValue,
                      pointer,
                      schema
                  });
              }
              if (schema.additionalItems === true || schema.additionalItems === undefined) {
                  return createSchemaOf(itemValue);
              }
              if (getTypeOf$1(schema.additionalItems) === "object") {
                  return schema.additionalItems;
              }
              throw new Error(`Invalid schema ${JSON.stringify(schema, null, 2)} for ${JSON.stringify(data, null, 2)}`);
          }
          if (schema.additionalItems !== false && itemValue) {
              // @todo reevaluate: incomplete schema is created here
              // @todo support additionalItems: {schema}
              return createSchemaOf(itemValue);
          }
          return new Error(`Invalid array schema for ${key} at ${pointer}`);
      },
      object: (draft, key, schema, data, pointer) => {
          var _a;
          schema = reduceSchema(draft, schema, data, pointer);
          // @feature properties
          const property = (_a = schema === null || schema === void 0 ? void 0 : schema.properties) === null || _a === void 0 ? void 0 : _a[key];
          if (property !== undefined) {
              // @todo patternProperties also validate properties
              // @feature boolean schema
              if (property === false) {
                  return draft.errors.forbiddenPropertyError({
                      property: key,
                      value: data,
                      pointer,
                      schema
                  });
              }
              else if (property === true) {
                  return createSchemaOf(data === null || data === void 0 ? void 0 : data[key]);
              }
              const targetSchema = draft.resolveRef(property);
              if (isJsonError(targetSchema)) {
                  return targetSchema;
              }
              // check if there is a oneOf selection, which must be resolved
              if (targetSchema && Array.isArray(targetSchema.oneOf)) {
                  // @special case: this is a mix of a schema and optional definitions
                  // we resolve the schema here and add the original schema to `oneOfSchema`
                  const resolvedSchema = draft.resolveOneOf(data[key], targetSchema, `${pointer}/${key}`);
                  for (const p in targetSchema) {
                      if (p !== "oneOf" && resolvedSchema[p] === undefined) {
                          resolvedSchema[p] = targetSchema[p];
                      }
                  }
                  return resolvedSchema;
              }
              // resolved schema or error
              if (targetSchema) {
                  return targetSchema;
              }
          }
          // @feature patternProperties
          const { patternProperties } = schema;
          if (getTypeOf$1(patternProperties) === "object") {
              // find matching property key
              let regex;
              const patterns = Object.keys(patternProperties);
              for (let i = 0, l = patterns.length; i < l; i += 1) {
                  regex = new RegExp(patterns[i]);
                  if (regex.test(key)) {
                      return patternProperties[patterns[i]];
                  }
              }
          }
          // @feature additionalProperties
          const { additionalProperties } = schema;
          if (getTypeOf$1(additionalProperties) === "object") {
              return schema.additionalProperties;
          }
          if (data && (additionalProperties === undefined || additionalProperties === true)) {
              return createSchemaOf(data[key]);
          }
          return draft.errors.unknownPropertyError({
              property: key,
              value: data,
              pointer: `${pointer}`,
              schema
          });
      }
  };
  /**
   * Returns the json-schema of the given object property or array item.
   * e.g. it steps by one key into the data
   *
   *  This helper determines the location of the property within the schema (additional properties, oneOf, ...) and
   *  returns the correct schema.
   *
   * @param  draft      - validator
   * @param  key       - property-name or array-index
   * @param  schema    - json schema of current data
   * @param  data      - parent of key
   * @param  [pointer] - pointer to schema and data (parent of key)
   * @return Schema or Error if failed resolving key
   */
  function step(draft, key, schema, data, pointer = "#") {
      var _a;
      const typeOfData = getTypeOf$1(data);
      let schemaType = (_a = schema.type) !== null && _a !== void 0 ? _a : typeOfData;
      // @draft >= 4 ?
      if (Array.isArray(schemaType)) {
          if (!schemaType.includes(typeOfData)) {
              return draft.errors.typeError({
                  value: data,
                  pointer,
                  expected: schema.type,
                  received: typeOfData,
                  schema
              });
          }
          schemaType = typeOfData;
      }
      const stepFunction = stepType[schemaType];
      if (stepFunction) {
          const schemaResult = stepFunction(draft, `${key}`, schema, data, pointer);
          if (schemaResult === undefined) {
              return draft.errors.schemaWarning({
                  pointer,
                  value: data,
                  schema,
                  key
              });
          }
          return schemaResult;
      }
      return new Error(`Unsupported schema type ${schema.type} for key ${key}`);
  }

  /**
   * Returns a list of possible child-schemas for the given property key. In case of a oneOf selection, multiple schemas
   * could be added at the given property (e.g. item-index), thus an array of options is returned. In all other cases
   * a list with a single item will be returned
   *
   * @param draft        - draft to use
   * @param property    - parent schema of following property
   * @param [schema]    - parent schema of following property
   * @return
   */
  function getChildSchemaSelection(draft, property, schema = draft.rootSchema) {
      var _a;
      if (schema.oneOf) {
          return schema.oneOf.map((item) => draft.resolveRef(item));
      }
      if ((_a = schema.items) === null || _a === void 0 ? void 0 : _a.oneOf) {
          return schema.items.oneOf.map((item) => draft.resolveRef(item));
      }
      const result = draft.step(property, schema, {}, "#");
      if (isJsonError(result)) {
          return result;
      }
      return [result];
  }

  /**
   * @todo: type is also a keyword, as is properties, items, etc
   *
   * An instance has one of six primitive types (http://json-schema.org/latest/json-schema-draft.html#rfc.section.4.2)
   * or seven in case of ajv https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type
   * 1 null, 2 boolean, 3 object, 4 array, 5 number, 6 string (7 integer)
   */
  const typeValidators = {
      array: (draft, schema, value, pointer) => draft.typeKeywords.array
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      object: (draft, schema, value, pointer) => draft.typeKeywords.object
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      string: (draft, schema, value, pointer) => draft.typeKeywords.string
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      integer: (draft, schema, value, pointer) => draft.typeKeywords.number
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      number: (draft, schema, value, pointer) => draft.typeKeywords.number
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      boolean: (draft, schema, value, pointer) => draft.typeKeywords.boolean
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      null: (draft, schema, value, pointer) => draft.typeKeywords.null
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer))
  };

  function getJsonSchemaType(value, expectedType) {
      const jsType = getTypeOf$1(value);
      if (jsType === "number" &&
          (expectedType === "integer" ||
              (Array.isArray(expectedType) && expectedType.includes("integer")))) {
          return Number.isInteger(value) || isNaN(value) ? "integer" : "number";
      }
      return jsType;
  }
  /**
   * Validates data with json schema
   *
   * @param draft - validator
   * @param value - value to validate
   * @param [schema] - json schema, defaults to rootSchema
   * @param [pointer] - json pointer pointing to value (used for error-messages only)
   * @return list of errors or empty
   */
  function validate(draft, value, schema = draft.rootSchema, pointer = "#") {
      schema = draft.resolveRef(schema);
      // @draft >= 07
      if (getTypeOf$1(schema) === "boolean") {
          if (schema) {
              return [];
          }
          return [draft.errors.invalidDataError({ pointer, schema, value })];
      }
      if (isJsonError(schema)) {
          return [schema];
      }
      // @draft >= 6 const
      if (schema.const !== undefined) {
          if (equal(schema.const, value)) {
              return [];
          }
          return [draft.errors.constError({ pointer, schema, value, expected: schema.const })];
      }
      const receivedType = getJsonSchemaType(value, schema.type);
      const expectedType = schema.type || receivedType;
      if (receivedType !== expectedType &&
          (!Array.isArray(expectedType) || !expectedType.includes(receivedType))) {
          return [
              draft.errors.typeError({
                  pointer,
                  schema,
                  value,
                  received: receivedType,
                  expected: expectedType
              })
          ];
      }
      if (draft.validateType[receivedType] == null) {
          return [draft.errors.invalidTypeError({ pointer, schema, value, receivedType })];
      }
      // get type validation results
      const errors = flattenArray(draft.validateType[receivedType](draft, schema, value, pointer));
      return errors.filter(errorOrPromise); // ignore promises here
  }

  const draft04Config = {
      typeKeywords: {
          array: [
              "allOf",
              "anyOf",
              "enum",
              "items",
              "maxItems",
              "minItems",
              "not",
              "oneOf",
              "uniqueItems"
          ],
          boolean: ["enum", "not", "allOf", "anyOf", "oneOf"],
          object: [
              "additionalProperties",
              "dependencies",
              "enum",
              "format",
              "minProperties",
              "maxProperties",
              "patternProperties",
              "properties",
              "required",
              "not",
              "oneOf",
              "allOf",
              "anyOf"
          ],
          string: [
              "allOf",
              "anyOf",
              "enum",
              "format",
              "maxLength",
              "minLength",
              "not",
              "oneOf",
              "pattern"
          ],
          number: [
              "allOf",
              "anyOf",
              "enum",
              "format",
              "maximum",
              "minimum",
              "multipleOf",
              "not",
              "oneOf"
          ],
          null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]
      },
      validateKeyword: KeywordValidation$1,
      validateType: typeValidators,
      validateFormat: formatValidators,
      errors: errors$1,
      addRemoteSchema,
      compileSchema: compileSchema$1,
      createSchemaOf,
      each,
      eachSchema,
      getChildSchemaSelection,
      getSchema,
      getTemplate: getTemplate$1,
      isValid,
      resolveAllOf,
      resolveAnyOf,
      resolveOneOf,
      resolveRef: resolveRef$1,
      step,
      validate,
      templateDefaultOptions: settings.templateDefaultOptions
  };
  class Draft04 extends Draft {
      constructor(schema, config = {}) {
          super(merge$2(draft04Config, config), schema);
      }
  }

  const COMPILED = "__compiled";
  const COMPILED_REF = "__ref";
  const GET_REF = "getRef";
  const GET_ROOT = "getRoot";
  const suffixes = /(#|\/)+$/g;
  /**
   * @draft starting with _draft 06_ keyword `id` has been renamed to `$id`
   *
   * compiles the input root schema for $ref resolution and returns it again
   * @attention this modifies input schema but maintains object-structure
   *
   * for a compiled json-schema you can call getRef on any contained schema (location of type).
   * this resolves a $ref target to a valid schema (for a valid $ref)
   *
   * @param rootSchema root json-schema ($id, defs, ... ) to compile
   * @param [force] = false force compile json-schema
   * @return compiled json-schema
   */
  function compileSchema(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {
      // @ts-expect-error incomplete JsonSchema type
      if (schemaToCompile === true || schemaToCompile === false || schemaToCompile === undefined) {
          return schemaToCompile;
      }
      if (schemaToCompile[COMPILED] !== undefined) {
          return schemaToCompile;
      } // eslint-disable-line
      const context = { ids: {}, remotes: draft.remotes };
      const rootSchemaAsString = JSON.stringify(schemaToCompile);
      const compiledSchema = JSON.parse(rootSchemaAsString);
      Object.defineProperty(compiledSchema, COMPILED, { enumerable: false, value: true });
      Object.defineProperty(compiledSchema, GET_REF, {
          enumerable: false,
          value: getRef.bind(null, context, compiledSchema)
      });
      // bail early, when no $refs are defined
      if (force === false && rootSchemaAsString.includes("$ref") === false) {
          return compiledSchema;
      }
      // compile this schema under rootSchema, making definitions available to $ref-resolution
      if (compiledSchema !== rootSchema) {
          Object.defineProperty(compiledSchema, "$defs", {
              enumerable: true,
              value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, compiledSchema.definitions, compiledSchema.$defs)
          });
      }
      const scopes = {};
      const getRoot = () => compiledSchema;
      eachSchema(compiledSchema, (schema, pointer) => {
          var _a;
          if (schema.$id) {
              // if this is a schema being merged on root object, we cannot override
              // parents locations, but must reuse it
              if (schema.$id.startsWith("http") && /(allOf|anyOf|oneOf)\/\d+$/.test(pointer)) {
                  const parentPointer = pointer.replace(/\/(allOf|anyOf|oneOf)\/\d+$/, "");
                  const parentSchema = jsonPointerExports.get(compiledSchema, parentPointer);
                  schema.$id = (_a = parentSchema.$id) !== null && _a !== void 0 ? _a : schema.$id;
              }
              context.ids[schema.$id.replace(suffixes, "")] = pointer;
          }
          // build up scopes and add them to $ref-resolution map
          pointer = `#${pointer}`.replace(/##+/, "#");
          const previousPointer = pointer.replace(/\/[^/]+$/, "");
          const parentPointer = pointer.replace(/\/[^/]+\/[^/]+$/, "");
          const previousScope = scopes[previousPointer] || scopes[parentPointer];
          const scope = joinScope(previousScope, schema.$id);
          scopes[pointer] = scope;
          if (context.ids[scope] == null) {
              context.ids[scope] = pointer;
          }
          if (schema.$ref && !schema[COMPILED_REF]) {
              Object.defineProperty(schema, COMPILED_REF, {
                  enumerable: false,
                  value: joinScope(scope, schema.$ref)
              });
              // @todo currently not used:
              Object.defineProperty(schema, GET_ROOT, { enumerable: false, value: getRoot });
              // console.log("compiled ref", scope, schema.$ref, "=>", joinScope(scope, schema.$ref));
          }
      });
      return compiledSchema;
  }

  const KeywordValidation = {
      ...KeywordValidation$1,
      // @draft >= 6
      contains: (draft, schema, value, pointer) => {
          if (schema.contains === false) {
              return draft.errors.containsArrayError({ pointer, value, schema });
          }
          if (schema.contains === true) {
              if (Array.isArray(value) && value.length === 0) {
                  return draft.errors.containsAnyError({ pointer, value, schema });
              }
              return undefined;
          }
          if (getTypeOf$1(schema.contains) !== "object") {
              // ignore invalid schema
              return undefined;
          }
          for (let i = 0; i < value.length; i += 1) {
              if (draft.isValid(value[i], schema.contains)) {
                  return undefined;
              }
          }
          return draft.errors.containsError({ pointer, schema, value });
      },
      exclusiveMaximum: (draft, schema, value, pointer) => {
          if (isNaN(schema.exclusiveMaximum)) {
              return undefined;
          }
          if (schema.exclusiveMaximum <= value) {
              return draft.errors.maximumError({
                  maximum: schema.exclusiveMaximum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      exclusiveMinimum: (draft, schema, value, pointer) => {
          if (isNaN(schema.exclusiveMinimum)) {
              return undefined;
          }
          if (schema.exclusiveMinimum >= value) {
              return draft.errors.minimumError({
                  minimum: schema.exclusiveMinimum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      // @feature if-then-else
      if: validateIf,
      maximum: (draft, schema, value, pointer) => {
          if (isNaN(schema.maximum)) {
              return undefined;
          }
          if (schema.maximum && schema.maximum < value) {
              return draft.errors.maximumError({
                  maximum: schema.maximum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      minimum: (draft, schema, value, pointer) => {
          if (isNaN(schema.minimum)) {
              return undefined;
          }
          if (schema.minimum > value) {
              return draft.errors.minimumError({
                  minimum: schema.minimum,
                  length: value,
                  pointer,
                  schema,
                  value
              });
          }
          return undefined;
      },
      patternProperties: (draft, schema, value, pointer) => {
          const properties = schema.properties || {};
          const pp = schema.patternProperties;
          if (getTypeOf$1(pp) !== "object") {
              return undefined;
          }
          const errors = [];
          const keys = Object.keys(value);
          const patterns = Object.keys(pp).map((expr) => ({
              regex: new RegExp(expr),
              patternSchema: pp[expr]
          }));
          keys.forEach((key) => {
              let patternFound = false;
              for (let i = 0, l = patterns.length; i < l; i += 1) {
                  if (patterns[i].regex.test(key)) {
                      patternFound = true;
                      // for a boolean schema `false`, always invalidate
                      if (patterns[i].patternSchema === false) {
                          errors.push(draft.errors.patternPropertiesError({
                              key,
                              pointer,
                              patterns: Object.keys(pp).join(","),
                              schema,
                              value
                          }));
                          return;
                      }
                      const valErrors = draft.validate(value[key], patterns[i].patternSchema, `${pointer}/${key}`);
                      if (valErrors && valErrors.length > 0) {
                          errors.push(...valErrors);
                      }
                  }
              }
              if (properties[key]) {
                  return;
              }
              if (patternFound === false && schema.additionalProperties === false) {
                  // this is an arrangement with additionalProperties
                  errors.push(draft.errors.patternPropertiesError({
                      key,
                      pointer,
                      patterns: Object.keys(pp).join(","),
                      schema,
                      value
                  }));
              }
          });
          return errors;
      },
      // @draft >= 6
      propertyNames: (draft, schema, value, pointer) => {
          // bool schema
          if (schema.propertyNames === false) {
              // empty objects are valid
              if (Object.keys(value).length === 0) {
                  return undefined;
              }
              return draft.errors.invalidPropertyNameError({
                  property: Object.keys(value),
                  pointer,
                  value,
                  schema
              });
          }
          if (schema.propertyNames === true) {
              return undefined;
          }
          if (getTypeOf$1(schema.propertyNames) !== "object") {
              // ignore invalid schema
              return undefined;
          }
          const errors = [];
          const properties = Object.keys(value);
          const propertySchema = { ...schema.propertyNames, type: "string" };
          properties.forEach((prop) => {
              const validationResult = draft.validate(prop, propertySchema, `${pointer}/${prop}`);
              if (validationResult.length > 0) {
                  errors.push(draft.errors.invalidPropertyNameError({
                      property: prop,
                      pointer,
                      validationError: validationResult[0],
                      value: value[prop],
                      schema
                  }));
              }
          });
          return errors;
      }
  };

  /**
   * @todo: type is also a keyword, as is properties, items, etc
   *
   * An instance has one of six primitive types (http://json-schema.org/latest/json-schema-draft.html#rfc.section.4.2)
   * or seven in case of ajv https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type
   * 1 null, 2 boolean, 3 object, 4 array, 5 number, 6 string (7 integer)
   */
  const validationType = {
      array: (draft, schema, value, pointer) => draft.typeKeywords.array
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      object: (draft, schema, value, pointer) => draft.typeKeywords.object
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      string: (draft, schema, value, pointer) => draft.typeKeywords.string
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      integer: (draft, schema, value, pointer) => draft.typeKeywords.number
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      number: (draft, schema, value, pointer) => draft.typeKeywords.number
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      boolean: (draft, schema, value, pointer) => draft.typeKeywords.boolean
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),
      null: (draft, schema, value, pointer) => draft.typeKeywords.null
          .filter((key) => schema && schema[key] != null)
          .map((key) => draft.validateKeyword[key](draft, schema, value, pointer))
  };

  const draft07Config = {
      typeKeywords: {
          array: [
              "allOf",
              "anyOf",
              "contains",
              "enum",
              "if",
              "items",
              "maxItems",
              "minItems",
              "not",
              "oneOf",
              "uniqueItems"
          ],
          boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],
          object: [
              "additionalProperties",
              "allOf",
              "anyOf",
              "dependencies",
              "enum",
              "format",
              "if",
              "maxProperties",
              "minProperties",
              "not",
              "oneOf",
              "patternProperties",
              "properties",
              "propertyNames",
              "required"
          ],
          string: [
              "allOf",
              "anyOf",
              "enum",
              "format",
              "if",
              "maxLength",
              "minLength",
              "not",
              "oneOf",
              "pattern"
          ],
          number: [
              "allOf",
              "anyOf",
              "enum",
              "exclusiveMaximum",
              "exclusiveMinimum",
              "format",
              "if",
              "maximum",
              "minimum",
              "multipleOf",
              "not",
              "oneOf"
          ],
          null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]
      },
      validateKeyword: KeywordValidation,
      validateType: validationType,
      validateFormat: formatValidators,
      errors: errors$1,
      addRemoteSchema,
      compileSchema,
      createSchemaOf,
      each,
      eachSchema,
      getChildSchemaSelection,
      getSchema,
      getTemplate: getTemplate$1,
      isValid,
      resolveAllOf,
      resolveAnyOf,
      resolveOneOf,
      resolveRef: resolveRef$1,
      step,
      validate,
      templateDefaultOptions: settings.templateDefaultOptions
  };
  class Draft07 extends Draft {
      constructor(schema, config = {}) {
          super(merge$2(draft07Config, config), schema);
      }
  }

  ({
      ...draft07Config,
      resolveOneOf: resolveOneOfFuzzy,
      resolveRef: resolveRefMerge
  });

  function el(tagName, attributes, children = []) {
      const e = document.createElement(tagName);
      Object.entries(attributes).forEach(([k, v]) => {
          if (k === "text") {
              e.innerText = v;
              return;
          }
          if (k === "inner") {
              e.innerHTML = v;
              return;
          }
          e.setAttribute(k, v);
      });
      children.forEach((c) => e.appendChild(c));
      return e;
  }

  /* eslint-disable no-bitwise */

  const decodeCache = {};

  function getDecodeCache (exclude) {
    let cache = decodeCache[exclude];
    if (cache) { return cache }

    cache = decodeCache[exclude] = [];

    for (let i = 0; i < 128; i++) {
      const ch = String.fromCharCode(i);
      cache.push(ch);
    }

    for (let i = 0; i < exclude.length; i++) {
      const ch = exclude.charCodeAt(i);
      cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
    }

    return cache
  }

  // Decode percent-encoded string.
  //
  function decode$1 (string, exclude) {
    if (typeof exclude !== 'string') {
      exclude = decode$1.defaultChars;
    }

    const cache = getDecodeCache(exclude);

    return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
      let result = '';

      for (let i = 0, l = seq.length; i < l; i += 3) {
        const b1 = parseInt(seq.slice(i + 1, i + 3), 16);

        if (b1 < 0x80) {
          result += cache[b1];
          continue
        }

        if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
          // 110xxxxx 10xxxxxx
          const b2 = parseInt(seq.slice(i + 4, i + 6), 16);

          if ((b2 & 0xC0) === 0x80) {
            const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);

            if (chr < 0x80) {
              result += '\ufffd\ufffd';
            } else {
              result += String.fromCharCode(chr);
            }

            i += 3;
            continue
          }
        }

        if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
          // 1110xxxx 10xxxxxx 10xxxxxx
          const b2 = parseInt(seq.slice(i + 4, i + 6), 16);
          const b3 = parseInt(seq.slice(i + 7, i + 9), 16);

          if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
            const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);

            if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
              result += '\ufffd\ufffd\ufffd';
            } else {
              result += String.fromCharCode(chr);
            }

            i += 6;
            continue
          }
        }

        if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
          // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
          const b2 = parseInt(seq.slice(i + 4, i + 6), 16);
          const b3 = parseInt(seq.slice(i + 7, i + 9), 16);
          const b4 = parseInt(seq.slice(i + 10, i + 12), 16);

          if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
            let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);

            if (chr < 0x10000 || chr > 0x10FFFF) {
              result += '\ufffd\ufffd\ufffd\ufffd';
            } else {
              chr -= 0x10000;
              result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
            }

            i += 9;
            continue
          }
        }

        result += '\ufffd';
      }

      return result
    })
  }

  decode$1.defaultChars = ';/?:@&=+$,#';
  decode$1.componentChars = '';

  const encodeCache = {};

  // Create a lookup array where anything but characters in `chars` string
  // and alphanumeric chars is percent-encoded.
  //
  function getEncodeCache (exclude) {
    let cache = encodeCache[exclude];
    if (cache) { return cache }

    cache = encodeCache[exclude] = [];

    for (let i = 0; i < 128; i++) {
      const ch = String.fromCharCode(i);

      if (/^[0-9a-z]$/i.test(ch)) {
        // always allow unencoded alphanumeric characters
        cache.push(ch);
      } else {
        cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
      }
    }

    for (let i = 0; i < exclude.length; i++) {
      cache[exclude.charCodeAt(i)] = exclude[i];
    }

    return cache
  }

  // Encode unsafe characters with percent-encoding, skipping already
  // encoded sequences.
  //
  //  - string       - string to encode
  //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
  //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
  //
  function encode$1 (string, exclude, keepEscaped) {
    if (typeof exclude !== 'string') {
      // encode(string, keepEscaped)
      keepEscaped = exclude;
      exclude = encode$1.defaultChars;
    }

    if (typeof keepEscaped === 'undefined') {
      keepEscaped = true;
    }

    const cache = getEncodeCache(exclude);
    let result = '';

    for (let i = 0, l = string.length; i < l; i++) {
      const code = string.charCodeAt(i);

      if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
        if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
          result += string.slice(i, i + 3);
          i += 2;
          continue
        }
      }

      if (code < 128) {
        result += cache[code];
        continue
      }

      if (code >= 0xD800 && code <= 0xDFFF) {
        if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
          const nextCode = string.charCodeAt(i + 1);
          if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
            result += encodeURIComponent(string[i] + string[i + 1]);
            i++;
            continue
          }
        }
        result += '%EF%BF%BD';
        continue
      }

      result += encodeURIComponent(string[i]);
    }

    return result
  }

  encode$1.defaultChars = ";/?:@&=+$,-_.!~*'()#";
  encode$1.componentChars = "-_.!~*'()";

  function format (url) {
    let result = '';

    result += url.protocol || '';
    result += url.slashes ? '//' : '';
    result += url.auth ? url.auth + '@' : '';

    if (url.hostname && url.hostname.indexOf(':') !== -1) {
      // ipv6 address
      result += '[' + url.hostname + ']';
    } else {
      result += url.hostname || '';
    }

    result += url.port ? ':' + url.port : '';
    result += url.pathname || '';
    result += url.search || '';
    result += url.hash || '';

    return result
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  //
  // Changes from joyent/node:
  //
  // 1. No leading slash in paths,
  //    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
  //
  // 2. Backslashes are not replaced with slashes,
  //    so `http:\\example.org\` is treated like a relative path
  //
  // 3. Trailing colon is treated like a part of the path,
  //    i.e. in `http://example.org:foo` pathname is `:foo`
  //
  // 4. Nothing is URL-encoded in the resulting object,
  //    (in joyent/node some chars in auth and paths are encoded)
  //
  // 5. `url.parse()` does not have `parseQueryString` argument
  //
  // 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
  //    which can be constructed using other parts of the url.
  //

  function Url () {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.pathname = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  const protocolPattern = /^([a-z0-9.+-]+:)/i;
  const portPattern = /:[0-9]*$/;

  // Special case for a simple path URL
  /* eslint-disable-next-line no-useless-escape */
  const simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;

  // RFC 2396: characters reserved for delimiting URLs.
  // We actually just auto-escape these.
  const delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'];

  // RFC 2396: characters not allowed for various reasons.
  const unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);

  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  const autoEscape = ['\''].concat(unwise);
  // Characters that are never ever allowed in a hostname.
  // Note that any invalid chars are also handled, but these
  // are the ones that are *expected* to be seen, so we fast-path
  // them.
  const nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
  const hostEndingChars = ['/', '?', '#'];
  const hostnameMaxLen = 255;
  const hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
  const hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
  // protocols that can allow "unsafe" and "unwise" chars.
  // protocols that never have a hostname.
  const hostlessProtocol = {
    javascript: true,
    'javascript:': true
  };
  // protocols that always contain a // bit.
  const slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  };

  function urlParse (url, slashesDenoteHost) {
    if (url && url instanceof Url) return url

    const u = new Url();
    u.parse(url, slashesDenoteHost);
    return u
  }

  Url.prototype.parse = function (url, slashesDenoteHost) {
    let lowerProto, hec, slashes;
    let rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      const simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        this.pathname = simplePath[1];
        if (simplePath[2]) {
          this.search = simplePath[2];
        }
        return this
      }
    }

    let proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      lowerProto = proto.toLowerCase();
      this.protocol = proto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    /* eslint-disable-next-line no-useless-escape */
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }

    if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {
      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      let hostEnd = -1;
      for (let i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      let auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = auth;
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (let i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1) {
        hostEnd = rest.length;
      }

      if (rest[hostEnd - 1] === ':') { hostEnd--; }
      const host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      this.parseHost(host);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      this.hostname = this.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      const ipv6Hostname = this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        const hostparts = this.hostname.split(/\./);
        for (let i = 0, l = hostparts.length; i < l; i++) {
          const part = hostparts[i];
          if (!part) { continue }
          if (!part.match(hostnamePartPattern)) {
            let newpart = '';
            for (let j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              const validParts = hostparts.slice(0, i);
              const notHost = hostparts.slice(i + 1);
              const bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = notHost.join('.') + rest;
              }
              this.hostname = validParts.join('.');
              break
            }
          }
        }
      }

      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      }

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      }
    }

    // chop off from the tail first.
    const hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    const qm = rest.indexOf('?');
    if (qm !== -1) {
      this.search = rest.substr(qm);
      rest = rest.slice(0, qm);
    }
    if (rest) { this.pathname = rest; }
    if (slashedProtocol[lowerProto] &&
        this.hostname && !this.pathname) {
      this.pathname = '';
    }

    return this
  };

  Url.prototype.parseHost = function (host) {
    let port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) { this.hostname = host; }
  };

  var mdurl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    decode: decode$1,
    encode: encode$1,
    format: format,
    parse: urlParse
  });

  var Any = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;

  var Cc = /[\0-\x1F\x7F-\x9F]/;

  var regex$1 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;

  var P = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;

  var regex = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/;

  var Z = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

  var ucmicro = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Any: Any,
    Cc: Cc,
    Cf: regex$1,
    P: P,
    S: regex,
    Z: Z
  });

  // Generated using scripts/write-decode-map.ts
  var htmlDecodeTree = new Uint16Array(
  // prettier-ignore
  "\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
      .split("")
      .map((c) => c.charCodeAt(0)));

  // Generated using scripts/write-decode-map.ts
  var xmlDecodeTree = new Uint16Array(
  // prettier-ignore
  "\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
      .split("")
      .map((c) => c.charCodeAt(0)));

  // Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
  var _a;
  const decodeMap = new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376],
  ]);
  /**
   * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
   */
  const fromCodePoint$1 = 
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
      let output = "";
      if (codePoint > 0xffff) {
          codePoint -= 0x10000;
          output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
          codePoint = 0xdc00 | (codePoint & 0x3ff);
      }
      output += String.fromCharCode(codePoint);
      return output;
  };
  /**
   * Replace the given code point with a replacement character if it is a
   * surrogate or is outside the valid range. Otherwise return the code
   * point unchanged.
   */
  function replaceCodePoint(codePoint) {
      var _a;
      if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
          return 0xfffd;
      }
      return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
  }

  var CharCodes;
  (function (CharCodes) {
      CharCodes[CharCodes["NUM"] = 35] = "NUM";
      CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
      CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
      CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
      CharCodes[CharCodes["NINE"] = 57] = "NINE";
      CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
      CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
      CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
      CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
      CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
      CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
  })(CharCodes || (CharCodes = {}));
  /** Bit that needs to be set to convert an upper case ASCII character to lower case */
  const TO_LOWER_BIT = 0b100000;
  var BinTrieFlags;
  (function (BinTrieFlags) {
      BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
  })(BinTrieFlags || (BinTrieFlags = {}));
  function isNumber(code) {
      return code >= CharCodes.ZERO && code <= CharCodes.NINE;
  }
  function isHexadecimalCharacter(code) {
      return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
          (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));
  }
  function isAsciiAlphaNumeric(code) {
      return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
          (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
          isNumber(code));
  }
  /**
   * Checks if the given character is a valid end character for an entity in an attribute.
   *
   * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
   * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
   */
  function isEntityInAttributeInvalidEnd(code) {
      return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
  }
  var EntityDecoderState;
  (function (EntityDecoderState) {
      EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
  })(EntityDecoderState || (EntityDecoderState = {}));
  var DecodingMode;
  (function (DecodingMode) {
      /** Entities in text nodes that can end with any character. */
      DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
      /** Only allow entities terminated with a semicolon. */
      DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
      /** Entities in attributes have limitations on ending characters. */
      DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
  })(DecodingMode || (DecodingMode = {}));
  /**
   * Token decoder with support of writing partial entities.
   */
  class EntityDecoder {
      constructor(
      /** The tree used to decode entities. */
      decodeTree, 
      /**
       * The function that is called when a codepoint is decoded.
       *
       * For multi-byte named entities, this will be called multiple times,
       * with the second codepoint, and the same `consumed` value.
       *
       * @param codepoint The decoded codepoint.
       * @param consumed The number of bytes consumed by the decoder.
       */
      emitCodePoint, 
      /** An object that is used to produce errors. */
      errors) {
          this.decodeTree = decodeTree;
          this.emitCodePoint = emitCodePoint;
          this.errors = errors;
          /** The current state of the decoder. */
          this.state = EntityDecoderState.EntityStart;
          /** Characters that were consumed while parsing an entity. */
          this.consumed = 1;
          /**
           * The result of the entity.
           *
           * Either the result index of a numeric entity, or the codepoint of a
           * numeric entity.
           */
          this.result = 0;
          /** The current index in the decode tree. */
          this.treeIndex = 0;
          /** The number of characters that were consumed in excess. */
          this.excess = 1;
          /** The mode in which the decoder is operating. */
          this.decodeMode = DecodingMode.Strict;
      }
      /** Resets the instance to make it reusable. */
      startEntity(decodeMode) {
          this.decodeMode = decodeMode;
          this.state = EntityDecoderState.EntityStart;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.consumed = 1;
      }
      /**
       * Write an entity to the decoder. This can be called multiple times with partial entities.
       * If the entity is incomplete, the decoder will return -1.
       *
       * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
       * entity is incomplete, and resume when the next string is written.
       *
       * @param string The string containing the entity (or a continuation of the entity).
       * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      write(str, offset) {
          switch (this.state) {
              case EntityDecoderState.EntityStart: {
                  if (str.charCodeAt(offset) === CharCodes.NUM) {
                      this.state = EntityDecoderState.NumericStart;
                      this.consumed += 1;
                      return this.stateNumericStart(str, offset + 1);
                  }
                  this.state = EntityDecoderState.NamedEntity;
                  return this.stateNamedEntity(str, offset);
              }
              case EntityDecoderState.NumericStart: {
                  return this.stateNumericStart(str, offset);
              }
              case EntityDecoderState.NumericDecimal: {
                  return this.stateNumericDecimal(str, offset);
              }
              case EntityDecoderState.NumericHex: {
                  return this.stateNumericHex(str, offset);
              }
              case EntityDecoderState.NamedEntity: {
                  return this.stateNamedEntity(str, offset);
              }
          }
      }
      /**
       * Switches between the numeric decimal and hexadecimal states.
       *
       * Equivalent to the `Numeric character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericStart(str, offset) {
          if (offset >= str.length) {
              return -1;
          }
          if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
              this.state = EntityDecoderState.NumericHex;
              this.consumed += 1;
              return this.stateNumericHex(str, offset + 1);
          }
          this.state = EntityDecoderState.NumericDecimal;
          return this.stateNumericDecimal(str, offset);
      }
      addToNumericResult(str, start, end, base) {
          if (start !== end) {
              const digitCount = end - start;
              this.result =
                  this.result * Math.pow(base, digitCount) +
                      parseInt(str.substr(start, digitCount), base);
              this.consumed += digitCount;
          }
      }
      /**
       * Parses a hexadecimal numeric entity.
       *
       * Equivalent to the `Hexademical character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericHex(str, offset) {
          const startIdx = offset;
          while (offset < str.length) {
              const char = str.charCodeAt(offset);
              if (isNumber(char) || isHexadecimalCharacter(char)) {
                  offset += 1;
              }
              else {
                  this.addToNumericResult(str, startIdx, offset, 16);
                  return this.emitNumericEntity(char, 3);
              }
          }
          this.addToNumericResult(str, startIdx, offset, 16);
          return -1;
      }
      /**
       * Parses a decimal numeric entity.
       *
       * Equivalent to the `Decimal character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericDecimal(str, offset) {
          const startIdx = offset;
          while (offset < str.length) {
              const char = str.charCodeAt(offset);
              if (isNumber(char)) {
                  offset += 1;
              }
              else {
                  this.addToNumericResult(str, startIdx, offset, 10);
                  return this.emitNumericEntity(char, 2);
              }
          }
          this.addToNumericResult(str, startIdx, offset, 10);
          return -1;
      }
      /**
       * Validate and emit a numeric entity.
       *
       * Implements the logic from the `Hexademical character reference start
       * state` and `Numeric character reference end state` in the HTML spec.
       *
       * @param lastCp The last code point of the entity. Used to see if the
       *               entity was terminated with a semicolon.
       * @param expectedLength The minimum number of characters that should be
       *                       consumed. Used to validate that at least one digit
       *                       was consumed.
       * @returns The number of characters that were consumed.
       */
      emitNumericEntity(lastCp, expectedLength) {
          var _a;
          // Ensure we consumed at least one digit.
          if (this.consumed <= expectedLength) {
              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
              return 0;
          }
          // Figure out if this is a legit end of the entity
          if (lastCp === CharCodes.SEMI) {
              this.consumed += 1;
          }
          else if (this.decodeMode === DecodingMode.Strict) {
              return 0;
          }
          this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
          if (this.errors) {
              if (lastCp !== CharCodes.SEMI) {
                  this.errors.missingSemicolonAfterCharacterReference();
              }
              this.errors.validateNumericCharacterReference(this.result);
          }
          return this.consumed;
      }
      /**
       * Parses a named entity.
       *
       * Equivalent to the `Named character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNamedEntity(str, offset) {
          const { decodeTree } = this;
          let current = decodeTree[this.treeIndex];
          // The mask is the number of bytes of the value, including the current byte.
          let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          for (; offset < str.length; offset++, this.excess++) {
              const char = str.charCodeAt(offset);
              this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
              if (this.treeIndex < 0) {
                  return this.result === 0 ||
                      // If we are parsing an attribute
                      (this.decodeMode === DecodingMode.Attribute &&
                          // We shouldn't have consumed any characters after the entity,
                          (valueLength === 0 ||
                              // And there should be no invalid characters.
                              isEntityInAttributeInvalidEnd(char)))
                      ? 0
                      : this.emitNotTerminatedNamedEntity();
              }
              current = decodeTree[this.treeIndex];
              valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
              // If the branch is a value, store it and continue
              if (valueLength !== 0) {
                  // If the entity is terminated by a semicolon, we are done.
                  if (char === CharCodes.SEMI) {
                      return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                  }
                  // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                  if (this.decodeMode !== DecodingMode.Strict) {
                      this.result = this.treeIndex;
                      this.consumed += this.excess;
                      this.excess = 0;
                  }
              }
          }
          return -1;
      }
      /**
       * Emit a named entity that was not terminated with a semicolon.
       *
       * @returns The number of characters consumed.
       */
      emitNotTerminatedNamedEntity() {
          var _a;
          const { result, decodeTree } = this;
          const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
          this.emitNamedEntityData(result, valueLength, this.consumed);
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
          return this.consumed;
      }
      /**
       * Emit a named entity.
       *
       * @param result The index of the entity in the decode tree.
       * @param valueLength The number of bytes in the entity.
       * @param consumed The number of characters consumed.
       *
       * @returns The number of characters consumed.
       */
      emitNamedEntityData(result, valueLength, consumed) {
          const { decodeTree } = this;
          this.emitCodePoint(valueLength === 1
              ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
              : decodeTree[result + 1], consumed);
          if (valueLength === 3) {
              // For multi-byte values, we need to emit the second byte.
              this.emitCodePoint(decodeTree[result + 2], consumed);
          }
          return consumed;
      }
      /**
       * Signal to the parser that the end of the input was reached.
       *
       * Remaining data will be emitted and relevant errors will be produced.
       *
       * @returns The number of characters consumed.
       */
      end() {
          var _a;
          switch (this.state) {
              case EntityDecoderState.NamedEntity: {
                  // Emit a named entity if we have one.
                  return this.result !== 0 &&
                      (this.decodeMode !== DecodingMode.Attribute ||
                          this.result === this.treeIndex)
                      ? this.emitNotTerminatedNamedEntity()
                      : 0;
              }
              // Otherwise, emit a numeric entity if we have one.
              case EntityDecoderState.NumericDecimal: {
                  return this.emitNumericEntity(0, 2);
              }
              case EntityDecoderState.NumericHex: {
                  return this.emitNumericEntity(0, 3);
              }
              case EntityDecoderState.NumericStart: {
                  (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                  return 0;
              }
              case EntityDecoderState.EntityStart: {
                  // Return 0 if we have no entity.
                  return 0;
              }
          }
      }
  }
  /**
   * Creates a function that decodes entities in a string.
   *
   * @param decodeTree The decode tree.
   * @returns A function that decodes entities in a string.
   */
  function getDecoder(decodeTree) {
      let ret = "";
      const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint$1(str)));
      return function decodeWithTrie(str, decodeMode) {
          let lastIndex = 0;
          let offset = 0;
          while ((offset = str.indexOf("&", offset)) >= 0) {
              ret += str.slice(lastIndex, offset);
              decoder.startEntity(decodeMode);
              const len = decoder.write(str, 
              // Skip the "&"
              offset + 1);
              if (len < 0) {
                  lastIndex = offset + decoder.end();
                  break;
              }
              lastIndex = offset + len;
              // If `len` is 0, skip the current `&` and continue.
              offset = len === 0 ? lastIndex + 1 : lastIndex;
          }
          const result = ret + str.slice(lastIndex);
          // Make sure we don't keep a reference to the final string.
          ret = "";
          return result;
      };
  }
  /**
   * Determines the branch of the current node that is taken given the current
   * character. This function is used to traverse the trie.
   *
   * @param decodeTree The trie.
   * @param current The current node.
   * @param nodeIdx The index right after the current node and its value.
   * @param char The current character.
   * @returns The index of the next node, or -1 if no branch is taken.
   */
  function determineBranch(decodeTree, current, nodeIdx, char) {
      const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      // Case 1: Single branch encoded in jump offset
      if (branchCount === 0) {
          return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
      }
      // Case 2: Multiple branches encoded in jump table
      if (jumpOffset) {
          const value = char - jumpOffset;
          return value < 0 || value >= branchCount
              ? -1
              : decodeTree[nodeIdx + value] - 1;
      }
      // Case 3: Multiple branches encoded in dictionary
      // Binary search for the character.
      let lo = nodeIdx;
      let hi = lo + branchCount - 1;
      while (lo <= hi) {
          const mid = (lo + hi) >>> 1;
          const midVal = decodeTree[mid];
          if (midVal < char) {
              lo = mid + 1;
          }
          else if (midVal > char) {
              hi = mid - 1;
          }
          else {
              return decodeTree[mid + branchCount];
          }
      }
      return -1;
  }
  const htmlDecoder = getDecoder(htmlDecodeTree);
  getDecoder(xmlDecodeTree);
  /**
   * Decodes an HTML string.
   *
   * @param str The string to decode.
   * @param mode The decoding mode.
   * @returns The decoded string.
   */
  function decodeHTML(str, mode = DecodingMode.Legacy) {
      return htmlDecoder(str, mode);
  }

  // Utilities
  //


  function _class$1 (obj) { return Object.prototype.toString.call(obj) }

  function isString$1 (obj) { return _class$1(obj) === '[object String]' }

  const _hasOwnProperty = Object.prototype.hasOwnProperty;

  function has (object, key) {
    return _hasOwnProperty.call(object, key)
  }

  // Merge objects
  //
  function assign$1 (obj /* from1, from2, from3, ... */) {
    const sources = Array.prototype.slice.call(arguments, 1);

    sources.forEach(function (source) {
      if (!source) { return }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be object')
      }

      Object.keys(source).forEach(function (key) {
        obj[key] = source[key];
      });
    });

    return obj
  }

  // Remove element from array and put another array at those position.
  // Useful for some operations with tokens
  function arrayReplaceAt (src, pos, newElements) {
    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))
  }

  function isValidEntityCode (c) {
    /* eslint no-bitwise:0 */
    // broken sequence
    if (c >= 0xD800 && c <= 0xDFFF) { return false }
    // never used
    if (c >= 0xFDD0 && c <= 0xFDEF) { return false }
    if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }
    // control codes
    if (c >= 0x00 && c <= 0x08) { return false }
    if (c === 0x0B) { return false }
    if (c >= 0x0E && c <= 0x1F) { return false }
    if (c >= 0x7F && c <= 0x9F) { return false }
    // out of range
    if (c > 0x10FFFF) { return false }
    return true
  }

  function fromCodePoint (c) {
    /* eslint no-bitwise:0 */
    if (c > 0xffff) {
      c -= 0x10000;
      const surrogate1 = 0xd800 + (c >> 10);
      const surrogate2 = 0xdc00 + (c & 0x3ff);

      return String.fromCharCode(surrogate1, surrogate2)
    }
    return String.fromCharCode(c)
  }

  const UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g;
  const ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;
  const UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');

  const DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;

  function replaceEntityPattern (match, name) {
    if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
      const code = name[1].toLowerCase() === 'x'
        ? parseInt(name.slice(2), 16)
        : parseInt(name.slice(1), 10);

      if (isValidEntityCode(code)) {
        return fromCodePoint(code)
      }

      return match
    }

    const decoded = decodeHTML(match);
    if (decoded !== match) {
      return decoded
    }

    return match
  }

  /* function replaceEntities(str) {
    if (str.indexOf('&') < 0) { return str; }

    return str.replace(ENTITY_RE, replaceEntityPattern);
  } */

  function unescapeMd (str) {
    if (str.indexOf('\\') < 0) { return str }
    return str.replace(UNESCAPE_MD_RE, '$1')
  }

  function unescapeAll (str) {
    if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str }

    return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
      if (escaped) { return escaped }
      return replaceEntityPattern(match, entity)
    })
  }

  const HTML_ESCAPE_TEST_RE = /[&<>"]/;
  const HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
  const HTML_REPLACEMENTS = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;'
  };

  function replaceUnsafeChar (ch) {
    return HTML_REPLACEMENTS[ch]
  }

  function escapeHtml (str) {
    if (HTML_ESCAPE_TEST_RE.test(str)) {
      return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)
    }
    return str
  }

  const REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

  function escapeRE$1 (str) {
    return str.replace(REGEXP_ESCAPE_RE, '\\$&')
  }

  function isSpace (code) {
    switch (code) {
      case 0x09:
      case 0x20:
        return true
    }
    return false
  }

  // Zs (unicode class) || [\t\f\v\r\n]
  function isWhiteSpace (code) {
    if (code >= 0x2000 && code <= 0x200A) { return true }
    switch (code) {
      case 0x09: // \t
      case 0x0A: // \n
      case 0x0B: // \v
      case 0x0C: // \f
      case 0x0D: // \r
      case 0x20:
      case 0xA0:
      case 0x1680:
      case 0x202F:
      case 0x205F:
      case 0x3000:
        return true
    }
    return false
  }

  /* eslint-disable max-len */

  // Currently without astral characters support.
  function isPunctChar (ch) {
    return P.test(ch) || regex.test(ch)
  }

  // Markdown ASCII punctuation characters.
  //
  // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
  // http://spec.commonmark.org/0.15/#ascii-punctuation-character
  //
  // Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
  //
  function isMdAsciiPunct (ch) {
    switch (ch) {
      case 0x21/* ! */:
      case 0x22/* " */:
      case 0x23/* # */:
      case 0x24/* $ */:
      case 0x25/* % */:
      case 0x26/* & */:
      case 0x27/* ' */:
      case 0x28/* ( */:
      case 0x29/* ) */:
      case 0x2A/* * */:
      case 0x2B/* + */:
      case 0x2C/* , */:
      case 0x2D/* - */:
      case 0x2E/* . */:
      case 0x2F/* / */:
      case 0x3A/* : */:
      case 0x3B/* ; */:
      case 0x3C/* < */:
      case 0x3D/* = */:
      case 0x3E/* > */:
      case 0x3F/* ? */:
      case 0x40/* @ */:
      case 0x5B/* [ */:
      case 0x5C/* \ */:
      case 0x5D/* ] */:
      case 0x5E/* ^ */:
      case 0x5F/* _ */:
      case 0x60/* ` */:
      case 0x7B/* { */:
      case 0x7C/* | */:
      case 0x7D/* } */:
      case 0x7E/* ~ */:
        return true
      default:
        return false
    }
  }

  // Hepler to unify [reference labels].
  //
  function normalizeReference (str) {
    // Trim and collapse whitespace
    //
    str = str.trim().replace(/\s+/g, ' ');

    // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
    // fixed in v12 (couldn't find any details).
    //
    // So treat this one as a special case
    // (remove this when node v10 is no longer supported).
    //
    if ('ẞ'.toLowerCase() === 'Ṿ') {
      str = str.replace(/ẞ/g, 'ß');
    }

    // .toLowerCase().toUpperCase() should get rid of all differences
    // between letter variants.
    //
    // Simple .toLowerCase() doesn't normalize 125 code points correctly,
    // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
    // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
    // uppercased versions).
    //
    // Here's an example showing how it happens. Lets take greek letter omega:
    // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
    //
    // Unicode entries:
    // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
    // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
    // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
    // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
    //
    // Case-insensitive comparison should treat all of them as equivalent.
    //
    // But .toLowerCase() doesn't change ϑ (it's already lowercase),
    // and .toUpperCase() doesn't change ϴ (already uppercase).
    //
    // Applying first lower then upper case normalizes any character:
    // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
    //
    // Note: this is equivalent to unicode case folding; unicode normalization
    // is a different step that is not required here.
    //
    // Final result should be uppercased, because it's later stored in an object
    // (this avoid a conflict with Object.prototype members,
    // most notably, `__proto__`)
    //
    return str.toLowerCase().toUpperCase()
  }

  // Re-export libraries commonly used in both markdown-it and its plugins,
  // so plugins won't have to depend on them explicitly, which reduces their
  // bundled size (e.g. a browser build).
  //
  const lib$1 = { mdurl, ucmicro };

  var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    arrayReplaceAt: arrayReplaceAt,
    assign: assign$1,
    escapeHtml: escapeHtml,
    escapeRE: escapeRE$1,
    fromCodePoint: fromCodePoint,
    has: has,
    isMdAsciiPunct: isMdAsciiPunct,
    isPunctChar: isPunctChar,
    isSpace: isSpace,
    isString: isString$1,
    isValidEntityCode: isValidEntityCode,
    isWhiteSpace: isWhiteSpace,
    lib: lib$1,
    normalizeReference: normalizeReference,
    unescapeAll: unescapeAll,
    unescapeMd: unescapeMd
  });

  // Parse link label
  //
  // this function assumes that first character ("[") already matches;
  // returns the end of the label
  //

  function parseLinkLabel (state, start, disableNested) {
    let level, found, marker, prevPos;

    const max = state.posMax;
    const oldPos = state.pos;

    state.pos = start + 1;
    level = 1;

    while (state.pos < max) {
      marker = state.src.charCodeAt(state.pos);
      if (marker === 0x5D /* ] */) {
        level--;
        if (level === 0) {
          found = true;
          break
        }
      }

      prevPos = state.pos;
      state.md.inline.skipToken(state);
      if (marker === 0x5B /* [ */) {
        if (prevPos === state.pos - 1) {
          // increase level if we find text `[`, which is not a part of any token
          level++;
        } else if (disableNested) {
          state.pos = oldPos;
          return -1
        }
      }
    }

    let labelEnd = -1;

    if (found) {
      labelEnd = state.pos;
    }

    // restore old state
    state.pos = oldPos;

    return labelEnd
  }

  // Parse link destination
  //


  function parseLinkDestination (str, start, max) {
    let code;
    let pos = start;

    const result = {
      ok: false,
      pos: 0,
      str: ''
    };

    if (str.charCodeAt(pos) === 0x3C /* < */) {
      pos++;
      while (pos < max) {
        code = str.charCodeAt(pos);
        if (code === 0x0A /* \n */) { return result }
        if (code === 0x3C /* < */) { return result }
        if (code === 0x3E /* > */) {
          result.pos = pos + 1;
          result.str = unescapeAll(str.slice(start + 1, pos));
          result.ok = true;
          return result
        }
        if (code === 0x5C /* \ */ && pos + 1 < max) {
          pos += 2;
          continue
        }

        pos++;
      }

      // no closing '>'
      return result
    }

    // this should be ... } else { ... branch

    let level = 0;
    while (pos < max) {
      code = str.charCodeAt(pos);

      if (code === 0x20) { break }

      // ascii control characters
      if (code < 0x20 || code === 0x7F) { break }

      if (code === 0x5C /* \ */ && pos + 1 < max) {
        if (str.charCodeAt(pos + 1) === 0x20) { break }
        pos += 2;
        continue
      }

      if (code === 0x28 /* ( */) {
        level++;
        if (level > 32) { return result }
      }

      if (code === 0x29 /* ) */) {
        if (level === 0) { break }
        level--;
      }

      pos++;
    }

    if (start === pos) { return result }
    if (level !== 0) { return result }

    result.str = unescapeAll(str.slice(start, pos));
    result.pos = pos;
    result.ok = true;
    return result
  }

  // Parse link title
  //


  // Parse link title within `str` in [start, max] range,
  // or continue previous parsing if `prev_state` is defined (equal to result of last execution).
  //
  function parseLinkTitle (str, start, max, prev_state) {
    let code;
    let pos = start;

    const state = {
      // if `true`, this is a valid link title
      ok: false,
      // if `true`, this link can be continued on the next line
      can_continue: false,
      // if `ok`, it's the position of the first character after the closing marker
      pos: 0,
      // if `ok`, it's the unescaped title
      str: '',
      // expected closing marker character code
      marker: 0
    };

    if (prev_state) {
      // this is a continuation of a previous parseLinkTitle call on the next line,
      // used in reference links only
      state.str = prev_state.str;
      state.marker = prev_state.marker;
    } else {
      if (pos >= max) { return state }

      let marker = str.charCodeAt(pos);
      if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }

      start++;
      pos++;

      // if opening marker is "(", switch it to closing marker ")"
      if (marker === 0x28) { marker = 0x29; }

      state.marker = marker;
    }

    while (pos < max) {
      code = str.charCodeAt(pos);
      if (code === state.marker) {
        state.pos = pos + 1;
        state.str += unescapeAll(str.slice(start, pos));
        state.ok = true;
        return state
      } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {
        return state
      } else if (code === 0x5C /* \ */ && pos + 1 < max) {
        pos++;
      }

      pos++;
    }

    // no closing marker found, but this link title may continue on the next line (for references)
    state.can_continue = true;
    state.str += unescapeAll(str.slice(start, pos));
    return state
  }

  // Just a shortcut for bulk export

  var helpers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    parseLinkDestination: parseLinkDestination,
    parseLinkLabel: parseLinkLabel,
    parseLinkTitle: parseLinkTitle
  });

  /**
   * class Renderer
   *
   * Generates HTML from parsed token stream. Each instance has independent
   * copy of rules. Those can be rewritten with ease. Also, you can add new
   * rules if you create plugin and adds new token types.
   **/


  const default_rules = {};

  default_rules.code_inline = function (tokens, idx, options, env, slf) {
    const token = tokens[idx];

    return  '<code' + slf.renderAttrs(token) + '>' +
            escapeHtml(token.content) +
            '</code>'
  };

  default_rules.code_block = function (tokens, idx, options, env, slf) {
    const token = tokens[idx];

    return  '<pre' + slf.renderAttrs(token) + '><code>' +
            escapeHtml(tokens[idx].content) +
            '</code></pre>\n'
  };

  default_rules.fence = function (tokens, idx, options, env, slf) {
    const token = tokens[idx];
    const info = token.info ? unescapeAll(token.info).trim() : '';
    let langName = '';
    let langAttrs = '';

    if (info) {
      const arr = info.split(/(\s+)/g);
      langName = arr[0];
      langAttrs = arr.slice(2).join('');
    }

    let highlighted;
    if (options.highlight) {
      highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
    } else {
      highlighted = escapeHtml(token.content);
    }

    if (highlighted.indexOf('<pre') === 0) {
      return highlighted + '\n'
    }

    // If language exists, inject class gently, without modifying original token.
    // May be, one day we will add .deepClone() for token and simplify this part, but
    // now we prefer to keep things local.
    if (info) {
      const i = token.attrIndex('class');
      const tmpAttrs = token.attrs ? token.attrs.slice() : [];

      if (i < 0) {
        tmpAttrs.push(['class', options.langPrefix + langName]);
      } else {
        tmpAttrs[i] = tmpAttrs[i].slice();
        tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
      }

      // Fake token just to render attributes
      const tmpToken = {
        attrs: tmpAttrs
      };

      return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\n`
    }

    return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\n`
  };

  default_rules.image = function (tokens, idx, options, env, slf) {
    const token = tokens[idx];

    // "alt" attr MUST be set, even if empty. Because it's mandatory and
    // should be placed on proper position for tests.
    //
    // Replace content with actual value

    token.attrs[token.attrIndex('alt')][1] =
      slf.renderInlineAsText(token.children, options, env);

    return slf.renderToken(tokens, idx, options)
  };

  default_rules.hardbreak = function (tokens, idx, options /*, env */) {
    return options.xhtmlOut ? '<br />\n' : '<br>\n'
  };
  default_rules.softbreak = function (tokens, idx, options /*, env */) {
    return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n'
  };

  default_rules.text = function (tokens, idx /*, options, env */) {
    return escapeHtml(tokens[idx].content)
  };

  default_rules.html_block = function (tokens, idx /*, options, env */) {
    return tokens[idx].content
  };
  default_rules.html_inline = function (tokens, idx /*, options, env */) {
    return tokens[idx].content
  };

  /**
   * new Renderer()
   *
   * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
   **/
  function Renderer () {
    /**
     * Renderer#rules -> Object
     *
     * Contains render rules for tokens. Can be updated and extended.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.renderer.rules.strong_open  = function () { return '<b>'; };
     * md.renderer.rules.strong_close = function () { return '</b>'; };
     *
     * var result = md.renderInline(...);
     * ```
     *
     * Each rule is called as independent static function with fixed signature:
     *
     * ```javascript
     * function my_token_render(tokens, idx, options, env, renderer) {
     *   // ...
     *   return renderedHTML;
     * }
     * ```
     *
     * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)
     * for more details and examples.
     **/
    this.rules = assign$1({}, default_rules);
  }

  /**
   * Renderer.renderAttrs(token) -> String
   *
   * Render token attributes to string.
   **/
  Renderer.prototype.renderAttrs = function renderAttrs (token) {
    let i, l, result;

    if (!token.attrs) { return '' }

    result = '';

    for (i = 0, l = token.attrs.length; i < l; i++) {
      result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
    }

    return result
  };

  /**
   * Renderer.renderToken(tokens, idx, options) -> String
   * - tokens (Array): list of tokens
   * - idx (Numbed): token index to render
   * - options (Object): params of parser instance
   *
   * Default token renderer. Can be overriden by custom function
   * in [[Renderer#rules]].
   **/
  Renderer.prototype.renderToken = function renderToken (tokens, idx, options) {
    const token = tokens[idx];
    let result = '';

    // Tight list paragraphs
    if (token.hidden) {
      return ''
    }

    // Insert a newline between hidden paragraph and subsequent opening
    // block-level tag.
    //
    // For example, here we should insert a newline before blockquote:
    //  - a
    //    >
    //
    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
      result += '\n';
    }

    // Add token name, e.g. `<img`
    result += (token.nesting === -1 ? '</' : '<') + token.tag;

    // Encode attributes, e.g. `<img src="foo"`
    result += this.renderAttrs(token);

    // Add a slash for self-closing tags, e.g. `<img src="foo" /`
    if (token.nesting === 0 && options.xhtmlOut) {
      result += ' /';
    }

    // Check if we need to add a newline after this tag
    let needLf = false;
    if (token.block) {
      needLf = true;

      if (token.nesting === 1) {
        if (idx + 1 < tokens.length) {
          const nextToken = tokens[idx + 1];

          if (nextToken.type === 'inline' || nextToken.hidden) {
            // Block-level tag containing an inline tag.
            //
            needLf = false;
          } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
            // Opening tag + closing tag of the same type. E.g. `<li></li>`.
            //
            needLf = false;
          }
        }
      }
    }

    result += needLf ? '>\n' : '>';

    return result
  };

  /**
   * Renderer.renderInline(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to render
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * The same as [[Renderer.render]], but for single token of `inline` type.
   **/
  Renderer.prototype.renderInline = function (tokens, options, env) {
    let result = '';
    const rules = this.rules;

    for (let i = 0, len = tokens.length; i < len; i++) {
      const type = tokens[i].type;

      if (typeof rules[type] !== 'undefined') {
        result += rules[type](tokens, i, options, env, this);
      } else {
        result += this.renderToken(tokens, i, options);
      }
    }

    return result
  };

  /** internal
   * Renderer.renderInlineAsText(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to render
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * Special kludge for image `alt` attributes to conform CommonMark spec.
   * Don't try to use it! Spec requires to show `alt` content with stripped markup,
   * instead of simple escaping.
   **/
  Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
    let result = '';

    for (let i = 0, len = tokens.length; i < len; i++) {
      switch (tokens[i].type) {
        case 'text':
          result += tokens[i].content;
          break
        case 'image':
          result += this.renderInlineAsText(tokens[i].children, options, env);
          break
        case 'html_inline':
        case 'html_block':
          result += tokens[i].content;
          break
        case 'softbreak':
        case 'hardbreak':
          result += '\n';
          break
          // all other tokens are skipped
      }
    }

    return result
  };

  /**
   * Renderer.render(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to render
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * Takes token stream and generates HTML. Probably, you will never need to call
   * this method directly.
   **/
  Renderer.prototype.render = function (tokens, options, env) {
    let result = '';
    const rules = this.rules;

    for (let i = 0, len = tokens.length; i < len; i++) {
      const type = tokens[i].type;

      if (type === 'inline') {
        result += this.renderInline(tokens[i].children, options, env);
      } else if (typeof rules[type] !== 'undefined') {
        result += rules[type](tokens, i, options, env, this);
      } else {
        result += this.renderToken(tokens, i, options, env);
      }
    }

    return result
  };

  /**
   * class Ruler
   *
   * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
   * [[MarkdownIt#inline]] to manage sequences of functions (rules):
   *
   * - keep rules in defined order
   * - assign the name to each rule
   * - enable/disable rules
   * - add/replace rules
   * - allow assign rules to additional named chains (in the same)
   * - cacheing lists of active rules
   *
   * You will not need use this class directly until write plugins. For simple
   * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
   * [[MarkdownIt.use]].
   **/

  /**
   * new Ruler()
   **/
  function Ruler () {
    // List of added rules. Each element is:
    //
    // {
    //   name: XXX,
    //   enabled: Boolean,
    //   fn: Function(),
    //   alt: [ name2, name3 ]
    // }
    //
    this.__rules__ = [];

    // Cached rule chains.
    //
    // First level - chain name, '' for default.
    // Second level - diginal anchor for fast filtering by charcodes.
    //
    this.__cache__ = null;
  }

  // Helper methods, should not be used directly

  // Find rule index by name
  //
  Ruler.prototype.__find__ = function (name) {
    for (let i = 0; i < this.__rules__.length; i++) {
      if (this.__rules__[i].name === name) {
        return i
      }
    }
    return -1
  };

  // Build rules lookup cache
  //
  Ruler.prototype.__compile__ = function () {
    const self = this;
    const chains = [''];

    // collect unique names
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return }

      rule.alt.forEach(function (altName) {
        if (chains.indexOf(altName) < 0) {
          chains.push(altName);
        }
      });
    });

    self.__cache__ = {};

    chains.forEach(function (chain) {
      self.__cache__[chain] = [];
      self.__rules__.forEach(function (rule) {
        if (!rule.enabled) { return }

        if (chain && rule.alt.indexOf(chain) < 0) { return }

        self.__cache__[chain].push(rule.fn);
      });
    });
  };

  /**
   * Ruler.at(name, fn [, options])
   * - name (String): rule name to replace.
   * - fn (Function): new rule function.
   * - options (Object): new rule options (not mandatory).
   *
   * Replace rule by name with new function & options. Throws error if name not
   * found.
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * Replace existing typographer replacement rule with new one:
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.core.ruler.at('replacements', function replace(state) {
   *   //...
   * });
   * ```
   **/
  Ruler.prototype.at = function (name, fn, options) {
    const index = this.__find__(name);
    const opt = options || {};

    if (index === -1) { throw new Error('Parser rule not found: ' + name) }

    this.__rules__[index].fn = fn;
    this.__rules__[index].alt = opt.alt || [];
    this.__cache__ = null;
  };

  /**
   * Ruler.before(beforeName, ruleName, fn [, options])
   * - beforeName (String): new rule will be added before this one.
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Add new rule to chain before one with given name. See also
   * [[Ruler.after]], [[Ruler.push]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/
  Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
    const index = this.__find__(beforeName);
    const opt = options || {};

    if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }

    this.__rules__.splice(index, 0, {
      name: ruleName,
      enabled: true,
      fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };

  /**
   * Ruler.after(afterName, ruleName, fn [, options])
   * - afterName (String): new rule will be added after this one.
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Add new rule to chain after one with given name. See also
   * [[Ruler.before]], [[Ruler.push]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.inline.ruler.after('text', 'my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/
  Ruler.prototype.after = function (afterName, ruleName, fn, options) {
    const index = this.__find__(afterName);
    const opt = options || {};

    if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }

    this.__rules__.splice(index + 1, 0, {
      name: ruleName,
      enabled: true,
      fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };

  /**
   * Ruler.push(ruleName, fn [, options])
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Push new rule to the end of chain. See also
   * [[Ruler.before]], [[Ruler.after]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.core.ruler.push('my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/
  Ruler.prototype.push = function (ruleName, fn, options) {
    const opt = options || {};

    this.__rules__.push({
      name: ruleName,
      enabled: true,
      fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };

  /**
   * Ruler.enable(list [, ignoreInvalid]) -> Array
   * - list (String|Array): list of rule names to enable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable rules with given names. If any rule name not found - throw Error.
   * Errors can be disabled by second param.
   *
   * Returns list of found rule names (if no exception happened).
   *
   * See also [[Ruler.disable]], [[Ruler.enableOnly]].
   **/
  Ruler.prototype.enable = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) { list = [list]; }

    const result = [];

    // Search by name and enable
    list.forEach(function (name) {
      const idx = this.__find__(name);

      if (idx < 0) {
        if (ignoreInvalid) { return }
        throw new Error('Rules manager: invalid rule name ' + name)
      }
      this.__rules__[idx].enabled = true;
      result.push(name);
    }, this);

    this.__cache__ = null;
    return result
  };

  /**
   * Ruler.enableOnly(list [, ignoreInvalid])
   * - list (String|Array): list of rule names to enable (whitelist).
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable rules with given names, and disable everything else. If any rule name
   * not found - throw Error. Errors can be disabled by second param.
   *
   * See also [[Ruler.disable]], [[Ruler.enable]].
   **/
  Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) { list = [list]; }

    this.__rules__.forEach(function (rule) { rule.enabled = false; });

    this.enable(list, ignoreInvalid);
  };

  /**
   * Ruler.disable(list [, ignoreInvalid]) -> Array
   * - list (String|Array): list of rule names to disable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Disable rules with given names. If any rule name not found - throw Error.
   * Errors can be disabled by second param.
   *
   * Returns list of found rule names (if no exception happened).
   *
   * See also [[Ruler.enable]], [[Ruler.enableOnly]].
   **/
  Ruler.prototype.disable = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) { list = [list]; }

    const result = [];

    // Search by name and disable
    list.forEach(function (name) {
      const idx = this.__find__(name);

      if (idx < 0) {
        if (ignoreInvalid) { return }
        throw new Error('Rules manager: invalid rule name ' + name)
      }
      this.__rules__[idx].enabled = false;
      result.push(name);
    }, this);

    this.__cache__ = null;
    return result
  };

  /**
   * Ruler.getRules(chainName) -> Array
   *
   * Return array of active functions (rules) for given chain name. It analyzes
   * rules configuration, compiles caches if not exists and returns result.
   *
   * Default chain name is `''` (empty string). It can't be skipped. That's
   * done intentionally, to keep signature monomorphic for high speed.
   **/
  Ruler.prototype.getRules = function (chainName) {
    if (this.__cache__ === null) {
      this.__compile__();
    }

    // Chain can be empty, if rules disabled. But we still have to return Array.
    return this.__cache__[chainName] || []
  };

  // Token class

  /**
   * class Token
   **/

  /**
   * new Token(type, tag, nesting)
   *
   * Create new token and fill passed properties.
   **/
  function Token (type, tag, nesting) {
    /**
     * Token#type -> String
     *
     * Type of the token (string, e.g. "paragraph_open")
     **/
    this.type     = type;

    /**
     * Token#tag -> String
     *
     * html tag name, e.g. "p"
     **/
    this.tag      = tag;

    /**
     * Token#attrs -> Array
     *
     * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
     **/
    this.attrs    = null;

    /**
     * Token#map -> Array
     *
     * Source map info. Format: `[ line_begin, line_end ]`
     **/
    this.map      = null;

    /**
     * Token#nesting -> Number
     *
     * Level change (number in {-1, 0, 1} set), where:
     *
     * -  `1` means the tag is opening
     * -  `0` means the tag is self-closing
     * - `-1` means the tag is closing
     **/
    this.nesting  = nesting;

    /**
     * Token#level -> Number
     *
     * nesting level, the same as `state.level`
     **/
    this.level    = 0;

    /**
     * Token#children -> Array
     *
     * An array of child nodes (inline and img tokens)
     **/
    this.children = null;

    /**
     * Token#content -> String
     *
     * In a case of self-closing tag (code, html, fence, etc.),
     * it has contents of this tag.
     **/
    this.content  = '';

    /**
     * Token#markup -> String
     *
     * '*' or '_' for emphasis, fence string for fence, etc.
     **/
    this.markup   = '';

    /**
     * Token#info -> String
     *
     * Additional information:
     *
     * - Info string for "fence" tokens
     * - The value "auto" for autolink "link_open" and "link_close" tokens
     * - The string value of the item marker for ordered-list "list_item_open" tokens
     **/
    this.info     = '';

    /**
     * Token#meta -> Object
     *
     * A place for plugins to store an arbitrary data
     **/
    this.meta     = null;

    /**
     * Token#block -> Boolean
     *
     * True for block-level tokens, false for inline tokens.
     * Used in renderer to calculate line breaks
     **/
    this.block    = false;

    /**
     * Token#hidden -> Boolean
     *
     * If it's true, ignore this element when rendering. Used for tight lists
     * to hide paragraphs.
     **/
    this.hidden   = false;
  }

  /**
   * Token.attrIndex(name) -> Number
   *
   * Search attribute index by name.
   **/
  Token.prototype.attrIndex = function attrIndex (name) {
    if (!this.attrs) { return -1 }

    const attrs = this.attrs;

    for (let i = 0, len = attrs.length; i < len; i++) {
      if (attrs[i][0] === name) { return i }
    }
    return -1
  };

  /**
   * Token.attrPush(attrData)
   *
   * Add `[ name, value ]` attribute to list. Init attrs if necessary
   **/
  Token.prototype.attrPush = function attrPush (attrData) {
    if (this.attrs) {
      this.attrs.push(attrData);
    } else {
      this.attrs = [attrData];
    }
  };

  /**
   * Token.attrSet(name, value)
   *
   * Set `name` attribute to `value`. Override old value if exists.
   **/
  Token.prototype.attrSet = function attrSet (name, value) {
    const idx = this.attrIndex(name);
    const attrData = [name, value];

    if (idx < 0) {
      this.attrPush(attrData);
    } else {
      this.attrs[idx] = attrData;
    }
  };

  /**
   * Token.attrGet(name)
   *
   * Get the value of attribute `name`, or null if it does not exist.
   **/
  Token.prototype.attrGet = function attrGet (name) {
    const idx = this.attrIndex(name);
    let value = null;
    if (idx >= 0) {
      value = this.attrs[idx][1];
    }
    return value
  };

  /**
   * Token.attrJoin(name, value)
   *
   * Join value to existing attribute via space. Or create new attribute if not
   * exists. Useful to operate with token classes.
   **/
  Token.prototype.attrJoin = function attrJoin (name, value) {
    const idx = this.attrIndex(name);

    if (idx < 0) {
      this.attrPush([name, value]);
    } else {
      this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
    }
  };

  // Core state object
  //


  function StateCore (src, md, env) {
    this.src = src;
    this.env = env;
    this.tokens = [];
    this.inlineMode = false;
    this.md = md; // link to parser instance
  }

  // re-export Token class to use in core rules
  StateCore.prototype.Token = Token;

  // Normalize input string

  // https://spec.commonmark.org/0.29/#line-ending
  const NEWLINES_RE  = /\r\n?|\n/g;
  const NULL_RE      = /\0/g;

  function normalize$1 (state) {
    let str;

    // Normalize newlines
    str = state.src.replace(NEWLINES_RE, '\n');

    // Replace NULL characters
    str = str.replace(NULL_RE, '\uFFFD');

    state.src = str;
  }

  function block (state) {
    let token;

    if (state.inlineMode) {
      token          = new state.Token('inline', '', 0);
      token.content  = state.src;
      token.map      = [0, 1];
      token.children = [];
      state.tokens.push(token);
    } else {
      state.md.block.parse(state.src, state.md, state.env, state.tokens);
    }
  }

  function inline (state) {
    const tokens = state.tokens;

    // Parse inlines
    for (let i = 0, l = tokens.length; i < l; i++) {
      const tok = tokens[i];
      if (tok.type === 'inline') {
        state.md.inline.parse(tok.content, state.md, state.env, tok.children);
      }
    }
  }

  // Replace link-like texts with link nodes.
  //
  // Currently restricted by `md.validateLink()` to http/https/ftp
  //


  function isLinkOpen$1 (str) {
    return /^<a[>\s]/i.test(str)
  }
  function isLinkClose$1 (str) {
    return /^<\/a\s*>/i.test(str)
  }

  function linkify$1 (state) {
    const blockTokens = state.tokens;

    if (!state.md.options.linkify) { return }

    for (let j = 0, l = blockTokens.length; j < l; j++) {
      if (blockTokens[j].type !== 'inline' ||
          !state.md.linkify.pretest(blockTokens[j].content)) {
        continue
      }

      let tokens = blockTokens[j].children;

      let htmlLinkLevel = 0;

      // We scan from the end, to keep position when new tags added.
      // Use reversed logic in links start/end match
      for (let i = tokens.length - 1; i >= 0; i--) {
        const currentToken = tokens[i];

        // Skip content of markdown links
        if (currentToken.type === 'link_close') {
          i--;
          while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
            i--;
          }
          continue
        }

        // Skip content of html tag links
        if (currentToken.type === 'html_inline') {
          if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {
            htmlLinkLevel--;
          }
          if (isLinkClose$1(currentToken.content)) {
            htmlLinkLevel++;
          }
        }
        if (htmlLinkLevel > 0) { continue }

        if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
          const text = currentToken.content;
          let links = state.md.linkify.match(text);

          // Now split string to nodes
          const nodes = [];
          let level = currentToken.level;
          let lastPos = 0;

          // forbid escape sequence at the start of the string,
          // this avoids http\://example.com/ from being linkified as
          // http:<a href="//example.com/">//example.com/</a>
          if (links.length > 0 &&
              links[0].index === 0 &&
              i > 0 &&
              tokens[i - 1].type === 'text_special') {
            links = links.slice(1);
          }

          for (let ln = 0; ln < links.length; ln++) {
            const url = links[ln].url;
            const fullUrl = state.md.normalizeLink(url);
            if (!state.md.validateLink(fullUrl)) { continue }

            let urlText = links[ln].text;

            // Linkifier might send raw hostnames like "example.com", where url
            // starts with domain name. So we prepend http:// in those cases,
            // and remove it afterwards.
            //
            if (!links[ln].schema) {
              urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
            } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
              urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
            } else {
              urlText = state.md.normalizeLinkText(urlText);
            }

            const pos = links[ln].index;

            if (pos > lastPos) {
              const token   = new state.Token('text', '', 0);
              token.content = text.slice(lastPos, pos);
              token.level   = level;
              nodes.push(token);
            }

            const token_o   = new state.Token('link_open', 'a', 1);
            token_o.attrs   = [['href', fullUrl]];
            token_o.level   = level++;
            token_o.markup  = 'linkify';
            token_o.info    = 'auto';
            nodes.push(token_o);

            const token_t   = new state.Token('text', '', 0);
            token_t.content = urlText;
            token_t.level   = level;
            nodes.push(token_t);

            const token_c   = new state.Token('link_close', 'a', -1);
            token_c.level   = --level;
            token_c.markup  = 'linkify';
            token_c.info    = 'auto';
            nodes.push(token_c);

            lastPos = links[ln].lastIndex;
          }
          if (lastPos < text.length) {
            const token   = new state.Token('text', '', 0);
            token.content = text.slice(lastPos);
            token.level   = level;
            nodes.push(token);
          }

          // replace current node
          blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
        }
      }
    }
  }

  // Simple typographic replacements
  //
  // (c) (C) → ©
  // (tm) (TM) → ™
  // (r) (R) → ®
  // +- → ±
  // ... → … (also ?.... → ?.., !.... → !..)
  // ???????? → ???, !!!!! → !!!, `,,` → `,`
  // -- → &ndash;, --- → &mdash;
  //

  // TODO:
  // - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
  // - multiplications 2 x 4 -> 2 × 4

  const RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

  // Workaround for phantomjs - need regex without /g flag,
  // or root check will fail every second time
  const SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i;

  const SCOPED_ABBR_RE = /\((c|tm|r)\)/ig;
  const SCOPED_ABBR = {
    c: '©',
    r: '®',
    tm: '™'
  };

  function replaceFn (match, name) {
    return SCOPED_ABBR[name.toLowerCase()]
  }

  function replace_scoped (inlineTokens) {
    let inside_autolink = 0;

    for (let i = inlineTokens.length - 1; i >= 0; i--) {
      const token = inlineTokens[i];

      if (token.type === 'text' && !inside_autolink) {
        token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
      }

      if (token.type === 'link_open' && token.info === 'auto') {
        inside_autolink--;
      }

      if (token.type === 'link_close' && token.info === 'auto') {
        inside_autolink++;
      }
    }
  }

  function replace_rare (inlineTokens) {
    let inside_autolink = 0;

    for (let i = inlineTokens.length - 1; i >= 0; i--) {
      const token = inlineTokens[i];

      if (token.type === 'text' && !inside_autolink) {
        if (RARE_RE.test(token.content)) {
          token.content = token.content
            .replace(/\+-/g, '±')
            // .., ..., ....... -> …
            // but ?..... & !..... -> ?.. & !..
            .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
            .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
            // em-dash
            .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
            // en-dash
            .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013')
            .replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013');
        }
      }

      if (token.type === 'link_open' && token.info === 'auto') {
        inside_autolink--;
      }

      if (token.type === 'link_close' && token.info === 'auto') {
        inside_autolink++;
      }
    }
  }

  function replace (state) {
    let blkIdx;

    if (!state.md.options.typographer) { return }

    for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
      if (state.tokens[blkIdx].type !== 'inline') { continue }

      if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
        replace_scoped(state.tokens[blkIdx].children);
      }

      if (RARE_RE.test(state.tokens[blkIdx].content)) {
        replace_rare(state.tokens[blkIdx].children);
      }
    }
  }

  // Convert straight quotation marks to typographic ones
  //


  const QUOTE_TEST_RE = /['"]/;
  const QUOTE_RE = /['"]/g;
  const APOSTROPHE = '\u2019'; /* ’ */

  function replaceAt (str, index, ch) {
    return str.slice(0, index) + ch + str.slice(index + 1)
  }

  function process_inlines (tokens, state) {
    let j;

    const stack = [];

    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];

      const thisLevel = tokens[i].level;

      for (j = stack.length - 1; j >= 0; j--) {
        if (stack[j].level <= thisLevel) { break }
      }
      stack.length = j + 1;

      if (token.type !== 'text') { continue }

      let text = token.content;
      let pos = 0;
      let max = text.length;

      /* eslint no-labels:0,block-scoped-var:0 */
      OUTER:
      while (pos < max) {
        QUOTE_RE.lastIndex = pos;
        const t = QUOTE_RE.exec(text);
        if (!t) { break }

        let canOpen = true;
        let canClose = true;
        pos = t.index + 1;
        const isSingle = (t[0] === "'");

        // Find previous character,
        // default to space if it's the beginning of the line
        //
        let lastChar = 0x20;

        if (t.index - 1 >= 0) {
          lastChar = text.charCodeAt(t.index - 1);
        } else {
          for (j = i - 1; j >= 0; j--) {
            if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20
            if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'

            lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
            break
          }
        }

        // Find next character,
        // default to space if it's the end of the line
        //
        let nextChar = 0x20;

        if (pos < max) {
          nextChar = text.charCodeAt(pos);
        } else {
          for (j = i + 1; j < tokens.length; j++) {
            if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20
            if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'

            nextChar = tokens[j].content.charCodeAt(0);
            break
          }
        }

        const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
        const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

        const isLastWhiteSpace = isWhiteSpace(lastChar);
        const isNextWhiteSpace = isWhiteSpace(nextChar);

        if (isNextWhiteSpace) {
          canOpen = false;
        } else if (isNextPunctChar) {
          if (!(isLastWhiteSpace || isLastPunctChar)) {
            canOpen = false;
          }
        }

        if (isLastWhiteSpace) {
          canClose = false;
        } else if (isLastPunctChar) {
          if (!(isNextWhiteSpace || isNextPunctChar)) {
            canClose = false;
          }
        }

        if (nextChar === 0x22 /* " */ && t[0] === '"') {
          if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
            // special case: 1"" - count first quote as an inch
            canClose = canOpen = false;
          }
        }

        if (canOpen && canClose) {
          // Replace quotes in the middle of punctuation sequence, but not
          // in the middle of the words, i.e.:
          //
          // 1. foo " bar " baz - not replaced
          // 2. foo-"-bar-"-baz - replaced
          // 3. foo"bar"baz     - not replaced
          //
          canOpen = isLastPunctChar;
          canClose = isNextPunctChar;
        }

        if (!canOpen && !canClose) {
          // middle of word
          if (isSingle) {
            token.content = replaceAt(token.content, t.index, APOSTROPHE);
          }
          continue
        }

        if (canClose) {
          // this could be a closing quote, rewind the stack to get a match
          for (j = stack.length - 1; j >= 0; j--) {
            let item = stack[j];
            if (stack[j].level < thisLevel) { break }
            if (item.single === isSingle && stack[j].level === thisLevel) {
              item = stack[j];

              let openQuote;
              let closeQuote;
              if (isSingle) {
                openQuote = state.md.options.quotes[2];
                closeQuote = state.md.options.quotes[3];
              } else {
                openQuote = state.md.options.quotes[0];
                closeQuote = state.md.options.quotes[1];
              }

              // replace token.content *before* tokens[item.token].content,
              // because, if they are pointing at the same token, replaceAt
              // could mess up indices when quote length != 1
              token.content = replaceAt(token.content, t.index, closeQuote);
              tokens[item.token].content = replaceAt(
                tokens[item.token].content, item.pos, openQuote);

              pos += closeQuote.length - 1;
              if (item.token === i) { pos += openQuote.length - 1; }

              text = token.content;
              max = text.length;

              stack.length = j;
              continue OUTER
            }
          }
        }

        if (canOpen) {
          stack.push({
            token: i,
            pos: t.index,
            single: isSingle,
            level: thisLevel
          });
        } else if (canClose && isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
      }
    }
  }

  function smartquotes (state) {
    /* eslint max-depth:0 */
    if (!state.md.options.typographer) { return }

    for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
      if (state.tokens[blkIdx].type !== 'inline' ||
          !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
        continue
      }

      process_inlines(state.tokens[blkIdx].children, state);
    }
  }

  // Join raw text tokens with the rest of the text
  //
  // This is set as a separate rule to provide an opportunity for plugins
  // to run text replacements after text join, but before escape join.
  //
  // For example, `\:)` shouldn't be replaced with an emoji.
  //

  function text_join (state) {
    let curr, last;
    const blockTokens = state.tokens;
    const l = blockTokens.length;

    for (let j = 0; j < l; j++) {
      if (blockTokens[j].type !== 'inline') continue

      const tokens = blockTokens[j].children;
      const max = tokens.length;

      for (curr = 0; curr < max; curr++) {
        if (tokens[curr].type === 'text_special') {
          tokens[curr].type = 'text';
        }
      }

      for (curr = last = 0; curr < max; curr++) {
        if (tokens[curr].type === 'text' &&
            curr + 1 < max &&
            tokens[curr + 1].type === 'text') {
          // collapse two adjacent text nodes
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) { tokens[last] = tokens[curr]; }

          last++;
        }
      }

      if (curr !== last) {
        tokens.length = last;
      }
    }
  }

  /** internal
   * class Core
   *
   * Top-level rules executor. Glues block/inline parsers and does intermediate
   * transformations.
   **/


  const _rules$2 = [
    ['normalize',      normalize$1],
    ['block',          block],
    ['inline',         inline],
    ['linkify',        linkify$1],
    ['replacements',   replace],
    ['smartquotes',    smartquotes],
    // `text_join` finds `text_special` tokens (for escape sequences)
    // and joins them with the rest of the text
    ['text_join',      text_join]
  ];

  /**
   * new Core()
   **/
  function Core () {
    /**
     * Core#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of core rules.
     **/
    this.ruler = new Ruler();

    for (let i = 0; i < _rules$2.length; i++) {
      this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
    }
  }

  /**
   * Core.process(state)
   *
   * Executes core chain rules.
   **/
  Core.prototype.process = function (state) {
    const rules = this.ruler.getRules('');

    for (let i = 0, l = rules.length; i < l; i++) {
      rules[i](state);
    }
  };

  Core.prototype.State = StateCore;

  // Parser state class


  function StateBlock (src, md, env, tokens) {
    this.src = src;

    // link to parser instance
    this.md     = md;

    this.env = env;

    //
    // Internal state vartiables
    //

    this.tokens = tokens;

    this.bMarks = [];  // line begin offsets for fast jumps
    this.eMarks = [];  // line end offsets for fast jumps
    this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)
    this.sCount = [];  // indents for each line (tabs expanded)

    // An amount of virtual spaces (tabs expanded) between beginning
    // of each line (bMarks) and real beginning of that line.
    //
    // It exists only as a hack because blockquotes override bMarks
    // losing information in the process.
    //
    // It's used only when expanding tabs, you can think about it as
    // an initial tab length, e.g. bsCount=21 applied to string `\t123`
    // means first tab should be expanded to 4-21%4 === 3 spaces.
    //
    this.bsCount = [];

    // block parser variables

    // required block content indent (for example, if we are
    // inside a list, it would be positioned after list marker)
    this.blkIndent  = 0;
    this.line       = 0; // line index in src
    this.lineMax    = 0; // lines count
    this.tight      = false;  // loose/tight mode for lists
    this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)
    this.listIndent = -1; // indent of the current list block (-1 if there isn't any)

    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
    // used in lists to determine if they interrupt a paragraph
    this.parentType = 'root';

    this.level = 0;

    // Create caches
    // Generate markers.
    const s = this.src;

    for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {
      const ch = s.charCodeAt(pos);

      if (!indent_found) {
        if (isSpace(ch)) {
          indent++;

          if (ch === 0x09) {
            offset += 4 - offset % 4;
          } else {
            offset++;
          }
          continue
        } else {
          indent_found = true;
        }
      }

      if (ch === 0x0A || pos === len - 1) {
        if (ch !== 0x0A) { pos++; }
        this.bMarks.push(start);
        this.eMarks.push(pos);
        this.tShift.push(indent);
        this.sCount.push(offset);
        this.bsCount.push(0);

        indent_found = false;
        indent = 0;
        offset = 0;
        start = pos + 1;
      }
    }

    // Push fake entry to simplify cache bounds checks
    this.bMarks.push(s.length);
    this.eMarks.push(s.length);
    this.tShift.push(0);
    this.sCount.push(0);
    this.bsCount.push(0);

    this.lineMax = this.bMarks.length - 1; // don't count last fake line
  }

  // Push new token to "stream".
  //
  StateBlock.prototype.push = function (type, tag, nesting) {
    const token = new Token(type, tag, nesting);
    token.block = true;

    if (nesting < 0) this.level--; // closing tag
    token.level = this.level;
    if (nesting > 0) this.level++; // opening tag

    this.tokens.push(token);
    return token
  };

  StateBlock.prototype.isEmpty = function isEmpty (line) {
    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]
  };

  StateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {
    for (let max = this.lineMax; from < max; from++) {
      if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
        break
      }
    }
    return from
  };

  // Skip spaces from given position.
  StateBlock.prototype.skipSpaces = function skipSpaces (pos) {
    for (let max = this.src.length; pos < max; pos++) {
      const ch = this.src.charCodeAt(pos);
      if (!isSpace(ch)) { break }
    }
    return pos
  };

  // Skip spaces from given position in reverse.
  StateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {
    if (pos <= min) { return pos }

    while (pos > min) {
      if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }
    }
    return pos
  };

  // Skip char codes from given position
  StateBlock.prototype.skipChars = function skipChars (pos, code) {
    for (let max = this.src.length; pos < max; pos++) {
      if (this.src.charCodeAt(pos) !== code) { break }
    }
    return pos
  };

  // Skip char codes reverse from given position - 1
  StateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {
    if (pos <= min) { return pos }

    while (pos > min) {
      if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }
    }
    return pos
  };

  // cut lines range from source.
  StateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {
    if (begin >= end) {
      return ''
    }

    const queue = new Array(end - begin);

    for (let i = 0, line = begin; line < end; line++, i++) {
      let lineIndent = 0;
      const lineStart = this.bMarks[line];
      let first = lineStart;
      let last;

      if (line + 1 < end || keepLastLF) {
        // No need for bounds check because we have fake entry on tail.
        last = this.eMarks[line] + 1;
      } else {
        last = this.eMarks[line];
      }

      while (first < last && lineIndent < indent) {
        const ch = this.src.charCodeAt(first);

        if (isSpace(ch)) {
          if (ch === 0x09) {
            lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
          } else {
            lineIndent++;
          }
        } else if (first - lineStart < this.tShift[line]) {
          // patched tShift masked characters to look like spaces (blockquotes, list markers)
          lineIndent++;
        } else {
          break
        }

        first++;
      }

      if (lineIndent > indent) {
        // partially expanding tabs in code blocks, e.g '\t\tfoobar'
        // with indent=2 becomes '  \tfoobar'
        queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
      } else {
        queue[i] = this.src.slice(first, last);
      }
    }

    return queue.join('')
  };

  // re-export Token class to use in block rules
  StateBlock.prototype.Token = Token;

  // GFM table, https://github.github.com/gfm/#tables-extension-


  // Limit the amount of empty autocompleted cells in a table,
  // see https://github.com/markdown-it/markdown-it/issues/1000,
  //
  // Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.
  // We set it to 65k, which can expand user input by a factor of x370
  // (256x256 square is 1.8kB expanded into 650kB).
  const MAX_AUTOCOMPLETED_CELLS = 0x10000;

  function getLine (state, line) {
    const pos = state.bMarks[line] + state.tShift[line];
    const max = state.eMarks[line];

    return state.src.slice(pos, max)
  }

  function escapedSplit (str) {
    const result = [];
    const max = str.length;

    let pos = 0;
    let ch = str.charCodeAt(pos);
    let isEscaped = false;
    let lastPos = 0;
    let current = '';

    while (pos < max) {
      if (ch === 0x7c/* | */) {
        if (!isEscaped) {
          // pipe separating cells, '|'
          result.push(current + str.substring(lastPos, pos));
          current = '';
          lastPos = pos + 1;
        } else {
          // escaped pipe, '\|'
          current += str.substring(lastPos, pos - 1);
          lastPos = pos;
        }
      }

      isEscaped = (ch === 0x5c/* \ */);
      pos++;

      ch = str.charCodeAt(pos);
    }

    result.push(current + str.substring(lastPos));

    return result
  }

  function table (state, startLine, endLine, silent) {
    // should have at least two lines
    if (startLine + 2 > endLine) { return false }

    let nextLine = startLine + 1;

    if (state.sCount[nextLine] < state.blkIndent) { return false }

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }

    // first character of the second line should be '|', '-', ':',
    // and no other characters are allowed but spaces;
    // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

    let pos = state.bMarks[nextLine] + state.tShift[nextLine];
    if (pos >= state.eMarks[nextLine]) { return false }

    const firstCh = state.src.charCodeAt(pos++);
    if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }

    if (pos >= state.eMarks[nextLine]) { return false }

    const secondCh = state.src.charCodeAt(pos++);
    if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {
      return false
    }

    // if first character is '-', then second character must not be a space
    // (due to parsing ambiguity with list)
    if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }

    while (pos < state.eMarks[nextLine]) {
      const ch = state.src.charCodeAt(pos);

      if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }

      pos++;
    }

    let lineText = getLine(state, startLine + 1);
    let columns = lineText.split('|');
    const aligns = [];
    for (let i = 0; i < columns.length; i++) {
      const t = columns[i].trim();
      if (!t) {
        // allow empty columns before and after table, but not in between columns;
        // e.g. allow ` |---| `, disallow ` ---||--- `
        if (i === 0 || i === columns.length - 1) {
          continue
        } else {
          return false
        }
      }

      if (!/^:?-+:?$/.test(t)) { return false }
      if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
        aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
      } else if (t.charCodeAt(0) === 0x3A/* : */) {
        aligns.push('left');
      } else {
        aligns.push('');
      }
    }

    lineText = getLine(state, startLine).trim();
    if (lineText.indexOf('|') === -1) { return false }
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === '') columns.shift();
    if (columns.length && columns[columns.length - 1] === '') columns.pop();

    // header row will define an amount of columns in the entire table,
    // and align row should be exactly the same (the rest of the rows can differ)
    const columnCount = columns.length;
    if (columnCount === 0 || columnCount !== aligns.length) { return false }

    if (silent) { return true }

    const oldParentType = state.parentType;
    state.parentType = 'table';

    // use 'blockquote' lists for termination because it's
    // the most similar to tables
    const terminatorRules = state.md.block.ruler.getRules('blockquote');

    const token_to = state.push('table_open', 'table', 1);
    const tableLines = [startLine, 0];
    token_to.map = tableLines;

    const token_tho = state.push('thead_open', 'thead', 1);
    token_tho.map = [startLine, startLine + 1];

    const token_htro = state.push('tr_open', 'tr', 1);
    token_htro.map = [startLine, startLine + 1];

    for (let i = 0; i < columns.length; i++) {
      const token_ho = state.push('th_open', 'th', 1);
      if (aligns[i]) {
        token_ho.attrs  = [['style', 'text-align:' + aligns[i]]];
      }

      const token_il = state.push('inline', '', 0);
      token_il.content  = columns[i].trim();
      token_il.children = [];

      state.push('th_close', 'th', -1);
    }

    state.push('tr_close', 'tr', -1);
    state.push('thead_close', 'thead', -1);

    let tbodyLines;
    let autocompletedCells = 0;

    for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) { break }

      let terminate = false;
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break
        }
      }

      if (terminate) { break }
      lineText = getLine(state, nextLine).trim();
      if (!lineText) { break }
      if (state.sCount[nextLine] - state.blkIndent >= 4) { break }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === '') columns.shift();
      if (columns.length && columns[columns.length - 1] === '') columns.pop();

      // note: autocomplete count can be negative if user specifies more columns than header,
      // but that does not affect intended use (which is limiting expansion)
      autocompletedCells += columnCount - columns.length;
      if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }

      if (nextLine === startLine + 2) {
        const token_tbo = state.push('tbody_open', 'tbody', 1);
        token_tbo.map = tbodyLines = [startLine + 2, 0];
      }

      const token_tro = state.push('tr_open', 'tr', 1);
      token_tro.map = [nextLine, nextLine + 1];

      for (let i = 0; i < columnCount; i++) {
        const token_tdo = state.push('td_open', 'td', 1);
        if (aligns[i]) {
          token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]];
        }

        const token_il = state.push('inline', '', 0);
        token_il.content  = columns[i] ? columns[i].trim() : '';
        token_il.children = [];

        state.push('td_close', 'td', -1);
      }
      state.push('tr_close', 'tr', -1);
    }

    if (tbodyLines) {
      state.push('tbody_close', 'tbody', -1);
      tbodyLines[1] = nextLine;
    }

    state.push('table_close', 'table', -1);
    tableLines[1] = nextLine;

    state.parentType = oldParentType;
    state.line = nextLine;
    return true
  }

  // Code block (4 spaces padded)

  function code (state, startLine, endLine/*, silent */) {
    if (state.sCount[startLine] - state.blkIndent < 4) { return false }

    let nextLine = startLine + 1;
    let last = nextLine;

    while (nextLine < endLine) {
      if (state.isEmpty(nextLine)) {
        nextLine++;
        continue
      }

      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        nextLine++;
        last = nextLine;
        continue
      }
      break
    }

    state.line = last;

    const token   = state.push('code_block', 'code', 0);
    token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\n';
    token.map     = [startLine, state.line];

    return true
  }

  // fences (``` lang, ~~~ lang)

  function fence (state, startLine, endLine, silent) {
    let pos = state.bMarks[startLine] + state.tShift[startLine];
    let max = state.eMarks[startLine];

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    if (pos + 3 > max) { return false }

    const marker = state.src.charCodeAt(pos);

    if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
      return false
    }

    // scan marker length
    let mem = pos;
    pos = state.skipChars(pos, marker);

    let len = pos - mem;

    if (len < 3) { return false }

    const markup = state.src.slice(mem, pos);
    const params = state.src.slice(pos, max);

    if (marker === 0x60 /* ` */) {
      if (params.indexOf(String.fromCharCode(marker)) >= 0) {
        return false
      }
    }

    // Since start is found, we can report success here in validation mode
    if (silent) { return true }

    // search end of block
    let nextLine = startLine;
    let haveEndMarker = false;

    for (;;) {
      nextLine++;
      if (nextLine >= endLine) {
        // unclosed block should be autoclosed by end of document.
        // also block seems to be autoclosed by end of parent
        break
      }

      pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos < max && state.sCount[nextLine] < state.blkIndent) {
        // non-empty line with negative indent should stop the list:
        // - ```
        //  test
        break
      }

      if (state.src.charCodeAt(pos) !== marker) { continue }

      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        // closing fence should be indented less than 4 spaces
        continue
      }

      pos = state.skipChars(pos, marker);

      // closing code fence must be at least as long as the opening one
      if (pos - mem < len) { continue }

      // make sure tail has spaces only
      pos = state.skipSpaces(pos);

      if (pos < max) { continue }

      haveEndMarker = true;
      // found!
      break
    }

    // If a fence has heading spaces, they should be removed from its inner block
    len = state.sCount[startLine];

    state.line = nextLine + (haveEndMarker ? 1 : 0);

    const token   = state.push('fence', 'code', 0);
    token.info    = params;
    token.content = state.getLines(startLine + 1, nextLine, len, true);
    token.markup  = markup;
    token.map     = [startLine, state.line];

    return true
  }

  // Block quotes


  function blockquote (state, startLine, endLine, silent) {
    let pos = state.bMarks[startLine] + state.tShift[startLine];
    let max = state.eMarks[startLine];

    const oldLineMax = state.lineMax;

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    // check the block quote marker
    if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }

    // we know that it's going to be a valid blockquote,
    // so no point trying to find the end of it in silent mode
    if (silent) { return true }

    const oldBMarks  = [];
    const oldBSCount = [];
    const oldSCount  = [];
    const oldTShift  = [];

    const terminatorRules = state.md.block.ruler.getRules('blockquote');

    const oldParentType = state.parentType;
    state.parentType = 'blockquote';
    let lastLineEmpty = false;
    let nextLine;

    // Search the end of the block
    //
    // Block ends with either:
    //  1. an empty line outside:
    //     ```
    //     > test
    //
    //     ```
    //  2. an empty line inside:
    //     ```
    //     >
    //     test
    //     ```
    //  3. another tag:
    //     ```
    //     > test
    //      - - -
    //     ```
    for (nextLine = startLine; nextLine < endLine; nextLine++) {
      // check if it's outdented, i.e. it's inside list item and indented
      // less than said list item:
      //
      // ```
      // 1. anything
      //    > current blockquote
      // 2. checking this line
      // ```
      const isOutdented = state.sCount[nextLine] < state.blkIndent;

      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos >= max) {
        // Case 1: line is not inside the blockquote, and this line is empty.
        break
      }

      if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {
        // This line is inside the blockquote.

        // set offset past spaces and ">"
        let initial = state.sCount[nextLine] + 1;
        let spaceAfterMarker;
        let adjustTab;

        // skip one optional space after '>'
        if (state.src.charCodeAt(pos) === 0x20 /* space */) {
          // ' >   test '
          //     ^ -- position start of line here:
          pos++;
          initial++;
          adjustTab = false;
          spaceAfterMarker = true;
        } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
          spaceAfterMarker = true;

          if ((state.bsCount[nextLine] + initial) % 4 === 3) {
            // '  >\t  test '
            //       ^ -- position start of line here (tab has width===1)
            pos++;
            initial++;
            adjustTab = false;
          } else {
            // ' >\t  test '
            //    ^ -- position start of line here + shift bsCount slightly
            //         to make extra space appear
            adjustTab = true;
          }
        } else {
          spaceAfterMarker = false;
        }

        let offset = initial;
        oldBMarks.push(state.bMarks[nextLine]);
        state.bMarks[nextLine] = pos;

        while (pos < max) {
          const ch = state.src.charCodeAt(pos);

          if (isSpace(ch)) {
            if (ch === 0x09) {
              offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
            } else {
              offset++;
            }
          } else {
            break
          }

          pos++;
        }

        lastLineEmpty = pos >= max;

        oldBSCount.push(state.bsCount[nextLine]);
        state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);

        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] = offset - initial;

        oldTShift.push(state.tShift[nextLine]);
        state.tShift[nextLine] = pos - state.bMarks[nextLine];
        continue
      }

      // Case 2: line is not inside the blockquote, and the last line was empty.
      if (lastLineEmpty) { break }

      // Case 3: another tag found.
      let terminate = false;
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break
        }
      }

      if (terminate) {
        // Quirk to enforce "hard termination mode" for paragraphs;
        // normally if you call `tokenize(state, startLine, nextLine)`,
        // paragraphs will look below nextLine for paragraph continuation,
        // but if blockquote is terminated by another tag, they shouldn't
        state.lineMax = nextLine;

        if (state.blkIndent !== 0) {
          // state.blkIndent was non-zero, we now set it to zero,
          // so we need to re-calculate all offsets to appear as
          // if indent wasn't changed
          oldBMarks.push(state.bMarks[nextLine]);
          oldBSCount.push(state.bsCount[nextLine]);
          oldTShift.push(state.tShift[nextLine]);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] -= state.blkIndent;
        }

        break
      }

      oldBMarks.push(state.bMarks[nextLine]);
      oldBSCount.push(state.bsCount[nextLine]);
      oldTShift.push(state.tShift[nextLine]);
      oldSCount.push(state.sCount[nextLine]);

      // A negative indentation means that this is a paragraph continuation
      //
      state.sCount[nextLine] = -1;
    }

    const oldIndent = state.blkIndent;
    state.blkIndent = 0;

    const token_o  = state.push('blockquote_open', 'blockquote', 1);
    token_o.markup = '>';
    const lines = [startLine, 0];
    token_o.map    = lines;

    state.md.block.tokenize(state, startLine, nextLine);

    const token_c  = state.push('blockquote_close', 'blockquote', -1);
    token_c.markup = '>';

    state.lineMax = oldLineMax;
    state.parentType = oldParentType;
    lines[1] = state.line;

    // Restore original tShift; this might not be necessary since the parser
    // has already been here, but just to make sure we can do that.
    for (let i = 0; i < oldTShift.length; i++) {
      state.bMarks[i + startLine] = oldBMarks[i];
      state.tShift[i + startLine] = oldTShift[i];
      state.sCount[i + startLine] = oldSCount[i];
      state.bsCount[i + startLine] = oldBSCount[i];
    }
    state.blkIndent = oldIndent;

    return true
  }

  // Horizontal rule


  function hr (state, startLine, endLine, silent) {
    const max = state.eMarks[startLine];
    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    let pos = state.bMarks[startLine] + state.tShift[startLine];
    const marker = state.src.charCodeAt(pos++);

    // Check hr marker
    if (marker !== 0x2A/* * */ &&
        marker !== 0x2D/* - */ &&
        marker !== 0x5F/* _ */) {
      return false
    }

    // markers can be mixed with spaces, but there should be at least 3 of them

    let cnt = 1;
    while (pos < max) {
      const ch = state.src.charCodeAt(pos++);
      if (ch !== marker && !isSpace(ch)) { return false }
      if (ch === marker) { cnt++; }
    }

    if (cnt < 3) { return false }

    if (silent) { return true }

    state.line = startLine + 1;

    const token  = state.push('hr', 'hr', 0);
    token.map    = [startLine, state.line];
    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));

    return true
  }

  // Lists


  // Search `[-+*][\n ]`, returns next pos after marker on success
  // or -1 on fail.
  function skipBulletListMarker (state, startLine) {
    const max = state.eMarks[startLine];
    let pos = state.bMarks[startLine] + state.tShift[startLine];

    const marker = state.src.charCodeAt(pos++);
    // Check bullet
    if (marker !== 0x2A/* * */ &&
        marker !== 0x2D/* - */ &&
        marker !== 0x2B/* + */) {
      return -1
    }

    if (pos < max) {
      const ch = state.src.charCodeAt(pos);

      if (!isSpace(ch)) {
        // " -test " - is not a list item
        return -1
      }
    }

    return pos
  }

  // Search `\d+[.)][\n ]`, returns next pos after marker on success
  // or -1 on fail.
  function skipOrderedListMarker (state, startLine) {
    const start = state.bMarks[startLine] + state.tShift[startLine];
    const max = state.eMarks[startLine];
    let pos = start;

    // List marker should have at least 2 chars (digit + dot)
    if (pos + 1 >= max) { return -1 }

    let ch = state.src.charCodeAt(pos++);

    if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }

    for (;;) {
      // EOL -> fail
      if (pos >= max) { return -1 }

      ch = state.src.charCodeAt(pos++);

      if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {
        // List marker should have no more than 9 digits
        // (prevents integer overflow in browsers)
        if (pos - start >= 10) { return -1 }

        continue
      }

      // found valid marker
      if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
        break
      }

      return -1
    }

    if (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (!isSpace(ch)) {
        // " 1.test " - is not a list item
        return -1
      }
    }
    return pos
  }

  function markTightParagraphs (state, idx) {
    const level = state.level + 2;

    for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
      if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
        state.tokens[i + 2].hidden = true;
        state.tokens[i].hidden = true;
        i += 2;
      }
    }
  }

  function list (state, startLine, endLine, silent) {
    let max, pos, start, token;
    let nextLine = startLine;
    let tight = true;

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }

    // Special case:
    //  - item 1
    //   - item 2
    //    - item 3
    //     - item 4
    //      - this one is a paragraph continuation
    if (state.listIndent >= 0 &&
        state.sCount[nextLine] - state.listIndent >= 4 &&
        state.sCount[nextLine] < state.blkIndent) {
      return false
    }

    let isTerminatingParagraph = false;

    // limit conditions when list can interrupt
    // a paragraph (validation mode only)
    if (silent && state.parentType === 'paragraph') {
      // Next list item should still terminate previous list item;
      //
      // This code can fail if plugins use blkIndent as well as lists,
      // but I hope the spec gets fixed long before that happens.
      //
      if (state.sCount[nextLine] >= state.blkIndent) {
        isTerminatingParagraph = true;
      }
    }

    // Detect list type and position after marker
    let isOrdered;
    let markerValue;
    let posAfterMarker;
    if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {
      isOrdered = true;
      start = state.bMarks[nextLine] + state.tShift[nextLine];
      markerValue = Number(state.src.slice(start, posAfterMarker - 1));

      // If we're starting a new ordered list right after
      // a paragraph, it should start with 1.
      if (isTerminatingParagraph && markerValue !== 1) return false
    } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {
      isOrdered = false;
    } else {
      return false
    }

    // If we're starting a new unordered list right after
    // a paragraph, first line should not be empty.
    if (isTerminatingParagraph) {
      if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false
    }

    // For validation mode we can terminate immediately
    if (silent) { return true }

    // We should terminate list on style change. Remember first one to compare.
    const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

    // Start list
    const listTokIdx = state.tokens.length;

    if (isOrdered) {
      token       = state.push('ordered_list_open', 'ol', 1);
      if (markerValue !== 1) {
        token.attrs = [['start', markerValue]];
      }
    } else {
      token       = state.push('bullet_list_open', 'ul', 1);
    }

    const listLines = [nextLine, 0];
    token.map    = listLines;
    token.markup = String.fromCharCode(markerCharCode);

    //
    // Iterate list items
    //

    let prevEmptyEnd = false;
    const terminatorRules = state.md.block.ruler.getRules('list');

    const oldParentType = state.parentType;
    state.parentType = 'list';

    while (nextLine < endLine) {
      pos = posAfterMarker;
      max = state.eMarks[nextLine];

      const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);
      let offset = initial;

      while (pos < max) {
        const ch = state.src.charCodeAt(pos);

        if (ch === 0x09) {
          offset += 4 - (offset + state.bsCount[nextLine]) % 4;
        } else if (ch === 0x20) {
          offset++;
        } else {
          break
        }

        pos++;
      }

      const contentStart = pos;
      let indentAfterMarker;

      if (contentStart >= max) {
        // trimming space in "-    \n  3" case, indent is 1 here
        indentAfterMarker = 1;
      } else {
        indentAfterMarker = offset - initial;
      }

      // If we have more than 4 spaces, the indent is 1
      // (the rest is just indented code block)
      if (indentAfterMarker > 4) { indentAfterMarker = 1; }

      // "  -  test"
      //  ^^^^^ - calculating total length of this thing
      const indent = initial + indentAfterMarker;

      // Run subparser & write tokens
      token        = state.push('list_item_open', 'li', 1);
      token.markup = String.fromCharCode(markerCharCode);
      const itemLines = [nextLine, 0];
      token.map    = itemLines;
      if (isOrdered) {
        token.info = state.src.slice(start, posAfterMarker - 1);
      }

      // change current state, then restore it after parser subcall
      const oldTight = state.tight;
      const oldTShift = state.tShift[nextLine];
      const oldSCount = state.sCount[nextLine];

      //  - example list
      // ^ listIndent position will be here
      //   ^ blkIndent position will be here
      //
      const oldListIndent = state.listIndent;
      state.listIndent = state.blkIndent;
      state.blkIndent = indent;

      state.tight = true;
      state.tShift[nextLine] = contentStart - state.bMarks[nextLine];
      state.sCount[nextLine] = offset;

      if (contentStart >= max && state.isEmpty(nextLine + 1)) {
        // workaround for this case
        // (list item is empty, list terminates before "foo"):
        // ~~~~~~~~
        //   -
        //
        //     foo
        // ~~~~~~~~
        state.line = Math.min(state.line + 2, endLine);
      } else {
        state.md.block.tokenize(state, nextLine, endLine, true);
      }

      // If any of list item is tight, mark list as tight
      if (!state.tight || prevEmptyEnd) {
        tight = false;
      }
      // Item become loose if finish with empty line,
      // but we should filter last element, because it means list finish
      prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1);

      state.blkIndent = state.listIndent;
      state.listIndent = oldListIndent;
      state.tShift[nextLine] = oldTShift;
      state.sCount[nextLine] = oldSCount;
      state.tight = oldTight;

      token        = state.push('list_item_close', 'li', -1);
      token.markup = String.fromCharCode(markerCharCode);

      nextLine = state.line;
      itemLines[1] = nextLine;

      if (nextLine >= endLine) { break }

      //
      // Try to check if list is terminated or continued.
      //
      if (state.sCount[nextLine] < state.blkIndent) { break }

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[nextLine] - state.blkIndent >= 4) { break }

      // fail if terminating block found
      let terminate = false;
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break
        }
      }
      if (terminate) { break }

      // fail if list has another type
      if (isOrdered) {
        posAfterMarker = skipOrderedListMarker(state, nextLine);
        if (posAfterMarker < 0) { break }
        start = state.bMarks[nextLine] + state.tShift[nextLine];
      } else {
        posAfterMarker = skipBulletListMarker(state, nextLine);
        if (posAfterMarker < 0) { break }
      }

      if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }
    }

    // Finalize list
    if (isOrdered) {
      token = state.push('ordered_list_close', 'ol', -1);
    } else {
      token = state.push('bullet_list_close', 'ul', -1);
    }
    token.markup = String.fromCharCode(markerCharCode);

    listLines[1] = nextLine;
    state.line = nextLine;

    state.parentType = oldParentType;

    // mark paragraphs tight if needed
    if (tight) {
      markTightParagraphs(state, listTokIdx);
    }

    return true
  }

  function reference (state, startLine, _endLine, silent) {
    let pos = state.bMarks[startLine] + state.tShift[startLine];
    let max = state.eMarks[startLine];
    let nextLine = startLine + 1;

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }

    function getNextLine (nextLine) {
      const endLine = state.lineMax;

      if (nextLine >= endLine || state.isEmpty(nextLine)) {
        // empty line or end of input
        return null
      }

      let isContinuation = false;

      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true; }

      // quirk for blockquotes, this line should already be checked by that rule
      if (state.sCount[nextLine] < 0) { isContinuation = true; }

      if (!isContinuation) {
        const terminatorRules = state.md.block.ruler.getRules('reference');
        const oldParentType = state.parentType;
        state.parentType = 'reference';

        // Some tags can terminate paragraph without empty line.
        let terminate = false;
        for (let i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break
          }
        }

        state.parentType = oldParentType;
        if (terminate) {
          // terminated by another block
          return null
        }
      }

      const pos = state.bMarks[nextLine] + state.tShift[nextLine];
      const max = state.eMarks[nextLine];

      // max + 1 explicitly includes the newline
      return state.src.slice(pos, max + 1)
    }

    let str = state.src.slice(pos, max + 1);

    max = str.length;
    let labelEnd = -1;

    for (pos = 1; pos < max; pos++) {
      const ch = str.charCodeAt(pos);
      if (ch === 0x5B /* [ */) {
        return false
      } else if (ch === 0x5D /* ] */) {
        labelEnd = pos;
        break
      } else if (ch === 0x0A /* \n */) {
        const lineContent = getNextLine(nextLine);
        if (lineContent !== null) {
          str += lineContent;
          max = str.length;
          nextLine++;
        }
      } else if (ch === 0x5C /* \ */) {
        pos++;
        if (pos < max && str.charCodeAt(pos) === 0x0A) {
          const lineContent = getNextLine(nextLine);
          if (lineContent !== null) {
            str += lineContent;
            max = str.length;
            nextLine++;
          }
        }
      }
    }

    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }

    // [label]:   destination   'title'
    //         ^^^ skip optional whitespace here
    for (pos = labelEnd + 2; pos < max; pos++) {
      const ch = str.charCodeAt(pos);
      if (ch === 0x0A) {
        const lineContent = getNextLine(nextLine);
        if (lineContent !== null) {
          str += lineContent;
          max = str.length;
          nextLine++;
        }
      } else if (isSpace(ch)) ; else {
        break
      }
    }

    // [label]:   destination   'title'
    //            ^^^^^^^^^^^ parse this
    const destRes = state.md.helpers.parseLinkDestination(str, pos, max);
    if (!destRes.ok) { return false }

    const href = state.md.normalizeLink(destRes.str);
    if (!state.md.validateLink(href)) { return false }

    pos = destRes.pos;

    // save cursor state, we could require to rollback later
    const destEndPos = pos;
    const destEndLineNo = nextLine;

    // [label]:   destination   'title'
    //                       ^^^ skipping those spaces
    const start = pos;
    for (; pos < max; pos++) {
      const ch = str.charCodeAt(pos);
      if (ch === 0x0A) {
        const lineContent = getNextLine(nextLine);
        if (lineContent !== null) {
          str += lineContent;
          max = str.length;
          nextLine++;
        }
      } else if (isSpace(ch)) ; else {
        break
      }
    }

    // [label]:   destination   'title'
    //                          ^^^^^^^ parse this
    let titleRes = state.md.helpers.parseLinkTitle(str, pos, max);
    while (titleRes.can_continue) {
      const lineContent = getNextLine(nextLine);
      if (lineContent === null) break
      str += lineContent;
      pos = max;
      max = str.length;
      nextLine++;
      titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes);
    }
    let title;

    if (pos < max && start !== pos && titleRes.ok) {
      title = titleRes.str;
      pos = titleRes.pos;
    } else {
      title = '';
      pos = destEndPos;
      nextLine = destEndLineNo;
    }

    // skip trailing spaces until the rest of the line
    while (pos < max) {
      const ch = str.charCodeAt(pos);
      if (!isSpace(ch)) { break }
      pos++;
    }

    if (pos < max && str.charCodeAt(pos) !== 0x0A) {
      if (title) {
        // garbage at the end of the line after title,
        // but it could still be a valid reference if we roll back
        title = '';
        pos = destEndPos;
        nextLine = destEndLineNo;
        while (pos < max) {
          const ch = str.charCodeAt(pos);
          if (!isSpace(ch)) { break }
          pos++;
        }
      }
    }

    if (pos < max && str.charCodeAt(pos) !== 0x0A) {
      // garbage at the end of the line
      return false
    }

    const label = normalizeReference(str.slice(1, labelEnd));
    if (!label) {
      // CommonMark 0.20 disallows empty labels
      return false
    }

    // Reference can not terminate anything. This check is for safety only.
    /* istanbul ignore if */
    if (silent) { return true }

    if (typeof state.env.references === 'undefined') {
      state.env.references = {};
    }
    if (typeof state.env.references[label] === 'undefined') {
      state.env.references[label] = { title, href };
    }

    state.line = nextLine;
    return true
  }

  // List of valid html blocks names, according to commonmark spec
  // https://spec.commonmark.org/0.30/#html-blocks

  var block_names = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'search',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
  ];

  // Regexps to match html elements

  const attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';

  const unquoted      = '[^"\'=<>`\\x00-\\x20]+';
  const single_quoted = "'[^']*'";
  const double_quoted = '"[^"]*"';

  const attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';

  const attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';

  const open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';

  const close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
  const comment$1     = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->';
  const processing  = '<[?][\\s\\S]*?[?]>';
  const declaration = '<![A-Za-z][^>]*>';
  const cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

  const HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment$1 +
                          '|' + processing + '|' + declaration + '|' + cdata + ')');
  const HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');

  // HTML block


  // An array of opening and corresponding closing sequences for html tags,
  // last argument defines whether it can terminate a paragraph or not
  //
  const HTML_SEQUENCES = [
    [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
    [/^<!--/,        /-->/,   true],
    [/^<\?/,         /\?>/,   true],
    [/^<![A-Z]/,     />/,     true],
    [/^<!\[CDATA\[/, /\]\]>/, true],
    [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true],
    [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false]
  ];

  function html_block (state, startLine, endLine, silent) {
    let pos = state.bMarks[startLine] + state.tShift[startLine];
    let max = state.eMarks[startLine];

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    if (!state.md.options.html) { return false }

    if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }

    let lineText = state.src.slice(pos, max);

    let i = 0;
    for (; i < HTML_SEQUENCES.length; i++) {
      if (HTML_SEQUENCES[i][0].test(lineText)) { break }
    }
    if (i === HTML_SEQUENCES.length) { return false }

    if (silent) {
      // true if this sequence can be a terminator, false otherwise
      return HTML_SEQUENCES[i][2]
    }

    let nextLine = startLine + 1;

    // If we are here - we detected HTML block.
    // Let's roll down till block end.
    if (!HTML_SEQUENCES[i][1].test(lineText)) {
      for (; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) { break }

        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
        lineText = state.src.slice(pos, max);

        if (HTML_SEQUENCES[i][1].test(lineText)) {
          if (lineText.length !== 0) { nextLine++; }
          break
        }
      }
    }

    state.line = nextLine;

    const token   = state.push('html_block', '', 0);
    token.map     = [startLine, nextLine];
    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);

    return true
  }

  // heading (#, ##, ...)


  function heading (state, startLine, endLine, silent) {
    let pos = state.bMarks[startLine] + state.tShift[startLine];
    let max = state.eMarks[startLine];

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    let ch  = state.src.charCodeAt(pos);

    if (ch !== 0x23/* # */ || pos >= max) { return false }

    // count heading level
    let level = 1;
    ch = state.src.charCodeAt(++pos);
    while (ch === 0x23/* # */ && pos < max && level <= 6) {
      level++;
      ch = state.src.charCodeAt(++pos);
    }

    if (level > 6 || (pos < max && !isSpace(ch))) { return false }

    if (silent) { return true }

    // Let's cut tails like '    ###  ' from the end of string

    max = state.skipSpacesBack(max, pos);
    const tmp = state.skipCharsBack(max, 0x23, pos); // #
    if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
      max = tmp;
    }

    state.line = startLine + 1;

    const token_o  = state.push('heading_open', 'h' + String(level), 1);
    token_o.markup = '########'.slice(0, level);
    token_o.map    = [startLine, state.line];

    const token_i    = state.push('inline', '', 0);
    token_i.content  = state.src.slice(pos, max).trim();
    token_i.map      = [startLine, state.line];
    token_i.children = [];

    const token_c  = state.push('heading_close', 'h' + String(level), -1);
    token_c.markup = '########'.slice(0, level);

    return true
  }

  // lheading (---, ===)

  function lheading (state, startLine, endLine/*, silent */) {
    const terminatorRules = state.md.block.ruler.getRules('paragraph');

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[startLine] - state.blkIndent >= 4) { return false }

    const oldParentType = state.parentType;
    state.parentType = 'paragraph'; // use paragraph to match terminatorRules

    // jump line-by-line until empty one or EOF
    let level = 0;
    let marker;
    let nextLine = startLine + 1;

    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) { continue }

      //
      // Check for underline in setext header
      //
      if (state.sCount[nextLine] >= state.blkIndent) {
        let pos = state.bMarks[nextLine] + state.tShift[nextLine];
        const max = state.eMarks[nextLine];

        if (pos < max) {
          marker = state.src.charCodeAt(pos);

          if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
            pos = state.skipChars(pos, marker);
            pos = state.skipSpaces(pos);

            if (pos >= max) {
              level = (marker === 0x3D/* = */ ? 1 : 2);
              break
            }
          }
        }
      }

      // quirk for blockquotes, this line should already be checked by that rule
      if (state.sCount[nextLine] < 0) { continue }

      // Some tags can terminate paragraph without empty line.
      let terminate = false;
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break
        }
      }
      if (terminate) { break }
    }

    if (!level) {
      // Didn't find valid underline
      return false
    }

    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

    state.line = nextLine + 1;

    const token_o    = state.push('heading_open', 'h' + String(level), 1);
    token_o.markup   = String.fromCharCode(marker);
    token_o.map      = [startLine, state.line];

    const token_i    = state.push('inline', '', 0);
    token_i.content  = content;
    token_i.map      = [startLine, state.line - 1];
    token_i.children = [];

    const token_c    = state.push('heading_close', 'h' + String(level), -1);
    token_c.markup   = String.fromCharCode(marker);

    state.parentType = oldParentType;

    return true
  }

  // Paragraph

  function paragraph (state, startLine, endLine) {
    const terminatorRules = state.md.block.ruler.getRules('paragraph');
    const oldParentType = state.parentType;
    let nextLine = startLine + 1;
    state.parentType = 'paragraph';

    // jump line-by-line until empty one or EOF
    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) { continue }

      // quirk for blockquotes, this line should already be checked by that rule
      if (state.sCount[nextLine] < 0) { continue }

      // Some tags can terminate paragraph without empty line.
      let terminate = false;
      for (let i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break
        }
      }
      if (terminate) { break }
    }

    const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

    state.line = nextLine;

    const token_o    = state.push('paragraph_open', 'p', 1);
    token_o.map      = [startLine, state.line];

    const token_i    = state.push('inline', '', 0);
    token_i.content  = content;
    token_i.map      = [startLine, state.line];
    token_i.children = [];

    state.push('paragraph_close', 'p', -1);

    state.parentType = oldParentType;

    return true
  }

  /** internal
   * class ParserBlock
   *
   * Block-level tokenizer.
   **/


  const _rules$1 = [
    // First 2 params - rule name & source. Secondary array - list of rules,
    // which can be terminated by this one.
    ['table',      table,      ['paragraph', 'reference']],
    ['code',       code],
    ['fence',      fence,      ['paragraph', 'reference', 'blockquote', 'list']],
    ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']],
    ['hr',         hr,         ['paragraph', 'reference', 'blockquote', 'list']],
    ['list',       list,       ['paragraph', 'reference', 'blockquote']],
    ['reference',  reference],
    ['html_block', html_block, ['paragraph', 'reference', 'blockquote']],
    ['heading',    heading,    ['paragraph', 'reference', 'blockquote']],
    ['lheading',   lheading],
    ['paragraph',  paragraph]
  ];

  /**
   * new ParserBlock()
   **/
  function ParserBlock () {
    /**
     * ParserBlock#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of block rules.
     **/
    this.ruler = new Ruler();

    for (let i = 0; i < _rules$1.length; i++) {
      this.ruler.push(_rules$1[i][0], _rules$1[i][1], { alt: (_rules$1[i][2] || []).slice() });
    }
  }

  // Generate tokens for input range
  //
  ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
    const rules = this.ruler.getRules('');
    const len = rules.length;
    const maxNesting = state.md.options.maxNesting;
    let line = startLine;
    let hasEmptyLines = false;

    while (line < endLine) {
      state.line = line = state.skipEmptyLines(line);
      if (line >= endLine) { break }

      // Termination condition for nested calls.
      // Nested calls currently used for blockquotes & lists
      if (state.sCount[line] < state.blkIndent) { break }

      // If nesting level exceeded - skip tail to the end. That's not ordinary
      // situation and we should not care about content.
      if (state.level >= maxNesting) {
        state.line = endLine;
        break
      }

      // Try all possible rules.
      // On success, rule should:
      //
      // - update `state.line`
      // - update `state.tokens`
      // - return true
      const prevLine = state.line;
      let ok = false;

      for (let i = 0; i < len; i++) {
        ok = rules[i](state, line, endLine, false);
        if (ok) {
          if (prevLine >= state.line) {
            throw new Error("block rule didn't increment state.line")
          }
          break
        }
      }

      // this can only happen if user disables paragraph rule
      if (!ok) throw new Error('none of the block rules matched')

      // set state.tight if we had an empty line before current tag
      // i.e. latest empty line should not count
      state.tight = !hasEmptyLines;

      // paragraph might "eat" one newline after it in nested lists
      if (state.isEmpty(state.line - 1)) {
        hasEmptyLines = true;
      }

      line = state.line;

      if (line < endLine && state.isEmpty(line)) {
        hasEmptyLines = true;
        line++;
        state.line = line;
      }
    }
  };

  /**
   * ParserBlock.parse(str, md, env, outTokens)
   *
   * Process input string and push block tokens into `outTokens`
   **/
  ParserBlock.prototype.parse = function (src, md, env, outTokens) {
    if (!src) { return }

    const state = new this.State(src, md, env, outTokens);

    this.tokenize(state, state.line, state.lineMax);
  };

  ParserBlock.prototype.State = StateBlock;

  // Inline parser state


  function StateInline (src, md, env, outTokens) {
    this.src = src;
    this.env = env;
    this.md = md;
    this.tokens = outTokens;
    this.tokens_meta = Array(outTokens.length);

    this.pos = 0;
    this.posMax = this.src.length;
    this.level = 0;
    this.pending = '';
    this.pendingLevel = 0;

    // Stores { start: end } pairs. Useful for backtrack
    // optimization of pairs parse (emphasis, strikes).
    this.cache = {};

    // List of emphasis-like delimiters for current tag
    this.delimiters = [];

    // Stack of delimiter lists for upper level tags
    this._prev_delimiters = [];

    // backtick length => last seen position
    this.backticks = {};
    this.backticksScanned = false;

    // Counter used to disable inline linkify-it execution
    // inside <a> and markdown links
    this.linkLevel = 0;
  }

  // Flush pending text
  //
  StateInline.prototype.pushPending = function () {
    const token = new Token('text', '', 0);
    token.content = this.pending;
    token.level = this.pendingLevel;
    this.tokens.push(token);
    this.pending = '';
    return token
  };

  // Push new token to "stream".
  // If pending text exists - flush it as text token
  //
  StateInline.prototype.push = function (type, tag, nesting) {
    if (this.pending) {
      this.pushPending();
    }

    const token = new Token(type, tag, nesting);
    let token_meta = null;

    if (nesting < 0) {
      // closing tag
      this.level--;
      this.delimiters = this._prev_delimiters.pop();
    }

    token.level = this.level;

    if (nesting > 0) {
      // opening tag
      this.level++;
      this._prev_delimiters.push(this.delimiters);
      this.delimiters = [];
      token_meta = { delimiters: this.delimiters };
    }

    this.pendingLevel = this.level;
    this.tokens.push(token);
    this.tokens_meta.push(token_meta);
    return token
  };

  // Scan a sequence of emphasis-like markers, and determine whether
  // it can start an emphasis sequence or end an emphasis sequence.
  //
  //  - start - position to scan from (it should point at a valid marker);
  //  - canSplitWord - determine if these markers can be found inside a word
  //
  StateInline.prototype.scanDelims = function (start, canSplitWord) {
    const max = this.posMax;
    const marker = this.src.charCodeAt(start);

    // treat beginning of the line as a whitespace
    const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

    let pos = start;
    while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }

    const count = pos - start;

    // treat end of the line as a whitespace
    const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;

    const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
    const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

    const isLastWhiteSpace = isWhiteSpace(lastChar);
    const isNextWhiteSpace = isWhiteSpace(nextChar);

    const left_flanking =
      !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar);
    const right_flanking =
      !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar);

    const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar);
    const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar);

    return { can_open, can_close, length: count }
  };

  // re-export Token class to use in block rules
  StateInline.prototype.Token = Token;

  // Skip text characters for text token, place those to pending buffer
  // and increment current pos

  // Rule to skip pure text
  // '{}$%@~+=:' reserved for extentions

  // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

  // !!!! Don't confuse with "Markdown ASCII Punctuation" chars
  // http://spec.commonmark.org/0.15/#ascii-punctuation-character
  function isTerminatorChar (ch) {
    switch (ch) {
      case 0x0A/* \n */:
      case 0x21/* ! */:
      case 0x23/* # */:
      case 0x24/* $ */:
      case 0x25/* % */:
      case 0x26/* & */:
      case 0x2A/* * */:
      case 0x2B/* + */:
      case 0x2D/* - */:
      case 0x3A/* : */:
      case 0x3C/* < */:
      case 0x3D/* = */:
      case 0x3E/* > */:
      case 0x40/* @ */:
      case 0x5B/* [ */:
      case 0x5C/* \ */:
      case 0x5D/* ] */:
      case 0x5E/* ^ */:
      case 0x5F/* _ */:
      case 0x60/* ` */:
      case 0x7B/* { */:
      case 0x7D/* } */:
      case 0x7E/* ~ */:
        return true
      default:
        return false
    }
  }

  function text$1 (state, silent) {
    let pos = state.pos;

    while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
      pos++;
    }

    if (pos === state.pos) { return false }

    if (!silent) { state.pending += state.src.slice(state.pos, pos); }

    state.pos = pos;

    return true
  }

  // Alternative implementation, for memory.
  //
  // It costs 10% of performance, but allows extend terminators list, if place it
  // to `ParserInline` property. Probably, will switch to it sometime, such
  // flexibility required.

  /*
  var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

  module.exports = function text(state, silent) {
    var pos = state.pos,
        idx = state.src.slice(pos).search(TERMINATOR_RE);

    // first char is terminator -> empty text
    if (idx === 0) { return false; }

    // no terminator -> text till end of string
    if (idx < 0) {
      if (!silent) { state.pending += state.src.slice(pos); }
      state.pos = state.src.length;
      return true;
    }

    if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

    state.pos += idx;

    return true;
  }; */

  // Process links like https://example.org/

  // RFC3986: scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  const SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;

  function linkify (state, silent) {
    if (!state.md.options.linkify) return false
    if (state.linkLevel > 0) return false

    const pos = state.pos;
    const max = state.posMax;

    if (pos + 3 > max) return false
    if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false
    if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false
    if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false

    const match = state.pending.match(SCHEME_RE);
    if (!match) return false

    const proto = match[1];

    const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));
    if (!link) return false

    let url = link.url;

    // invalid link, but still detected by linkify somehow;
    // need to check to prevent infinite loop below
    if (url.length <= proto.length) return false

    // disallow '*' at the end of the link (conflicts with emphasis)
    url = url.replace(/\*+$/, '');

    const fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) return false

    if (!silent) {
      state.pending = state.pending.slice(0, -proto.length);

      const token_o = state.push('link_open', 'a', 1);
      token_o.attrs = [['href', fullUrl]];
      token_o.markup = 'linkify';
      token_o.info = 'auto';

      const token_t = state.push('text', '', 0);
      token_t.content = state.md.normalizeLinkText(url);

      const token_c = state.push('link_close', 'a', -1);
      token_c.markup = 'linkify';
      token_c.info = 'auto';
    }

    state.pos += url.length - proto.length;
    return true
  }

  // Proceess '\n'


  function newline (state, silent) {
    let pos = state.pos;

    if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false }

    const pmax = state.pending.length - 1;
    const max = state.posMax;

    // '  \n' -> hardbreak
    // Lookup in pending chars is bad practice! Don't copy to other rules!
    // Pending string is stored in concat mode, indexed lookups will cause
    // convertion to flat mode.
    if (!silent) {
      if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
        if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
          // Find whitespaces tail of pending chars.
          let ws = pmax - 1;
          while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;

          state.pending = state.pending.slice(0, ws);
          state.push('hardbreak', 'br', 0);
        } else {
          state.pending = state.pending.slice(0, -1);
          state.push('softbreak', 'br', 0);
        }
      } else {
        state.push('softbreak', 'br', 0);
      }
    }

    pos++;

    // skip heading spaces for next line
    while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }

    state.pos = pos;
    return true
  }

  // Process escaped chars and hardbreaks


  const ESCAPED = [];

  for (let i = 0; i < 256; i++) { ESCAPED.push(0); }

  '\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
    .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });

  function escape$1 (state, silent) {
    let pos = state.pos;
    const max = state.posMax;

    if (state.src.charCodeAt(pos) !== 0x5C/* \ */) return false
    pos++;

    // '\' at the end of the inline block
    if (pos >= max) return false

    let ch1 = state.src.charCodeAt(pos);

    if (ch1 === 0x0A) {
      if (!silent) {
        state.push('hardbreak', 'br', 0);
      }

      pos++;
      // skip leading whitespaces from next line
      while (pos < max) {
        ch1 = state.src.charCodeAt(pos);
        if (!isSpace(ch1)) break
        pos++;
      }

      state.pos = pos;
      return true
    }

    let escapedStr = state.src[pos];

    if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {
      const ch2 = state.src.charCodeAt(pos + 1);

      if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {
        escapedStr += state.src[pos + 1];
        pos++;
      }
    }

    const origStr = '\\' + escapedStr;

    if (!silent) {
      const token = state.push('text_special', '', 0);

      if (ch1 < 256 && ESCAPED[ch1] !== 0) {
        token.content = escapedStr;
      } else {
        token.content = origStr;
      }

      token.markup = origStr;
      token.info   = 'escape';
    }

    state.pos = pos + 1;
    return true
  }

  // Parse backticks

  function backtick (state, silent) {
    let pos = state.pos;
    const ch = state.src.charCodeAt(pos);

    if (ch !== 0x60/* ` */) { return false }

    const start = pos;
    pos++;
    const max = state.posMax;

    // scan marker length
    while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

    const marker = state.src.slice(start, pos);
    const openerLength = marker.length;

    if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
      if (!silent) state.pending += marker;
      state.pos += openerLength;
      return true
    }

    let matchEnd = pos;
    let matchStart;

    // Nothing found in the cache, scan until the end of the line (or until marker is found)
    while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
      matchEnd = matchStart + 1;

      // scan marker length
      while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

      const closerLength = matchEnd - matchStart;

      if (closerLength === openerLength) {
        // Found matching closer length.
        if (!silent) {
          const token = state.push('code_inline', 'code', 0);
          token.markup = marker;
          token.content = state.src.slice(pos, matchStart)
            .replace(/\n/g, ' ')
            .replace(/^ (.+) $/, '$1');
        }
        state.pos = matchEnd;
        return true
      }

      // Some different length found, put it in cache as upper limit of where closer can be found
      state.backticks[closerLength] = matchStart;
    }

    // Scanned through the end, didn't find anything
    state.backticksScanned = true;

    if (!silent) state.pending += marker;
    state.pos += openerLength;
    return true
  }

  // ~~strike through~~
  //

  // Insert each marker as a separate text token, and add it to delimiter list
  //
  function strikethrough_tokenize (state, silent) {
    const start = state.pos;
    const marker = state.src.charCodeAt(start);

    if (silent) { return false }

    if (marker !== 0x7E/* ~ */) { return false }

    const scanned = state.scanDelims(state.pos, true);
    let len = scanned.length;
    const ch = String.fromCharCode(marker);

    if (len < 2) { return false }

    let token;

    if (len % 2) {
      token         = state.push('text', '', 0);
      token.content = ch;
      len--;
    }

    for (let i = 0; i < len; i += 2) {
      token         = state.push('text', '', 0);
      token.content = ch + ch;

      state.delimiters.push({
        marker,
        length: 0,     // disable "rule of 3" length checks meant for emphasis
        token: state.tokens.length - 1,
        end: -1,
        open: scanned.can_open,
        close: scanned.can_close
      });
    }

    state.pos += scanned.length;

    return true
  }

  function postProcess$1 (state, delimiters) {
    let token;
    const loneMarkers = [];
    const max = delimiters.length;

    for (let i = 0; i < max; i++) {
      const startDelim = delimiters[i];

      if (startDelim.marker !== 0x7E/* ~ */) {
        continue
      }

      if (startDelim.end === -1) {
        continue
      }

      const endDelim = delimiters[startDelim.end];

      token         = state.tokens[startDelim.token];
      token.type    = 's_open';
      token.tag     = 's';
      token.nesting = 1;
      token.markup  = '~~';
      token.content = '';

      token         = state.tokens[endDelim.token];
      token.type    = 's_close';
      token.tag     = 's';
      token.nesting = -1;
      token.markup  = '~~';
      token.content = '';

      if (state.tokens[endDelim.token - 1].type === 'text' &&
          state.tokens[endDelim.token - 1].content === '~') {
        loneMarkers.push(endDelim.token - 1);
      }
    }

    // If a marker sequence has an odd number of characters, it's splitted
    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
    // start of the sequence.
    //
    // So, we have to move all those markers after subsequent s_close tags.
    //
    while (loneMarkers.length) {
      const i = loneMarkers.pop();
      let j = i + 1;

      while (j < state.tokens.length && state.tokens[j].type === 's_close') {
        j++;
      }

      j--;

      if (i !== j) {
        token = state.tokens[j];
        state.tokens[j] = state.tokens[i];
        state.tokens[i] = token;
      }
    }
  }

  // Walk through delimiter list and replace text tokens with tags
  //
  function strikethrough_postProcess (state) {
    const tokens_meta = state.tokens_meta;
    const max = state.tokens_meta.length;

    postProcess$1(state, state.delimiters);

    for (let curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        postProcess$1(state, tokens_meta[curr].delimiters);
      }
    }
  }

  var r_strikethrough = {
    tokenize: strikethrough_tokenize,
    postProcess: strikethrough_postProcess
  };

  // Process *this* and _that_
  //

  // Insert each marker as a separate text token, and add it to delimiter list
  //
  function emphasis_tokenize (state, silent) {
    const start = state.pos;
    const marker = state.src.charCodeAt(start);

    if (silent) { return false }

    if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }

    const scanned = state.scanDelims(state.pos, marker === 0x2A);

    for (let i = 0; i < scanned.length; i++) {
      const token = state.push('text', '', 0);
      token.content = String.fromCharCode(marker);

      state.delimiters.push({
        // Char code of the starting marker (number).
        //
        marker,

        // Total length of these series of delimiters.
        //
        length: scanned.length,

        // A position of the token this delimiter corresponds to.
        //
        token: state.tokens.length - 1,

        // If this delimiter is matched as a valid opener, `end` will be
        // equal to its position, otherwise it's `-1`.
        //
        end: -1,

        // Boolean flags that determine if this delimiter could open or close
        // an emphasis.
        //
        open: scanned.can_open,
        close: scanned.can_close
      });
    }

    state.pos += scanned.length;

    return true
  }

  function postProcess (state, delimiters) {
    const max = delimiters.length;

    for (let i = max - 1; i >= 0; i--) {
      const startDelim = delimiters[i];

      if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
        continue
      }

      // Process only opening markers
      if (startDelim.end === -1) {
        continue
      }

      const endDelim = delimiters[startDelim.end];

      // If the previous delimiter has the same marker and is adjacent to this one,
      // merge those into one strong delimiter.
      //
      // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
      //
      const isStrong = i > 0 &&
                 delimiters[i - 1].end === startDelim.end + 1 &&
                 // check that first two markers match and adjacent
                 delimiters[i - 1].marker === startDelim.marker &&
                 delimiters[i - 1].token === startDelim.token - 1 &&
                 // check that last two markers are adjacent (we can safely assume they match)
                 delimiters[startDelim.end + 1].token === endDelim.token + 1;

      const ch = String.fromCharCode(startDelim.marker);

      const token_o   = state.tokens[startDelim.token];
      token_o.type    = isStrong ? 'strong_open' : 'em_open';
      token_o.tag     = isStrong ? 'strong' : 'em';
      token_o.nesting = 1;
      token_o.markup  = isStrong ? ch + ch : ch;
      token_o.content = '';

      const token_c   = state.tokens[endDelim.token];
      token_c.type    = isStrong ? 'strong_close' : 'em_close';
      token_c.tag     = isStrong ? 'strong' : 'em';
      token_c.nesting = -1;
      token_c.markup  = isStrong ? ch + ch : ch;
      token_c.content = '';

      if (isStrong) {
        state.tokens[delimiters[i - 1].token].content = '';
        state.tokens[delimiters[startDelim.end + 1].token].content = '';
        i--;
      }
    }
  }

  // Walk through delimiter list and replace text tokens with tags
  //
  function emphasis_post_process (state) {
    const tokens_meta = state.tokens_meta;
    const max = state.tokens_meta.length;

    postProcess(state, state.delimiters);

    for (let curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        postProcess(state, tokens_meta[curr].delimiters);
      }
    }
  }

  var r_emphasis = {
    tokenize: emphasis_tokenize,
    postProcess: emphasis_post_process
  };

  // Process [link](<to> "stuff")


  function link (state, silent) {
    let code, label, res, ref;
    let href = '';
    let title = '';
    let start = state.pos;
    let parseReference = true;

    if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }

    const oldPos = state.pos;
    const max = state.posMax;
    const labelStart = state.pos + 1;
    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);

    // parser failed to find ']', so it's not a valid link
    if (labelEnd < 0) { return false }

    let pos = labelEnd + 1;
    if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
      //
      // Inline link
      //

      // might have found a valid shortcut link, disable reference parsing
      parseReference = false;

      // [link](  <href>  "title"  )
      //        ^^ skipping these spaces
      pos++;
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break }
      }
      if (pos >= max) { return false }

      // [link](  <href>  "title"  )
      //          ^^^^^^ parsing link destination
      start = pos;
      res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
      if (res.ok) {
        href = state.md.normalizeLink(res.str);
        if (state.md.validateLink(href)) {
          pos = res.pos;
        } else {
          href = '';
        }

        // [link](  <href>  "title"  )
        //                ^^ skipping these spaces
        start = pos;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break }
        }

        // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos;

          // [link](  <href>  "title"  )
          //                         ^^ skipping these spaces
          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) { break }
          }
        }
      }

      if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
        // parsing a valid shortcut link failed, fallback to reference
        parseReference = true;
      }
      pos++;
    }

    if (parseReference) {
      //
      // Link reference
      //
      if (typeof state.env.references === 'undefined') { return false }

      if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
        start = pos + 1;
        pos = state.md.helpers.parseLinkLabel(state, pos);
        if (pos >= 0) {
          label = state.src.slice(start, pos++);
        } else {
          pos = labelEnd + 1;
        }
      } else {
        pos = labelEnd + 1;
      }

      // covers label === '' and label === undefined
      // (collapsed reference link and shortcut reference link respectively)
      if (!label) { label = state.src.slice(labelStart, labelEnd); }

      ref = state.env.references[normalizeReference(label)];
      if (!ref) {
        state.pos = oldPos;
        return false
      }
      href = ref.href;
      title = ref.title;
    }

    //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //
    if (!silent) {
      state.pos = labelStart;
      state.posMax = labelEnd;

      const token_o = state.push('link_open', 'a', 1);
      const attrs = [['href', href]];
      token_o.attrs  = attrs;
      if (title) {
        attrs.push(['title', title]);
      }

      state.linkLevel++;
      state.md.inline.tokenize(state);
      state.linkLevel--;

      state.push('link_close', 'a', -1);
    }

    state.pos = pos;
    state.posMax = max;
    return true
  }

  // Process ![image](<src> "title")


  function image (state, silent) {
    let code, content, label, pos, ref, res, title, start;
    let href = '';
    const oldPos = state.pos;
    const max = state.posMax;

    if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }
    if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }

    const labelStart = state.pos + 2;
    const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

    // parser failed to find ']', so it's not a valid link
    if (labelEnd < 0) { return false }

    pos = labelEnd + 1;
    if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
      //
      // Inline link
      //

      // [link](  <href>  "title"  )
      //        ^^ skipping these spaces
      pos++;
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break }
      }
      if (pos >= max) { return false }

      // [link](  <href>  "title"  )
      //          ^^^^^^ parsing link destination
      start = pos;
      res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
      if (res.ok) {
        href = state.md.normalizeLink(res.str);
        if (state.md.validateLink(href)) {
          pos = res.pos;
        } else {
          href = '';
        }
      }

      // [link](  <href>  "title"  )
      //                ^^ skipping these spaces
      start = pos;
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break }
      }

      // [link](  <href>  "title"  )
      //                  ^^^^^^^ parsing link title
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;

        // [link](  <href>  "title"  )
        //                         ^^ skipping these spaces
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break }
        }
      } else {
        title = '';
      }

      if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
        state.pos = oldPos;
        return false
      }
      pos++;
    } else {
      //
      // Link reference
      //
      if (typeof state.env.references === 'undefined') { return false }

      if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
        start = pos + 1;
        pos = state.md.helpers.parseLinkLabel(state, pos);
        if (pos >= 0) {
          label = state.src.slice(start, pos++);
        } else {
          pos = labelEnd + 1;
        }
      } else {
        pos = labelEnd + 1;
      }

      // covers label === '' and label === undefined
      // (collapsed reference link and shortcut reference link respectively)
      if (!label) { label = state.src.slice(labelStart, labelEnd); }

      ref = state.env.references[normalizeReference(label)];
      if (!ref) {
        state.pos = oldPos;
        return false
      }
      href = ref.href;
      title = ref.title;
    }

    //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //
    if (!silent) {
      content = state.src.slice(labelStart, labelEnd);

      const tokens = [];
      state.md.inline.parse(
        content,
        state.md,
        state.env,
        tokens
      );

      const token = state.push('image', 'img', 0);
      const attrs = [['src', href], ['alt', '']];
      token.attrs = attrs;
      token.children = tokens;
      token.content = content;

      if (title) {
        attrs.push(['title', title]);
      }
    }

    state.pos = pos;
    state.posMax = max;
    return true
  }

  // Process autolinks '<protocol:...>'

  /* eslint max-len:0 */
  const EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
  /* eslint-disable-next-line no-control-regex */
  const AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;

  function autolink (state, silent) {
    let pos = state.pos;

    if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }

    const start = state.pos;
    const max = state.posMax;

    for (;;) {
      if (++pos >= max) return false

      const ch = state.src.charCodeAt(pos);

      if (ch === 0x3C /* < */) return false
      if (ch === 0x3E /* > */) break
    }

    const url = state.src.slice(start + 1, pos);

    if (AUTOLINK_RE.test(url)) {
      const fullUrl = state.md.normalizeLink(url);
      if (!state.md.validateLink(fullUrl)) { return false }

      if (!silent) {
        const token_o   = state.push('link_open', 'a', 1);
        token_o.attrs   = [['href', fullUrl]];
        token_o.markup  = 'autolink';
        token_o.info    = 'auto';

        const token_t   = state.push('text', '', 0);
        token_t.content = state.md.normalizeLinkText(url);

        const token_c   = state.push('link_close', 'a', -1);
        token_c.markup  = 'autolink';
        token_c.info    = 'auto';
      }

      state.pos += url.length + 2;
      return true
    }

    if (EMAIL_RE.test(url)) {
      const fullUrl = state.md.normalizeLink('mailto:' + url);
      if (!state.md.validateLink(fullUrl)) { return false }

      if (!silent) {
        const token_o   = state.push('link_open', 'a', 1);
        token_o.attrs   = [['href', fullUrl]];
        token_o.markup  = 'autolink';
        token_o.info    = 'auto';

        const token_t   = state.push('text', '', 0);
        token_t.content = state.md.normalizeLinkText(url);

        const token_c   = state.push('link_close', 'a', -1);
        token_c.markup  = 'autolink';
        token_c.info    = 'auto';
      }

      state.pos += url.length + 2;
      return true
    }

    return false
  }

  // Process html tags


  function isLinkOpen (str) {
    return /^<a[>\s]/i.test(str)
  }
  function isLinkClose (str) {
    return /^<\/a\s*>/i.test(str)
  }

  function isLetter (ch) {
    /* eslint no-bitwise:0 */
    const lc = ch | 0x20; // to lower case
    return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)
  }

  function html_inline (state, silent) {
    if (!state.md.options.html) { return false }

    // Check start
    const max = state.posMax;
    const pos = state.pos;
    if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
        pos + 2 >= max) {
      return false
    }

    // Quick fail on second char
    const ch = state.src.charCodeAt(pos + 1);
    if (ch !== 0x21/* ! */ &&
        ch !== 0x3F/* ? */ &&
        ch !== 0x2F/* / */ &&
        !isLetter(ch)) {
      return false
    }

    const match = state.src.slice(pos).match(HTML_TAG_RE);
    if (!match) { return false }

    if (!silent) {
      const token = state.push('html_inline', '', 0);
      token.content = match[0];

      if (isLinkOpen(token.content))  state.linkLevel++;
      if (isLinkClose(token.content)) state.linkLevel--;
    }
    state.pos += match[0].length;
    return true
  }

  // Process html entity - &#123;, &#xAF;, &quot;, ...


  const DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
  const NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;

  function entity (state, silent) {
    const pos = state.pos;
    const max = state.posMax;

    if (state.src.charCodeAt(pos) !== 0x26/* & */) return false

    if (pos + 1 >= max) return false

    const ch = state.src.charCodeAt(pos + 1);

    if (ch === 0x23 /* # */) {
      const match = state.src.slice(pos).match(DIGITAL_RE);
      if (match) {
        if (!silent) {
          const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);

          const token   = state.push('text_special', '', 0);
          token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
          token.markup  = match[0];
          token.info    = 'entity';
        }
        state.pos += match[0].length;
        return true
      }
    } else {
      const match = state.src.slice(pos).match(NAMED_RE);
      if (match) {
        const decoded = decodeHTML(match[0]);
        if (decoded !== match[0]) {
          if (!silent) {
            const token   = state.push('text_special', '', 0);
            token.content = decoded;
            token.markup  = match[0];
            token.info    = 'entity';
          }
          state.pos += match[0].length;
          return true
        }
      }
    }

    return false
  }

  // For each opening emphasis-like marker find a matching closing one
  //

  function processDelimiters (delimiters) {
    const openersBottom = {};
    const max = delimiters.length;

    if (!max) return

    // headerIdx is the first delimiter of the current (where closer is) delimiter run
    let headerIdx = 0;
    let lastTokenIdx = -2; // needs any value lower than -1
    const jumps = [];

    for (let closerIdx = 0; closerIdx < max; closerIdx++) {
      const closer = delimiters[closerIdx];

      jumps.push(0);

      // markers belong to same delimiter run if:
      //  - they have adjacent tokens
      //  - AND markers are the same
      //
      if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
        headerIdx = closerIdx;
      }

      lastTokenIdx = closer.token;

      // Length is only used for emphasis-specific "rule of 3",
      // if it's not defined (in strikethrough or 3rd party plugins),
      // we can default it to 0 to disable those checks.
      //
      closer.length = closer.length || 0;

      if (!closer.close) continue

      // Previously calculated lower bounds (previous fails)
      // for each marker, each delimiter length modulo 3,
      // and for whether this closer can be an opener;
      // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
      /* eslint-disable-next-line no-prototype-builtins */
      if (!openersBottom.hasOwnProperty(closer.marker)) {
        openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
      }

      const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];

      let openerIdx = headerIdx - jumps[headerIdx] - 1;

      let newMinOpenerIdx = openerIdx;

      for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
        const opener = delimiters[openerIdx];

        if (opener.marker !== closer.marker) continue

        if (opener.open && opener.end < 0) {
          let isOddMatch = false;

          // from spec:
          //
          // If one of the delimiters can both open and close emphasis, then the
          // sum of the lengths of the delimiter runs containing the opening and
          // closing delimiters must not be a multiple of 3 unless both lengths
          // are multiples of 3.
          //
          if (opener.close || closer.open) {
            if ((opener.length + closer.length) % 3 === 0) {
              if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                isOddMatch = true;
              }
            }
          }

          if (!isOddMatch) {
            // If previous delimiter cannot be an opener, we can safely skip
            // the entire sequence in future checks. This is required to make
            // sure algorithm has linear complexity (see *_*_*_*_*_... case).
            //
            const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open
              ? jumps[openerIdx - 1] + 1
              : 0;

            jumps[closerIdx] = closerIdx - openerIdx + lastJump;
            jumps[openerIdx] = lastJump;

            closer.open  = false;
            opener.end   = closerIdx;
            opener.close = false;
            newMinOpenerIdx = -1;
            // treat next token as start of run,
            // it optimizes skips in **<...>**a**<...>** pathological case
            lastTokenIdx = -2;
            break
          }
        }
      }

      if (newMinOpenerIdx !== -1) {
        // If match for this delimiter run failed, we want to set lower bound for
        // future lookups. This is required to make sure algorithm has linear
        // complexity.
        //
        // See details here:
        // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
        //
        openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;
      }
    }
  }

  function link_pairs (state) {
    const tokens_meta = state.tokens_meta;
    const max = state.tokens_meta.length;

    processDelimiters(state.delimiters);

    for (let curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        processDelimiters(tokens_meta[curr].delimiters);
      }
    }
  }

  // Clean up tokens after emphasis and strikethrough postprocessing:
  // merge adjacent text nodes into one and re-calculate all token levels
  //
  // This is necessary because initially emphasis delimiter markers (*, _, ~)
  // are treated as their own separate text tokens. Then emphasis rule either
  // leaves them as text (needed to merge with adjacent text) or turns them
  // into opening/closing tags (which messes up levels inside).
  //

  function fragments_join (state) {
    let curr, last;
    let level = 0;
    const tokens = state.tokens;
    const max = state.tokens.length;

    for (curr = last = 0; curr < max; curr++) {
      // re-calculate levels after emphasis/strikethrough turns some text nodes
      // into opening/closing tags
      if (tokens[curr].nesting < 0) level--; // closing tag
      tokens[curr].level = level;
      if (tokens[curr].nesting > 0) level++; // opening tag

      if (tokens[curr].type === 'text' &&
          curr + 1 < max &&
          tokens[curr + 1].type === 'text') {
        // collapse two adjacent text nodes
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
      } else {
        if (curr !== last) { tokens[last] = tokens[curr]; }

        last++;
      }
    }

    if (curr !== last) {
      tokens.length = last;
    }
  }

  /** internal
   * class ParserInline
   *
   * Tokenizes paragraph content.
   **/


  // Parser rules

  const _rules = [
    ['text',            text$1],
    ['linkify',         linkify],
    ['newline',         newline],
    ['escape',          escape$1],
    ['backticks',       backtick],
    ['strikethrough',   r_strikethrough.tokenize],
    ['emphasis',        r_emphasis.tokenize],
    ['link',            link],
    ['image',           image],
    ['autolink',        autolink],
    ['html_inline',     html_inline],
    ['entity',          entity]
  ];

  // `rule2` ruleset was created specifically for emphasis/strikethrough
  // post-processing and may be changed in the future.
  //
  // Don't use this for anything except pairs (plugins working with `balance_pairs`).
  //
  const _rules2 = [
    ['balance_pairs',   link_pairs],
    ['strikethrough',   r_strikethrough.postProcess],
    ['emphasis',        r_emphasis.postProcess],
    // rules for pairs separate '**' into its own text tokens, which may be left unused,
    // rule below merges unused segments back with the rest of the text
    ['fragments_join',  fragments_join]
  ];

  /**
   * new ParserInline()
   **/
  function ParserInline () {
    /**
     * ParserInline#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of inline rules.
     **/
    this.ruler = new Ruler();

    for (let i = 0; i < _rules.length; i++) {
      this.ruler.push(_rules[i][0], _rules[i][1]);
    }

    /**
     * ParserInline#ruler2 -> Ruler
     *
     * [[Ruler]] instance. Second ruler used for post-processing
     * (e.g. in emphasis-like rules).
     **/
    this.ruler2 = new Ruler();

    for (let i = 0; i < _rules2.length; i++) {
      this.ruler2.push(_rules2[i][0], _rules2[i][1]);
    }
  }

  // Skip single token by running all rules in validation mode;
  // returns `true` if any rule reported success
  //
  ParserInline.prototype.skipToken = function (state) {
    const pos = state.pos;
    const rules = this.ruler.getRules('');
    const len = rules.length;
    const maxNesting = state.md.options.maxNesting;
    const cache = state.cache;

    if (typeof cache[pos] !== 'undefined') {
      state.pos = cache[pos];
      return
    }

    let ok = false;

    if (state.level < maxNesting) {
      for (let i = 0; i < len; i++) {
        // Increment state.level and decrement it later to limit recursion.
        // It's harmless to do here, because no tokens are created. But ideally,
        // we'd need a separate private state variable for this purpose.
        //
        state.level++;
        ok = rules[i](state, true);
        state.level--;

        if (ok) {
          if (pos >= state.pos) { throw new Error("inline rule didn't increment state.pos") }
          break
        }
      }
    } else {
      // Too much nesting, just skip until the end of the paragraph.
      //
      // NOTE: this will cause links to behave incorrectly in the following case,
      //       when an amount of `[` is exactly equal to `maxNesting + 1`:
      //
      //       [[[[[[[[[[[[[[[[[[[[[foo]()
      //
      // TODO: remove this workaround when CM standard will allow nested links
      //       (we can replace it by preventing links from being parsed in
      //       validation mode)
      //
      state.pos = state.posMax;
    }

    if (!ok) { state.pos++; }
    cache[pos] = state.pos;
  };

  // Generate tokens for input range
  //
  ParserInline.prototype.tokenize = function (state) {
    const rules = this.ruler.getRules('');
    const len = rules.length;
    const end = state.posMax;
    const maxNesting = state.md.options.maxNesting;

    while (state.pos < end) {
      // Try all possible rules.
      // On success, rule should:
      //
      // - update `state.pos`
      // - update `state.tokens`
      // - return true
      const prevPos = state.pos;
      let ok = false;

      if (state.level < maxNesting) {
        for (let i = 0; i < len; i++) {
          ok = rules[i](state, false);
          if (ok) {
            if (prevPos >= state.pos) { throw new Error("inline rule didn't increment state.pos") }
            break
          }
        }
      }

      if (ok) {
        if (state.pos >= end) { break }
        continue
      }

      state.pending += state.src[state.pos++];
    }

    if (state.pending) {
      state.pushPending();
    }
  };

  /**
   * ParserInline.parse(str, md, env, outTokens)
   *
   * Process input string and push inline tokens into `outTokens`
   **/
  ParserInline.prototype.parse = function (str, md, env, outTokens) {
    const state = new this.State(str, md, env, outTokens);

    this.tokenize(state);

    const rules = this.ruler2.getRules('');
    const len = rules.length;

    for (let i = 0; i < len; i++) {
      rules[i](state);
    }
  };

  ParserInline.prototype.State = StateInline;

  function reFactory (opts) {
    const re = {};
    opts = opts || {};

    re.src_Any = Any.source;
    re.src_Cc = Cc.source;
    re.src_Z = Z.source;
    re.src_P = P.source;

    // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
    re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');

    // \p{\Z\Cc} (white spaces + control)
    re.src_ZCc = [re.src_Z, re.src_Cc].join('|');

    // Experimental. List of chars, completely prohibited in links
    // because can separate it from other part of text
    const text_separators = '[><\uff5c]';

    // All possible word characters (everything without punctuation, spaces & controls)
    // Defined via punctuation & spaces to save space
    // Should be something like \p{\L\N\S\M} (\w but without `_`)
    re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
    // The same as abothe but without [0-9]
    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

    re.src_ip4 =

      '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';

    // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
    re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';

    re.src_port =

      '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';

    re.src_host_terminator =

      '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +
      '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';

    re.src_path =

      '(?:' +
        '[/?#]' +
          '(?:' +
            '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|' +
            '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
            '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
            '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
            '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
            "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +

            // allow `I'm_king` if no pair found
            "\\'(?=" + re.src_pseudo_letter + '|[-])|' +

            // google has many dots in "google search" links (#66, #81).
            // github has ... in commit range links,
            // Restrict to
            // - english
            // - percent-encoded
            // - parts of file path
            // - params separator
            // until more examples found.
            '\\.{2,}[a-zA-Z0-9%/&]|' +

            '\\.(?!' + re.src_ZCc + '|[.]|$)|' +
            (opts['---']
              ? '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
              : '\\-+|'
            ) +
            // allow `,,,` in paths
            ',(?!' + re.src_ZCc + '|$)|' +

            // allow `;` if not followed by space-like char
            ';(?!' + re.src_ZCc + '|$)|' +

            // allow `!!!` in paths, but not at the end
            '\\!+(?!' + re.src_ZCc + '|[!]|$)|' +

            '\\?(?!' + re.src_ZCc + '|[?]|$)' +
          ')+' +
        '|\\/' +
      ')?';

    // Allow anything in markdown spec, forbid quote (") at the first position
    // because emails enclosed in quotes are far more common
    re.src_email_name =

      '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';

    re.src_xn =

      'xn--[a-z0-9\\-]{1,59}';

    // More to read about domain names
    // http://serverfault.com/questions/638260/

    re.src_domain_root =

      // Allow letters & digits (http://test1)
      '(?:' +
        re.src_xn +
        '|' +
        re.src_pseudo_letter + '{1,63}' +
      ')';

    re.src_domain =

      '(?:' +
        re.src_xn +
        '|' +
        '(?:' + re.src_pseudo_letter + ')' +
        '|' +
        '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
      ')';

    re.src_host =

      '(?:' +
      // Don't need IP check, because digits are already allowed in normal domain names
      //   src_ip4 +
      // '|' +
        '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/* _root */ + ')' +
      ')';

    re.tpl_host_fuzzy =

      '(?:' +
        re.src_ip4 +
      '|' +
        '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
      ')';

    re.tpl_host_no_ip_fuzzy =

      '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';

    re.src_host_strict =

      re.src_host + re.src_host_terminator;

    re.tpl_host_fuzzy_strict =

      re.tpl_host_fuzzy + re.src_host_terminator;

    re.src_host_port_strict =

      re.src_host + re.src_port + re.src_host_terminator;

    re.tpl_host_port_fuzzy_strict =

      re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;

    re.tpl_host_port_no_ip_fuzzy_strict =

      re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;

    //
    // Main rules
    //

    // Rude test fuzzy links by host, for quick deny
    re.tpl_host_fuzzy_test =

      'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';

    re.tpl_email_fuzzy =

        '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' +
        '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';

    re.tpl_link_fuzzy =
        // Fuzzy link can't be prepended with .:/\- and non punctuation.
        // but can start with > (markdown blockquote)
        '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
        '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';

    re.tpl_link_no_ip_fuzzy =
        // Fuzzy link can't be prepended with .:/\- and non punctuation.
        // but can start with > (markdown blockquote)
        '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
        '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';

    return re
  }

  //
  // Helpers
  //

  // Merge objects
  //
  function assign (obj /* from1, from2, from3, ... */) {
    const sources = Array.prototype.slice.call(arguments, 1);

    sources.forEach(function (source) {
      if (!source) { return }

      Object.keys(source).forEach(function (key) {
        obj[key] = source[key];
      });
    });

    return obj
  }

  function _class (obj) { return Object.prototype.toString.call(obj) }
  function isString (obj) { return _class(obj) === '[object String]' }
  function isObject (obj) { return _class(obj) === '[object Object]' }
  function isRegExp (obj) { return _class(obj) === '[object RegExp]' }
  function isFunction (obj) { return _class(obj) === '[object Function]' }

  function escapeRE (str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&') }

  //

  const defaultOptions = {
    fuzzyLink: true,
    fuzzyEmail: true,
    fuzzyIP: false
  };

  function isOptionsObj (obj) {
    return Object.keys(obj || {}).reduce(function (acc, k) {
      /* eslint-disable-next-line no-prototype-builtins */
      return acc || defaultOptions.hasOwnProperty(k)
    }, false)
  }

  const defaultSchemas = {
    'http:': {
      validate: function (text, pos, self) {
        const tail = text.slice(pos);

        if (!self.re.http) {
          // compile lazily, because "host"-containing variables can change on tlds update.
          self.re.http = new RegExp(
            '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
          );
        }
        if (self.re.http.test(tail)) {
          return tail.match(self.re.http)[0].length
        }
        return 0
      }
    },
    'https:': 'http:',
    'ftp:': 'http:',
    '//': {
      validate: function (text, pos, self) {
        const tail = text.slice(pos);

        if (!self.re.no_http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
          self.re.no_http = new RegExp(
            '^' +
            self.re.src_auth +
            // Don't allow single-level domains, because of false positives like '//test'
            // with code comments
            '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
            self.re.src_port +
            self.re.src_host_terminator +
            self.re.src_path,

            'i'
          );
        }

        if (self.re.no_http.test(tail)) {
          // should not be `://` & `///`, that protects from errors in protocol name
          if (pos >= 3 && text[pos - 3] === ':') { return 0 }
          if (pos >= 3 && text[pos - 3] === '/') { return 0 }
          return tail.match(self.re.no_http)[0].length
        }
        return 0
      }
    },
    'mailto:': {
      validate: function (text, pos, self) {
        const tail = text.slice(pos);

        if (!self.re.mailto) {
          self.re.mailto = new RegExp(
            '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
          );
        }
        if (self.re.mailto.test(tail)) {
          return tail.match(self.re.mailto)[0].length
        }
        return 0
      }
    }
  };

  // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
  /* eslint-disable-next-line max-len */
  const tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';

  // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
  const tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');

  function resetScanCache (self) {
    self.__index__ = -1;
    self.__text_cache__ = '';
  }

  function createValidator (re) {
    return function (text, pos) {
      const tail = text.slice(pos);

      if (re.test(tail)) {
        return tail.match(re)[0].length
      }
      return 0
    }
  }

  function createNormalizer () {
    return function (match, self) {
      self.normalize(match);
    }
  }

  // Schemas compiler. Build regexps.
  //
  function compile (self) {
    // Load & clone RE patterns.
    const re = self.re = reFactory(self.__opts__);

    // Define dynamic patterns
    const tlds = self.__tlds__.slice();

    self.onCompile();

    if (!self.__tlds_replaced__) {
      tlds.push(tlds_2ch_src_re);
    }
    tlds.push(re.src_xn);

    re.src_tlds = tlds.join('|');

    function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }

    re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');
    re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');
    re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
    re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');

    //
    // Compile each schema
    //

    const aliases = [];

    self.__compiled__ = {}; // Reset compiled data

    function schemaError (name, val) {
      throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val)
    }

    Object.keys(self.__schemas__).forEach(function (name) {
      const val = self.__schemas__[name];

      // skip disabled methods
      if (val === null) { return }

      const compiled = { validate: null, link: null };

      self.__compiled__[name] = compiled;

      if (isObject(val)) {
        if (isRegExp(val.validate)) {
          compiled.validate = createValidator(val.validate);
        } else if (isFunction(val.validate)) {
          compiled.validate = val.validate;
        } else {
          schemaError(name, val);
        }

        if (isFunction(val.normalize)) {
          compiled.normalize = val.normalize;
        } else if (!val.normalize) {
          compiled.normalize = createNormalizer();
        } else {
          schemaError(name, val);
        }

        return
      }

      if (isString(val)) {
        aliases.push(name);
        return
      }

      schemaError(name, val);
    });

    //
    // Compile postponed aliases
    //

    aliases.forEach(function (alias) {
      if (!self.__compiled__[self.__schemas__[alias]]) {
        // Silently fail on missed schemas to avoid errons on disable.
        // schemaError(alias, self.__schemas__[alias]);
        return
      }

      self.__compiled__[alias].validate =
        self.__compiled__[self.__schemas__[alias]].validate;
      self.__compiled__[alias].normalize =
        self.__compiled__[self.__schemas__[alias]].normalize;
    });

    //
    // Fake record for guessed links
    //
    self.__compiled__[''] = { validate: null, normalize: createNormalizer() };

    //
    // Build schema condition
    //
    const slist = Object.keys(self.__compiled__)
      .filter(function (name) {
        // Filter disabled & fake schemas
        return name.length > 0 && self.__compiled__[name]
      })
      .map(escapeRE)
      .join('|');
    // (?!_) cause 1.5x slowdown
    self.re.schema_test = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');
    self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');
    self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');

    self.re.pretest = RegExp(
      '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',
      'i'
    );

    //
    // Cleanup
    //

    resetScanCache(self);
  }

  /**
   * class Match
   *
   * Match result. Single element of array, returned by [[LinkifyIt#match]]
   **/
  function Match (self, shift) {
    const start = self.__index__;
    const end = self.__last_index__;
    const text = self.__text_cache__.slice(start, end);

    /**
     * Match#schema -> String
     *
     * Prefix (protocol) for matched string.
     **/
    this.schema = self.__schema__.toLowerCase();
    /**
     * Match#index -> Number
     *
     * First position of matched string.
     **/
    this.index = start + shift;
    /**
     * Match#lastIndex -> Number
     *
     * Next position after matched string.
     **/
    this.lastIndex = end + shift;
    /**
     * Match#raw -> String
     *
     * Matched string.
     **/
    this.raw = text;
    /**
     * Match#text -> String
     *
     * Notmalized text of matched string.
     **/
    this.text = text;
    /**
     * Match#url -> String
     *
     * Normalized url of matched string.
     **/
    this.url = text;
  }

  function createMatch (self, shift) {
    const match = new Match(self, shift);

    self.__compiled__[match.schema].normalize(match, self);

    return match
  }

  /**
   * class LinkifyIt
   **/

  /**
   * new LinkifyIt(schemas, options)
   * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
   * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
   *
   * Creates new linkifier instance with optional additional schemas.
   * Can be called without `new` keyword for convenience.
   *
   * By default understands:
   *
   * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
   * - "fuzzy" links and emails (example.com, foo@bar.com).
   *
   * `schemas` is an object, where each key/value describes protocol/rule:
   *
   * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
   *   for example). `linkify-it` makes shure that prefix is not preceeded with
   *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
   * - __value__ - rule to check tail after link prefix
   *   - _String_ - just alias to existing rule
   *   - _Object_
   *     - _validate_ - validator function (should return matched length on success),
   *       or `RegExp`.
   *     - _normalize_ - optional function to normalize text & url of matched result
   *       (for example, for @twitter mentions).
   *
   * `options`:
   *
   * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
   * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
   *   like version numbers. Default `false`.
   * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
   *
   **/
  function LinkifyIt (schemas, options) {
    if (!(this instanceof LinkifyIt)) {
      return new LinkifyIt(schemas, options)
    }

    if (!options) {
      if (isOptionsObj(schemas)) {
        options = schemas;
        schemas = {};
      }
    }

    this.__opts__ = assign({}, defaultOptions, options);

    // Cache last tested result. Used to skip repeating steps on next `match` call.
    this.__index__ = -1;
    this.__last_index__ = -1; // Next scan position
    this.__schema__ = '';
    this.__text_cache__ = '';

    this.__schemas__ = assign({}, defaultSchemas, schemas);
    this.__compiled__ = {};

    this.__tlds__ = tlds_default;
    this.__tlds_replaced__ = false;

    this.re = {};

    compile(this);
  }

  /** chainable
   * LinkifyIt#add(schema, definition)
   * - schema (String): rule name (fixed pattern prefix)
   * - definition (String|RegExp|Object): schema definition
   *
   * Add new rule definition. See constructor description for details.
   **/
  LinkifyIt.prototype.add = function add (schema, definition) {
    this.__schemas__[schema] = definition;
    compile(this);
    return this
  };

  /** chainable
   * LinkifyIt#set(options)
   * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
   *
   * Set recognition options for links without schema.
   **/
  LinkifyIt.prototype.set = function set (options) {
    this.__opts__ = assign(this.__opts__, options);
    return this
  };

  /**
   * LinkifyIt#test(text) -> Boolean
   *
   * Searches linkifiable pattern and returns `true` on success or `false` on fail.
   **/
  LinkifyIt.prototype.test = function test (text) {
    // Reset scan cache
    this.__text_cache__ = text;
    this.__index__ = -1;

    if (!text.length) { return false }

    let m, ml, me, len, shift, next, re, tld_pos, at_pos;

    // try to scan for link with schema - that's the most simple rule
    if (this.re.schema_test.test(text)) {
      re = this.re.schema_search;
      re.lastIndex = 0;
      while ((m = re.exec(text)) !== null) {
        len = this.testSchemaAt(text, m[2], re.lastIndex);
        if (len) {
          this.__schema__ = m[2];
          this.__index__ = m.index + m[1].length;
          this.__last_index__ = m.index + m[0].length + len;
          break
        }
      }
    }

    if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
      // guess schemaless links
      tld_pos = text.search(this.re.host_fuzzy_test);
      if (tld_pos >= 0) {
        // if tld is located after found link - no need to check fuzzy pattern
        if (this.__index__ < 0 || tld_pos < this.__index__) {
          if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
            shift = ml.index + ml[1].length;

            if (this.__index__ < 0 || shift < this.__index__) {
              this.__schema__ = '';
              this.__index__ = shift;
              this.__last_index__ = ml.index + ml[0].length;
            }
          }
        }
      }
    }

    if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
      // guess schemaless emails
      at_pos = text.indexOf('@');
      if (at_pos >= 0) {
        // We can't skip this check, because this cases are possible:
        // 192.168.1.1@gmail.com, my.in@example.com
        if ((me = text.match(this.re.email_fuzzy)) !== null) {
          shift = me.index + me[1].length;
          next = me.index + me[0].length;

          if (this.__index__ < 0 || shift < this.__index__ ||
              (shift === this.__index__ && next > this.__last_index__)) {
            this.__schema__ = 'mailto:';
            this.__index__ = shift;
            this.__last_index__ = next;
          }
        }
      }
    }

    return this.__index__ >= 0
  };

  /**
   * LinkifyIt#pretest(text) -> Boolean
   *
   * Very quick check, that can give false positives. Returns true if link MAY BE
   * can exists. Can be used for speed optimization, when you need to check that
   * link NOT exists.
   **/
  LinkifyIt.prototype.pretest = function pretest (text) {
    return this.re.pretest.test(text)
  };

  /**
   * LinkifyIt#testSchemaAt(text, name, position) -> Number
   * - text (String): text to scan
   * - name (String): rule (schema) name
   * - position (Number): text offset to check from
   *
   * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
   * at given position. Returns length of found pattern (0 on fail).
   **/
  LinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {
    // If not supported schema check requested - terminate
    if (!this.__compiled__[schema.toLowerCase()]) {
      return 0
    }
    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)
  };

  /**
   * LinkifyIt#match(text) -> Array|null
   *
   * Returns array of found link descriptions or `null` on fail. We strongly
   * recommend to use [[LinkifyIt#test]] first, for best speed.
   *
   * ##### Result match description
   *
   * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
   *   protocol-neutral  links.
   * - __index__ - offset of matched text
   * - __lastIndex__ - index of next char after mathch end
   * - __raw__ - matched text
   * - __text__ - normalized text
   * - __url__ - link, generated from matched text
   **/
  LinkifyIt.prototype.match = function match (text) {
    const result = [];
    let shift = 0;

    // Try to take previous element from cache, if .test() called before
    if (this.__index__ >= 0 && this.__text_cache__ === text) {
      result.push(createMatch(this, shift));
      shift = this.__last_index__;
    }

    // Cut head if cache was used
    let tail = shift ? text.slice(shift) : text;

    // Scan string until end reached
    while (this.test(tail)) {
      result.push(createMatch(this, shift));

      tail = tail.slice(this.__last_index__);
      shift += this.__last_index__;
    }

    if (result.length) {
      return result
    }

    return null
  };

  /**
   * LinkifyIt#matchAtStart(text) -> Match|null
   *
   * Returns fully-formed (not fuzzy) link if it starts at the beginning
   * of the string, and null otherwise.
   **/
  LinkifyIt.prototype.matchAtStart = function matchAtStart (text) {
    // Reset scan cache
    this.__text_cache__ = text;
    this.__index__ = -1;

    if (!text.length) return null

    const m = this.re.schema_at_start.exec(text);
    if (!m) return null

    const len = this.testSchemaAt(text, m[2], m[0].length);
    if (!len) return null

    this.__schema__ = m[2];
    this.__index__ = m.index + m[1].length;
    this.__last_index__ = m.index + m[0].length + len;

    return createMatch(this, 0)
  };

  /** chainable
   * LinkifyIt#tlds(list [, keepOld]) -> this
   * - list (Array): list of tlds
   * - keepOld (Boolean): merge with current list if `true` (`false` by default)
   *
   * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
   * to avoid false positives. By default this algorythm used:
   *
   * - hostname with any 2-letter root zones are ok.
   * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
   *   are ok.
   * - encoded (`xn--...`) root zones are ok.
   *
   * If list is replaced, then exact match for 2-chars root zones will be checked.
   **/
  LinkifyIt.prototype.tlds = function tlds (list, keepOld) {
    list = Array.isArray(list) ? list : [list];

    if (!keepOld) {
      this.__tlds__ = list.slice();
      this.__tlds_replaced__ = true;
      compile(this);
      return this
    }

    this.__tlds__ = this.__tlds__.concat(list)
      .sort()
      .filter(function (el, idx, arr) {
        return el !== arr[idx - 1]
      })
      .reverse();

    compile(this);
    return this
  };

  /**
   * LinkifyIt#normalize(match)
   *
   * Default normalizer (if schema does not define it's own).
   **/
  LinkifyIt.prototype.normalize = function normalize (match) {
    // Do minimal possible changes by default. Need to collect feedback prior
    // to move forward https://github.com/markdown-it/linkify-it/issues/1

    if (!match.schema) { match.url = 'http://' + match.url; }

    if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
      match.url = 'mailto:' + match.url;
    }
  };

  /**
   * LinkifyIt#onCompile()
   *
   * Override to modify basic RegExp-s.
   **/
  LinkifyIt.prototype.onCompile = function onCompile () {
  };

  /** Highest positive signed 32-bit float value */
  const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  const base = 36;
  const tMin = 1;
  const tMax = 26;
  const skew = 38;
  const damp = 700;
  const initialBias = 72;
  const initialN = 128; // 0x80
  const delimiter = '-'; // '\x2D'

  /** Regular expressions */
  const regexPunycode = /^xn--/;
  const regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
  const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  const errors = {
  	'overflow': 'Overflow: input needs wider integers to process',
  	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  	'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  const baseMinusTMin = base - tMin;
  const floor = Math.floor;
  const stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
  	throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map$1(array, callback) {
  	const result = [];
  	let length = array.length;
  	while (length--) {
  		result[length] = callback(array[length]);
  	}
  	return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {String} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(domain, callback) {
  	const parts = domain.split('@');
  	let result = '';
  	if (parts.length > 1) {
  		// In email addresses, only the domain name should be punycoded. Leave
  		// the local part (i.e. everything up to `@`) intact.
  		result = parts[0] + '@';
  		domain = parts[1];
  	}
  	// Avoid `split(regex)` for IE8 compatibility. See #17.
  	domain = domain.replace(regexSeparators, '\x2E');
  	const labels = domain.split('.');
  	const encoded = map$1(labels, callback).join('.');
  	return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
  	const output = [];
  	let counter = 0;
  	const length = string.length;
  	while (counter < length) {
  		const value = string.charCodeAt(counter++);
  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  			// It's a high surrogate, and there is a next character.
  			const extra = string.charCodeAt(counter++);
  			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  			} else {
  				// It's an unmatched surrogate; only append this code unit, in case the
  				// next code unit is the high surrogate of a surrogate pair.
  				output.push(value);
  				counter--;
  			}
  		} else {
  			output.push(value);
  		}
  	}
  	return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  const ucs2encode = codePoints => String.fromCodePoint(...codePoints);

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  const basicToDigit = function(codePoint) {
  	if (codePoint >= 0x30 && codePoint < 0x3A) {
  		return 26 + (codePoint - 0x30);
  	}
  	if (codePoint >= 0x41 && codePoint < 0x5B) {
  		return codePoint - 0x41;
  	}
  	if (codePoint >= 0x61 && codePoint < 0x7B) {
  		return codePoint - 0x61;
  	}
  	return base;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  const digitToBasic = function(digit, flag) {
  	//  0..25 map to ASCII a..z or A..Z
  	// 26..35 map to ASCII 0..9
  	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  const adapt = function(delta, numPoints, firstTime) {
  	let k = 0;
  	delta = firstTime ? floor(delta / damp) : delta >> 1;
  	delta += floor(delta / numPoints);
  	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  		delta = floor(delta / baseMinusTMin);
  	}
  	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  const decode = function(input) {
  	// Don't use UCS-2.
  	const output = [];
  	const inputLength = input.length;
  	let i = 0;
  	let n = initialN;
  	let bias = initialBias;

  	// Handle the basic code points: let `basic` be the number of input code
  	// points before the last delimiter, or `0` if there is none, then copy
  	// the first basic code points to the output.

  	let basic = input.lastIndexOf(delimiter);
  	if (basic < 0) {
  		basic = 0;
  	}

  	for (let j = 0; j < basic; ++j) {
  		// if it's not a basic code point
  		if (input.charCodeAt(j) >= 0x80) {
  			error('not-basic');
  		}
  		output.push(input.charCodeAt(j));
  	}

  	// Main decoding loop: start just after the last delimiter if any basic code
  	// points were copied; start at the beginning otherwise.

  	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

  		// `index` is the index of the next character to be consumed.
  		// Decode a generalized variable-length integer into `delta`,
  		// which gets added to `i`. The overflow checking is easier
  		// if we increase `i` as we go, then subtract off its starting
  		// value at the end to obtain `delta`.
  		const oldi = i;
  		for (let w = 1, k = base; /* no condition */; k += base) {

  			if (index >= inputLength) {
  				error('invalid-input');
  			}

  			const digit = basicToDigit(input.charCodeAt(index++));

  			if (digit >= base) {
  				error('invalid-input');
  			}
  			if (digit > floor((maxInt - i) / w)) {
  				error('overflow');
  			}

  			i += digit * w;
  			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

  			if (digit < t) {
  				break;
  			}

  			const baseMinusT = base - t;
  			if (w > floor(maxInt / baseMinusT)) {
  				error('overflow');
  			}

  			w *= baseMinusT;

  		}

  		const out = output.length + 1;
  		bias = adapt(i - oldi, out, oldi == 0);

  		// `i` was supposed to wrap around from `out` to `0`,
  		// incrementing `n` each time, so we'll fix that now:
  		if (floor(i / out) > maxInt - n) {
  			error('overflow');
  		}

  		n += floor(i / out);
  		i %= out;

  		// Insert `n` at position `i` of the output.
  		output.splice(i++, 0, n);

  	}

  	return String.fromCodePoint(...output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  const encode = function(input) {
  	const output = [];

  	// Convert the input in UCS-2 to an array of Unicode code points.
  	input = ucs2decode(input);

  	// Cache the length.
  	const inputLength = input.length;

  	// Initialize the state.
  	let n = initialN;
  	let delta = 0;
  	let bias = initialBias;

  	// Handle the basic code points.
  	for (const currentValue of input) {
  		if (currentValue < 0x80) {
  			output.push(stringFromCharCode(currentValue));
  		}
  	}

  	const basicLength = output.length;
  	let handledCPCount = basicLength;

  	// `handledCPCount` is the number of code points that have been handled;
  	// `basicLength` is the number of basic code points.

  	// Finish the basic string with a delimiter unless it's empty.
  	if (basicLength) {
  		output.push(delimiter);
  	}

  	// Main encoding loop:
  	while (handledCPCount < inputLength) {

  		// All non-basic code points < n have been handled already. Find the next
  		// larger one:
  		let m = maxInt;
  		for (const currentValue of input) {
  			if (currentValue >= n && currentValue < m) {
  				m = currentValue;
  			}
  		}

  		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  		// but guard against overflow.
  		const handledCPCountPlusOne = handledCPCount + 1;
  		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  			error('overflow');
  		}

  		delta += (m - n) * handledCPCountPlusOne;
  		n = m;

  		for (const currentValue of input) {
  			if (currentValue < n && ++delta > maxInt) {
  				error('overflow');
  			}
  			if (currentValue === n) {
  				// Represent delta as a generalized variable-length integer.
  				let q = delta;
  				for (let k = base; /* no condition */; k += base) {
  					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  					if (q < t) {
  						break;
  					}
  					const qMinusT = q - t;
  					const baseMinusT = base - t;
  					output.push(
  						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  					);
  					q = floor(qMinusT / baseMinusT);
  				}

  				output.push(stringFromCharCode(digitToBasic(q, 0)));
  				bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
  				delta = 0;
  				++handledCPCount;
  			}
  		}

  		++delta;
  		++n;

  	}
  	return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  const toUnicode = function(input) {
  	return mapDomain(input, function(string) {
  		return regexPunycode.test(string)
  			? decode(string.slice(4).toLowerCase())
  			: string;
  	});
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  const toASCII = function(input) {
  	return mapDomain(input, function(string) {
  		return regexNonASCII.test(string)
  			? 'xn--' + encode(string)
  			: string;
  	});
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  const punycode = {
  	/**
  	 * A string representing the current Punycode.js version number.
  	 * @memberOf punycode
  	 * @type String
  	 */
  	'version': '2.3.1',
  	/**
  	 * An object of methods to convert from JavaScript's internal character
  	 * representation (UCS-2) to Unicode code points, and back.
  	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  	 * @memberOf punycode
  	 * @type Object
  	 */
  	'ucs2': {
  		'decode': ucs2decode,
  		'encode': ucs2encode
  	},
  	'decode': decode,
  	'encode': encode,
  	'toASCII': toASCII,
  	'toUnicode': toUnicode
  };

  // markdown-it default options

  var cfg_default = {
    options: {
      // Enable HTML tags in source
      html: false,

      // Use '/' to close single tags (<br />)
      xhtmlOut: false,

      // Convert '\n' in paragraphs into <br>
      breaks: false,

      // CSS language prefix for fenced blocks
      langPrefix: 'language-',

      // autoconvert URL-like texts to links
      linkify: false,

      // Enable some language-neutral replacements + quotes beautification
      typographer: false,

      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,

      // Internal protection, recursion limit
      maxNesting: 100
    },

    components: {
      core: {},
      block: {},
      inline: {}
    }
  };

  // "Zero" preset, with nothing enabled. Useful for manual configuring of simple
  // modes. For example, to parse bold/italic only.

  var cfg_zero = {
    options: {
      // Enable HTML tags in source
      html: false,

      // Use '/' to close single tags (<br />)
      xhtmlOut: false,

      // Convert '\n' in paragraphs into <br>
      breaks: false,

      // CSS language prefix for fenced blocks
      langPrefix: 'language-',

      // autoconvert URL-like texts to links
      linkify: false,

      // Enable some language-neutral replacements + quotes beautification
      typographer: false,

      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,

      // Internal protection, recursion limit
      maxNesting: 20
    },

    components: {

      core: {
        rules: [
          'normalize',
          'block',
          'inline',
          'text_join'
        ]
      },

      block: {
        rules: [
          'paragraph'
        ]
      },

      inline: {
        rules: [
          'text'
        ],
        rules2: [
          'balance_pairs',
          'fragments_join'
        ]
      }
    }
  };

  // Commonmark default options

  var cfg_commonmark = {
    options: {
      // Enable HTML tags in source
      html: true,

      // Use '/' to close single tags (<br />)
      xhtmlOut: true,

      // Convert '\n' in paragraphs into <br>
      breaks: false,

      // CSS language prefix for fenced blocks
      langPrefix: 'language-',

      // autoconvert URL-like texts to links
      linkify: false,

      // Enable some language-neutral replacements + quotes beautification
      typographer: false,

      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,

      // Internal protection, recursion limit
      maxNesting: 20
    },

    components: {

      core: {
        rules: [
          'normalize',
          'block',
          'inline',
          'text_join'
        ]
      },

      block: {
        rules: [
          'blockquote',
          'code',
          'fence',
          'heading',
          'hr',
          'html_block',
          'lheading',
          'list',
          'reference',
          'paragraph'
        ]
      },

      inline: {
        rules: [
          'autolink',
          'backticks',
          'emphasis',
          'entity',
          'escape',
          'html_inline',
          'image',
          'link',
          'newline',
          'text'
        ],
        rules2: [
          'balance_pairs',
          'emphasis',
          'fragments_join'
        ]
      }
    }
  };

  // Main parser class


  const config = {
    default: cfg_default,
    zero: cfg_zero,
    commonmark: cfg_commonmark
  };

  //
  // This validator can prohibit more than really needed to prevent XSS. It's a
  // tradeoff to keep code simple and to be secure by default.
  //
  // If you need different setup - override validator method as you wish. Or
  // replace it with dummy function and use external sanitizer.
  //

  const BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
  const GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

  function validateLink (url) {
    // url should be normalized at this point, and existing entities are decoded
    const str = url.trim().toLowerCase();

    return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true
  }

  const RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];

  function normalizeLink (url) {
    const parsed = urlParse(url, true);

    if (parsed.hostname) {
      // Encode hostnames in urls like:
      // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
      //
      // We don't encode unknown schemas, because it's likely that we encode
      // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
      //
      if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
        try {
          parsed.hostname = punycode.toASCII(parsed.hostname);
        } catch (er) { /**/ }
      }
    }

    return encode$1(format(parsed))
  }

  function normalizeLinkText (url) {
    const parsed = urlParse(url, true);

    if (parsed.hostname) {
      // Encode hostnames in urls like:
      // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
      //
      // We don't encode unknown schemas, because it's likely that we encode
      // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
      //
      if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
        try {
          parsed.hostname = punycode.toUnicode(parsed.hostname);
        } catch (er) { /**/ }
      }
    }

    // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
    return decode$1(format(parsed), decode$1.defaultChars + '%')
  }

  /**
   * class MarkdownIt
   *
   * Main parser/renderer class.
   *
   * ##### Usage
   *
   * ```javascript
   * // node.js, "classic" way:
   * var MarkdownIt = require('markdown-it'),
   *     md = new MarkdownIt();
   * var result = md.render('# markdown-it rulezz!');
   *
   * // node.js, the same, but with sugar:
   * var md = require('markdown-it')();
   * var result = md.render('# markdown-it rulezz!');
   *
   * // browser without AMD, added to "window" on script load
   * // Note, there are no dash.
   * var md = window.markdownit();
   * var result = md.render('# markdown-it rulezz!');
   * ```
   *
   * Single line rendering, without paragraph wrap:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * var result = md.renderInline('__markdown-it__ rulezz!');
   * ```
   **/

  /**
   * new MarkdownIt([presetName, options])
   * - presetName (String): optional, `commonmark` / `zero`
   * - options (Object)
   *
   * Creates parser instanse with given config. Can be called without `new`.
   *
   * ##### presetName
   *
   * MarkdownIt provides named presets as a convenience to quickly
   * enable/disable active syntax rules and options for common use cases.
   *
   * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -
   *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
   * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -
   *   similar to GFM, used when no preset name given. Enables all available rules,
   *   but still without html, typographer & autolinker.
   * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -
   *   all rules disabled. Useful to quickly setup your config via `.enable()`.
   *   For example, when you need only `bold` and `italic` markup and nothing else.
   *
   * ##### options:
   *
   * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
   *   That's not safe! You may need external sanitizer to protect output from XSS.
   *   It's better to extend features via plugins, instead of enabling HTML.
   * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
   *   (`<br />`). This is needed only for full CommonMark compatibility. In real
   *   world you will need HTML output.
   * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
   * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
   *   Can be useful for external highlighters.
   * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
   * - __typographer__  - `false`. Set `true` to enable [some language-neutral
   *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +
   *   quotes beautification (smartquotes).
   * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
   *   pairs, when typographer enabled and smartquotes on. For example, you can
   *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
   *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
   * - __highlight__ - `null`. Highlighter function for fenced code blocks.
   *   Highlighter `function (str, lang)` should return escaped HTML. It can also
   *   return empty string if the source was not changed and should be escaped
   *   externaly. If result starts with <pre... internal wrapper is skipped.
   *
   * ##### Example
   *
   * ```javascript
   * // commonmark mode
   * var md = require('markdown-it')('commonmark');
   *
   * // default mode
   * var md = require('markdown-it')();
   *
   * // enable everything
   * var md = require('markdown-it')({
   *   html: true,
   *   linkify: true,
   *   typographer: true
   * });
   * ```
   *
   * ##### Syntax highlighting
   *
   * ```js
   * var hljs = require('highlight.js') // https://highlightjs.org/
   *
   * var md = require('markdown-it')({
   *   highlight: function (str, lang) {
   *     if (lang && hljs.getLanguage(lang)) {
   *       try {
   *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
   *       } catch (__) {}
   *     }
   *
   *     return ''; // use external default escaping
   *   }
   * });
   * ```
   *
   * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):
   *
   * ```javascript
   * var hljs = require('highlight.js') // https://highlightjs.org/
   *
   * // Actual default values
   * var md = require('markdown-it')({
   *   highlight: function (str, lang) {
   *     if (lang && hljs.getLanguage(lang)) {
   *       try {
   *         return '<pre><code class="hljs">' +
   *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
   *                '</code></pre>';
   *       } catch (__) {}
   *     }
   *
   *     return '<pre><code class="hljs">' + md.utils.escapeHtml(str) + '</code></pre>';
   *   }
   * });
   * ```
   *
   **/
  function MarkdownIt (presetName, options) {
    if (!(this instanceof MarkdownIt)) {
      return new MarkdownIt(presetName, options)
    }

    if (!options) {
      if (!isString$1(presetName)) {
        options = presetName || {};
        presetName = 'default';
      }
    }

    /**
     * MarkdownIt#inline -> ParserInline
     *
     * Instance of [[ParserInline]]. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/
    this.inline = new ParserInline();

    /**
     * MarkdownIt#block -> ParserBlock
     *
     * Instance of [[ParserBlock]]. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/
    this.block = new ParserBlock();

    /**
     * MarkdownIt#core -> Core
     *
     * Instance of [[Core]] chain executor. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/
    this.core = new Core();

    /**
     * MarkdownIt#renderer -> Renderer
     *
     * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
     * rules for new token types, generated by plugins.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * function myToken(tokens, idx, options, env, self) {
     *   //...
     *   return result;
     * };
     *
     * md.renderer.rules['my_token'] = myToken
     * ```
     *
     * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).
     **/
    this.renderer = new Renderer();

    /**
     * MarkdownIt#linkify -> LinkifyIt
     *
     * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
     * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)
     * rule.
     **/
    this.linkify = new LinkifyIt();

    /**
     * MarkdownIt#validateLink(url) -> Boolean
     *
     * Link validation function. CommonMark allows too much in links. By default
     * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
     * except some embedded image types.
     *
     * You can change this behaviour:
     *
     * ```javascript
     * var md = require('markdown-it')();
     * // enable everything
     * md.validateLink = function () { return true; }
     * ```
     **/
    this.validateLink = validateLink;

    /**
     * MarkdownIt#normalizeLink(url) -> String
     *
     * Function used to encode link url to a machine-readable format,
     * which includes url-encoding, punycode, etc.
     **/
    this.normalizeLink = normalizeLink;

    /**
     * MarkdownIt#normalizeLinkText(url) -> String
     *
     * Function used to decode link url to a human-readable format`
     **/
    this.normalizeLinkText = normalizeLinkText;

    // Expose utils & helpers for easy acces from plugins

    /**
     * MarkdownIt#utils -> utils
     *
     * Assorted utility functions, useful to write plugins. See details
     * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).
     **/
    this.utils = utils;

    /**
     * MarkdownIt#helpers -> helpers
     *
     * Link components parser functions, useful to write plugins. See details
     * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
     **/
    this.helpers = assign$1({}, helpers);

    this.options = {};
    this.configure(presetName);

    if (options) { this.set(options); }
  }

  /** chainable
   * MarkdownIt.set(options)
   *
   * Set parser options (in the same format as in constructor). Probably, you
   * will never need it, but you can change options after constructor call.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')()
   *             .set({ html: true, breaks: true })
   *             .set({ typographer, true });
   * ```
   *
   * __Note:__ To achieve the best possible performance, don't modify a
   * `markdown-it` instance options on the fly. If you need multiple configurations
   * it's best to create multiple instances and initialize each with separate
   * config.
   **/
  MarkdownIt.prototype.set = function (options) {
    assign$1(this.options, options);
    return this
  };

  /** chainable, internal
   * MarkdownIt.configure(presets)
   *
   * Batch load of all options and compenent settings. This is internal method,
   * and you probably will not need it. But if you will - see available presets
   * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
   *
   * We strongly recommend to use presets instead of direct config loads. That
   * will give better compatibility with next versions.
   **/
  MarkdownIt.prototype.configure = function (presets) {
    const self = this;

    if (isString$1(presets)) {
      const presetName = presets;
      presets = config[presetName];
      if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name') }
    }

    if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty') }

    if (presets.options) { self.set(presets.options); }

    if (presets.components) {
      Object.keys(presets.components).forEach(function (name) {
        if (presets.components[name].rules) {
          self[name].ruler.enableOnly(presets.components[name].rules);
        }
        if (presets.components[name].rules2) {
          self[name].ruler2.enableOnly(presets.components[name].rules2);
        }
      });
    }
    return this
  };

  /** chainable
   * MarkdownIt.enable(list, ignoreInvalid)
   * - list (String|Array): rule name or list of rule names to enable
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable list or rules. It will automatically find appropriate components,
   * containing rules with given names. If rule not found, and `ignoreInvalid`
   * not set - throws exception.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')()
   *             .enable(['sub', 'sup'])
   *             .disable('smartquotes');
   * ```
   **/
  MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
    let result = [];

    if (!Array.isArray(list)) { list = [list]; }

    ['core', 'block', 'inline'].forEach(function (chain) {
      result = result.concat(this[chain].ruler.enable(list, true));
    }, this);

    result = result.concat(this.inline.ruler2.enable(list, true));

    const missed = list.filter(function (name) { return result.indexOf(name) < 0 });

    if (missed.length && !ignoreInvalid) {
      throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)
    }

    return this
  };

  /** chainable
   * MarkdownIt.disable(list, ignoreInvalid)
   * - list (String|Array): rule name or list of rule names to disable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * The same as [[MarkdownIt.enable]], but turn specified rules off.
   **/
  MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
    let result = [];

    if (!Array.isArray(list)) { list = [list]; }

    ['core', 'block', 'inline'].forEach(function (chain) {
      result = result.concat(this[chain].ruler.disable(list, true));
    }, this);

    result = result.concat(this.inline.ruler2.disable(list, true));

    const missed = list.filter(function (name) { return result.indexOf(name) < 0 });

    if (missed.length && !ignoreInvalid) {
      throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)
    }
    return this
  };

  /** chainable
   * MarkdownIt.use(plugin, params)
   *
   * Load specified plugin with given params into current parser instance.
   * It's just a sugar to call `plugin(md, params)` with curring.
   *
   * ##### Example
   *
   * ```javascript
   * var iterator = require('markdown-it-for-inline');
   * var md = require('markdown-it')()
   *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
   *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
   *             });
   * ```
   **/
  MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
    const args = [this].concat(Array.prototype.slice.call(arguments, 1));
    plugin.apply(plugin, args);
    return this
  };

  /** internal
   * MarkdownIt.parse(src, env) -> Array
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Parse input string and return list of block tokens (special token type
   * "inline" will contain list of inline tokens). You should not call this
   * method directly, until you write custom renderer (for example, to produce
   * AST).
   *
   * `env` is used to pass data between "distributed" rules and return additional
   * metadata like reference info, needed for the renderer. It also can be used to
   * inject data in specific cases. Usually, you will be ok to pass `{}`,
   * and then pass updated object to renderer.
   **/
  MarkdownIt.prototype.parse = function (src, env) {
    if (typeof src !== 'string') {
      throw new Error('Input data should be a String')
    }

    const state = new this.core.State(src, this, env);

    this.core.process(state);

    return state.tokens
  };

  /**
   * MarkdownIt.render(src [, env]) -> String
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Render markdown string into html. It does all magic for you :).
   *
   * `env` can be used to inject additional metadata (`{}` by default).
   * But you will not need it with high probability. See also comment
   * in [[MarkdownIt.parse]].
   **/
  MarkdownIt.prototype.render = function (src, env) {
    env = env || {};

    return this.renderer.render(this.parse(src, env), this.options, env)
  };

  /** internal
   * MarkdownIt.parseInline(src, env) -> Array
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
   * block tokens list with the single `inline` element, containing parsed inline
   * tokens in `children` property. Also updates `env` object.
   **/
  MarkdownIt.prototype.parseInline = function (src, env) {
    const state = new this.core.State(src, this, env);

    state.inlineMode = true;
    this.core.process(state);

    return state.tokens
  };

  /**
   * MarkdownIt.renderInline(src [, env]) -> String
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
   * will NOT be wrapped into `<p>` tags.
   **/
  MarkdownIt.prototype.renderInline = function (src, env) {
    env = env || {};

    return this.renderer.render(this.parseInline(src, env), this.options, env)
  };

  function setupMarkdownIt(markdownit, highlighter, options) {
    const {
      parseMetaString,
      trimEndingNewline = true,
      defaultLanguage = "text",
      fallbackLanguage
    } = options;
    const langs = highlighter.getLoadedLanguages();
    markdownit.options.highlight = (code, lang = "text", attrs) => {
      if (lang === "") {
        lang = defaultLanguage;
      }
      if (fallbackLanguage && !langs.includes(lang)) {
        lang = fallbackLanguage;
      }
      const meta = parseMetaString?.(attrs, code, lang) || {};
      const codeOptions = {
        ...options,
        lang,
        meta: {
          ...options.meta,
          ...meta,
          __raw: attrs
        }
      };
      const builtInTransformer = [];
      builtInTransformer.push({
        name: "@shikijs/markdown-it:block-class",
        code(node) {
          node.properties.class = `language-${lang}`;
        }
      });
      if (trimEndingNewline) {
        if (code.endsWith("\n"))
          code = code.slice(0, -1);
      }
      return highlighter.codeToHtml(
        code,
        {
          ...codeOptions,
          transformers: [
            ...builtInTransformer,
            ...codeOptions.transformers || []
          ]
        }
      );
    };
  }
  function fromHighlighter(highlighter, options) {
    return function(markdownit) {
      setupMarkdownIt(markdownit, highlighter, options);
    };
  }

  let ShikiError$2 = class ShikiError extends Error {
    constructor(message) {
      super(message);
      this.name = "ShikiError";
    }
  };

  let ShikiError$1 = class ShikiError extends Error {
    constructor(message) {
      super(message);
      this.name = "ShikiError";
    }
  };

  function getHeapMax() {
    return 2147483648;
  }
  function _emscripten_get_now() {
    return typeof performance !== "undefined" ? performance.now() : Date.now();
  }
  const alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
  async function main(init) {
    let wasmMemory;
    let buffer;
    const binding = {};
    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      binding.HEAPU8 = new Uint8Array(buf);
      binding.HEAPU32 = new Uint32Array(buf);
    }
    function _emscripten_memcpy_big(dest, src, num) {
      binding.HEAPU8.copyWithin(dest, src, src + num);
    }
    function emscripten_realloc_buffer(size) {
      try {
        wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1;
      } catch {
      }
    }
    function _emscripten_resize_heap(requestedSize) {
      const oldSize = binding.HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      const maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize)
        return false;
      for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {
        let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
        const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
        const replacement = emscripten_realloc_buffer(newSize);
        if (replacement)
          return true;
      }
      return false;
    }
    const UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
    function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {
      const endIdx = idx + maxBytesToRead;
      let endPtr = idx;
      while (heapOrArray[endPtr] && !(endPtr >= endIdx))
        ++endPtr;
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      let str = "";
      while (idx < endPtr) {
        let u0 = heapOrArray[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        const u1 = heapOrArray[idx++] & 63;
        if ((u0 & 224) === 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        const u2 = heapOrArray[idx++] & 63;
        if ((u0 & 240) === 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          const ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
      return str;
    }
    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : "";
    }
    const asmLibraryArg = {
      emscripten_get_now: _emscripten_get_now,
      emscripten_memcpy_big: _emscripten_memcpy_big,
      emscripten_resize_heap: _emscripten_resize_heap,
      fd_write: () => 0
    };
    async function createWasm() {
      const info = {
        env: asmLibraryArg,
        wasi_snapshot_preview1: asmLibraryArg
      };
      const exports = await init(info);
      wasmMemory = exports.memory;
      updateGlobalBufferAndViews(wasmMemory.buffer);
      Object.assign(binding, exports);
      binding.UTF8ToString = UTF8ToString;
    }
    await createWasm();
    return binding;
  }

  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  let onigBinding = null;
  function throwLastOnigError(onigBinding2) {
    throw new ShikiError$1(onigBinding2.UTF8ToString(onigBinding2.getLastOnigError()));
  }
  class UtfString {
    constructor(str) {
      __publicField(this, "utf16Length");
      __publicField(this, "utf8Length");
      __publicField(this, "utf16Value");
      __publicField(this, "utf8Value");
      __publicField(this, "utf16OffsetToUtf8");
      __publicField(this, "utf8OffsetToUtf16");
      const utf16Length = str.length;
      const utf8Length = UtfString._utf8ByteLength(str);
      const computeIndicesMapping = utf8Length !== utf16Length;
      const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;
      if (computeIndicesMapping)
        utf16OffsetToUtf8[utf16Length] = utf8Length;
      const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;
      if (computeIndicesMapping)
        utf8OffsetToUtf16[utf8Length] = utf16Length;
      const utf8Value = new Uint8Array(utf8Length);
      let i8 = 0;
      for (let i16 = 0; i16 < utf16Length; i16++) {
        const charCode = str.charCodeAt(i16);
        let codePoint = charCode;
        let wasSurrogatePair = false;
        if (charCode >= 55296 && charCode <= 56319) {
          if (i16 + 1 < utf16Length) {
            const nextCharCode = str.charCodeAt(i16 + 1);
            if (nextCharCode >= 56320 && nextCharCode <= 57343) {
              codePoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;
              wasSurrogatePair = true;
            }
          }
        }
        if (computeIndicesMapping) {
          utf16OffsetToUtf8[i16] = i8;
          if (wasSurrogatePair)
            utf16OffsetToUtf8[i16 + 1] = i8;
          if (codePoint <= 127) {
            utf8OffsetToUtf16[i8 + 0] = i16;
          } else if (codePoint <= 2047) {
            utf8OffsetToUtf16[i8 + 0] = i16;
            utf8OffsetToUtf16[i8 + 1] = i16;
          } else if (codePoint <= 65535) {
            utf8OffsetToUtf16[i8 + 0] = i16;
            utf8OffsetToUtf16[i8 + 1] = i16;
            utf8OffsetToUtf16[i8 + 2] = i16;
          } else {
            utf8OffsetToUtf16[i8 + 0] = i16;
            utf8OffsetToUtf16[i8 + 1] = i16;
            utf8OffsetToUtf16[i8 + 2] = i16;
            utf8OffsetToUtf16[i8 + 3] = i16;
          }
        }
        if (codePoint <= 127) {
          utf8Value[i8++] = codePoint;
        } else if (codePoint <= 2047) {
          utf8Value[i8++] = 192 | (codePoint & 1984) >>> 6;
          utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;
        } else if (codePoint <= 65535) {
          utf8Value[i8++] = 224 | (codePoint & 61440) >>> 12;
          utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;
          utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;
        } else {
          utf8Value[i8++] = 240 | (codePoint & 1835008) >>> 18;
          utf8Value[i8++] = 128 | (codePoint & 258048) >>> 12;
          utf8Value[i8++] = 128 | (codePoint & 4032) >>> 6;
          utf8Value[i8++] = 128 | (codePoint & 63) >>> 0;
        }
        if (wasSurrogatePair)
          i16++;
      }
      this.utf16Length = utf16Length;
      this.utf8Length = utf8Length;
      this.utf16Value = str;
      this.utf8Value = utf8Value;
      this.utf16OffsetToUtf8 = utf16OffsetToUtf8;
      this.utf8OffsetToUtf16 = utf8OffsetToUtf16;
    }
    static _utf8ByteLength(str) {
      let result = 0;
      for (let i = 0, len = str.length; i < len; i++) {
        const charCode = str.charCodeAt(i);
        let codepoint = charCode;
        let wasSurrogatePair = false;
        if (charCode >= 55296 && charCode <= 56319) {
          if (i + 1 < len) {
            const nextCharCode = str.charCodeAt(i + 1);
            if (nextCharCode >= 56320 && nextCharCode <= 57343) {
              codepoint = (charCode - 55296 << 10) + 65536 | nextCharCode - 56320;
              wasSurrogatePair = true;
            }
          }
        }
        if (codepoint <= 127)
          result += 1;
        else if (codepoint <= 2047)
          result += 2;
        else if (codepoint <= 65535)
          result += 3;
        else
          result += 4;
        if (wasSurrogatePair)
          i++;
      }
      return result;
    }
    createString(onigBinding2) {
      const result = onigBinding2.omalloc(this.utf8Length);
      onigBinding2.HEAPU8.set(this.utf8Value, result);
      return result;
    }
  }
  const _OnigString = class {
    constructor(str) {
      __publicField(this, "id", ++_OnigString.LAST_ID);
      __publicField(this, "_onigBinding");
      __publicField(this, "content");
      __publicField(this, "utf16Length");
      __publicField(this, "utf8Length");
      __publicField(this, "utf16OffsetToUtf8");
      __publicField(this, "utf8OffsetToUtf16");
      __publicField(this, "ptr");
      if (!onigBinding)
        throw new ShikiError$1("Must invoke loadWasm first.");
      this._onigBinding = onigBinding;
      this.content = str;
      const utfString = new UtfString(str);
      this.utf16Length = utfString.utf16Length;
      this.utf8Length = utfString.utf8Length;
      this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;
      this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;
      if (this.utf8Length < 1e4 && !_OnigString._sharedPtrInUse) {
        if (!_OnigString._sharedPtr)
          _OnigString._sharedPtr = onigBinding.omalloc(1e4);
        _OnigString._sharedPtrInUse = true;
        onigBinding.HEAPU8.set(utfString.utf8Value, _OnigString._sharedPtr);
        this.ptr = _OnigString._sharedPtr;
      } else {
        this.ptr = utfString.createString(onigBinding);
      }
    }
    convertUtf8OffsetToUtf16(utf8Offset) {
      if (this.utf8OffsetToUtf16) {
        if (utf8Offset < 0)
          return 0;
        if (utf8Offset > this.utf8Length)
          return this.utf16Length;
        return this.utf8OffsetToUtf16[utf8Offset];
      }
      return utf8Offset;
    }
    convertUtf16OffsetToUtf8(utf16Offset) {
      if (this.utf16OffsetToUtf8) {
        if (utf16Offset < 0)
          return 0;
        if (utf16Offset > this.utf16Length)
          return this.utf8Length;
        return this.utf16OffsetToUtf8[utf16Offset];
      }
      return utf16Offset;
    }
    dispose() {
      if (this.ptr === _OnigString._sharedPtr)
        _OnigString._sharedPtrInUse = false;
      else
        this._onigBinding.ofree(this.ptr);
    }
  };
  let OnigString = _OnigString;
  __publicField(OnigString, "LAST_ID", 0);
  __publicField(OnigString, "_sharedPtr", 0);
  // a pointer to a string of 10000 bytes
  __publicField(OnigString, "_sharedPtrInUse", false);
  class OnigScanner {
    constructor(patterns) {
      __publicField(this, "_onigBinding");
      __publicField(this, "_ptr");
      if (!onigBinding)
        throw new ShikiError$1("Must invoke loadWasm first.");
      const strPtrsArr = [];
      const strLenArr = [];
      for (let i = 0, len = patterns.length; i < len; i++) {
        const utfString = new UtfString(patterns[i]);
        strPtrsArr[i] = utfString.createString(onigBinding);
        strLenArr[i] = utfString.utf8Length;
      }
      const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);
      onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);
      const strLenPtr = onigBinding.omalloc(4 * patterns.length);
      onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);
      const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);
      for (let i = 0, len = patterns.length; i < len; i++)
        onigBinding.ofree(strPtrsArr[i]);
      onigBinding.ofree(strLenPtr);
      onigBinding.ofree(strPtrsPtr);
      if (scannerPtr === 0)
        throwLastOnigError(onigBinding);
      this._onigBinding = onigBinding;
      this._ptr = scannerPtr;
    }
    dispose() {
      this._onigBinding.freeOnigScanner(this._ptr);
    }
    findNextMatchSync(string, startPosition, arg) {
      let options = 0 /* None */;
      if (typeof arg === "number") {
        options = arg;
      }
      if (typeof string === "string") {
        string = new OnigString(string);
        const result = this._findNextMatchSync(string, startPosition, false, options);
        string.dispose();
        return result;
      }
      return this._findNextMatchSync(string, startPosition, false, options);
    }
    _findNextMatchSync(string, startPosition, debugCall, options) {
      const onigBinding2 = this._onigBinding;
      const resultPtr = onigBinding2.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);
      if (resultPtr === 0) {
        return null;
      }
      const HEAPU32 = onigBinding2.HEAPU32;
      let offset = resultPtr / 4;
      const index = HEAPU32[offset++];
      const count = HEAPU32[offset++];
      const captureIndices = [];
      for (let i = 0; i < count; i++) {
        const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);
        const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);
        captureIndices[i] = {
          start: beg,
          end,
          length: end - beg
        };
      }
      return {
        index,
        captureIndices
      };
    }
  }
  function isInstantiatorOptionsObject(dataOrOptions) {
    return typeof dataOrOptions.instantiator === "function";
  }
  function isInstantiatorModule(dataOrOptions) {
    return typeof dataOrOptions.default === "function";
  }
  function isDataOptionsObject(dataOrOptions) {
    return typeof dataOrOptions.data !== "undefined";
  }
  function isResponse(dataOrOptions) {
    return typeof Response !== "undefined" && dataOrOptions instanceof Response;
  }
  function isArrayBuffer(data) {
    return typeof ArrayBuffer !== "undefined" && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) || typeof Buffer !== "undefined" && Buffer.isBuffer?.(data) || typeof SharedArrayBuffer !== "undefined" && data instanceof SharedArrayBuffer || typeof Uint32Array !== "undefined" && data instanceof Uint32Array;
  }
  let initPromise;
  function loadWasm(options) {
    if (initPromise)
      return initPromise;
    async function _load() {
      onigBinding = await main(async (info) => {
        let instance = options;
        instance = await instance;
        if (typeof instance === "function")
          instance = await instance(info);
        if (typeof instance === "function")
          instance = await instance(info);
        if (isInstantiatorOptionsObject(instance)) {
          instance = await instance.instantiator(info);
        } else if (isInstantiatorModule(instance)) {
          instance = await instance.default(info);
        } else {
          if (isDataOptionsObject(instance))
            instance = instance.data;
          if (isResponse(instance)) {
            if (typeof WebAssembly.instantiateStreaming === "function")
              instance = await _makeResponseStreamingLoader(instance)(info);
            else
              instance = await _makeResponseNonStreamingLoader(instance)(info);
          } else if (isArrayBuffer(instance)) {
            instance = await _makeArrayBufferLoader(instance)(info);
          } else if (instance instanceof WebAssembly.Module) {
            instance = await _makeArrayBufferLoader(instance)(info);
          } else if ("default" in instance && instance.default instanceof WebAssembly.Module) {
            instance = await _makeArrayBufferLoader(instance.default)(info);
          }
        }
        if ("instance" in instance)
          instance = instance.instance;
        if ("exports" in instance)
          instance = instance.exports;
        return instance;
      });
    }
    initPromise = _load();
    return initPromise;
  }
  function _makeArrayBufferLoader(data) {
    return (importObject) => WebAssembly.instantiate(data, importObject);
  }
  function _makeResponseStreamingLoader(data) {
    return (importObject) => WebAssembly.instantiateStreaming(data, importObject);
  }
  function _makeResponseNonStreamingLoader(data) {
    return async (importObject) => {
      const arrayBuffer = await data.arrayBuffer();
      return WebAssembly.instantiate(arrayBuffer, importObject);
    };
  }

  let _defaultWasmLoader;
  function getDefaultWasmLoader() {
    return _defaultWasmLoader;
  }
  async function createOnigurumaEngine(options) {
    if (options)
      await loadWasm(options);
    return {
      createScanner(patterns) {
        return new OnigScanner(patterns.map((p) => typeof p === "string" ? p : p.source));
      },
      createString(s) {
        return new OnigString(s);
      }
    };
  }

  let _emitDeprecation = false;
  function warnDeprecated(message, version = 3) {
    if (!_emitDeprecation)
      return;
    {
      console.trace(`[SHIKI DEPRECATE]: ${message}`);
    }
  }

  // src/utils.ts
  function clone(something) {
    return doClone(something);
  }
  function doClone(something) {
    if (Array.isArray(something)) {
      return cloneArray(something);
    }
    if (something instanceof RegExp) {
      return something;
    }
    if (typeof something === "object") {
      return cloneObj(something);
    }
    return something;
  }
  function cloneArray(arr) {
    let r = [];
    for (let i = 0, len = arr.length; i < len; i++) {
      r[i] = doClone(arr[i]);
    }
    return r;
  }
  function cloneObj(obj) {
    let r = {};
    for (let key in obj) {
      r[key] = doClone(obj[key]);
    }
    return r;
  }
  function mergeObjects(target, ...sources) {
    sources.forEach((source) => {
      for (let key in source) {
        target[key] = source[key];
      }
    });
    return target;
  }
  function basename(path) {
    const idx = ~path.lastIndexOf("/") || ~path.lastIndexOf("\\");
    if (idx === 0) {
      return path;
    } else if (~idx === path.length - 1) {
      return basename(path.substring(0, path.length - 1));
    } else {
      return path.substr(~idx + 1);
    }
  }
  var CAPTURING_REGEX_SOURCE = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
  var RegexSource = class {
    static hasCaptures(regexSource) {
      if (regexSource === null) {
        return false;
      }
      CAPTURING_REGEX_SOURCE.lastIndex = 0;
      return CAPTURING_REGEX_SOURCE.test(regexSource);
    }
    static replaceCaptures(regexSource, captureSource, captureIndices) {
      return regexSource.replace(CAPTURING_REGEX_SOURCE, (match, index, commandIndex, command) => {
        let capture = captureIndices[parseInt(index || commandIndex, 10)];
        if (capture) {
          let result = captureSource.substring(capture.start, capture.end);
          while (result[0] === ".") {
            result = result.substring(1);
          }
          switch (command) {
            case "downcase":
              return result.toLowerCase();
            case "upcase":
              return result.toUpperCase();
            default:
              return result;
          }
        } else {
          return match;
        }
      });
    }
  };
  function strcmp(a, b) {
    if (a < b) {
      return -1;
    }
    if (a > b) {
      return 1;
    }
    return 0;
  }
  function strArrCmp(a, b) {
    if (a === null && b === null) {
      return 0;
    }
    if (!a) {
      return -1;
    }
    if (!b) {
      return 1;
    }
    let len1 = a.length;
    let len2 = b.length;
    if (len1 === len2) {
      for (let i = 0; i < len1; i++) {
        let res = strcmp(a[i], b[i]);
        if (res !== 0) {
          return res;
        }
      }
      return 0;
    }
    return len1 - len2;
  }
  function isValidHexColor(hex) {
    if (/^#[0-9a-f]{6}$/i.test(hex)) {
      return true;
    }
    if (/^#[0-9a-f]{8}$/i.test(hex)) {
      return true;
    }
    if (/^#[0-9a-f]{3}$/i.test(hex)) {
      return true;
    }
    if (/^#[0-9a-f]{4}$/i.test(hex)) {
      return true;
    }
    return false;
  }
  function escapeRegExpCharacters(value) {
    return value.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
  }
  var CachedFn = class {
    constructor(fn) {
      this.fn = fn;
    }
    cache = /* @__PURE__ */ new Map();
    get(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }
      const value = this.fn(key);
      this.cache.set(key, value);
      return value;
    }
  };

  // src/theme.ts
  var Theme = class {
    constructor(_colorMap, _defaults, _root) {
      this._colorMap = _colorMap;
      this._defaults = _defaults;
      this._root = _root;
    }
    static createFromRawTheme(source, colorMap) {
      return this.createFromParsedTheme(parseTheme(source), colorMap);
    }
    static createFromParsedTheme(source, colorMap) {
      return resolveParsedThemeRules(source, colorMap);
    }
    _cachedMatchRoot = new CachedFn(
      (scopeName) => this._root.match(scopeName)
    );
    getColorMap() {
      return this._colorMap.getColorMap();
    }
    getDefaults() {
      return this._defaults;
    }
    match(scopePath) {
      if (scopePath === null) {
        return this._defaults;
      }
      const scopeName = scopePath.scopeName;
      const matchingTrieElements = this._cachedMatchRoot.get(scopeName);
      const effectiveRule = matchingTrieElements.find(
        (v) => _scopePathMatchesParentScopes(scopePath.parent, v.parentScopes)
      );
      if (!effectiveRule) {
        return null;
      }
      return new StyleAttributes(
        effectiveRule.fontStyle,
        effectiveRule.foreground,
        effectiveRule.background
      );
    }
  };
  var ScopeStack = class _ScopeStack {
    constructor(parent, scopeName) {
      this.parent = parent;
      this.scopeName = scopeName;
    }
    static push(path, scopeNames) {
      for (const name of scopeNames) {
        path = new _ScopeStack(path, name);
      }
      return path;
    }
    static from(...segments) {
      let result = null;
      for (let i = 0; i < segments.length; i++) {
        result = new _ScopeStack(result, segments[i]);
      }
      return result;
    }
    push(scopeName) {
      return new _ScopeStack(this, scopeName);
    }
    getSegments() {
      let item = this;
      const result = [];
      while (item) {
        result.push(item.scopeName);
        item = item.parent;
      }
      result.reverse();
      return result;
    }
    toString() {
      return this.getSegments().join(" ");
    }
    extends(other) {
      if (this === other) {
        return true;
      }
      if (this.parent === null) {
        return false;
      }
      return this.parent.extends(other);
    }
    getExtensionIfDefined(base) {
      const result = [];
      let item = this;
      while (item && item !== base) {
        result.push(item.scopeName);
        item = item.parent;
      }
      return item === base ? result.reverse() : void 0;
    }
  };
  function _scopePathMatchesParentScopes(scopePath, parentScopes) {
    if (parentScopes.length === 0) {
      return true;
    }
    for (let index = 0; index < parentScopes.length; index++) {
      let scopePattern = parentScopes[index];
      let scopeMustMatch = false;
      if (scopePattern === ">") {
        if (index === parentScopes.length - 1) {
          return false;
        }
        scopePattern = parentScopes[++index];
        scopeMustMatch = true;
      }
      while (scopePath) {
        if (_matchesScope(scopePath.scopeName, scopePattern)) {
          break;
        }
        if (scopeMustMatch) {
          return false;
        }
        scopePath = scopePath.parent;
      }
      if (!scopePath) {
        return false;
      }
      scopePath = scopePath.parent;
    }
    return true;
  }
  function _matchesScope(scopeName, scopePattern) {
    return scopePattern === scopeName || scopeName.startsWith(scopePattern) && scopeName[scopePattern.length] === ".";
  }
  var StyleAttributes = class {
    constructor(fontStyle, foregroundId, backgroundId) {
      this.fontStyle = fontStyle;
      this.foregroundId = foregroundId;
      this.backgroundId = backgroundId;
    }
  };
  function parseTheme(source) {
    if (!source) {
      return [];
    }
    if (!source.settings || !Array.isArray(source.settings)) {
      return [];
    }
    let settings = source.settings;
    let result = [], resultLen = 0;
    for (let i = 0, len = settings.length; i < len; i++) {
      let entry = settings[i];
      if (!entry.settings) {
        continue;
      }
      let scopes;
      if (typeof entry.scope === "string") {
        let _scope = entry.scope;
        _scope = _scope.replace(/^[,]+/, "");
        _scope = _scope.replace(/[,]+$/, "");
        scopes = _scope.split(",");
      } else if (Array.isArray(entry.scope)) {
        scopes = entry.scope;
      } else {
        scopes = [""];
      }
      let fontStyle = -1 /* NotSet */;
      if (typeof entry.settings.fontStyle === "string") {
        fontStyle = 0 /* None */;
        let segments = entry.settings.fontStyle.split(" ");
        for (let j = 0, lenJ = segments.length; j < lenJ; j++) {
          let segment = segments[j];
          switch (segment) {
            case "italic":
              fontStyle = fontStyle | 1 /* Italic */;
              break;
            case "bold":
              fontStyle = fontStyle | 2 /* Bold */;
              break;
            case "underline":
              fontStyle = fontStyle | 4 /* Underline */;
              break;
            case "strikethrough":
              fontStyle = fontStyle | 8 /* Strikethrough */;
              break;
          }
        }
      }
      let foreground = null;
      if (typeof entry.settings.foreground === "string" && isValidHexColor(entry.settings.foreground)) {
        foreground = entry.settings.foreground;
      }
      let background = null;
      if (typeof entry.settings.background === "string" && isValidHexColor(entry.settings.background)) {
        background = entry.settings.background;
      }
      for (let j = 0, lenJ = scopes.length; j < lenJ; j++) {
        let _scope = scopes[j].trim();
        let segments = _scope.split(" ");
        let scope = segments[segments.length - 1];
        let parentScopes = null;
        if (segments.length > 1) {
          parentScopes = segments.slice(0, segments.length - 1);
          parentScopes.reverse();
        }
        result[resultLen++] = new ParsedThemeRule(
          scope,
          parentScopes,
          i,
          fontStyle,
          foreground,
          background
        );
      }
    }
    return result;
  }
  var ParsedThemeRule = class {
    constructor(scope, parentScopes, index, fontStyle, foreground, background) {
      this.scope = scope;
      this.parentScopes = parentScopes;
      this.index = index;
      this.fontStyle = fontStyle;
      this.foreground = foreground;
      this.background = background;
    }
  };
  var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
    FontStyle2[FontStyle2["NotSet"] = -1] = "NotSet";
    FontStyle2[FontStyle2["None"] = 0] = "None";
    FontStyle2[FontStyle2["Italic"] = 1] = "Italic";
    FontStyle2[FontStyle2["Bold"] = 2] = "Bold";
    FontStyle2[FontStyle2["Underline"] = 4] = "Underline";
    FontStyle2[FontStyle2["Strikethrough"] = 8] = "Strikethrough";
    return FontStyle2;
  })(FontStyle || {});
  function resolveParsedThemeRules(parsedThemeRules, _colorMap) {
    parsedThemeRules.sort((a, b) => {
      let r = strcmp(a.scope, b.scope);
      if (r !== 0) {
        return r;
      }
      r = strArrCmp(a.parentScopes, b.parentScopes);
      if (r !== 0) {
        return r;
      }
      return a.index - b.index;
    });
    let defaultFontStyle = 0 /* None */;
    let defaultForeground = "#000000";
    let defaultBackground = "#ffffff";
    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === "") {
      let incomingDefaults = parsedThemeRules.shift();
      if (incomingDefaults.fontStyle !== -1 /* NotSet */) {
        defaultFontStyle = incomingDefaults.fontStyle;
      }
      if (incomingDefaults.foreground !== null) {
        defaultForeground = incomingDefaults.foreground;
      }
      if (incomingDefaults.background !== null) {
        defaultBackground = incomingDefaults.background;
      }
    }
    let colorMap = new ColorMap(_colorMap);
    let defaults = new StyleAttributes(defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));
    let root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* NotSet */, 0, 0), []);
    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {
      let rule = parsedThemeRules[i];
      root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));
    }
    return new Theme(colorMap, defaults, root);
  }
  var ColorMap = class {
    _isFrozen;
    _lastColorId;
    _id2color;
    _color2id;
    constructor(_colorMap) {
      this._lastColorId = 0;
      this._id2color = [];
      this._color2id = /* @__PURE__ */ Object.create(null);
      if (Array.isArray(_colorMap)) {
        this._isFrozen = true;
        for (let i = 0, len = _colorMap.length; i < len; i++) {
          this._color2id[_colorMap[i]] = i;
          this._id2color[i] = _colorMap[i];
        }
      } else {
        this._isFrozen = false;
      }
    }
    getId(color) {
      if (color === null) {
        return 0;
      }
      color = color.toUpperCase();
      let value = this._color2id[color];
      if (value) {
        return value;
      }
      if (this._isFrozen) {
        throw new Error(`Missing color in color map - ${color}`);
      }
      value = ++this._lastColorId;
      this._color2id[color] = value;
      this._id2color[value] = color;
      return value;
    }
    getColorMap() {
      return this._id2color.slice(0);
    }
  };
  var emptyParentScopes = Object.freeze([]);
  var ThemeTrieElementRule = class _ThemeTrieElementRule {
    scopeDepth;
    parentScopes;
    fontStyle;
    foreground;
    background;
    constructor(scopeDepth, parentScopes, fontStyle, foreground, background) {
      this.scopeDepth = scopeDepth;
      this.parentScopes = parentScopes || emptyParentScopes;
      this.fontStyle = fontStyle;
      this.foreground = foreground;
      this.background = background;
    }
    clone() {
      return new _ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
    }
    static cloneArr(arr) {
      let r = [];
      for (let i = 0, len = arr.length; i < len; i++) {
        r[i] = arr[i].clone();
      }
      return r;
    }
    acceptOverwrite(scopeDepth, fontStyle, foreground, background) {
      if (this.scopeDepth > scopeDepth) {
        console.log("how did this happen?");
      } else {
        this.scopeDepth = scopeDepth;
      }
      if (fontStyle !== -1 /* NotSet */) {
        this.fontStyle = fontStyle;
      }
      if (foreground !== 0) {
        this.foreground = foreground;
      }
      if (background !== 0) {
        this.background = background;
      }
    }
  };
  var ThemeTrieElement = class _ThemeTrieElement {
    constructor(_mainRule, rulesWithParentScopes = [], _children = {}) {
      this._mainRule = _mainRule;
      this._children = _children;
      this._rulesWithParentScopes = rulesWithParentScopes;
    }
    _rulesWithParentScopes;
    static _cmpBySpecificity(a, b) {
      if (a.scopeDepth !== b.scopeDepth) {
        return b.scopeDepth - a.scopeDepth;
      }
      let aParentIndex = 0;
      let bParentIndex = 0;
      while (true) {
        if (a.parentScopes[aParentIndex] === ">") {
          aParentIndex++;
        }
        if (b.parentScopes[bParentIndex] === ">") {
          bParentIndex++;
        }
        if (aParentIndex >= a.parentScopes.length || bParentIndex >= b.parentScopes.length) {
          break;
        }
        const parentScopeLengthDiff = b.parentScopes[bParentIndex].length - a.parentScopes[aParentIndex].length;
        if (parentScopeLengthDiff !== 0) {
          return parentScopeLengthDiff;
        }
        aParentIndex++;
        bParentIndex++;
      }
      return b.parentScopes.length - a.parentScopes.length;
    }
    match(scope) {
      if (scope !== "") {
        let dotIndex = scope.indexOf(".");
        let head;
        let tail;
        if (dotIndex === -1) {
          head = scope;
          tail = "";
        } else {
          head = scope.substring(0, dotIndex);
          tail = scope.substring(dotIndex + 1);
        }
        if (this._children.hasOwnProperty(head)) {
          return this._children[head].match(tail);
        }
      }
      const rules = this._rulesWithParentScopes.concat(this._mainRule);
      rules.sort(_ThemeTrieElement._cmpBySpecificity);
      return rules;
    }
    insert(scopeDepth, scope, parentScopes, fontStyle, foreground, background) {
      if (scope === "") {
        this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);
        return;
      }
      let dotIndex = scope.indexOf(".");
      let head;
      let tail;
      if (dotIndex === -1) {
        head = scope;
        tail = "";
      } else {
        head = scope.substring(0, dotIndex);
        tail = scope.substring(dotIndex + 1);
      }
      let child;
      if (this._children.hasOwnProperty(head)) {
        child = this._children[head];
      } else {
        child = new _ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));
        this._children[head] = child;
      }
      child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);
    }
    _doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background) {
      if (parentScopes === null) {
        this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);
        return;
      }
      for (let i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {
        let rule = this._rulesWithParentScopes[i];
        if (strArrCmp(rule.parentScopes, parentScopes) === 0) {
          rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);
          return;
        }
      }
      if (fontStyle === -1 /* NotSet */) {
        fontStyle = this._mainRule.fontStyle;
      }
      if (foreground === 0) {
        foreground = this._mainRule.foreground;
      }
      if (background === 0) {
        background = this._mainRule.background;
      }
      this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));
    }
  };

  // src/encodedTokenAttributes.ts
  var EncodedTokenMetadata = class _EncodedTokenMetadata {
    static toBinaryStr(encodedTokenAttributes) {
      return encodedTokenAttributes.toString(2).padStart(32, "0");
    }
    static print(encodedTokenAttributes) {
      const languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);
      const tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);
      const fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);
      const foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);
      const background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);
      console.log({
        languageId,
        tokenType,
        fontStyle,
        foreground,
        background
      });
    }
    static getLanguageId(encodedTokenAttributes) {
      return (encodedTokenAttributes & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;
    }
    static getTokenType(encodedTokenAttributes) {
      return (encodedTokenAttributes & 768 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;
    }
    static containsBalancedBrackets(encodedTokenAttributes) {
      return (encodedTokenAttributes & 1024 /* BALANCED_BRACKETS_MASK */) !== 0;
    }
    static getFontStyle(encodedTokenAttributes) {
      return (encodedTokenAttributes & 30720 /* FONT_STYLE_MASK */) >>> 11 /* FONT_STYLE_OFFSET */;
    }
    static getForeground(encodedTokenAttributes) {
      return (encodedTokenAttributes & 16744448 /* FOREGROUND_MASK */) >>> 15 /* FOREGROUND_OFFSET */;
    }
    static getBackground(encodedTokenAttributes) {
      return (encodedTokenAttributes & 4278190080 /* BACKGROUND_MASK */) >>> 24 /* BACKGROUND_OFFSET */;
    }
    /**
     * Updates the fields in `metadata`.
     * A value of `0`, `NotSet` or `null` indicates that the corresponding field should be left as is.
     */
    static set(encodedTokenAttributes, languageId, tokenType, containsBalancedBrackets, fontStyle, foreground, background) {
      let _languageId = _EncodedTokenMetadata.getLanguageId(encodedTokenAttributes);
      let _tokenType = _EncodedTokenMetadata.getTokenType(encodedTokenAttributes);
      let _containsBalancedBracketsBit = _EncodedTokenMetadata.containsBalancedBrackets(encodedTokenAttributes) ? 1 : 0;
      let _fontStyle = _EncodedTokenMetadata.getFontStyle(encodedTokenAttributes);
      let _foreground = _EncodedTokenMetadata.getForeground(encodedTokenAttributes);
      let _background = _EncodedTokenMetadata.getBackground(encodedTokenAttributes);
      if (languageId !== 0) {
        _languageId = languageId;
      }
      if (tokenType !== 8 /* NotSet */) {
        _tokenType = fromOptionalTokenType(tokenType);
      }
      if (containsBalancedBrackets !== null) {
        _containsBalancedBracketsBit = containsBalancedBrackets ? 1 : 0;
      }
      if (fontStyle !== -1 /* NotSet */) {
        _fontStyle = fontStyle;
      }
      if (foreground !== 0) {
        _foreground = foreground;
      }
      if (background !== 0) {
        _background = background;
      }
      return (_languageId << 0 /* LANGUAGEID_OFFSET */ | _tokenType << 8 /* TOKEN_TYPE_OFFSET */ | _containsBalancedBracketsBit << 10 /* BALANCED_BRACKETS_OFFSET */ | _fontStyle << 11 /* FONT_STYLE_OFFSET */ | _foreground << 15 /* FOREGROUND_OFFSET */ | _background << 24 /* BACKGROUND_OFFSET */) >>> 0;
    }
  };
  function toOptionalTokenType(standardType) {
    return standardType;
  }
  function fromOptionalTokenType(standardType) {
    return standardType;
  }

  // src/matcher.ts
  function createMatchers(selector, matchesName) {
    const results = [];
    const tokenizer = newTokenizer(selector);
    let token = tokenizer.next();
    while (token !== null) {
      let priority = 0;
      if (token.length === 2 && token.charAt(1) === ":") {
        switch (token.charAt(0)) {
          case "R":
            priority = 1;
            break;
          case "L":
            priority = -1;
            break;
          default:
            console.log(`Unknown priority ${token} in scope selector`);
        }
        token = tokenizer.next();
      }
      let matcher = parseConjunction();
      results.push({ matcher, priority });
      if (token !== ",") {
        break;
      }
      token = tokenizer.next();
    }
    return results;
    function parseOperand() {
      if (token === "-") {
        token = tokenizer.next();
        const expressionToNegate = parseOperand();
        return (matcherInput) => !!expressionToNegate && !expressionToNegate(matcherInput);
      }
      if (token === "(") {
        token = tokenizer.next();
        const expressionInParents = parseInnerExpression();
        if (token === ")") {
          token = tokenizer.next();
        }
        return expressionInParents;
      }
      if (isIdentifier(token)) {
        const identifiers = [];
        do {
          identifiers.push(token);
          token = tokenizer.next();
        } while (isIdentifier(token));
        return (matcherInput) => matchesName(identifiers, matcherInput);
      }
      return null;
    }
    function parseConjunction() {
      const matchers = [];
      let matcher = parseOperand();
      while (matcher) {
        matchers.push(matcher);
        matcher = parseOperand();
      }
      return (matcherInput) => matchers.every((matcher2) => matcher2(matcherInput));
    }
    function parseInnerExpression() {
      const matchers = [];
      let matcher = parseConjunction();
      while (matcher) {
        matchers.push(matcher);
        if (token === "|" || token === ",") {
          do {
            token = tokenizer.next();
          } while (token === "|" || token === ",");
        } else {
          break;
        }
        matcher = parseConjunction();
      }
      return (matcherInput) => matchers.some((matcher2) => matcher2(matcherInput));
    }
  }
  function isIdentifier(token) {
    return !!token && !!token.match(/[\w\.:]+/);
  }
  function newTokenizer(input) {
    let regex = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g;
    let match = regex.exec(input);
    return {
      next: () => {
        if (!match) {
          return null;
        }
        const res = match[0];
        match = regex.exec(input);
        return res;
      }
    };
  }
  function disposeOnigString(str) {
    if (typeof str.dispose === "function") {
      str.dispose();
    }
  }

  // src/grammar/grammarDependencies.ts
  var TopLevelRuleReference = class {
    constructor(scopeName) {
      this.scopeName = scopeName;
    }
    toKey() {
      return this.scopeName;
    }
  };
  var TopLevelRepositoryRuleReference = class {
    constructor(scopeName, ruleName) {
      this.scopeName = scopeName;
      this.ruleName = ruleName;
    }
    toKey() {
      return `${this.scopeName}#${this.ruleName}`;
    }
  };
  var ExternalReferenceCollector = class {
    _references = [];
    _seenReferenceKeys = /* @__PURE__ */ new Set();
    get references() {
      return this._references;
    }
    visitedRule = /* @__PURE__ */ new Set();
    add(reference) {
      const key = reference.toKey();
      if (this._seenReferenceKeys.has(key)) {
        return;
      }
      this._seenReferenceKeys.add(key);
      this._references.push(reference);
    }
  };
  var ScopeDependencyProcessor = class {
    constructor(repo, initialScopeName) {
      this.repo = repo;
      this.initialScopeName = initialScopeName;
      this.seenFullScopeRequests.add(this.initialScopeName);
      this.Q = [new TopLevelRuleReference(this.initialScopeName)];
    }
    seenFullScopeRequests = /* @__PURE__ */ new Set();
    seenPartialScopeRequests = /* @__PURE__ */ new Set();
    Q;
    processQueue() {
      const q = this.Q;
      this.Q = [];
      const deps = new ExternalReferenceCollector();
      for (const dep of q) {
        collectReferencesOfReference(dep, this.initialScopeName, this.repo, deps);
      }
      for (const dep of deps.references) {
        if (dep instanceof TopLevelRuleReference) {
          if (this.seenFullScopeRequests.has(dep.scopeName)) {
            continue;
          }
          this.seenFullScopeRequests.add(dep.scopeName);
          this.Q.push(dep);
        } else {
          if (this.seenFullScopeRequests.has(dep.scopeName)) {
            continue;
          }
          if (this.seenPartialScopeRequests.has(dep.toKey())) {
            continue;
          }
          this.seenPartialScopeRequests.add(dep.toKey());
          this.Q.push(dep);
        }
      }
    }
  };
  function collectReferencesOfReference(reference, baseGrammarScopeName, repo, result) {
    const selfGrammar = repo.lookup(reference.scopeName);
    if (!selfGrammar) {
      if (reference.scopeName === baseGrammarScopeName) {
        throw new Error(`No grammar provided for <${baseGrammarScopeName}>`);
      }
      return;
    }
    const baseGrammar = repo.lookup(baseGrammarScopeName);
    if (reference instanceof TopLevelRuleReference) {
      collectExternalReferencesInTopLevelRule({ baseGrammar, selfGrammar }, result);
    } else {
      collectExternalReferencesInTopLevelRepositoryRule(
        reference.ruleName,
        { baseGrammar, selfGrammar, repository: selfGrammar.repository },
        result
      );
    }
    const injections = repo.injections(reference.scopeName);
    if (injections) {
      for (const injection of injections) {
        result.add(new TopLevelRuleReference(injection));
      }
    }
  }
  function collectExternalReferencesInTopLevelRepositoryRule(ruleName, context, result) {
    if (context.repository && context.repository[ruleName]) {
      const rule = context.repository[ruleName];
      collectExternalReferencesInRules([rule], context, result);
    }
  }
  function collectExternalReferencesInTopLevelRule(context, result) {
    if (context.selfGrammar.patterns && Array.isArray(context.selfGrammar.patterns)) {
      collectExternalReferencesInRules(
        context.selfGrammar.patterns,
        { ...context, repository: context.selfGrammar.repository },
        result
      );
    }
    if (context.selfGrammar.injections) {
      collectExternalReferencesInRules(
        Object.values(context.selfGrammar.injections),
        { ...context, repository: context.selfGrammar.repository },
        result
      );
    }
  }
  function collectExternalReferencesInRules(rules, context, result) {
    for (const rule of rules) {
      if (result.visitedRule.has(rule)) {
        continue;
      }
      result.visitedRule.add(rule);
      const patternRepository = rule.repository ? mergeObjects({}, context.repository, rule.repository) : context.repository;
      if (Array.isArray(rule.patterns)) {
        collectExternalReferencesInRules(rule.patterns, { ...context, repository: patternRepository }, result);
      }
      const include = rule.include;
      if (!include) {
        continue;
      }
      const reference = parseInclude(include);
      switch (reference.kind) {
        case 0 /* Base */:
          collectExternalReferencesInTopLevelRule({ ...context, selfGrammar: context.baseGrammar }, result);
          break;
        case 1 /* Self */:
          collectExternalReferencesInTopLevelRule(context, result);
          break;
        case 2 /* RelativeReference */:
          collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, { ...context, repository: patternRepository }, result);
          break;
        case 3 /* TopLevelReference */:
        case 4 /* TopLevelRepositoryReference */:
          const selfGrammar = reference.scopeName === context.selfGrammar.scopeName ? context.selfGrammar : reference.scopeName === context.baseGrammar.scopeName ? context.baseGrammar : void 0;
          if (selfGrammar) {
            const newContext = { baseGrammar: context.baseGrammar, selfGrammar, repository: patternRepository };
            if (reference.kind === 4 /* TopLevelRepositoryReference */) {
              collectExternalReferencesInTopLevelRepositoryRule(reference.ruleName, newContext, result);
            } else {
              collectExternalReferencesInTopLevelRule(newContext, result);
            }
          } else {
            if (reference.kind === 4 /* TopLevelRepositoryReference */) {
              result.add(new TopLevelRepositoryRuleReference(reference.scopeName, reference.ruleName));
            } else {
              result.add(new TopLevelRuleReference(reference.scopeName));
            }
          }
          break;
      }
    }
  }
  var BaseReference = class {
    kind = 0 /* Base */;
  };
  var SelfReference = class {
    kind = 1 /* Self */;
  };
  var RelativeReference = class {
    constructor(ruleName) {
      this.ruleName = ruleName;
    }
    kind = 2 /* RelativeReference */;
  };
  var TopLevelReference = class {
    constructor(scopeName) {
      this.scopeName = scopeName;
    }
    kind = 3 /* TopLevelReference */;
  };
  var TopLevelRepositoryReference = class {
    constructor(scopeName, ruleName) {
      this.scopeName = scopeName;
      this.ruleName = ruleName;
    }
    kind = 4 /* TopLevelRepositoryReference */;
  };
  function parseInclude(include) {
    if (include === "$base") {
      return new BaseReference();
    } else if (include === "$self") {
      return new SelfReference();
    }
    const indexOfSharp = include.indexOf("#");
    if (indexOfSharp === -1) {
      return new TopLevelReference(include);
    } else if (indexOfSharp === 0) {
      return new RelativeReference(include.substring(1));
    } else {
      const scopeName = include.substring(0, indexOfSharp);
      const ruleName = include.substring(indexOfSharp + 1);
      return new TopLevelRepositoryReference(scopeName, ruleName);
    }
  }

  // src/rule.ts
  var HAS_BACK_REFERENCES = /\\(\d+)/;
  var BACK_REFERENCING_END = /\\(\d+)/g;
  var endRuleId = -1;
  var whileRuleId = -2;
  function ruleIdFromNumber(id) {
    return id;
  }
  function ruleIdToNumber(id) {
    return id;
  }
  var Rule = class {
    $location;
    id;
    _nameIsCapturing;
    _name;
    _contentNameIsCapturing;
    _contentName;
    constructor($location, id, name, contentName) {
      this.$location = $location;
      this.id = id;
      this._name = name || null;
      this._nameIsCapturing = RegexSource.hasCaptures(this._name);
      this._contentName = contentName || null;
      this._contentNameIsCapturing = RegexSource.hasCaptures(this._contentName);
    }
    get debugName() {
      const location = this.$location ? `${basename(this.$location.filename)}:${this.$location.line}` : "unknown";
      return `${this.constructor.name}#${this.id} @ ${location}`;
    }
    getName(lineText, captureIndices) {
      if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {
        return this._name;
      }
      return RegexSource.replaceCaptures(this._name, lineText, captureIndices);
    }
    getContentName(lineText, captureIndices) {
      if (!this._contentNameIsCapturing || this._contentName === null) {
        return this._contentName;
      }
      return RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);
    }
  };
  var CaptureRule = class extends Rule {
    retokenizeCapturedWithRuleId;
    constructor($location, id, name, contentName, retokenizeCapturedWithRuleId) {
      super($location, id, name, contentName);
      this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;
    }
    dispose() {
    }
    collectPatterns(grammar, out) {
      throw new Error("Not supported!");
    }
    compile(grammar, endRegexSource) {
      throw new Error("Not supported!");
    }
    compileAG(grammar, endRegexSource, allowA, allowG) {
      throw new Error("Not supported!");
    }
  };
  var MatchRule = class extends Rule {
    _match;
    captures;
    _cachedCompiledPatterns;
    constructor($location, id, name, match, captures) {
      super($location, id, name, null);
      this._match = new RegExpSource(match, this.id);
      this.captures = captures;
      this._cachedCompiledPatterns = null;
    }
    dispose() {
      if (this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns.dispose();
        this._cachedCompiledPatterns = null;
      }
    }
    get debugMatchRegExp() {
      return `${this._match.source}`;
    }
    collectPatterns(grammar, out) {
      out.push(this._match);
    }
    compile(grammar, endRegexSource) {
      return this._getCachedCompiledPatterns(grammar).compile(grammar);
    }
    compileAG(grammar, endRegexSource, allowA, allowG) {
      return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);
    }
    _getCachedCompiledPatterns(grammar) {
      if (!this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns = new RegExpSourceList();
        this.collectPatterns(grammar, this._cachedCompiledPatterns);
      }
      return this._cachedCompiledPatterns;
    }
  };
  var IncludeOnlyRule = class extends Rule {
    hasMissingPatterns;
    patterns;
    _cachedCompiledPatterns;
    constructor($location, id, name, contentName, patterns) {
      super($location, id, name, contentName);
      this.patterns = patterns.patterns;
      this.hasMissingPatterns = patterns.hasMissingPatterns;
      this._cachedCompiledPatterns = null;
    }
    dispose() {
      if (this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns.dispose();
        this._cachedCompiledPatterns = null;
      }
    }
    collectPatterns(grammar, out) {
      for (const pattern of this.patterns) {
        const rule = grammar.getRule(pattern);
        rule.collectPatterns(grammar, out);
      }
    }
    compile(grammar, endRegexSource) {
      return this._getCachedCompiledPatterns(grammar).compile(grammar);
    }
    compileAG(grammar, endRegexSource, allowA, allowG) {
      return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);
    }
    _getCachedCompiledPatterns(grammar) {
      if (!this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns = new RegExpSourceList();
        this.collectPatterns(grammar, this._cachedCompiledPatterns);
      }
      return this._cachedCompiledPatterns;
    }
  };
  var BeginEndRule = class extends Rule {
    _begin;
    beginCaptures;
    _end;
    endHasBackReferences;
    endCaptures;
    applyEndPatternLast;
    hasMissingPatterns;
    patterns;
    _cachedCompiledPatterns;
    constructor($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {
      super($location, id, name, contentName);
      this._begin = new RegExpSource(begin, this.id);
      this.beginCaptures = beginCaptures;
      this._end = new RegExpSource(end ? end : "\uFFFF", -1);
      this.endHasBackReferences = this._end.hasBackReferences;
      this.endCaptures = endCaptures;
      this.applyEndPatternLast = applyEndPatternLast || false;
      this.patterns = patterns.patterns;
      this.hasMissingPatterns = patterns.hasMissingPatterns;
      this._cachedCompiledPatterns = null;
    }
    dispose() {
      if (this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns.dispose();
        this._cachedCompiledPatterns = null;
      }
    }
    get debugBeginRegExp() {
      return `${this._begin.source}`;
    }
    get debugEndRegExp() {
      return `${this._end.source}`;
    }
    getEndWithResolvedBackReferences(lineText, captureIndices) {
      return this._end.resolveBackReferences(lineText, captureIndices);
    }
    collectPatterns(grammar, out) {
      out.push(this._begin);
    }
    compile(grammar, endRegexSource) {
      return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);
    }
    compileAG(grammar, endRegexSource, allowA, allowG) {
      return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);
    }
    _getCachedCompiledPatterns(grammar, endRegexSource) {
      if (!this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns = new RegExpSourceList();
        for (const pattern of this.patterns) {
          const rule = grammar.getRule(pattern);
          rule.collectPatterns(grammar, this._cachedCompiledPatterns);
        }
        if (this.applyEndPatternLast) {
          this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);
        } else {
          this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
        }
      }
      if (this._end.hasBackReferences) {
        if (this.applyEndPatternLast) {
          this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);
        } else {
          this._cachedCompiledPatterns.setSource(0, endRegexSource);
        }
      }
      return this._cachedCompiledPatterns;
    }
  };
  var BeginWhileRule = class extends Rule {
    _begin;
    beginCaptures;
    whileCaptures;
    _while;
    whileHasBackReferences;
    hasMissingPatterns;
    patterns;
    _cachedCompiledPatterns;
    _cachedCompiledWhilePatterns;
    constructor($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {
      super($location, id, name, contentName);
      this._begin = new RegExpSource(begin, this.id);
      this.beginCaptures = beginCaptures;
      this.whileCaptures = whileCaptures;
      this._while = new RegExpSource(_while, whileRuleId);
      this.whileHasBackReferences = this._while.hasBackReferences;
      this.patterns = patterns.patterns;
      this.hasMissingPatterns = patterns.hasMissingPatterns;
      this._cachedCompiledPatterns = null;
      this._cachedCompiledWhilePatterns = null;
    }
    dispose() {
      if (this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns.dispose();
        this._cachedCompiledPatterns = null;
      }
      if (this._cachedCompiledWhilePatterns) {
        this._cachedCompiledWhilePatterns.dispose();
        this._cachedCompiledWhilePatterns = null;
      }
    }
    get debugBeginRegExp() {
      return `${this._begin.source}`;
    }
    get debugWhileRegExp() {
      return `${this._while.source}`;
    }
    getWhileWithResolvedBackReferences(lineText, captureIndices) {
      return this._while.resolveBackReferences(lineText, captureIndices);
    }
    collectPatterns(grammar, out) {
      out.push(this._begin);
    }
    compile(grammar, endRegexSource) {
      return this._getCachedCompiledPatterns(grammar).compile(grammar);
    }
    compileAG(grammar, endRegexSource, allowA, allowG) {
      return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);
    }
    _getCachedCompiledPatterns(grammar) {
      if (!this._cachedCompiledPatterns) {
        this._cachedCompiledPatterns = new RegExpSourceList();
        for (const pattern of this.patterns) {
          const rule = grammar.getRule(pattern);
          rule.collectPatterns(grammar, this._cachedCompiledPatterns);
        }
      }
      return this._cachedCompiledPatterns;
    }
    compileWhile(grammar, endRegexSource) {
      return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);
    }
    compileWhileAG(grammar, endRegexSource, allowA, allowG) {
      return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);
    }
    _getCachedCompiledWhilePatterns(grammar, endRegexSource) {
      if (!this._cachedCompiledWhilePatterns) {
        this._cachedCompiledWhilePatterns = new RegExpSourceList();
        this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);
      }
      if (this._while.hasBackReferences) {
        this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : "\uFFFF");
      }
      return this._cachedCompiledWhilePatterns;
    }
  };
  var RuleFactory = class _RuleFactory {
    static createCaptureRule(helper, $location, name, contentName, retokenizeCapturedWithRuleId) {
      return helper.registerRule((id) => {
        return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);
      });
    }
    static getCompiledRuleId(desc, helper, repository) {
      if (!desc.id) {
        helper.registerRule((id) => {
          desc.id = id;
          if (desc.match) {
            return new MatchRule(
              desc.$vscodeTextmateLocation,
              desc.id,
              desc.name,
              desc.match,
              _RuleFactory._compileCaptures(desc.captures, helper, repository)
            );
          }
          if (typeof desc.begin === "undefined") {
            if (desc.repository) {
              repository = mergeObjects({}, repository, desc.repository);
            }
            let patterns = desc.patterns;
            if (typeof patterns === "undefined" && desc.include) {
              patterns = [{ include: desc.include }];
            }
            return new IncludeOnlyRule(
              desc.$vscodeTextmateLocation,
              desc.id,
              desc.name,
              desc.contentName,
              _RuleFactory._compilePatterns(patterns, helper, repository)
            );
          }
          if (desc.while) {
            return new BeginWhileRule(
              desc.$vscodeTextmateLocation,
              desc.id,
              desc.name,
              desc.contentName,
              desc.begin,
              _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),
              desc.while,
              _RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository),
              _RuleFactory._compilePatterns(desc.patterns, helper, repository)
            );
          }
          return new BeginEndRule(
            desc.$vscodeTextmateLocation,
            desc.id,
            desc.name,
            desc.contentName,
            desc.begin,
            _RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository),
            desc.end,
            _RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository),
            desc.applyEndPatternLast,
            _RuleFactory._compilePatterns(desc.patterns, helper, repository)
          );
        });
      }
      return desc.id;
    }
    static _compileCaptures(captures, helper, repository) {
      let r = [];
      if (captures) {
        let maximumCaptureId = 0;
        for (const captureId in captures) {
          if (captureId === "$vscodeTextmateLocation") {
            continue;
          }
          const numericCaptureId = parseInt(captureId, 10);
          if (numericCaptureId > maximumCaptureId) {
            maximumCaptureId = numericCaptureId;
          }
        }
        for (let i = 0; i <= maximumCaptureId; i++) {
          r[i] = null;
        }
        for (const captureId in captures) {
          if (captureId === "$vscodeTextmateLocation") {
            continue;
          }
          const numericCaptureId = parseInt(captureId, 10);
          let retokenizeCapturedWithRuleId = 0;
          if (captures[captureId].patterns) {
            retokenizeCapturedWithRuleId = _RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);
          }
          r[numericCaptureId] = _RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);
        }
      }
      return r;
    }
    static _compilePatterns(patterns, helper, repository) {
      let r = [];
      if (patterns) {
        for (let i = 0, len = patterns.length; i < len; i++) {
          const pattern = patterns[i];
          let ruleId = -1;
          if (pattern.include) {
            const reference = parseInclude(pattern.include);
            switch (reference.kind) {
              case 0 /* Base */:
              case 1 /* Self */:
                ruleId = _RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);
                break;
              case 2 /* RelativeReference */:
                let localIncludedRule = repository[reference.ruleName];
                if (localIncludedRule) {
                  ruleId = _RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);
                }
                break;
              case 3 /* TopLevelReference */:
              case 4 /* TopLevelRepositoryReference */:
                const externalGrammarName = reference.scopeName;
                const externalGrammarInclude = reference.kind === 4 /* TopLevelRepositoryReference */ ? reference.ruleName : null;
                const externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);
                if (externalGrammar) {
                  if (externalGrammarInclude) {
                    let externalIncludedRule = externalGrammar.repository[externalGrammarInclude];
                    if (externalIncludedRule) {
                      ruleId = _RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);
                    }
                  } else {
                    ruleId = _RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);
                  }
                }
                break;
            }
          } else {
            ruleId = _RuleFactory.getCompiledRuleId(pattern, helper, repository);
          }
          if (ruleId !== -1) {
            const rule = helper.getRule(ruleId);
            let skipRule = false;
            if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {
              if (rule.hasMissingPatterns && rule.patterns.length === 0) {
                skipRule = true;
              }
            }
            if (skipRule) {
              continue;
            }
            r.push(ruleId);
          }
        }
      }
      return {
        patterns: r,
        hasMissingPatterns: (patterns ? patterns.length : 0) !== r.length
      };
    }
  };
  var RegExpSource = class _RegExpSource {
    source;
    ruleId;
    hasAnchor;
    hasBackReferences;
    _anchorCache;
    constructor(regExpSource, ruleId) {
      if (regExpSource && typeof regExpSource === "string") {
        const len = regExpSource.length;
        let lastPushedPos = 0;
        let output = [];
        let hasAnchor = false;
        for (let pos = 0; pos < len; pos++) {
          const ch = regExpSource.charAt(pos);
          if (ch === "\\") {
            if (pos + 1 < len) {
              const nextCh = regExpSource.charAt(pos + 1);
              if (nextCh === "z") {
                output.push(regExpSource.substring(lastPushedPos, pos));
                output.push("$(?!\\n)(?<!\\n)");
                lastPushedPos = pos + 2;
              } else if (nextCh === "A" || nextCh === "G") {
                hasAnchor = true;
              }
              pos++;
            }
          }
        }
        this.hasAnchor = hasAnchor;
        if (lastPushedPos === 0) {
          this.source = regExpSource;
        } else {
          output.push(regExpSource.substring(lastPushedPos, len));
          this.source = output.join("");
        }
      } else {
        this.hasAnchor = false;
        this.source = regExpSource;
      }
      if (this.hasAnchor) {
        this._anchorCache = this._buildAnchorCache();
      } else {
        this._anchorCache = null;
      }
      this.ruleId = ruleId;
      if (typeof this.source === "string") {
        this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);
      } else {
        this.hasBackReferences = false;
      }
    }
    clone() {
      return new _RegExpSource(this.source, this.ruleId);
    }
    setSource(newSource) {
      if (this.source === newSource) {
        return;
      }
      this.source = newSource;
      if (this.hasAnchor) {
        this._anchorCache = this._buildAnchorCache();
      }
    }
    resolveBackReferences(lineText, captureIndices) {
      if (typeof this.source !== "string") {
        throw new Error("This method should only be called if the source is a string");
      }
      let capturedValues = captureIndices.map((capture) => {
        return lineText.substring(capture.start, capture.end);
      });
      BACK_REFERENCING_END.lastIndex = 0;
      return this.source.replace(BACK_REFERENCING_END, (match, g1) => {
        return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || "");
      });
    }
    _buildAnchorCache() {
      if (typeof this.source !== "string") {
        throw new Error("This method should only be called if the source is a string");
      }
      let A0_G0_result = [];
      let A0_G1_result = [];
      let A1_G0_result = [];
      let A1_G1_result = [];
      let pos, len, ch, nextCh;
      for (pos = 0, len = this.source.length; pos < len; pos++) {
        ch = this.source.charAt(pos);
        A0_G0_result[pos] = ch;
        A0_G1_result[pos] = ch;
        A1_G0_result[pos] = ch;
        A1_G1_result[pos] = ch;
        if (ch === "\\") {
          if (pos + 1 < len) {
            nextCh = this.source.charAt(pos + 1);
            if (nextCh === "A") {
              A0_G0_result[pos + 1] = "\uFFFF";
              A0_G1_result[pos + 1] = "\uFFFF";
              A1_G0_result[pos + 1] = "A";
              A1_G1_result[pos + 1] = "A";
            } else if (nextCh === "G") {
              A0_G0_result[pos + 1] = "\uFFFF";
              A0_G1_result[pos + 1] = "G";
              A1_G0_result[pos + 1] = "\uFFFF";
              A1_G1_result[pos + 1] = "G";
            } else {
              A0_G0_result[pos + 1] = nextCh;
              A0_G1_result[pos + 1] = nextCh;
              A1_G0_result[pos + 1] = nextCh;
              A1_G1_result[pos + 1] = nextCh;
            }
            pos++;
          }
        }
      }
      return {
        A0_G0: A0_G0_result.join(""),
        A0_G1: A0_G1_result.join(""),
        A1_G0: A1_G0_result.join(""),
        A1_G1: A1_G1_result.join("")
      };
    }
    resolveAnchors(allowA, allowG) {
      if (!this.hasAnchor || !this._anchorCache || typeof this.source !== "string") {
        return this.source;
      }
      if (allowA) {
        if (allowG) {
          return this._anchorCache.A1_G1;
        } else {
          return this._anchorCache.A1_G0;
        }
      } else {
        if (allowG) {
          return this._anchorCache.A0_G1;
        } else {
          return this._anchorCache.A0_G0;
        }
      }
    }
  };
  var RegExpSourceList = class {
    _items;
    _hasAnchors;
    _cached;
    _anchorCache;
    constructor() {
      this._items = [];
      this._hasAnchors = false;
      this._cached = null;
      this._anchorCache = {
        A0_G0: null,
        A0_G1: null,
        A1_G0: null,
        A1_G1: null
      };
    }
    dispose() {
      this._disposeCaches();
    }
    _disposeCaches() {
      if (this._cached) {
        this._cached.dispose();
        this._cached = null;
      }
      if (this._anchorCache.A0_G0) {
        this._anchorCache.A0_G0.dispose();
        this._anchorCache.A0_G0 = null;
      }
      if (this._anchorCache.A0_G1) {
        this._anchorCache.A0_G1.dispose();
        this._anchorCache.A0_G1 = null;
      }
      if (this._anchorCache.A1_G0) {
        this._anchorCache.A1_G0.dispose();
        this._anchorCache.A1_G0 = null;
      }
      if (this._anchorCache.A1_G1) {
        this._anchorCache.A1_G1.dispose();
        this._anchorCache.A1_G1 = null;
      }
    }
    push(item) {
      this._items.push(item);
      this._hasAnchors = this._hasAnchors || item.hasAnchor;
    }
    unshift(item) {
      this._items.unshift(item);
      this._hasAnchors = this._hasAnchors || item.hasAnchor;
    }
    length() {
      return this._items.length;
    }
    setSource(index, newSource) {
      if (this._items[index].source !== newSource) {
        this._disposeCaches();
        this._items[index].setSource(newSource);
      }
    }
    compile(onigLib) {
      if (!this._cached) {
        let regExps = this._items.map((e) => e.source);
        this._cached = new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));
      }
      return this._cached;
    }
    compileAG(onigLib, allowA, allowG) {
      if (!this._hasAnchors) {
        return this.compile(onigLib);
      } else {
        if (allowA) {
          if (allowG) {
            if (!this._anchorCache.A1_G1) {
              this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);
            }
            return this._anchorCache.A1_G1;
          } else {
            if (!this._anchorCache.A1_G0) {
              this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);
            }
            return this._anchorCache.A1_G0;
          }
        } else {
          if (allowG) {
            if (!this._anchorCache.A0_G1) {
              this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);
            }
            return this._anchorCache.A0_G1;
          } else {
            if (!this._anchorCache.A0_G0) {
              this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);
            }
            return this._anchorCache.A0_G0;
          }
        }
      }
    }
    _resolveAnchors(onigLib, allowA, allowG) {
      let regExps = this._items.map((e) => e.resolveAnchors(allowA, allowG));
      return new CompiledRule(onigLib, regExps, this._items.map((e) => e.ruleId));
    }
  };
  var CompiledRule = class {
    constructor(onigLib, regExps, rules) {
      this.regExps = regExps;
      this.rules = rules;
      this.scanner = onigLib.createOnigScanner(regExps);
    }
    scanner;
    dispose() {
      if (typeof this.scanner.dispose === "function") {
        this.scanner.dispose();
      }
    }
    toString() {
      const r = [];
      for (let i = 0, len = this.rules.length; i < len; i++) {
        r.push("   - " + this.rules[i] + ": " + this.regExps[i]);
      }
      return r.join("\n");
    }
    findNextMatchSync(string, startPosition, options) {
      const result = this.scanner.findNextMatchSync(string, startPosition, options);
      if (!result) {
        return null;
      }
      return {
        ruleId: this.rules[result.index],
        captureIndices: result.captureIndices
      };
    }
  };

  // src/grammar/basicScopesAttributeProvider.ts
  var BasicScopeAttributes = class {
    constructor(languageId, tokenType) {
      this.languageId = languageId;
      this.tokenType = tokenType;
    }
  };
  var BasicScopeAttributesProvider = class _BasicScopeAttributesProvider {
    _defaultAttributes;
    _embeddedLanguagesMatcher;
    constructor(initialLanguageId, embeddedLanguages) {
      this._defaultAttributes = new BasicScopeAttributes(initialLanguageId, 8 /* NotSet */);
      this._embeddedLanguagesMatcher = new ScopeMatcher(Object.entries(embeddedLanguages || {}));
    }
    getDefaultAttributes() {
      return this._defaultAttributes;
    }
    getBasicScopeAttributes(scopeName) {
      if (scopeName === null) {
        return _BasicScopeAttributesProvider._NULL_SCOPE_METADATA;
      }
      return this._getBasicScopeAttributes.get(scopeName);
    }
    static _NULL_SCOPE_METADATA = new BasicScopeAttributes(0, 0);
    _getBasicScopeAttributes = new CachedFn((scopeName) => {
      const languageId = this._scopeToLanguage(scopeName);
      const standardTokenType = this._toStandardTokenType(scopeName);
      return new BasicScopeAttributes(languageId, standardTokenType);
    });
    /**
     * Given a produced TM scope, return the language that token describes or null if unknown.
     * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null
     */
    _scopeToLanguage(scope) {
      return this._embeddedLanguagesMatcher.match(scope) || 0;
    }
    _toStandardTokenType(scopeName) {
      const m = scopeName.match(_BasicScopeAttributesProvider.STANDARD_TOKEN_TYPE_REGEXP);
      if (!m) {
        return 8 /* NotSet */;
      }
      switch (m[1]) {
        case "comment":
          return 1 /* Comment */;
        case "string":
          return 2 /* String */;
        case "regex":
          return 3 /* RegEx */;
        case "meta.embedded":
          return 0 /* Other */;
      }
      throw new Error("Unexpected match for standard token type!");
    }
    static STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
  };
  var ScopeMatcher = class {
    values;
    scopesRegExp;
    constructor(values) {
      if (values.length === 0) {
        this.values = null;
        this.scopesRegExp = null;
      } else {
        this.values = new Map(values);
        const escapedScopes = values.map(
          ([scopeName, value]) => escapeRegExpCharacters(scopeName)
        );
        escapedScopes.sort();
        escapedScopes.reverse();
        this.scopesRegExp = new RegExp(
          `^((${escapedScopes.join(")|(")}))($|\\.)`,
          ""
        );
      }
    }
    match(scope) {
      if (!this.scopesRegExp) {
        return void 0;
      }
      const m = scope.match(this.scopesRegExp);
      if (!m) {
        return void 0;
      }
      return this.values.get(m[1]);
    }
  };

  // src/debug.ts
  ({
    InDebugMode: typeof process !== "undefined" && !!process.env["VSCODE_TEXTMATE_DEBUG"]
  });

  // src/grammar/tokenizeString.ts
  var TokenizeStringResult = class {
    constructor(stack, stoppedEarly) {
      this.stack = stack;
      this.stoppedEarly = stoppedEarly;
    }
  };
  function _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {
    const lineLength = lineText.content.length;
    let STOP = false;
    let anchorPosition = -1;
    if (checkWhileConditions) {
      const whileCheckResult = _checkWhileConditions(
        grammar,
        lineText,
        isFirstLine,
        linePos,
        stack,
        lineTokens
      );
      stack = whileCheckResult.stack;
      linePos = whileCheckResult.linePos;
      isFirstLine = whileCheckResult.isFirstLine;
      anchorPosition = whileCheckResult.anchorPosition;
    }
    const startTime = Date.now();
    while (!STOP) {
      if (timeLimit !== 0) {
        const elapsedTime = Date.now() - startTime;
        if (elapsedTime > timeLimit) {
          return new TokenizeStringResult(stack, true);
        }
      }
      scanNext();
    }
    return new TokenizeStringResult(stack, false);
    function scanNext() {
      const r = matchRuleOrInjections(
        grammar,
        lineText,
        isFirstLine,
        linePos,
        stack,
        anchorPosition
      );
      if (!r) {
        lineTokens.produce(stack, lineLength);
        STOP = true;
        return;
      }
      const captureIndices = r.captureIndices;
      const matchedRuleId = r.matchedRuleId;
      const hasAdvanced = captureIndices && captureIndices.length > 0 ? captureIndices[0].end > linePos : false;
      if (matchedRuleId === endRuleId) {
        const poppedRule = stack.getRule(grammar);
        lineTokens.produce(stack, captureIndices[0].start);
        stack = stack.withContentNameScopesList(stack.nameScopesList);
        handleCaptures(
          grammar,
          lineText,
          isFirstLine,
          stack,
          lineTokens,
          poppedRule.endCaptures,
          captureIndices
        );
        lineTokens.produce(stack, captureIndices[0].end);
        const popped = stack;
        stack = stack.parent;
        anchorPosition = popped.getAnchorPos();
        if (!hasAdvanced && popped.getEnterPos() === linePos) {
          stack = popped;
          lineTokens.produce(stack, lineLength);
          STOP = true;
          return;
        }
      } else {
        const _rule = grammar.getRule(matchedRuleId);
        lineTokens.produce(stack, captureIndices[0].start);
        const beforePush = stack;
        const scopeName = _rule.getName(lineText.content, captureIndices);
        const nameScopesList = stack.contentNameScopesList.pushAttributed(
          scopeName,
          grammar
        );
        stack = stack.push(
          matchedRuleId,
          linePos,
          anchorPosition,
          captureIndices[0].end === lineLength,
          null,
          nameScopesList,
          nameScopesList
        );
        if (_rule instanceof BeginEndRule) {
          const pushedRule = _rule;
          handleCaptures(
            grammar,
            lineText,
            isFirstLine,
            stack,
            lineTokens,
            pushedRule.beginCaptures,
            captureIndices
          );
          lineTokens.produce(stack, captureIndices[0].end);
          anchorPosition = captureIndices[0].end;
          const contentName = pushedRule.getContentName(
            lineText.content,
            captureIndices
          );
          const contentNameScopesList = nameScopesList.pushAttributed(
            contentName,
            grammar
          );
          stack = stack.withContentNameScopesList(contentNameScopesList);
          if (pushedRule.endHasBackReferences) {
            stack = stack.withEndRule(
              pushedRule.getEndWithResolvedBackReferences(
                lineText.content,
                captureIndices
              )
            );
          }
          if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {
            stack = stack.pop();
            lineTokens.produce(stack, lineLength);
            STOP = true;
            return;
          }
        } else if (_rule instanceof BeginWhileRule) {
          const pushedRule = _rule;
          handleCaptures(
            grammar,
            lineText,
            isFirstLine,
            stack,
            lineTokens,
            pushedRule.beginCaptures,
            captureIndices
          );
          lineTokens.produce(stack, captureIndices[0].end);
          anchorPosition = captureIndices[0].end;
          const contentName = pushedRule.getContentName(
            lineText.content,
            captureIndices
          );
          const contentNameScopesList = nameScopesList.pushAttributed(
            contentName,
            grammar
          );
          stack = stack.withContentNameScopesList(contentNameScopesList);
          if (pushedRule.whileHasBackReferences) {
            stack = stack.withEndRule(
              pushedRule.getWhileWithResolvedBackReferences(
                lineText.content,
                captureIndices
              )
            );
          }
          if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {
            stack = stack.pop();
            lineTokens.produce(stack, lineLength);
            STOP = true;
            return;
          }
        } else {
          const matchingRule = _rule;
          handleCaptures(
            grammar,
            lineText,
            isFirstLine,
            stack,
            lineTokens,
            matchingRule.captures,
            captureIndices
          );
          lineTokens.produce(stack, captureIndices[0].end);
          stack = stack.pop();
          if (!hasAdvanced) {
            stack = stack.safePop();
            lineTokens.produce(stack, lineLength);
            STOP = true;
            return;
          }
        }
      }
      if (captureIndices[0].end > linePos) {
        linePos = captureIndices[0].end;
        isFirstLine = false;
      }
    }
  }
  function _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {
    let anchorPosition = stack.beginRuleCapturedEOL ? 0 : -1;
    const whileRules = [];
    for (let node = stack; node; node = node.pop()) {
      const nodeRule = node.getRule(grammar);
      if (nodeRule instanceof BeginWhileRule) {
        whileRules.push({
          rule: nodeRule,
          stack: node
        });
      }
    }
    for (let whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {
      const { ruleScanner, findOptions } = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition);
      const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);
      if (r) {
        const matchedRuleId = r.ruleId;
        if (matchedRuleId !== whileRuleId) {
          stack = whileRule.stack.pop();
          break;
        }
        if (r.captureIndices && r.captureIndices.length) {
          lineTokens.produce(whileRule.stack, r.captureIndices[0].start);
          handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);
          lineTokens.produce(whileRule.stack, r.captureIndices[0].end);
          anchorPosition = r.captureIndices[0].end;
          if (r.captureIndices[0].end > linePos) {
            linePos = r.captureIndices[0].end;
            isFirstLine = false;
          }
        }
      } else {
        stack = whileRule.stack.pop();
        break;
      }
    }
    return { stack, linePos, anchorPosition, isFirstLine };
  }
  function matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {
    const matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);
    const injections = grammar.getInjections();
    if (injections.length === 0) {
      return matchResult;
    }
    const injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);
    if (!injectionResult) {
      return matchResult;
    }
    if (!matchResult) {
      return injectionResult;
    }
    const matchResultScore = matchResult.captureIndices[0].start;
    const injectionResultScore = injectionResult.captureIndices[0].start;
    if (injectionResultScore < matchResultScore || injectionResult.priorityMatch && injectionResultScore === matchResultScore) {
      return injectionResult;
    }
    return matchResult;
  }
  function matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {
    const rule = stack.getRule(grammar);
    const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition);
    const r = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);
    if (r) {
      return {
        captureIndices: r.captureIndices,
        matchedRuleId: r.ruleId
      };
    }
    return null;
  }
  function matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {
    let bestMatchRating = Number.MAX_VALUE;
    let bestMatchCaptureIndices = null;
    let bestMatchRuleId;
    let bestMatchResultPriority = 0;
    const scopes = stack.contentNameScopesList.getScopeNames();
    for (let i = 0, len = injections.length; i < len; i++) {
      const injection = injections[i];
      if (!injection.matcher(scopes)) {
        continue;
      }
      const rule = grammar.getRule(injection.ruleId);
      const { ruleScanner, findOptions } = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition);
      const matchResult = ruleScanner.findNextMatchSync(lineText, linePos, findOptions);
      if (!matchResult) {
        continue;
      }
      const matchRating = matchResult.captureIndices[0].start;
      if (matchRating >= bestMatchRating) {
        continue;
      }
      bestMatchRating = matchRating;
      bestMatchCaptureIndices = matchResult.captureIndices;
      bestMatchRuleId = matchResult.ruleId;
      bestMatchResultPriority = injection.priority;
      if (bestMatchRating === linePos) {
        break;
      }
    }
    if (bestMatchCaptureIndices) {
      return {
        priorityMatch: bestMatchResultPriority === -1,
        captureIndices: bestMatchCaptureIndices,
        matchedRuleId: bestMatchRuleId
      };
    }
    return null;
  }
  function prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {
    const ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);
    return { ruleScanner, findOptions: 0 /* None */ };
  }
  function prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {
    const ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);
    return { ruleScanner, findOptions: 0 /* None */ };
  }
  function handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {
    if (captures.length === 0) {
      return;
    }
    const lineTextContent = lineText.content;
    const len = Math.min(captures.length, captureIndices.length);
    const localStack = [];
    const maxEnd = captureIndices[0].end;
    for (let i = 0; i < len; i++) {
      const captureRule = captures[i];
      if (captureRule === null) {
        continue;
      }
      const captureIndex = captureIndices[i];
      if (captureIndex.length === 0) {
        continue;
      }
      if (captureIndex.start > maxEnd) {
        break;
      }
      while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {
        lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);
        localStack.pop();
      }
      if (localStack.length > 0) {
        lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);
      } else {
        lineTokens.produce(stack, captureIndex.start);
      }
      if (captureRule.retokenizeCapturedWithRuleId) {
        const scopeName = captureRule.getName(lineTextContent, captureIndices);
        const nameScopesList = stack.contentNameScopesList.pushAttributed(scopeName, grammar);
        const contentName = captureRule.getContentName(lineTextContent, captureIndices);
        const contentNameScopesList = nameScopesList.pushAttributed(contentName, grammar);
        const stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);
        const onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));
        _tokenizeString(
          grammar,
          onigSubStr,
          isFirstLine && captureIndex.start === 0,
          captureIndex.start,
          stackClone,
          lineTokens,
          false,
          /* no time limit */
          0
        );
        disposeOnigString(onigSubStr);
        continue;
      }
      const captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);
      if (captureRuleScopeName !== null) {
        const base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;
        const captureRuleScopesList = base.pushAttributed(captureRuleScopeName, grammar);
        localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));
      }
    }
    while (localStack.length > 0) {
      lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);
      localStack.pop();
    }
  }
  var LocalStackElement = class {
    scopes;
    endPos;
    constructor(scopes, endPos) {
      this.scopes = scopes;
      this.endPos = endPos;
    }
  };

  // src/grammar/grammar.ts
  function createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, onigLib) {
    return new Grammar(
      scopeName,
      grammar,
      initialLanguage,
      embeddedLanguages,
      tokenTypes,
      balancedBracketSelectors,
      grammarRepository,
      onigLib
    );
  }
  function collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {
    const matchers = createMatchers(selector, nameMatcher);
    const ruleId = RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);
    for (const matcher of matchers) {
      result.push({
        debugSelector: selector,
        matcher: matcher.matcher,
        ruleId,
        grammar,
        priority: matcher.priority
      });
    }
  }
  function nameMatcher(identifers, scopes) {
    if (scopes.length < identifers.length) {
      return false;
    }
    let lastIndex = 0;
    return identifers.every((identifier) => {
      for (let i = lastIndex; i < scopes.length; i++) {
        if (scopesAreMatching(scopes[i], identifier)) {
          lastIndex = i + 1;
          return true;
        }
      }
      return false;
    });
  }
  function scopesAreMatching(thisScopeName, scopeName) {
    if (!thisScopeName) {
      return false;
    }
    if (thisScopeName === scopeName) {
      return true;
    }
    const len = scopeName.length;
    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === ".";
  }
  var Grammar = class {
    constructor(_rootScopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors, grammarRepository, _onigLib) {
      this._rootScopeName = _rootScopeName;
      this.balancedBracketSelectors = balancedBracketSelectors;
      this._onigLib = _onigLib;
      this._basicScopeAttributesProvider = new BasicScopeAttributesProvider(
        initialLanguage,
        embeddedLanguages
      );
      this._rootId = -1;
      this._lastRuleId = 0;
      this._ruleId2desc = [null];
      this._includedGrammars = {};
      this._grammarRepository = grammarRepository;
      this._grammar = initGrammar(grammar, null);
      this._injections = null;
      this._tokenTypeMatchers = [];
      if (tokenTypes) {
        for (const selector of Object.keys(tokenTypes)) {
          const matchers = createMatchers(selector, nameMatcher);
          for (const matcher of matchers) {
            this._tokenTypeMatchers.push({
              matcher: matcher.matcher,
              type: tokenTypes[selector]
            });
          }
        }
      }
    }
    _rootId;
    _lastRuleId;
    _ruleId2desc;
    _includedGrammars;
    _grammarRepository;
    _grammar;
    _injections;
    _basicScopeAttributesProvider;
    _tokenTypeMatchers;
    get themeProvider() {
      return this._grammarRepository;
    }
    dispose() {
      for (const rule of this._ruleId2desc) {
        if (rule) {
          rule.dispose();
        }
      }
    }
    createOnigScanner(sources) {
      return this._onigLib.createOnigScanner(sources);
    }
    createOnigString(sources) {
      return this._onigLib.createOnigString(sources);
    }
    getMetadataForScope(scope) {
      return this._basicScopeAttributesProvider.getBasicScopeAttributes(scope);
    }
    _collectInjections() {
      const grammarRepository = {
        lookup: (scopeName2) => {
          if (scopeName2 === this._rootScopeName) {
            return this._grammar;
          }
          return this.getExternalGrammar(scopeName2);
        },
        injections: (scopeName2) => {
          return this._grammarRepository.injections(scopeName2);
        }
      };
      const result = [];
      const scopeName = this._rootScopeName;
      const grammar = grammarRepository.lookup(scopeName);
      if (grammar) {
        const rawInjections = grammar.injections;
        if (rawInjections) {
          for (let expression in rawInjections) {
            collectInjections(
              result,
              expression,
              rawInjections[expression],
              this,
              grammar
            );
          }
        }
        const injectionScopeNames = this._grammarRepository.injections(scopeName);
        if (injectionScopeNames) {
          injectionScopeNames.forEach((injectionScopeName) => {
            const injectionGrammar = this.getExternalGrammar(injectionScopeName);
            if (injectionGrammar) {
              const selector = injectionGrammar.injectionSelector;
              if (selector) {
                collectInjections(
                  result,
                  selector,
                  injectionGrammar,
                  this,
                  injectionGrammar
                );
              }
            }
          });
        }
      }
      result.sort((i1, i2) => i1.priority - i2.priority);
      return result;
    }
    getInjections() {
      if (this._injections === null) {
        this._injections = this._collectInjections();
      }
      return this._injections;
    }
    registerRule(factory) {
      const id = ++this._lastRuleId;
      const result = factory(ruleIdFromNumber(id));
      this._ruleId2desc[id] = result;
      return result;
    }
    getRule(ruleId) {
      return this._ruleId2desc[ruleIdToNumber(ruleId)];
    }
    getExternalGrammar(scopeName, repository) {
      if (this._includedGrammars[scopeName]) {
        return this._includedGrammars[scopeName];
      } else if (this._grammarRepository) {
        const rawIncludedGrammar = this._grammarRepository.lookup(scopeName);
        if (rawIncludedGrammar) {
          this._includedGrammars[scopeName] = initGrammar(
            rawIncludedGrammar,
            repository && repository.$base
          );
          return this._includedGrammars[scopeName];
        }
      }
      return void 0;
    }
    tokenizeLine(lineText, prevState, timeLimit = 0) {
      const r = this._tokenize(lineText, prevState, false, timeLimit);
      return {
        tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),
        ruleStack: r.ruleStack,
        stoppedEarly: r.stoppedEarly
      };
    }
    tokenizeLine2(lineText, prevState, timeLimit = 0) {
      const r = this._tokenize(lineText, prevState, true, timeLimit);
      return {
        tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),
        ruleStack: r.ruleStack,
        stoppedEarly: r.stoppedEarly
      };
    }
    _tokenize(lineText, prevState, emitBinaryTokens, timeLimit) {
      if (this._rootId === -1) {
        this._rootId = RuleFactory.getCompiledRuleId(
          this._grammar.repository.$self,
          this,
          this._grammar.repository
        );
        this.getInjections();
      }
      let isFirstLine;
      if (!prevState || prevState === StateStackImpl.NULL) {
        isFirstLine = true;
        const rawDefaultMetadata = this._basicScopeAttributesProvider.getDefaultAttributes();
        const defaultStyle = this.themeProvider.getDefaults();
        const defaultMetadata = EncodedTokenMetadata.set(
          0,
          rawDefaultMetadata.languageId,
          rawDefaultMetadata.tokenType,
          null,
          defaultStyle.fontStyle,
          defaultStyle.foregroundId,
          defaultStyle.backgroundId
        );
        const rootScopeName = this.getRule(this._rootId).getName(
          null,
          null
        );
        let scopeList;
        if (rootScopeName) {
          scopeList = AttributedScopeStack.createRootAndLookUpScopeName(
            rootScopeName,
            defaultMetadata,
            this
          );
        } else {
          scopeList = AttributedScopeStack.createRoot(
            "unknown",
            defaultMetadata
          );
        }
        prevState = new StateStackImpl(
          null,
          this._rootId,
          -1,
          -1,
          false,
          null,
          scopeList,
          scopeList
        );
      } else {
        isFirstLine = false;
        prevState.reset();
      }
      lineText = lineText + "\n";
      const onigLineText = this.createOnigString(lineText);
      const lineLength = onigLineText.content.length;
      const lineTokens = new LineTokens(
        emitBinaryTokens,
        lineText,
        this._tokenTypeMatchers,
        this.balancedBracketSelectors
      );
      const r = _tokenizeString(
        this,
        onigLineText,
        isFirstLine,
        0,
        prevState,
        lineTokens,
        true,
        timeLimit
      );
      disposeOnigString(onigLineText);
      return {
        lineLength,
        lineTokens,
        ruleStack: r.stack,
        stoppedEarly: r.stoppedEarly
      };
    }
  };
  function initGrammar(grammar, base) {
    grammar = clone(grammar);
    grammar.repository = grammar.repository || {};
    grammar.repository.$self = {
      $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,
      patterns: grammar.patterns,
      name: grammar.scopeName
    };
    grammar.repository.$base = base || grammar.repository.$self;
    return grammar;
  }
  var AttributedScopeStack = class _AttributedScopeStack {
    /**
     * Invariant:
     * ```
     * if (parent && !scopePath.extends(parent.scopePath)) {
     * 	throw new Error();
     * }
     * ```
     */
    constructor(parent, scopePath, tokenAttributes) {
      this.parent = parent;
      this.scopePath = scopePath;
      this.tokenAttributes = tokenAttributes;
    }
    static fromExtension(namesScopeList, contentNameScopesList) {
      let current = namesScopeList;
      let scopeNames = namesScopeList?.scopePath ?? null;
      for (const frame of contentNameScopesList) {
        scopeNames = ScopeStack.push(scopeNames, frame.scopeNames);
        current = new _AttributedScopeStack(current, scopeNames, frame.encodedTokenAttributes);
      }
      return current;
    }
    static createRoot(scopeName, tokenAttributes) {
      return new _AttributedScopeStack(null, new ScopeStack(null, scopeName), tokenAttributes);
    }
    static createRootAndLookUpScopeName(scopeName, tokenAttributes, grammar) {
      const rawRootMetadata = grammar.getMetadataForScope(scopeName);
      const scopePath = new ScopeStack(null, scopeName);
      const rootStyle = grammar.themeProvider.themeMatch(scopePath);
      const resolvedTokenAttributes = _AttributedScopeStack.mergeAttributes(
        tokenAttributes,
        rawRootMetadata,
        rootStyle
      );
      return new _AttributedScopeStack(null, scopePath, resolvedTokenAttributes);
    }
    get scopeName() {
      return this.scopePath.scopeName;
    }
    toString() {
      return this.getScopeNames().join(" ");
    }
    equals(other) {
      return _AttributedScopeStack.equals(this, other);
    }
    static equals(a, b) {
      do {
        if (a === b) {
          return true;
        }
        if (!a && !b) {
          return true;
        }
        if (!a || !b) {
          return false;
        }
        if (a.scopeName !== b.scopeName || a.tokenAttributes !== b.tokenAttributes) {
          return false;
        }
        a = a.parent;
        b = b.parent;
      } while (true);
    }
    static mergeAttributes(existingTokenAttributes, basicScopeAttributes, styleAttributes) {
      let fontStyle = -1 /* NotSet */;
      let foreground = 0;
      let background = 0;
      if (styleAttributes !== null) {
        fontStyle = styleAttributes.fontStyle;
        foreground = styleAttributes.foregroundId;
        background = styleAttributes.backgroundId;
      }
      return EncodedTokenMetadata.set(
        existingTokenAttributes,
        basicScopeAttributes.languageId,
        basicScopeAttributes.tokenType,
        null,
        fontStyle,
        foreground,
        background
      );
    }
    pushAttributed(scopePath, grammar) {
      if (scopePath === null) {
        return this;
      }
      if (scopePath.indexOf(" ") === -1) {
        return _AttributedScopeStack._pushAttributed(this, scopePath, grammar);
      }
      const scopes = scopePath.split(/ /g);
      let result = this;
      for (const scope of scopes) {
        result = _AttributedScopeStack._pushAttributed(result, scope, grammar);
      }
      return result;
    }
    static _pushAttributed(target, scopeName, grammar) {
      const rawMetadata = grammar.getMetadataForScope(scopeName);
      const newPath = target.scopePath.push(scopeName);
      const scopeThemeMatchResult = grammar.themeProvider.themeMatch(newPath);
      const metadata = _AttributedScopeStack.mergeAttributes(
        target.tokenAttributes,
        rawMetadata,
        scopeThemeMatchResult
      );
      return new _AttributedScopeStack(target, newPath, metadata);
    }
    getScopeNames() {
      return this.scopePath.getSegments();
    }
    getExtensionIfDefined(base) {
      const result = [];
      let self = this;
      while (self && self !== base) {
        result.push({
          encodedTokenAttributes: self.tokenAttributes,
          scopeNames: self.scopePath.getExtensionIfDefined(self.parent?.scopePath ?? null)
        });
        self = self.parent;
      }
      return self === base ? result.reverse() : void 0;
    }
  };
  var StateStackImpl = class _StateStackImpl {
    /**
     * Invariant:
     * ```
     * if (contentNameScopesList !== nameScopesList && contentNameScopesList?.parent !== nameScopesList) {
     * 	throw new Error();
     * }
     * if (this.parent && !nameScopesList.extends(this.parent.contentNameScopesList)) {
     * 	throw new Error();
     * }
     * ```
     */
    constructor(parent, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {
      this.parent = parent;
      this.ruleId = ruleId;
      this.beginRuleCapturedEOL = beginRuleCapturedEOL;
      this.endRule = endRule;
      this.nameScopesList = nameScopesList;
      this.contentNameScopesList = contentNameScopesList;
      this.depth = this.parent ? this.parent.depth + 1 : 1;
      this._enterPos = enterPos;
      this._anchorPos = anchorPos;
    }
    _stackElementBrand = void 0;
    // TODO remove me
    static NULL = new _StateStackImpl(
      null,
      0,
      0,
      0,
      false,
      null,
      null,
      null
    );
    /**
     * The position on the current line where this state was pushed.
     * This is relevant only while tokenizing a line, to detect endless loops.
     * Its value is meaningless across lines.
     */
    _enterPos;
    /**
     * The captured anchor position when this stack element was pushed.
     * This is relevant only while tokenizing a line, to restore the anchor position when popping.
     * Its value is meaningless across lines.
     */
    _anchorPos;
    /**
     * The depth of the stack.
     */
    depth;
    equals(other) {
      if (other === null) {
        return false;
      }
      return _StateStackImpl._equals(this, other);
    }
    static _equals(a, b) {
      if (a === b) {
        return true;
      }
      if (!this._structuralEquals(a, b)) {
        return false;
      }
      return AttributedScopeStack.equals(a.contentNameScopesList, b.contentNameScopesList);
    }
    /**
     * A structural equals check. Does not take into account `scopes`.
     */
    static _structuralEquals(a, b) {
      do {
        if (a === b) {
          return true;
        }
        if (!a && !b) {
          return true;
        }
        if (!a || !b) {
          return false;
        }
        if (a.depth !== b.depth || a.ruleId !== b.ruleId || a.endRule !== b.endRule) {
          return false;
        }
        a = a.parent;
        b = b.parent;
      } while (true);
    }
    clone() {
      return this;
    }
    static _reset(el) {
      while (el) {
        el._enterPos = -1;
        el._anchorPos = -1;
        el = el.parent;
      }
    }
    reset() {
      _StateStackImpl._reset(this);
    }
    pop() {
      return this.parent;
    }
    safePop() {
      if (this.parent) {
        return this.parent;
      }
      return this;
    }
    push(ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {
      return new _StateStackImpl(
        this,
        ruleId,
        enterPos,
        anchorPos,
        beginRuleCapturedEOL,
        endRule,
        nameScopesList,
        contentNameScopesList
      );
    }
    getEnterPos() {
      return this._enterPos;
    }
    getAnchorPos() {
      return this._anchorPos;
    }
    getRule(grammar) {
      return grammar.getRule(this.ruleId);
    }
    toString() {
      const r = [];
      this._writeString(r, 0);
      return "[" + r.join(",") + "]";
    }
    _writeString(res, outIndex) {
      if (this.parent) {
        outIndex = this.parent._writeString(res, outIndex);
      }
      res[outIndex++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`;
      return outIndex;
    }
    withContentNameScopesList(contentNameScopeStack) {
      if (this.contentNameScopesList === contentNameScopeStack) {
        return this;
      }
      return this.parent.push(
        this.ruleId,
        this._enterPos,
        this._anchorPos,
        this.beginRuleCapturedEOL,
        this.endRule,
        this.nameScopesList,
        contentNameScopeStack
      );
    }
    withEndRule(endRule) {
      if (this.endRule === endRule) {
        return this;
      }
      return new _StateStackImpl(
        this.parent,
        this.ruleId,
        this._enterPos,
        this._anchorPos,
        this.beginRuleCapturedEOL,
        endRule,
        this.nameScopesList,
        this.contentNameScopesList
      );
    }
    // Used to warn of endless loops
    hasSameRuleAs(other) {
      let el = this;
      while (el && el._enterPos === other._enterPos) {
        if (el.ruleId === other.ruleId) {
          return true;
        }
        el = el.parent;
      }
      return false;
    }
    toStateStackFrame() {
      return {
        ruleId: ruleIdToNumber(this.ruleId),
        beginRuleCapturedEOL: this.beginRuleCapturedEOL,
        endRule: this.endRule,
        nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [],
        contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? []
      };
    }
    static pushFrame(self, frame) {
      const namesScopeList = AttributedScopeStack.fromExtension(self?.nameScopesList ?? null, frame.nameScopesList);
      return new _StateStackImpl(
        self,
        ruleIdFromNumber(frame.ruleId),
        frame.enterPos ?? -1,
        frame.anchorPos ?? -1,
        frame.beginRuleCapturedEOL,
        frame.endRule,
        namesScopeList,
        AttributedScopeStack.fromExtension(namesScopeList, frame.contentNameScopesList)
      );
    }
  };
  var BalancedBracketSelectors = class {
    balancedBracketScopes;
    unbalancedBracketScopes;
    allowAny = false;
    constructor(balancedBracketScopes, unbalancedBracketScopes) {
      this.balancedBracketScopes = balancedBracketScopes.flatMap(
        (selector) => {
          if (selector === "*") {
            this.allowAny = true;
            return [];
          }
          return createMatchers(selector, nameMatcher).map((m) => m.matcher);
        }
      );
      this.unbalancedBracketScopes = unbalancedBracketScopes.flatMap(
        (selector) => createMatchers(selector, nameMatcher).map((m) => m.matcher)
      );
    }
    get matchesAlways() {
      return this.allowAny && this.unbalancedBracketScopes.length === 0;
    }
    get matchesNever() {
      return this.balancedBracketScopes.length === 0 && !this.allowAny;
    }
    match(scopes) {
      for (const excluder of this.unbalancedBracketScopes) {
        if (excluder(scopes)) {
          return false;
        }
      }
      for (const includer of this.balancedBracketScopes) {
        if (includer(scopes)) {
          return true;
        }
      }
      return this.allowAny;
    }
  };
  var LineTokens = class {
    constructor(emitBinaryTokens, lineText, tokenTypeOverrides, balancedBracketSelectors) {
      this.balancedBracketSelectors = balancedBracketSelectors;
      this._emitBinaryTokens = emitBinaryTokens;
      this._tokenTypeOverrides = tokenTypeOverrides;
      {
        this._lineText = null;
      }
      this._tokens = [];
      this._binaryTokens = [];
      this._lastTokenEndIndex = 0;
    }
    _emitBinaryTokens;
    /**
     * defined only if `false`.
     */
    _lineText;
    /**
     * used only if `_emitBinaryTokens` is false.
     */
    _tokens;
    /**
     * used only if `_emitBinaryTokens` is true.
     */
    _binaryTokens;
    _lastTokenEndIndex;
    _tokenTypeOverrides;
    produce(stack, endIndex) {
      this.produceFromScopes(stack.contentNameScopesList, endIndex);
    }
    produceFromScopes(scopesList, endIndex) {
      if (this._lastTokenEndIndex >= endIndex) {
        return;
      }
      if (this._emitBinaryTokens) {
        let metadata = scopesList?.tokenAttributes ?? 0;
        let containsBalancedBrackets = false;
        if (this.balancedBracketSelectors?.matchesAlways) {
          containsBalancedBrackets = true;
        }
        if (this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
          const scopes2 = scopesList?.getScopeNames() ?? [];
          for (const tokenType of this._tokenTypeOverrides) {
            if (tokenType.matcher(scopes2)) {
              metadata = EncodedTokenMetadata.set(
                metadata,
                0,
                toOptionalTokenType(tokenType.type),
                null,
                -1 /* NotSet */,
                0,
                0
              );
            }
          }
          if (this.balancedBracketSelectors) {
            containsBalancedBrackets = this.balancedBracketSelectors.match(scopes2);
          }
        }
        if (containsBalancedBrackets) {
          metadata = EncodedTokenMetadata.set(
            metadata,
            0,
            8 /* NotSet */,
            containsBalancedBrackets,
            -1 /* NotSet */,
            0,
            0
          );
        }
        if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {
          this._lastTokenEndIndex = endIndex;
          return;
        }
        this._binaryTokens.push(this._lastTokenEndIndex);
        this._binaryTokens.push(metadata);
        this._lastTokenEndIndex = endIndex;
        return;
      }
      const scopes = scopesList?.getScopeNames() ?? [];
      this._tokens.push({
        startIndex: this._lastTokenEndIndex,
        endIndex,
        // value: lineText.substring(lastTokenEndIndex, endIndex),
        scopes
      });
      this._lastTokenEndIndex = endIndex;
    }
    getResult(stack, lineLength) {
      if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {
        this._tokens.pop();
      }
      if (this._tokens.length === 0) {
        this._lastTokenEndIndex = -1;
        this.produce(stack, lineLength);
        this._tokens[this._tokens.length - 1].startIndex = 0;
      }
      return this._tokens;
    }
    getBinaryResult(stack, lineLength) {
      if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {
        this._binaryTokens.pop();
        this._binaryTokens.pop();
      }
      if (this._binaryTokens.length === 0) {
        this._lastTokenEndIndex = -1;
        this.produce(stack, lineLength);
        this._binaryTokens[this._binaryTokens.length - 2] = 0;
      }
      const result = new Uint32Array(this._binaryTokens.length);
      for (let i = 0, len = this._binaryTokens.length; i < len; i++) {
        result[i] = this._binaryTokens[i];
      }
      return result;
    }
  };

  // src/registry.ts
  var SyncRegistry = class {
    constructor(theme, _onigLib) {
      this._onigLib = _onigLib;
      this._theme = theme;
    }
    _grammars = /* @__PURE__ */ new Map();
    _rawGrammars = /* @__PURE__ */ new Map();
    _injectionGrammars = /* @__PURE__ */ new Map();
    _theme;
    dispose() {
      for (const grammar of this._grammars.values()) {
        grammar.dispose();
      }
    }
    setTheme(theme) {
      this._theme = theme;
    }
    getColorMap() {
      return this._theme.getColorMap();
    }
    /**
     * Add `grammar` to registry and return a list of referenced scope names
     */
    addGrammar(grammar, injectionScopeNames) {
      this._rawGrammars.set(grammar.scopeName, grammar);
      if (injectionScopeNames) {
        this._injectionGrammars.set(grammar.scopeName, injectionScopeNames);
      }
    }
    /**
     * Lookup a raw grammar.
     */
    lookup(scopeName) {
      return this._rawGrammars.get(scopeName);
    }
    /**
     * Returns the injections for the given grammar
     */
    injections(targetScope) {
      return this._injectionGrammars.get(targetScope);
    }
    /**
     * Get the default theme settings
     */
    getDefaults() {
      return this._theme.getDefaults();
    }
    /**
     * Match a scope in the theme.
     */
    themeMatch(scopePath) {
      return this._theme.match(scopePath);
    }
    /**
     * Lookup a grammar.
     */
    grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {
      if (!this._grammars.has(scopeName)) {
        let rawGrammar = this._rawGrammars.get(scopeName);
        if (!rawGrammar) {
          return null;
        }
        this._grammars.set(scopeName, createGrammar(
          scopeName,
          rawGrammar,
          initialLanguage,
          embeddedLanguages,
          tokenTypes,
          balancedBracketSelectors,
          this,
          this._onigLib
        ));
      }
      return this._grammars.get(scopeName);
    }
  };

  // src/index.ts
  var Registry$1 = class Registry {
    _options;
    _syncRegistry;
    _ensureGrammarCache;
    constructor(options) {
      this._options = options;
      this._syncRegistry = new SyncRegistry(
        Theme.createFromRawTheme(options.theme, options.colorMap),
        options.onigLib
      );
      this._ensureGrammarCache = /* @__PURE__ */ new Map();
    }
    dispose() {
      this._syncRegistry.dispose();
    }
    /**
     * Change the theme. Once called, no previous `ruleStack` should be used anymore.
     */
    setTheme(theme, colorMap) {
      this._syncRegistry.setTheme(Theme.createFromRawTheme(theme, colorMap));
    }
    /**
     * Returns a lookup array for color ids.
     */
    getColorMap() {
      return this._syncRegistry.getColorMap();
    }
    /**
     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.
     * Please do not use language id 0.
     */
    loadGrammarWithEmbeddedLanguages(initialScopeName, initialLanguage, embeddedLanguages) {
      return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages });
    }
    /**
     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.
     * Please do not use language id 0.
     */
    loadGrammarWithConfiguration(initialScopeName, initialLanguage, configuration) {
      return this._loadGrammar(
        initialScopeName,
        initialLanguage,
        configuration.embeddedLanguages,
        configuration.tokenTypes,
        new BalancedBracketSelectors(
          configuration.balancedBracketSelectors || [],
          configuration.unbalancedBracketSelectors || []
        )
      );
    }
    /**
     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.
     */
    loadGrammar(initialScopeName) {
      return this._loadGrammar(initialScopeName, 0, null, null, null);
    }
    _loadGrammar(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes, balancedBracketSelectors) {
      const dependencyProcessor = new ScopeDependencyProcessor(this._syncRegistry, initialScopeName);
      while (dependencyProcessor.Q.length > 0) {
        dependencyProcessor.Q.map((request) => this._loadSingleGrammar(request.scopeName));
        dependencyProcessor.processQueue();
      }
      return this._grammarForScopeName(
        initialScopeName,
        initialLanguage,
        embeddedLanguages,
        tokenTypes,
        balancedBracketSelectors
      );
    }
    _loadSingleGrammar(scopeName) {
      if (!this._ensureGrammarCache.has(scopeName)) {
        this._doLoadSingleGrammar(scopeName);
        this._ensureGrammarCache.set(scopeName, true);
      }
    }
    _doLoadSingleGrammar(scopeName) {
      const grammar = this._options.loadGrammar(scopeName);
      if (grammar) {
        const injections = typeof this._options.getInjections === "function" ? this._options.getInjections(scopeName) : void 0;
        this._syncRegistry.addGrammar(grammar, injections);
      }
    }
    /**
     * Adds a rawGrammar.
     */
    addGrammar(rawGrammar, injections = [], initialLanguage = 0, embeddedLanguages = null) {
      this._syncRegistry.addGrammar(rawGrammar, injections);
      return this._grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages);
    }
    /**
     * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.
     */
    _grammarForScopeName(scopeName, initialLanguage = 0, embeddedLanguages = null, tokenTypes = null, balancedBracketSelectors = null) {
      return this._syncRegistry.grammarForScopeName(
        scopeName,
        initialLanguage,
        embeddedLanguages,
        tokenTypes,
        balancedBracketSelectors
      );
    }
  };
  var INITIAL = StateStackImpl.NULL;

  /**
   * List of HTML void tag names.
   *
   * @type {Array<string>}
   */
  const htmlVoidElements = [
    'area',
    'base',
    'basefont',
    'bgsound',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'image',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr'
  ];

  /**
   * @import {Schema as SchemaType, Space} from 'property-information'
   */

  /** @type {SchemaType} */
  let Schema$1 = class Schema {
    /**
     * @param {SchemaType['property']} property
     *   Property.
     * @param {SchemaType['normal']} normal
     *   Normal.
     * @param {Space | undefined} [space]
     *   Space.
     * @returns
     *   Schema.
     */
    constructor(property, normal, space) {
      this.normal = normal;
      this.property = property;

      if (space) {
        this.space = space;
      }
    }
  };

  Schema$1.prototype.normal = {};
  Schema$1.prototype.property = {};
  Schema$1.prototype.space = undefined;

  /**
   * @import {Info, Space} from 'property-information'
   */


  /**
   * @param {ReadonlyArray<Schema>} definitions
   *   Definitions.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns {Schema}
   *   Schema.
   */
  function merge$1(definitions, space) {
    /** @type {Record<string, Info>} */
    const property = {};
    /** @type {Record<string, string>} */
    const normal = {};

    for (const definition of definitions) {
      Object.assign(property, definition.property);
      Object.assign(normal, definition.normal);
    }

    return new Schema$1(property, normal, space)
  }

  /**
   * Get the cleaned case insensitive form of an attribute or property.
   *
   * @param {string} value
   *   An attribute-like or property-like name.
   * @returns {string}
   *   Value that can be used to look up the properly cased property on a
   *   `Schema`.
   */
  function normalize(value) {
    return value.toLowerCase()
  }

  /**
   * @import {Info as InfoType} from 'property-information'
   */

  /** @type {InfoType} */
  class Info {
    /**
     * @param {string} property
     *   Property.
     * @param {string} attribute
     *   Attribute.
     * @returns
     *   Info.
     */
    constructor(property, attribute) {
      this.attribute = attribute;
      this.property = property;
    }
  }

  Info.prototype.attribute = '';
  Info.prototype.booleanish = false;
  Info.prototype.boolean = false;
  Info.prototype.commaOrSpaceSeparated = false;
  Info.prototype.commaSeparated = false;
  Info.prototype.defined = false;
  Info.prototype.mustUseProperty = false;
  Info.prototype.number = false;
  Info.prototype.overloadedBoolean = false;
  Info.prototype.property = '';
  Info.prototype.spaceSeparated = false;
  Info.prototype.space = undefined;

  let powers = 0;

  const boolean = increment();
  const booleanish = increment();
  const overloadedBoolean = increment();
  const number = increment();
  const spaceSeparated = increment();
  const commaSeparated = increment();
  const commaOrSpaceSeparated = increment();

  function increment() {
    return 2 ** ++powers
  }

  var types = /*#__PURE__*/Object.freeze({
    __proto__: null,
    boolean: boolean,
    booleanish: booleanish,
    commaOrSpaceSeparated: commaOrSpaceSeparated,
    commaSeparated: commaSeparated,
    number: number,
    overloadedBoolean: overloadedBoolean,
    spaceSeparated: spaceSeparated
  });

  /**
   * @import {Space} from 'property-information'
   */


  const checks = /** @type {ReadonlyArray<keyof typeof types>} */ (
    Object.keys(types)
  );

  class DefinedInfo extends Info {
    /**
     * @constructor
     * @param {string} property
     *   Property.
     * @param {string} attribute
     *   Attribute.
     * @param {number | null | undefined} [mask]
     *   Mask.
     * @param {Space | undefined} [space]
     *   Space.
     * @returns
     *   Info.
     */
    constructor(property, attribute, mask, space) {
      let index = -1;

      super(property, attribute);

      mark(this, 'space', space);

      if (typeof mask === 'number') {
        while (++index < checks.length) {
          const check = checks[index];
          mark(this, checks[index], (mask & types[check]) === types[check]);
        }
      }
    }
  }

  DefinedInfo.prototype.defined = true;

  /**
   * @template {keyof DefinedInfo} Key
   *   Key type.
   * @param {DefinedInfo} values
   *   Info.
   * @param {Key} key
   *   Key.
   * @param {DefinedInfo[Key]} value
   *   Value.
   * @returns {undefined}
   *   Nothing.
   */
  function mark(values, key, value) {
    if (value) {
      values[key] = value;
    }
  }

  /**
   * @import {Info, Space} from 'property-information'
   */


  /**
   * @param {Definition} definition
   *   Definition.
   * @returns {Schema}
   *   Schema.
   */
  function create(definition) {
    /** @type {Record<string, Info>} */
    const properties = {};
    /** @type {Record<string, string>} */
    const normals = {};

    for (const [property, value] of Object.entries(definition.properties)) {
      const info = new DefinedInfo(
        property,
        definition.transform(definition.attributes || {}, property),
        value,
        definition.space
      );

      if (
        definition.mustUseProperty &&
        definition.mustUseProperty.includes(property)
      ) {
        info.mustUseProperty = true;
      }

      properties[property] = info;

      normals[normalize(property)] = property;
      normals[normalize(info.attribute)] = property;
    }

    return new Schema$1(properties, normals, definition.space)
  }

  const aria = create({
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number,
      ariaColIndex: number,
      ariaColSpan: number,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number,
      ariaRowIndex: number,
      ariaRowSpan: number,
      ariaSelected: booleanish,
      ariaSetSize: number,
      ariaSort: null,
      ariaValueMax: number,
      ariaValueMin: number,
      ariaValueNow: number,
      ariaValueText: null,
      role: null
    },
    transform(_, property) {
      return property === 'role'
        ? property
        : 'aria-' + property.slice(4).toLowerCase()
    }
  });

  /**
   * @param {Record<string, string>} attributes
   *   Attributes.
   * @param {string} attribute
   *   Attribute.
   * @returns {string}
   *   Transformed attribute.
   */
  function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute
  }

  /**
   * @param {Record<string, string>} attributes
   *   Attributes.
   * @param {string} property
   *   Property.
   * @returns {string}
   *   Transformed property.
   */
  function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase())
  }

  const html$3 = create({
    attributes: {
      acceptcharset: 'accept-charset',
      classname: 'class',
      htmlfor: 'for',
      httpequiv: 'http-equiv'
    },
    mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      blocking: spaceSeparated,
      capture: null,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      fetchPriority: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: overloadedBoolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inert: boolean,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforeMatch: null,
      onBeforePrint: null,
      onBeforeToggle: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onScrollEnd: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      popover: null,
      popoverTarget: null,
      popoverTargetAction: null,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shadowRootClonable: boolean,
      shadowRootDelegatesFocus: boolean,
      shadowRootMode: null,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,
      writingSuggestions: null,

      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null, // Several. Use CSS `text-align` instead,
      aLink: null, // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated, // `<object>`. List of URIs to archives
      axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null, // `<body>`. Use CSS `background-image` instead
      bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
      border: number, // `<table>`. Use CSS `border-width` instead,
      borderColor: null, // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number, // `<body>`
      cellPadding: null, // `<table>`
      cellSpacing: null, // `<table>`
      char: null, // Several table elements. When `align=char`, sets the character to align on
      charOff: null, // Several table elements. When `char`, offsets the alignment
      classId: null, // `<object>`
      clear: null, // `<br>`. Use CSS `clear` instead
      code: null, // `<object>`
      codeBase: null, // `<object>`
      codeType: null, // `<object>`
      color: null, // `<font>` and `<hr>`. Use CSS instead
      compact: boolean, // Lists. Use CSS to reduce space between items instead
      declare: boolean, // `<object>`
      event: null, // `<script>`
      face: null, // `<font>`. Use CSS instead
      frame: null, // `<table>`
      frameBorder: null, // `<iframe>`. Use CSS `border` instead
      hSpace: number, // `<img>` and `<object>`
      leftMargin: number, // `<body>`
      link: null, // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null, // `<img>`. Use a `<picture>`
      marginHeight: number, // `<body>`
      marginWidth: number, // `<body>`
      noResize: boolean, // `<frame>`
      noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean, // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean, // `<td>` and `<th>`
      object: null, // `<applet>`
      profile: null, // `<head>`
      prompt: null, // `<isindex>`
      rev: null, // `<link>`
      rightMargin: number, // `<body>`
      rules: null, // `<table>`
      scheme: null, // `<meta>`
      scrolling: booleanish, // `<frame>`. Use overflow in the child context
      standby: null, // `<object>`
      summary: null, // `<table>`
      text: null, // `<body>`. Use CSS `color` instead
      topMargin: number, // `<body>`
      valueType: null, // `<param>`
      version: null, // `<html>`. Use a doctype.
      vAlign: null, // Several. Use CSS `vertical-align` instead
      vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number, // `<img>` and `<object>`

      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    },
    space: 'html',
    transform: caseInsensitiveTransform
  });

  const svg$2 = create({
    attributes: {
      accentHeight: 'accent-height',
      alignmentBaseline: 'alignment-baseline',
      arabicForm: 'arabic-form',
      baselineShift: 'baseline-shift',
      capHeight: 'cap-height',
      className: 'class',
      clipPath: 'clip-path',
      clipRule: 'clip-rule',
      colorInterpolation: 'color-interpolation',
      colorInterpolationFilters: 'color-interpolation-filters',
      colorProfile: 'color-profile',
      colorRendering: 'color-rendering',
      crossOrigin: 'crossorigin',
      dataType: 'datatype',
      dominantBaseline: 'dominant-baseline',
      enableBackground: 'enable-background',
      fillOpacity: 'fill-opacity',
      fillRule: 'fill-rule',
      floodColor: 'flood-color',
      floodOpacity: 'flood-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      fontSizeAdjust: 'font-size-adjust',
      fontStretch: 'font-stretch',
      fontStyle: 'font-style',
      fontVariant: 'font-variant',
      fontWeight: 'font-weight',
      glyphName: 'glyph-name',
      glyphOrientationHorizontal: 'glyph-orientation-horizontal',
      glyphOrientationVertical: 'glyph-orientation-vertical',
      hrefLang: 'hreflang',
      horizAdvX: 'horiz-adv-x',
      horizOriginX: 'horiz-origin-x',
      horizOriginY: 'horiz-origin-y',
      imageRendering: 'image-rendering',
      letterSpacing: 'letter-spacing',
      lightingColor: 'lighting-color',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      navDown: 'nav-down',
      navDownLeft: 'nav-down-left',
      navDownRight: 'nav-down-right',
      navLeft: 'nav-left',
      navNext: 'nav-next',
      navPrev: 'nav-prev',
      navRight: 'nav-right',
      navUp: 'nav-up',
      navUpLeft: 'nav-up-left',
      navUpRight: 'nav-up-right',
      onAbort: 'onabort',
      onActivate: 'onactivate',
      onAfterPrint: 'onafterprint',
      onBeforePrint: 'onbeforeprint',
      onBegin: 'onbegin',
      onCancel: 'oncancel',
      onCanPlay: 'oncanplay',
      onCanPlayThrough: 'oncanplaythrough',
      onChange: 'onchange',
      onClick: 'onclick',
      onClose: 'onclose',
      onCopy: 'oncopy',
      onCueChange: 'oncuechange',
      onCut: 'oncut',
      onDblClick: 'ondblclick',
      onDrag: 'ondrag',
      onDragEnd: 'ondragend',
      onDragEnter: 'ondragenter',
      onDragExit: 'ondragexit',
      onDragLeave: 'ondragleave',
      onDragOver: 'ondragover',
      onDragStart: 'ondragstart',
      onDrop: 'ondrop',
      onDurationChange: 'ondurationchange',
      onEmptied: 'onemptied',
      onEnd: 'onend',
      onEnded: 'onended',
      onError: 'onerror',
      onFocus: 'onfocus',
      onFocusIn: 'onfocusin',
      onFocusOut: 'onfocusout',
      onHashChange: 'onhashchange',
      onInput: 'oninput',
      onInvalid: 'oninvalid',
      onKeyDown: 'onkeydown',
      onKeyPress: 'onkeypress',
      onKeyUp: 'onkeyup',
      onLoad: 'onload',
      onLoadedData: 'onloadeddata',
      onLoadedMetadata: 'onloadedmetadata',
      onLoadStart: 'onloadstart',
      onMessage: 'onmessage',
      onMouseDown: 'onmousedown',
      onMouseEnter: 'onmouseenter',
      onMouseLeave: 'onmouseleave',
      onMouseMove: 'onmousemove',
      onMouseOut: 'onmouseout',
      onMouseOver: 'onmouseover',
      onMouseUp: 'onmouseup',
      onMouseWheel: 'onmousewheel',
      onOffline: 'onoffline',
      onOnline: 'ononline',
      onPageHide: 'onpagehide',
      onPageShow: 'onpageshow',
      onPaste: 'onpaste',
      onPause: 'onpause',
      onPlay: 'onplay',
      onPlaying: 'onplaying',
      onPopState: 'onpopstate',
      onProgress: 'onprogress',
      onRateChange: 'onratechange',
      onRepeat: 'onrepeat',
      onReset: 'onreset',
      onResize: 'onresize',
      onScroll: 'onscroll',
      onSeeked: 'onseeked',
      onSeeking: 'onseeking',
      onSelect: 'onselect',
      onShow: 'onshow',
      onStalled: 'onstalled',
      onStorage: 'onstorage',
      onSubmit: 'onsubmit',
      onSuspend: 'onsuspend',
      onTimeUpdate: 'ontimeupdate',
      onToggle: 'ontoggle',
      onUnload: 'onunload',
      onVolumeChange: 'onvolumechange',
      onWaiting: 'onwaiting',
      onZoom: 'onzoom',
      overlinePosition: 'overline-position',
      overlineThickness: 'overline-thickness',
      paintOrder: 'paint-order',
      panose1: 'panose-1',
      pointerEvents: 'pointer-events',
      referrerPolicy: 'referrerpolicy',
      renderingIntent: 'rendering-intent',
      shapeRendering: 'shape-rendering',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strikethroughPosition: 'strikethrough-position',
      strikethroughThickness: 'strikethrough-thickness',
      strokeDashArray: 'stroke-dasharray',
      strokeDashOffset: 'stroke-dashoffset',
      strokeLineCap: 'stroke-linecap',
      strokeLineJoin: 'stroke-linejoin',
      strokeMiterLimit: 'stroke-miterlimit',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      tabIndex: 'tabindex',
      textAnchor: 'text-anchor',
      textDecoration: 'text-decoration',
      textRendering: 'text-rendering',
      transformOrigin: 'transform-origin',
      typeOf: 'typeof',
      underlinePosition: 'underline-position',
      underlineThickness: 'underline-thickness',
      unicodeBidi: 'unicode-bidi',
      unicodeRange: 'unicode-range',
      unitsPerEm: 'units-per-em',
      vAlphabetic: 'v-alphabetic',
      vHanging: 'v-hanging',
      vIdeographic: 'v-ideographic',
      vMathematical: 'v-mathematical',
      vectorEffect: 'vector-effect',
      vertAdvY: 'vert-adv-y',
      vertOriginX: 'vert-origin-x',
      vertOriginY: 'vert-origin-y',
      wordSpacing: 'word-spacing',
      writingMode: 'writing-mode',
      xHeight: 'x-height',
      // These were camelcased in Tiny. Now lowercased in SVG 2
      playbackOrder: 'playbackorder',
      timelineBegin: 'timelinebegin'
    },
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number,
      amplitude: number,
      arabicForm: null,
      ascent: number,
      attributeName: null,
      attributeType: null,
      azimuth: number,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number,
      by: null,
      calcMode: null,
      capHeight: number,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number,
      diffuseConstant: number,
      direction: null,
      display: null,
      dur: null,
      divisor: number,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number,
      horizOriginX: number,
      horizOriginY: number,
      id: null,
      ideographic: number,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number,
      k: number,
      k1: number,
      k2: number,
      k3: number,
      k4: number,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null, // SEMI_COLON_SEPARATED
      keySplines: null, // SEMI_COLON_SEPARATED
      keyTimes: null, // SEMI_COLON_SEPARATED
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number,
      overlineThickness: number,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number,
      pointsAtY: number,
      pointsAtZ: number,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number,
      specularExponent: number,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number,
      strikethroughThickness: number,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number,
      strokeOpacity: number,
      strokeWidth: null,
      style: null,
      surfaceScale: number,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number,
      tableValues: null,
      target: null,
      targetX: number,
      targetY: number,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      transformOrigin: null,
      u1: null,
      u2: null,
      underlinePosition: number,
      underlineThickness: number,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number,
      values: null,
      vAlphabetic: number,
      vMathematical: number,
      vectorEffect: null,
      vHanging: number,
      vIdeographic: number,
      version: null,
      vertAdvY: number,
      vertOriginX: number,
      vertOriginY: number,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    },
    space: 'svg',
    transform: caseSensitiveTransform
  });

  const xlink = create({
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    },
    space: 'xlink',
    transform(_, property) {
      return 'xlink:' + property.slice(5).toLowerCase()
    }
  });

  const xmlns = create({
    attributes: {xmlnsxlink: 'xmlns:xlink'},
    properties: {xmlnsXLink: null, xmlns: null},
    space: 'xmlns',
    transform: caseInsensitiveTransform
  });

  const xml = create({
    properties: {xmlBase: null, xmlLang: null, xmlSpace: null},
    space: 'xml',
    transform(_, property) {
      return 'xml:' + property.slice(3).toLowerCase()
    }
  });

  /**
   * @import {Schema} from 'property-information'
   */


  const cap = /[A-Z]/g;
  const dash = /-[a-z]/g;
  const valid = /^data[-\w.:]+$/i;

  /**
   * Look up info on a property.
   *
   * In most cases the given `schema` contains info on the property.
   * All standard,
   * most legacy,
   * and some non-standard properties are supported.
   * For these cases,
   * the returned `Info` has hints about the value of the property.
   *
   * `name` can also be a valid data attribute or property,
   * in which case an `Info` object with the correctly cased `attribute` and
   * `property` is returned.
   *
   * `name` can be an unknown attribute,
   * in which case an `Info` object with `attribute` and `property` set to the
   * given name is returned.
   * It is not recommended to provide unsupported legacy or recently specced
   * properties.
   *
   *
   * @param {Schema} schema
   *   Schema;
   *   either the `html` or `svg` export.
   * @param {string} value
   *   An attribute-like or property-like name;
   *   it will be passed through `normalize` to hopefully find the correct info.
   * @returns {Info}
   *   Info.
   */
  function find(schema, value) {
    const normal = normalize(value);
    let property = value;
    let Type = Info;

    if (normal in schema.normal) {
      return schema.property[schema.normal[normal]]
    }

    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
      // Attribute or property.
      if (value.charAt(4) === '-') {
        // Turn it into a property.
        const rest = value.slice(5).replace(dash, camelcase);
        property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        // Turn it into an attribute.
        const rest = value.slice(4);

        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);

          if (dashes.charAt(0) !== '-') {
            dashes = '-' + dashes;
          }

          value = 'data' + dashes;
        }
      }

      Type = DefinedInfo;
    }

    return new Type(property, value)
  }

  /**
   * @param {string} $0
   *   Value.
   * @returns {string}
   *   Kebab.
   */
  function kebab($0) {
    return '-' + $0.toLowerCase()
  }

  /**
   * @param {string} $0
   *   Value.
   * @returns {string}
   *   Camel.
   */
  function camelcase($0) {
    return $0.charAt(1).toUpperCase()
  }

  // Note: types exposed from `index.d.ts`.

  const html$2 = merge$1([aria, html$3, xlink, xmlns, xml], 'html');

  const svg$1 = merge$1([aria, svg$2, xlink, xmlns, xml], 'svg');

  /**
   * @callback Handler
   *   Handle a value, with a certain ID field set to a certain value.
   *   The ID field is passed to `zwitch`, and it’s value is this function’s
   *   place on the `handlers` record.
   * @param {...any} parameters
   *   Arbitrary parameters passed to the zwitch.
   *   The first will be an object with a certain ID field set to a certain value.
   * @returns {any}
   *   Anything!
   */

  /**
   * @callback UnknownHandler
   *   Handle values that do have a certain ID field, but it’s set to a value
   *   that is not listed in the `handlers` record.
   * @param {unknown} value
   *   An object with a certain ID field set to an unknown value.
   * @param {...any} rest
   *   Arbitrary parameters passed to the zwitch.
   * @returns {any}
   *   Anything!
   */

  /**
   * @callback InvalidHandler
   *   Handle values that do not have a certain ID field.
   * @param {unknown} value
   *   Any unknown value.
   * @param {...any} rest
   *   Arbitrary parameters passed to the zwitch.
   * @returns {void|null|undefined|never}
   *   This should crash or return nothing.
   */

  /**
   * @template {InvalidHandler} [Invalid=InvalidHandler]
   * @template {UnknownHandler} [Unknown=UnknownHandler]
   * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
   * @typedef Options
   *   Configuration (required).
   * @property {Invalid} [invalid]
   *   Handler to use for invalid values.
   * @property {Unknown} [unknown]
   *   Handler to use for unknown values.
   * @property {Handlers} [handlers]
   *   Handlers to use.
   */

  const own$2 = {}.hasOwnProperty;

  /**
   * Handle values based on a field.
   *
   * @template {InvalidHandler} [Invalid=InvalidHandler]
   * @template {UnknownHandler} [Unknown=UnknownHandler]
   * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
   * @param {string} key
   *   Field to switch on.
   * @param {Options<Invalid, Unknown, Handlers>} [options]
   *   Configuration (required).
   * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}
   */
  function zwitch(key, options) {
    const settings = options || {};

    /**
     * Handle one value.
     *
     * Based on the bound `key`, a respective handler will be called.
     * If `value` is not an object, or doesn’t have a `key` property, the special
     * “invalid” handler will be called.
     * If `value` has an unknown `key`, the special “unknown” handler will be
     * called.
     *
     * All arguments, and the context object, are passed through to the handler,
     * and it’s result is returned.
     *
     * @this {unknown}
     *   Any context object.
     * @param {unknown} [value]
     *   Any value.
     * @param {...unknown} parameters
     *   Arbitrary parameters passed to the zwitch.
     * @property {Handler} invalid
     *   Handle for values that do not have a certain ID field.
     * @property {Handler} unknown
     *   Handle values that do have a certain ID field, but it’s set to a value
     *   that is not listed in the `handlers` record.
     * @property {Handlers} handlers
     *   Record of handlers.
     * @returns {unknown}
     *   Anything.
     */
    function one(value, ...parameters) {
      /** @type {Handler|undefined} */
      let fn = one.invalid;
      const handlers = one.handlers;

      if (value && own$2.call(value, key)) {
        // @ts-expect-error Indexable.
        const id = String(value[key]);
        // @ts-expect-error Indexable.
        fn = own$2.call(handlers, id) ? handlers[id] : one.unknown;
      }

      if (fn) {
        return fn.call(this, value, ...parameters)
      }
    }

    one.handlers = settings.handlers || {};
    one.invalid = settings.invalid;
    one.unknown = settings.unknown;

    // @ts-expect-error: matches!
    return one
  }

  /**
   * @typedef CoreOptions
   * @property {ReadonlyArray<string>} [subset=[]]
   *   Whether to only escape the given subset of characters.
   * @property {boolean} [escapeOnly=false]
   *   Whether to only escape possibly dangerous characters.
   *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
   *
   * @typedef FormatOptions
   * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
   *   Format strategy.
   *
   * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
   */

  const defaultSubsetRegex = /["&'<>`]/g;
  const surrogatePairsRegex = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  const controlCharactersRegex =
    // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
    /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
  const regexEscapeRegex = /[|\\{}()[\]^$+*?.]/g;

  /** @type {WeakMap<ReadonlyArray<string>, RegExp>} */
  const subsetToRegexCache = new WeakMap();

  /**
   * Encode certain characters in `value`.
   *
   * @param {string} value
   * @param {CoreWithFormatOptions} options
   * @returns {string}
   */
  function core(value, options) {
    value = value.replace(
      options.subset
        ? charactersToExpressionCached(options.subset)
        : defaultSubsetRegex,
      basic
    );

    if (options.subset || options.escapeOnly) {
      return value
    }

    return (
      value
        // Surrogate pairs.
        .replace(surrogatePairsRegex, surrogate)
        // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
        // non-ASCII ones).
        .replace(controlCharactersRegex, basic)
    )

    /**
     * @param {string} pair
     * @param {number} index
     * @param {string} all
     */
    function surrogate(pair, index, all) {
      return options.format(
        (pair.charCodeAt(0) - 0xd800) * 0x400 +
          pair.charCodeAt(1) -
          0xdc00 +
          0x10000,
        all.charCodeAt(index + 2),
        options
      )
    }

    /**
     * @param {string} character
     * @param {number} index
     * @param {string} all
     */
    function basic(character, index, all) {
      return options.format(
        character.charCodeAt(0),
        all.charCodeAt(index + 1),
        options
      )
    }
  }

  /**
   * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.
   * This can improve performance when tooling calls `charactersToExpression` repeatedly
   * with the same subset.
   *
   * @param {ReadonlyArray<string>} subset
   * @returns {RegExp}
   */
  function charactersToExpressionCached(subset) {
    let cached = subsetToRegexCache.get(subset);

    if (!cached) {
      cached = charactersToExpression(subset);
      subsetToRegexCache.set(subset, cached);
    }

    return cached
  }

  /**
   * @param {ReadonlyArray<string>} subset
   * @returns {RegExp}
   */
  function charactersToExpression(subset) {
    /** @type {Array<string>} */
    const groups = [];
    let index = -1;

    while (++index < subset.length) {
      groups.push(subset[index].replace(regexEscapeRegex, '\\$&'));
    }

    return new RegExp('(?:' + groups.join('|') + ')', 'g')
  }

  const hexadecimalRegex = /[\dA-Fa-f]/;

  /**
   * Configurable ways to encode characters as hexadecimal references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @returns {string}
   */
  function toHexadecimal(code, next, omit) {
    const value = '&#x' + code.toString(16).toUpperCase();
    return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))
      ? value
      : value + ';'
  }

  const decimalRegex = /\d/;

  /**
   * Configurable ways to encode characters as decimal references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @returns {string}
   */
  function toDecimal(code, next, omit) {
    const value = '&#' + String(code);
    return omit && next && !decimalRegex.test(String.fromCharCode(next))
      ? value
      : value + ';'
  }

  /**
   * List of legacy HTML named character references that don’t need a trailing semicolon.
   *
   * @type {Array<string>}
   */
  const characterEntitiesLegacy = [
    'AElig',
    'AMP',
    'Aacute',
    'Acirc',
    'Agrave',
    'Aring',
    'Atilde',
    'Auml',
    'COPY',
    'Ccedil',
    'ETH',
    'Eacute',
    'Ecirc',
    'Egrave',
    'Euml',
    'GT',
    'Iacute',
    'Icirc',
    'Igrave',
    'Iuml',
    'LT',
    'Ntilde',
    'Oacute',
    'Ocirc',
    'Ograve',
    'Oslash',
    'Otilde',
    'Ouml',
    'QUOT',
    'REG',
    'THORN',
    'Uacute',
    'Ucirc',
    'Ugrave',
    'Uuml',
    'Yacute',
    'aacute',
    'acirc',
    'acute',
    'aelig',
    'agrave',
    'amp',
    'aring',
    'atilde',
    'auml',
    'brvbar',
    'ccedil',
    'cedil',
    'cent',
    'copy',
    'curren',
    'deg',
    'divide',
    'eacute',
    'ecirc',
    'egrave',
    'eth',
    'euml',
    'frac12',
    'frac14',
    'frac34',
    'gt',
    'iacute',
    'icirc',
    'iexcl',
    'igrave',
    'iquest',
    'iuml',
    'laquo',
    'lt',
    'macr',
    'micro',
    'middot',
    'nbsp',
    'not',
    'ntilde',
    'oacute',
    'ocirc',
    'ograve',
    'ordf',
    'ordm',
    'oslash',
    'otilde',
    'ouml',
    'para',
    'plusmn',
    'pound',
    'quot',
    'raquo',
    'reg',
    'sect',
    'shy',
    'sup1',
    'sup2',
    'sup3',
    'szlig',
    'thorn',
    'times',
    'uacute',
    'ucirc',
    'ugrave',
    'uml',
    'uuml',
    'yacute',
    'yen',
    'yuml'
  ];

  /**
   * Map of named character references from HTML 4.
   *
   * @type {Record<string, string>}
   */
  const characterEntitiesHtml4 = {
    nbsp: ' ',
    iexcl: '¡',
    cent: '¢',
    pound: '£',
    curren: '¤',
    yen: '¥',
    brvbar: '¦',
    sect: '§',
    uml: '¨',
    copy: '©',
    ordf: 'ª',
    laquo: '«',
    not: '¬',
    shy: '­',
    reg: '®',
    macr: '¯',
    deg: '°',
    plusmn: '±',
    sup2: '²',
    sup3: '³',
    acute: '´',
    micro: 'µ',
    para: '¶',
    middot: '·',
    cedil: '¸',
    sup1: '¹',
    ordm: 'º',
    raquo: '»',
    frac14: '¼',
    frac12: '½',
    frac34: '¾',
    iquest: '¿',
    Agrave: 'À',
    Aacute: 'Á',
    Acirc: 'Â',
    Atilde: 'Ã',
    Auml: 'Ä',
    Aring: 'Å',
    AElig: 'Æ',
    Ccedil: 'Ç',
    Egrave: 'È',
    Eacute: 'É',
    Ecirc: 'Ê',
    Euml: 'Ë',
    Igrave: 'Ì',
    Iacute: 'Í',
    Icirc: 'Î',
    Iuml: 'Ï',
    ETH: 'Ð',
    Ntilde: 'Ñ',
    Ograve: 'Ò',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Otilde: 'Õ',
    Ouml: 'Ö',
    times: '×',
    Oslash: 'Ø',
    Ugrave: 'Ù',
    Uacute: 'Ú',
    Ucirc: 'Û',
    Uuml: 'Ü',
    Yacute: 'Ý',
    THORN: 'Þ',
    szlig: 'ß',
    agrave: 'à',
    aacute: 'á',
    acirc: 'â',
    atilde: 'ã',
    auml: 'ä',
    aring: 'å',
    aelig: 'æ',
    ccedil: 'ç',
    egrave: 'è',
    eacute: 'é',
    ecirc: 'ê',
    euml: 'ë',
    igrave: 'ì',
    iacute: 'í',
    icirc: 'î',
    iuml: 'ï',
    eth: 'ð',
    ntilde: 'ñ',
    ograve: 'ò',
    oacute: 'ó',
    ocirc: 'ô',
    otilde: 'õ',
    ouml: 'ö',
    divide: '÷',
    oslash: 'ø',
    ugrave: 'ù',
    uacute: 'ú',
    ucirc: 'û',
    uuml: 'ü',
    yacute: 'ý',
    thorn: 'þ',
    yuml: 'ÿ',
    fnof: 'ƒ',
    Alpha: 'Α',
    Beta: 'Β',
    Gamma: 'Γ',
    Delta: 'Δ',
    Epsilon: 'Ε',
    Zeta: 'Ζ',
    Eta: 'Η',
    Theta: 'Θ',
    Iota: 'Ι',
    Kappa: 'Κ',
    Lambda: 'Λ',
    Mu: 'Μ',
    Nu: 'Ν',
    Xi: 'Ξ',
    Omicron: 'Ο',
    Pi: 'Π',
    Rho: 'Ρ',
    Sigma: 'Σ',
    Tau: 'Τ',
    Upsilon: 'Υ',
    Phi: 'Φ',
    Chi: 'Χ',
    Psi: 'Ψ',
    Omega: 'Ω',
    alpha: 'α',
    beta: 'β',
    gamma: 'γ',
    delta: 'δ',
    epsilon: 'ε',
    zeta: 'ζ',
    eta: 'η',
    theta: 'θ',
    iota: 'ι',
    kappa: 'κ',
    lambda: 'λ',
    mu: 'μ',
    nu: 'ν',
    xi: 'ξ',
    omicron: 'ο',
    pi: 'π',
    rho: 'ρ',
    sigmaf: 'ς',
    sigma: 'σ',
    tau: 'τ',
    upsilon: 'υ',
    phi: 'φ',
    chi: 'χ',
    psi: 'ψ',
    omega: 'ω',
    thetasym: 'ϑ',
    upsih: 'ϒ',
    piv: 'ϖ',
    bull: '•',
    hellip: '…',
    prime: '′',
    Prime: '″',
    oline: '‾',
    frasl: '⁄',
    weierp: '℘',
    image: 'ℑ',
    real: 'ℜ',
    trade: '™',
    alefsym: 'ℵ',
    larr: '←',
    uarr: '↑',
    rarr: '→',
    darr: '↓',
    harr: '↔',
    crarr: '↵',
    lArr: '⇐',
    uArr: '⇑',
    rArr: '⇒',
    dArr: '⇓',
    hArr: '⇔',
    forall: '∀',
    part: '∂',
    exist: '∃',
    empty: '∅',
    nabla: '∇',
    isin: '∈',
    notin: '∉',
    ni: '∋',
    prod: '∏',
    sum: '∑',
    minus: '−',
    lowast: '∗',
    radic: '√',
    prop: '∝',
    infin: '∞',
    ang: '∠',
    and: '∧',
    or: '∨',
    cap: '∩',
    cup: '∪',
    int: '∫',
    there4: '∴',
    sim: '∼',
    cong: '≅',
    asymp: '≈',
    ne: '≠',
    equiv: '≡',
    le: '≤',
    ge: '≥',
    sub: '⊂',
    sup: '⊃',
    nsub: '⊄',
    sube: '⊆',
    supe: '⊇',
    oplus: '⊕',
    otimes: '⊗',
    perp: '⊥',
    sdot: '⋅',
    lceil: '⌈',
    rceil: '⌉',
    lfloor: '⌊',
    rfloor: '⌋',
    lang: '〈',
    rang: '〉',
    loz: '◊',
    spades: '♠',
    clubs: '♣',
    hearts: '♥',
    diams: '♦',
    quot: '"',
    amp: '&',
    lt: '<',
    gt: '>',
    OElig: 'Œ',
    oelig: 'œ',
    Scaron: 'Š',
    scaron: 'š',
    Yuml: 'Ÿ',
    circ: 'ˆ',
    tilde: '˜',
    ensp: ' ',
    emsp: ' ',
    thinsp: ' ',
    zwnj: '‌',
    zwj: '‍',
    lrm: '‎',
    rlm: '‏',
    ndash: '–',
    mdash: '—',
    lsquo: '‘',
    rsquo: '’',
    sbquo: '‚',
    ldquo: '“',
    rdquo: '”',
    bdquo: '„',
    dagger: '†',
    Dagger: '‡',
    permil: '‰',
    lsaquo: '‹',
    rsaquo: '›',
    euro: '€'
  };

  /**
   * List of legacy (that don’t need a trailing `;`) named references which could,
   * depending on what follows them, turn into a different meaning
   *
   * @type {Array<string>}
   */
  const dangerous = [
    'cent',
    'copy',
    'divide',
    'gt',
    'lt',
    'not',
    'para',
    'times'
  ];

  const own$1 = {}.hasOwnProperty;

  /**
   * `characterEntitiesHtml4` but inverted.
   *
   * @type {Record<string, string>}
   */
  const characters = {};

  /** @type {string} */
  let key$1;

  for (key$1 in characterEntitiesHtml4) {
    if (own$1.call(characterEntitiesHtml4, key$1)) {
      characters[characterEntitiesHtml4[key$1]] = key$1;
    }
  }

  const notAlphanumericRegex = /[^\dA-Za-z]/;

  /**
   * Configurable ways to encode characters as named references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @param {boolean|undefined} attribute
   * @returns {string}
   */
  function toNamed(code, next, omit, attribute) {
    const character = String.fromCharCode(code);

    if (own$1.call(characters, character)) {
      const name = characters[character];
      const value = '&' + name;

      if (
        omit &&
        characterEntitiesLegacy.includes(name) &&
        !dangerous.includes(name) &&
        (!attribute ||
          (next &&
            next !== 61 /* `=` */ &&
            notAlphanumericRegex.test(String.fromCharCode(next))))
      ) {
        return value
      }

      return value + ';'
    }

    return ''
  }

  /**
   * @typedef FormatSmartOptions
   * @property {boolean} [useNamedReferences=false]
   *   Prefer named character references (`&amp;`) where possible.
   * @property {boolean} [useShortestReferences=false]
   *   Prefer the shortest possible reference, if that results in less bytes.
   *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
   * @property {boolean} [omitOptionalSemicolons=false]
   *   Whether to omit semicolons when possible.
   *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
   *   Omitting semicolons is possible for certain named and numeric references in some cases.
   * @property {boolean} [attribute=false]
   *   Create character references which don’t fail in attributes.
   *   **Note**: `attribute` only applies when operating dangerously with
   *   `omitOptionalSemicolons: true`.
   */


  /**
   * Configurable ways to encode a character yielding pretty or small results.
   *
   * @param {number} code
   * @param {number} next
   * @param {FormatSmartOptions} options
   * @returns {string}
   */
  function formatSmart(code, next, options) {
    let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);
    /** @type {string|undefined} */
    let named;

    if (options.useNamedReferences || options.useShortestReferences) {
      named = toNamed(
        code,
        next,
        options.omitOptionalSemicolons,
        options.attribute
      );
    }

    // Use the shortest numeric reference when requested.
    // A simple algorithm would use decimal for all code points under 100, as
    // those are shorter than hexadecimal:
    //
    // * `&#99;` vs `&#x63;` (decimal shorter)
    // * `&#100;` vs `&#x64;` (equal)
    //
    // However, because we take `next` into consideration when `omit` is used,
    // And it would be possible that decimals are shorter on bigger values as
    // well if `next` is hexadecimal but not decimal, we instead compare both.
    if (
      (options.useShortestReferences || !named) &&
      options.useShortestReferences
    ) {
      const decimal = toDecimal(code, next, options.omitOptionalSemicolons);

      if (decimal.length < numeric.length) {
        numeric = decimal;
      }
    }

    return named &&
      (!options.useShortestReferences || named.length < numeric.length)
      ? named
      : numeric
  }

  /**
   * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
   * @typedef {import('./core.js').CoreOptions} LightOptions
   */


  /**
   * Encode special characters in `value`.
   *
   * @param {string} value
   *   Value to encode.
   * @param {Options} [options]
   *   Configuration.
   * @returns {string}
   *   Encoded value.
   */
  function stringifyEntities(value, options) {
    return core(value, Object.assign({format: formatSmart}, options))
  }

  /**
   * @import {Comment, Parents} from 'hast'
   * @import {State} from '../index.js'
   */


  const htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g;

  // Declare arrays as variables so it can be cached by `stringifyEntities`
  const bogusCommentEntitySubset = ['>'];
  const commentEntitySubset = ['<', '>'];

  /**
   * Serialize a comment.
   *
   * @param {Comment} node
   *   Node to handle.
   * @param {number | undefined} _1
   *   Index of `node` in `parent.
   * @param {Parents | undefined} _2
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function comment(node, _1, _2, state) {
    // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
    return state.settings.bogusComments
      ? '<?' +
          stringifyEntities(
            node.value,
            Object.assign({}, state.settings.characterReferences, {
              subset: bogusCommentEntitySubset
            })
          ) +
          '>'
      : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'

    /**
     * @param {string} $0
     */
    function encode($0) {
      return stringifyEntities(
        $0,
        Object.assign({}, state.settings.characterReferences, {
          subset: commentEntitySubset
        })
      )
    }
  }

  /**
   * @import {Doctype, Parents} from 'hast'
   * @import {State} from '../index.js'
   */

  /**
   * Serialize a doctype.
   *
   * @param {Doctype} _1
   *   Node to handle.
   * @param {number | undefined} _2
   *   Index of `node` in `parent.
   * @param {Parents | undefined} _3
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function doctype(_1, _2, _3, state) {
    return (
      '<!' +
      (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +
      (state.settings.tightDoctype ? '' : ' ') +
      'html>'
    )
  }

  /**
   * Count how often a character (or substring) is used in a string.
   *
   * @param {string} value
   *   Value to search in.
   * @param {string} character
   *   Character (or substring) to look for.
   * @return {number}
   *   Number of times `character` occurred in `value`.
   */
  function ccount(value, character) {
    const source = String(value);

    if (typeof character !== 'string') {
      throw new TypeError('Expected character')
    }

    let count = 0;
    let index = source.indexOf(character);

    while (index !== -1) {
      count++;
      index = source.indexOf(character, index + character.length);
    }

    return count
  }

  /**
   * @typedef Options
   *   Configuration for `stringify`.
   * @property {boolean} [padLeft=true]
   *   Whether to pad a space before a token.
   * @property {boolean} [padRight=false]
   *   Whether to pad a space after a token.
   */


  /**
   * Serialize an array of strings or numbers to comma-separated tokens.
   *
   * @param {Array<string|number>} values
   *   List of tokens.
   * @param {Options} [options]
   *   Configuration for `stringify` (optional).
   * @returns {string}
   *   Comma-separated tokens.
   */
  function stringify$6(values, options) {
    const settings = options || {};

    // Ensure the last empty entry is seen.
    const input = values[values.length - 1] === '' ? [...values, ''] : values;

    return input
      .join(
        (settings.padRight ? ' ' : '') +
          ',' +
          (settings.padLeft === false ? '' : ' ')
      )
      .trim()
  }

  /**
   * Parse space-separated tokens to an array of strings.
   *
   * @param {string} value
   *   Space-separated tokens.
   * @returns {Array<string>}
   *   List of tokens.
   */

  /**
   * Serialize an array of strings as space separated-tokens.
   *
   * @param {Array<string|number>} values
   *   List of tokens.
   * @returns {string}
   *   Space-separated tokens.
   */
  function stringify$5(values) {
    return values.join(' ').trim()
  }

  /**
   * @typedef {import('hast').Nodes} Nodes
   */

  // HTML whitespace expression.
  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
  const re = /[ \t\n\f\r]/g;

  /**
   * Check if the given value is *inter-element whitespace*.
   *
   * @param {Nodes | string} thing
   *   Thing to check (`Node` or `string`).
   * @returns {boolean}
   *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
   *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
   *   (`\r`), or form feed (`\f`); if a node is passed it must be a `Text` node,
   *   whose `value` field is checked.
   */
  function whitespace(thing) {
    return typeof thing === 'object'
      ? thing.type === 'text'
        ? empty$1(thing.value)
        : false
      : empty$1(thing)
  }

  /**
   * @param {string} value
   * @returns {boolean}
   */
  function empty$1(value) {
    return value.replace(re, '') === ''
  }

  /**
   * @import {Parents, RootContent} from 'hast'
   */


  const siblingAfter = siblings(1);
  const siblingBefore = siblings(-1);

  /** @type {Array<RootContent>} */
  const emptyChildren$1 = [];

  /**
   * Factory to check siblings in a direction.
   *
   * @param {number} increment
   */
  function siblings(increment) {
    return sibling

    /**
     * Find applicable siblings in a direction.
     *
     * @template {Parents} Parent
     *   Parent type.
     * @param {Parent | undefined} parent
     *   Parent.
     * @param {number | undefined} index
     *   Index of child in `parent`.
     * @param {boolean | undefined} [includeWhitespace=false]
     *   Whether to include whitespace (default: `false`).
     * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}
     *   Child of parent.
     */
    function sibling(parent, index, includeWhitespace) {
      const siblings = parent ? parent.children : emptyChildren$1;
      let offset = (index || 0) + increment;
      let next = siblings[offset];

      if (!includeWhitespace) {
        while (next && whitespace(next)) {
          offset += increment;
          next = siblings[offset];
        }
      }

      // @ts-expect-error: it’s a correct child.
      return next
    }
  }

  /**
   * @import {Element, Parents} from 'hast'
   */

  /**
   * @callback OmitHandle
   *   Check if a tag can be omitted.
   * @param {Element} element
   *   Element to check.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether to omit a tag.
   *
   */

  const own = {}.hasOwnProperty;

  /**
   * Factory to check if a given node can have a tag omitted.
   *
   * @param {Record<string, OmitHandle>} handlers
   *   Omission handlers, where each key is a tag name, and each value is the
   *   corresponding handler.
   * @returns {OmitHandle}
   *   Whether to omit a tag of an element.
   */
  function omission(handlers) {
    return omit

    /**
     * Check if a given node can have a tag omitted.
     *
     * @type {OmitHandle}
     */
    function omit(node, index, parent) {
      return (
        own.call(handlers, node.tagName) &&
        handlers[node.tagName](node, index, parent)
      )
    }
  }

  /**
   * @import {Element, Parents} from 'hast'
   */


  const closing = omission({
    body: body$1,
    caption: headOrColgroupOrCaption,
    colgroup: headOrColgroupOrCaption,
    dd,
    dt,
    head: headOrColgroupOrCaption,
    html: html$1,
    li,
    optgroup,
    option,
    p,
    rp: rubyElement,
    rt: rubyElement,
    tbody: tbody$1,
    td: cells,
    tfoot,
    th: cells,
    thead,
    tr
  });

  /**
   * Macro for `</head>`, `</colgroup>`, and `</caption>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function headOrColgroupOrCaption(_, index, parent) {
    const next = siblingAfter(parent, index, true);
    return (
      !next ||
      (next.type !== 'comment' &&
        !(next.type === 'text' && whitespace(next.value.charAt(0))))
    )
  }

  /**
   * Whether to omit `</html>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function html$1(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || next.type !== 'comment'
  }

  /**
   * Whether to omit `</body>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function body$1(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || next.type !== 'comment'
  }

  /**
   * Whether to omit `</p>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function p(_, index, parent) {
    const next = siblingAfter(parent, index);
    return next
      ? next.type === 'element' &&
          (next.tagName === 'address' ||
            next.tagName === 'article' ||
            next.tagName === 'aside' ||
            next.tagName === 'blockquote' ||
            next.tagName === 'details' ||
            next.tagName === 'div' ||
            next.tagName === 'dl' ||
            next.tagName === 'fieldset' ||
            next.tagName === 'figcaption' ||
            next.tagName === 'figure' ||
            next.tagName === 'footer' ||
            next.tagName === 'form' ||
            next.tagName === 'h1' ||
            next.tagName === 'h2' ||
            next.tagName === 'h3' ||
            next.tagName === 'h4' ||
            next.tagName === 'h5' ||
            next.tagName === 'h6' ||
            next.tagName === 'header' ||
            next.tagName === 'hgroup' ||
            next.tagName === 'hr' ||
            next.tagName === 'main' ||
            next.tagName === 'menu' ||
            next.tagName === 'nav' ||
            next.tagName === 'ol' ||
            next.tagName === 'p' ||
            next.tagName === 'pre' ||
            next.tagName === 'section' ||
            next.tagName === 'table' ||
            next.tagName === 'ul')
      : !parent ||
          // Confusing parent.
          !(
            parent.type === 'element' &&
            (parent.tagName === 'a' ||
              parent.tagName === 'audio' ||
              parent.tagName === 'del' ||
              parent.tagName === 'ins' ||
              parent.tagName === 'map' ||
              parent.tagName === 'noscript' ||
              parent.tagName === 'video')
          )
  }

  /**
   * Whether to omit `</li>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function li(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'li')
  }

  /**
   * Whether to omit `</dt>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function dt(_, index, parent) {
    const next = siblingAfter(parent, index);
    return Boolean(
      next &&
        next.type === 'element' &&
        (next.tagName === 'dt' || next.tagName === 'dd')
    )
  }

  /**
   * Whether to omit `</dd>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function dd(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'dt' || next.tagName === 'dd'))
    )
  }

  /**
   * Whether to omit `</rt>` or `</rp>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function rubyElement(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'rp' || next.tagName === 'rt'))
    )
  }

  /**
   * Whether to omit `</optgroup>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function optgroup(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'optgroup')
  }

  /**
   * Whether to omit `</option>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function option(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'option' || next.tagName === 'optgroup'))
    )
  }

  /**
   * Whether to omit `</thead>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function thead(_, index, parent) {
    const next = siblingAfter(parent, index);
    return Boolean(
      next &&
        next.type === 'element' &&
        (next.tagName === 'tbody' || next.tagName === 'tfoot')
    )
  }

  /**
   * Whether to omit `</tbody>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tbody$1(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'tbody' || next.tagName === 'tfoot'))
    )
  }

  /**
   * Whether to omit `</tfoot>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tfoot(_, index, parent) {
    return !siblingAfter(parent, index)
  }

  /**
   * Whether to omit `</tr>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tr(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'tr')
  }

  /**
   * Whether to omit `</td>` or `</th>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function cells(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'td' || next.tagName === 'th'))
    )
  }

  /**
   * @import {Element, Parents} from 'hast'
   */


  const opening = omission({
    body,
    colgroup,
    head,
    html,
    tbody
  });

  /**
   * Whether to omit `<html>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function html(node) {
    const head = siblingAfter(node, -1);
    return !head || head.type !== 'comment'
  }

  /**
   * Whether to omit `<head>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function head(node) {
    /** @type {Set<string>} */
    const seen = new Set();

    // Whether `srcdoc` or not,
    // make sure the content model at least doesn’t have too many `base`s/`title`s.
    for (const child of node.children) {
      if (
        child.type === 'element' &&
        (child.tagName === 'base' || child.tagName === 'title')
      ) {
        if (seen.has(child.tagName)) return false
        seen.add(child.tagName);
      }
    }

    // “May be omitted if the element is empty,
    // or if the first thing inside the head element is an element.”
    const child = node.children[0];
    return !child || child.type === 'element'
  }

  /**
   * Whether to omit `<body>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function body(node) {
    const head = siblingAfter(node, -1, true);

    return (
      !head ||
      (head.type !== 'comment' &&
        !(head.type === 'text' && whitespace(head.value.charAt(0))) &&
        !(
          head.type === 'element' &&
          (head.tagName === 'meta' ||
            head.tagName === 'link' ||
            head.tagName === 'script' ||
            head.tagName === 'style' ||
            head.tagName === 'template')
        ))
    )
  }

  /**
   * Whether to omit `<colgroup>`.
   * The spec describes some logic for the opening tag, but it’s easier to
   * implement in the closing tag, to the same effect, so we handle it there
   * instead.
   *
   * @param {Element} node
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function colgroup(node, index, parent) {
    const previous = siblingBefore(parent, index);
    const head = siblingAfter(node, -1, true);

    // Previous colgroup was already omitted.
    if (
      parent &&
      previous &&
      previous.type === 'element' &&
      previous.tagName === 'colgroup' &&
      closing(previous, parent.children.indexOf(previous), parent)
    ) {
      return false
    }

    return Boolean(head && head.type === 'element' && head.tagName === 'col')
  }

  /**
   * Whether to omit `<tbody>`.
   *
   * @param {Element} node
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parents | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function tbody(node, index, parent) {
    const previous = siblingBefore(parent, index);
    const head = siblingAfter(node, -1);

    // Previous table section was already omitted.
    if (
      parent &&
      previous &&
      previous.type === 'element' &&
      (previous.tagName === 'thead' || previous.tagName === 'tbody') &&
      closing(previous, parent.children.indexOf(previous), parent)
    ) {
      return false
    }

    return Boolean(head && head.type === 'element' && head.tagName === 'tr')
  }

  /**
   * @import {Element, Parents, Properties} from 'hast'
   * @import {State} from '../index.js'
   */


  /**
   * Maps of subsets.
   *
   * Each value is a matrix of tuples.
   * The value at `0` causes parse errors, the value at `1` is valid.
   * Of both, the value at `0` is unsafe, and the value at `1` is safe.
   *
   * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}
   */
  const constants = {
    // See: <https://html.spec.whatwg.org/#attribute-name-state>.
    name: [
      ['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')],
      ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
    unquoted: [
      ['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')],
      ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
    single: [
      ["&'".split(''), '"&\'`'.split('')],
      ["\0&'".split(''), '\0"&\'`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
    double: [
      ['"&'.split(''), '"&\'`'.split('')],
      ['\0"&'.split(''), '\0"&\'`'.split('')]
    ]
  };

  /**
   * Serialize an element node.
   *
   * @param {Element} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parents | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function element(node, index, parent, state) {
    const schema = state.schema;
    const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;
    let selfClosing =
      schema.space === 'svg'
        ? state.settings.closeEmptyElements
        : state.settings.voids.includes(node.tagName.toLowerCase());
    /** @type {Array<string>} */
    const parts = [];
    /** @type {string} */
    let last;

    if (schema.space === 'html' && node.tagName === 'svg') {
      state.schema = svg$1;
    }

    const attributes = serializeAttributes(state, node.properties);

    const content = state.all(
      schema.space === 'html' && node.tagName === 'template' ? node.content : node
    );

    state.schema = schema;

    // If the node is categorised as void, but it has children, remove the
    // categorisation.
    // This enables for example `menuitem`s, which are void in W3C HTML but not
    // void in WHATWG HTML, to be stringified properly.
    // Note: `menuitem` has since been removed from the HTML spec, and so is no
    // longer void.
    if (content) selfClosing = false;

    if (attributes || !omit || !opening(node, index, parent)) {
      parts.push('<', node.tagName, attributes ? ' ' + attributes : '');

      if (
        selfClosing &&
        (schema.space === 'svg' || state.settings.closeSelfClosing)
      ) {
        last = attributes.charAt(attributes.length - 1);
        if (
          !state.settings.tightSelfClosing ||
          last === '/' ||
          (last && last !== '"' && last !== "'")
        ) {
          parts.push(' ');
        }

        parts.push('/');
      }

      parts.push('>');
    }

    parts.push(content);

    if (!selfClosing && (!omit || !closing(node, index, parent))) {
      parts.push('</' + node.tagName + '>');
    }

    return parts.join('')
  }

  /**
   * @param {State} state
   * @param {Properties | null | undefined} properties
   * @returns {string}
   */
  function serializeAttributes(state, properties) {
    /** @type {Array<string>} */
    const values = [];
    let index = -1;
    /** @type {string} */
    let key;

    if (properties) {
      for (key in properties) {
        if (properties[key] !== null && properties[key] !== undefined) {
          const value = serializeAttribute(state, key, properties[key]);
          if (value) values.push(value);
        }
      }
    }

    while (++index < values.length) {
      const last = state.settings.tightAttributes
        ? values[index].charAt(values[index].length - 1)
        : undefined;

      // In tight mode, don’t add a space after quoted attributes.
      if (index !== values.length - 1 && last !== '"' && last !== "'") {
        values[index] += ' ';
      }
    }

    return values.join('')
  }

  /**
   * @param {State} state
   * @param {string} key
   * @param {Properties[keyof Properties]} value
   * @returns {string}
   */
  function serializeAttribute(state, key, value) {
    const info = find(state.schema, key);
    const x =
      state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;
    const y = state.settings.allowDangerousCharacters ? 0 : 1;
    let quote = state.quote;
    /** @type {string | undefined} */
    let result;

    if (info.overloadedBoolean && (value === info.attribute || value === '')) {
      value = true;
    } else if (
      (info.boolean || info.overloadedBoolean) &&
      (typeof value !== 'string' || value === info.attribute || value === '')
    ) {
      value = Boolean(value);
    }

    if (
      value === null ||
      value === undefined ||
      value === false ||
      (typeof value === 'number' && Number.isNaN(value))
    ) {
      return ''
    }

    const name = stringifyEntities(
      info.attribute,
      Object.assign({}, state.settings.characterReferences, {
        // Always encode without parse errors in non-HTML.
        subset: constants.name[x][y]
      })
    );

    // No value.
    // There is currently only one boolean property in SVG: `[download]` on
    // `<a>`.
    // This property does not seem to work in browsers (Firefox, Safari, Chrome),
    // so I can’t test if dropping the value works.
    // But I assume that it should:
    //
    // ```html
    // <!doctype html>
    // <svg viewBox="0 0 100 100">
    //   <a href=https://example.com download>
    //     <circle cx=50 cy=40 r=35 />
    //   </a>
    // </svg>
    // ```
    //
    // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
    if (value === true) return name

    // `spaces` doesn’t accept a second argument, but it’s given here just to
    // keep the code cleaner.
    value = Array.isArray(value)
      ? (info.commaSeparated ? stringify$6 : stringify$5)(value, {
          padLeft: !state.settings.tightCommaSeparatedLists
        })
      : String(value);

    if (state.settings.collapseEmptyAttributes && !value) return name

    // Check unquoted value.
    if (state.settings.preferUnquoted) {
      result = stringifyEntities(
        value,
        Object.assign({}, state.settings.characterReferences, {
          attribute: true,
          subset: constants.unquoted[x][y]
        })
      );
    }

    // If we don’t want unquoted, or if `value` contains character references when
    // unquoted…
    if (result !== value) {
      // If the alternative is less common than `quote`, switch.
      if (
        state.settings.quoteSmart &&
        ccount(value, quote) > ccount(value, state.alternative)
      ) {
        quote = state.alternative;
      }

      result =
        quote +
        stringifyEntities(
          value,
          Object.assign({}, state.settings.characterReferences, {
            // Always encode without parse errors in non-HTML.
            subset: (quote === "'" ? constants.single : constants.double)[x][y],
            attribute: true
          })
        ) +
        quote;
    }

    // Don’t add a `=` for unquoted empties.
    return name + (result ? '=' + result : result)
  }

  /**
   * @import {Parents, Text} from 'hast'
   * @import {Raw} from 'mdast-util-to-hast'
   * @import {State} from '../index.js'
   */


  // Declare array as variable so it can be cached by `stringifyEntities`
  const textEntitySubset = ['<', '&'];

  /**
   * Serialize a text node.
   *
   * @param {Raw | Text} node
   *   Node to handle.
   * @param {number | undefined} _
   *   Index of `node` in `parent.
   * @param {Parents | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function text(node, _, parent, state) {
    // Check if content of `node` should be escaped.
    return parent &&
      parent.type === 'element' &&
      (parent.tagName === 'script' || parent.tagName === 'style')
      ? node.value
      : stringifyEntities(
          node.value,
          Object.assign({}, state.settings.characterReferences, {
            subset: textEntitySubset
          })
        )
  }

  /**
   * @import {Parents} from 'hast'
   * @import {Raw} from 'mdast-util-to-hast'
   * @import {State} from '../index.js'
   */


  /**
   * Serialize a raw node.
   *
   * @param {Raw} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parents | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function raw(node, index, parent, state) {
    return state.settings.allowDangerousHtml
      ? node.value
      : text(node, index, parent, state)
  }

  /**
   * @import {Parents, Root} from 'hast'
   * @import {State} from '../index.js'
   */

  /**
   * Serialize a root.
   *
   * @param {Root} node
   *   Node to handle.
   * @param {number | undefined} _1
   *   Index of `node` in `parent.
   * @param {Parents | undefined} _2
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function root$1(node, _1, _2, state) {
    return state.all(node)
  }

  /**
   * @import {Nodes, Parents} from 'hast'
   * @import {State} from '../index.js'
   */


  /**
   * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}
   */
  const handle = zwitch('type', {
    invalid,
    unknown,
    handlers: {comment, doctype, element, raw, root: root$1, text}
  });

  /**
   * Fail when a non-node is found in the tree.
   *
   * @param {unknown} node
   *   Unknown value.
   * @returns {never}
   *   Never.
   */
  function invalid(node) {
    throw new Error('Expected node, not `' + node + '`')
  }

  /**
   * Fail when a node with an unknown type is found in the tree.
   *
   * @param {unknown} node_
   *  Unknown node.
   * @returns {never}
   *   Never.
   */
  function unknown(node_) {
    // `type` is guaranteed by runtime JS.
    const node = /** @type {Nodes} */ (node_);
    throw new Error('Cannot compile unknown node `' + node.type + '`')
  }

  /**
   * @import {Nodes, Parents, RootContent} from 'hast'
   * @import {Schema} from 'property-information'
   * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'
   */


  /** @type {Options} */
  const emptyOptions = {};

  /** @type {CharacterReferences} */
  const emptyCharacterReferences = {};

  /** @type {Array<never>} */
  const emptyChildren = [];

  /**
   * Serialize hast as HTML.
   *
   * @param {Array<RootContent> | Nodes} tree
   *   Tree to serialize.
   * @param {Options | null | undefined} [options]
   *   Configuration (optional).
   * @returns {string}
   *   Serialized HTML.
   */
  function toHtml(tree, options) {
    const options_ = options || emptyOptions;
    const quote = options_.quote || '"';
    const alternative = quote === '"' ? "'" : '"';

    if (quote !== '"' && quote !== "'") {
      throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`')
    }

    /** @type {State} */
    const state = {
      one,
      all,
      settings: {
        omitOptionalTags: options_.omitOptionalTags || false,
        allowParseErrors: options_.allowParseErrors || false,
        allowDangerousCharacters: options_.allowDangerousCharacters || false,
        quoteSmart: options_.quoteSmart || false,
        preferUnquoted: options_.preferUnquoted || false,
        tightAttributes: options_.tightAttributes || false,
        upperDoctype: options_.upperDoctype || false,
        tightDoctype: options_.tightDoctype || false,
        bogusComments: options_.bogusComments || false,
        tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
        tightSelfClosing: options_.tightSelfClosing || false,
        collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
        allowDangerousHtml: options_.allowDangerousHtml || false,
        voids: options_.voids || htmlVoidElements,
        characterReferences:
          options_.characterReferences || emptyCharacterReferences,
        closeSelfClosing: options_.closeSelfClosing || false,
        closeEmptyElements: options_.closeEmptyElements || false
      },
      schema: options_.space === 'svg' ? svg$1 : html$2,
      quote,
      alternative
    };

    return state.one(
      Array.isArray(tree) ? {type: 'root', children: tree} : tree,
      undefined,
      undefined
    )
  }

  /**
   * Serialize a node.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Nodes} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parents | undefined} parent
   *   Parent of `node`.
   * @returns {string}
   *   Serialized node.
   */
  function one(node, index, parent) {
    return handle(node, index, parent, this)
  }

  /**
   * Serialize all children of `parent`.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Parents | undefined} parent
   *   Parent whose children to serialize.
   * @returns {string}
   */
  function all(parent) {
    /** @type {Array<string>} */
    const results = [];
    const children = (parent && parent.children) || emptyChildren;
    let index = -1;

    while (++index < children.length) {
      results[index] = this.one(children[index], index, parent);
    }

    return results.join('')
  }

  function toArray(x) {
    return Array.isArray(x) ? x : [x];
  }
  function splitLines$1(code, preserveEnding = false) {
    const parts = code.split(/(\r?\n)/g);
    let index = 0;
    const lines = [];
    for (let i = 0; i < parts.length; i += 2) {
      const line = preserveEnding ? parts[i] + (parts[i + 1] || "") : parts[i];
      lines.push([line, index]);
      index += parts[i].length;
      index += parts[i + 1]?.length || 0;
    }
    return lines;
  }
  function isPlainLang(lang) {
    return !lang || ["plaintext", "txt", "text", "plain"].includes(lang);
  }
  function isSpecialLang(lang) {
    return lang === "ansi" || isPlainLang(lang);
  }
  function isNoneTheme(theme) {
    return theme === "none";
  }
  function isSpecialTheme(theme) {
    return isNoneTheme(theme);
  }
  function addClassToHast(node, className) {
    if (!className)
      return node;
    node.properties ||= {};
    node.properties.class ||= [];
    if (typeof node.properties.class === "string")
      node.properties.class = node.properties.class.split(/\s+/g);
    if (!Array.isArray(node.properties.class))
      node.properties.class = [];
    const targets = Array.isArray(className) ? className : className.split(/\s+/g);
    for (const c of targets) {
      if (c && !node.properties.class.includes(c))
        node.properties.class.push(c);
    }
    return node;
  }
  function splitToken(token, offsets) {
    let lastOffset = 0;
    const tokens = [];
    for (const offset of offsets) {
      if (offset > lastOffset) {
        tokens.push({
          ...token,
          content: token.content.slice(lastOffset, offset),
          offset: token.offset + lastOffset
        });
      }
      lastOffset = offset;
    }
    if (lastOffset < token.content.length) {
      tokens.push({
        ...token,
        content: token.content.slice(lastOffset),
        offset: token.offset + lastOffset
      });
    }
    return tokens;
  }
  function splitTokens(tokens, breakpoints) {
    const sorted = Array.from(breakpoints instanceof Set ? breakpoints : new Set(breakpoints)).sort((a, b) => a - b);
    if (!sorted.length)
      return tokens;
    return tokens.map((line) => {
      return line.flatMap((token) => {
        const breakpointsInToken = sorted.filter((i) => token.offset < i && i < token.offset + token.content.length).map((i) => i - token.offset).sort((a, b) => a - b);
        if (!breakpointsInToken.length)
          return token;
        return splitToken(token, breakpointsInToken);
      });
    });
  }
  async function normalizeGetter(p) {
    return Promise.resolve(typeof p === "function" ? p() : p).then((r) => r.default || r);
  }
  function resolveColorReplacements(theme, options) {
    const replacements = typeof theme === "string" ? {} : { ...theme.colorReplacements };
    const themeName = typeof theme === "string" ? theme : theme.name;
    for (const [key, value] of Object.entries(options?.colorReplacements || {})) {
      if (typeof value === "string")
        replacements[key] = value;
      else if (key === themeName)
        Object.assign(replacements, value);
    }
    return replacements;
  }
  function applyColorReplacements(color, replacements) {
    if (!color)
      return color;
    return replacements?.[color?.toLowerCase()] || color;
  }
  function getTokenStyleObject(token) {
    const styles = {};
    if (token.color)
      styles.color = token.color;
    if (token.bgColor)
      styles["background-color"] = token.bgColor;
    if (token.fontStyle) {
      if (token.fontStyle & FontStyle.Italic)
        styles["font-style"] = "italic";
      if (token.fontStyle & FontStyle.Bold)
        styles["font-weight"] = "bold";
      if (token.fontStyle & FontStyle.Underline)
        styles["text-decoration"] = "underline";
    }
    return styles;
  }
  function stringifyTokenStyle(token) {
    if (typeof token === "string")
      return token;
    return Object.entries(token).map(([key, value]) => `${key}:${value}`).join(";");
  }
  function createPositionConverter(code) {
    const lines = splitLines$1(code, true).map(([line]) => line);
    function indexToPos(index) {
      if (index === code.length) {
        return {
          line: lines.length - 1,
          character: lines[lines.length - 1].length
        };
      }
      let character = index;
      let line = 0;
      for (const lineText of lines) {
        if (character < lineText.length)
          break;
        character -= lineText.length;
        line++;
      }
      return { line, character };
    }
    function posToIndex(line, character) {
      let index = 0;
      for (let i = 0; i < line; i++)
        index += lines[i].length;
      index += character;
      return index;
    }
    return {
      lines,
      indexToPos,
      posToIndex
    };
  }

  class ShikiError extends Error {
    constructor(message) {
      super(message);
      this.name = "ShikiError";
    }
  }

  const _grammarStateMap = /* @__PURE__ */ new WeakMap();
  function setLastGrammarStateToMap(keys, state) {
    _grammarStateMap.set(keys, state);
  }
  function getLastGrammarStateFromMap(keys) {
    return _grammarStateMap.get(keys);
  }
  class GrammarState {
    /**
     * Theme to Stack mapping
     */
    _stacks = {};
    lang;
    get themes() {
      return Object.keys(this._stacks);
    }
    get theme() {
      return this.themes[0];
    }
    get _stack() {
      return this._stacks[this.theme];
    }
    /**
     * Static method to create a initial grammar state.
     */
    static initial(lang, themes) {
      return new GrammarState(
        Object.fromEntries(toArray(themes).map((theme) => [theme, INITIAL])),
        lang
      );
    }
    constructor(...args) {
      if (args.length === 2) {
        const [stacksMap, lang] = args;
        this.lang = lang;
        this._stacks = stacksMap;
      } else {
        const [stack, lang, theme] = args;
        this.lang = lang;
        this._stacks = { [theme]: stack };
      }
    }
    /**
     * Get the internal stack object.
     * @internal
     */
    getInternalStack(theme = this.theme) {
      return this._stacks[theme];
    }
    /**
     * @deprecated use `getScopes` instead
     */
    get scopes() {
      warnDeprecated("GrammarState.scopes is deprecated, use GrammarState.getScopes() instead");
      return getScopes(this._stacks[this.theme]);
    }
    getScopes(theme = this.theme) {
      return getScopes(this._stacks[theme]);
    }
    toJSON() {
      return {
        lang: this.lang,
        theme: this.theme,
        themes: this.themes,
        scopes: this.scopes
      };
    }
  }
  function getScopes(stack) {
    const scopes = [];
    const visited = /* @__PURE__ */ new Set();
    function pushScope(stack2) {
      if (visited.has(stack2))
        return;
      visited.add(stack2);
      const name = stack2?.nameScopesList?.scopeName;
      if (name)
        scopes.push(name);
      if (stack2.parent)
        pushScope(stack2.parent);
    }
    pushScope(stack);
    return scopes;
  }
  function getGrammarStack(state, theme) {
    if (!(state instanceof GrammarState))
      throw new ShikiError("Invalid grammar state");
    return state.getInternalStack(theme);
  }

  function transformerDecorations() {
    const map = /* @__PURE__ */ new WeakMap();
    function getContext(shiki) {
      if (!map.has(shiki.meta)) {
        let normalizePosition = function(p) {
          if (typeof p === "number") {
            if (p < 0 || p > shiki.source.length)
              throw new ShikiError(`Invalid decoration offset: ${p}. Code length: ${shiki.source.length}`);
            return {
              ...converter.indexToPos(p),
              offset: p
            };
          } else {
            const line = converter.lines[p.line];
            if (line === undefined)
              throw new ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Lines length: ${converter.lines.length}`);
            if (p.character < 0 || p.character > line.length)
              throw new ShikiError(`Invalid decoration position ${JSON.stringify(p)}. Line ${p.line} length: ${line.length}`);
            return {
              ...p,
              offset: converter.posToIndex(p.line, p.character)
            };
          }
        };
        const converter = createPositionConverter(shiki.source);
        const decorations = (shiki.options.decorations || []).map((d) => ({
          ...d,
          start: normalizePosition(d.start),
          end: normalizePosition(d.end)
        }));
        verifyIntersections(decorations);
        map.set(shiki.meta, {
          decorations,
          converter,
          source: shiki.source
        });
      }
      return map.get(shiki.meta);
    }
    return {
      name: "shiki:decorations",
      tokens(tokens) {
        if (!this.options.decorations?.length)
          return;
        const ctx = getContext(this);
        const breakpoints = ctx.decorations.flatMap((d) => [d.start.offset, d.end.offset]);
        const splitted = splitTokens(tokens, breakpoints);
        return splitted;
      },
      code(codeEl) {
        if (!this.options.decorations?.length)
          return;
        const ctx = getContext(this);
        const lines = Array.from(codeEl.children).filter((i) => i.type === "element" && i.tagName === "span");
        if (lines.length !== ctx.converter.lines.length)
          throw new ShikiError(`Number of lines in code element (${lines.length}) does not match the number of lines in the source (${ctx.converter.lines.length}). Failed to apply decorations.`);
        function applyLineSection(line, start, end, decoration) {
          const lineEl = lines[line];
          let text = "";
          let startIndex = -1;
          let endIndex = -1;
          if (start === 0)
            startIndex = 0;
          if (end === 0)
            endIndex = 0;
          if (end === Number.POSITIVE_INFINITY)
            endIndex = lineEl.children.length;
          if (startIndex === -1 || endIndex === -1) {
            for (let i = 0; i < lineEl.children.length; i++) {
              text += stringify$4(lineEl.children[i]);
              if (startIndex === -1 && text.length === start)
                startIndex = i + 1;
              if (endIndex === -1 && text.length === end)
                endIndex = i + 1;
            }
          }
          if (startIndex === -1)
            throw new ShikiError(`Failed to find start index for decoration ${JSON.stringify(decoration.start)}`);
          if (endIndex === -1)
            throw new ShikiError(`Failed to find end index for decoration ${JSON.stringify(decoration.end)}`);
          const children = lineEl.children.slice(startIndex, endIndex);
          if (!decoration.alwaysWrap && children.length === lineEl.children.length) {
            applyDecoration(lineEl, decoration, "line");
          } else if (!decoration.alwaysWrap && children.length === 1 && children[0].type === "element") {
            applyDecoration(children[0], decoration, "token");
          } else {
            const wrapper = {
              type: "element",
              tagName: "span",
              properties: {},
              children
            };
            applyDecoration(wrapper, decoration, "wrapper");
            lineEl.children.splice(startIndex, children.length, wrapper);
          }
        }
        function applyLine(line, decoration) {
          lines[line] = applyDecoration(lines[line], decoration, "line");
        }
        function applyDecoration(el, decoration, type) {
          const properties = decoration.properties || {};
          const transform = decoration.transform || ((i) => i);
          el.tagName = decoration.tagName || "span";
          el.properties = {
            ...el.properties,
            ...properties,
            class: el.properties.class
          };
          if (decoration.properties?.class)
            addClassToHast(el, decoration.properties.class);
          el = transform(el, type) || el;
          return el;
        }
        const lineApplies = [];
        const sorted = ctx.decorations.sort((a, b) => b.start.offset - a.start.offset);
        for (const decoration of sorted) {
          const { start, end } = decoration;
          if (start.line === end.line) {
            applyLineSection(start.line, start.character, end.character, decoration);
          } else if (start.line < end.line) {
            applyLineSection(start.line, start.character, Number.POSITIVE_INFINITY, decoration);
            for (let i = start.line + 1; i < end.line; i++)
              lineApplies.unshift(() => applyLine(i, decoration));
            applyLineSection(end.line, 0, end.character, decoration);
          }
        }
        lineApplies.forEach((i) => i());
      }
    };
  }
  function verifyIntersections(items) {
    for (let i = 0; i < items.length; i++) {
      const foo = items[i];
      if (foo.start.offset > foo.end.offset)
        throw new ShikiError(`Invalid decoration range: ${JSON.stringify(foo.start)} - ${JSON.stringify(foo.end)}`);
      for (let j = i + 1; j < items.length; j++) {
        const bar = items[j];
        const isFooHasBarStart = foo.start.offset < bar.start.offset && bar.start.offset < foo.end.offset;
        const isFooHasBarEnd = foo.start.offset < bar.end.offset && bar.end.offset < foo.end.offset;
        const isBarHasFooStart = bar.start.offset < foo.start.offset && foo.start.offset < bar.end.offset;
        const isBarHasFooEnd = bar.start.offset < foo.end.offset && foo.end.offset < bar.end.offset;
        if (isFooHasBarStart || isFooHasBarEnd || isBarHasFooStart || isBarHasFooEnd) {
          if (isFooHasBarEnd && isFooHasBarEnd)
            continue;
          if (isBarHasFooStart && isBarHasFooEnd)
            continue;
          throw new ShikiError(`Decorations ${JSON.stringify(foo.start)} and ${JSON.stringify(bar.start)} intersect.`);
        }
      }
    }
  }
  function stringify$4(el) {
    if (el.type === "text")
      return el.value;
    if (el.type === "element")
      return el.children.map(stringify$4).join("");
    return "";
  }

  const builtInTransformers = [
    /* @__PURE__ */ transformerDecorations()
  ];
  function getTransformers(options) {
    return [
      ...options.transformers || [],
      ...builtInTransformers
    ];
  }

  // src/colors.ts
  var namedColors = [
    "black",
    "red",
    "green",
    "yellow",
    "blue",
    "magenta",
    "cyan",
    "white",
    "brightBlack",
    "brightRed",
    "brightGreen",
    "brightYellow",
    "brightBlue",
    "brightMagenta",
    "brightCyan",
    "brightWhite"
  ];

  // src/decorations.ts
  var decorations = {
    1: "bold",
    2: "dim",
    3: "italic",
    4: "underline",
    7: "reverse",
    9: "strikethrough"
  };

  // src/parser.ts
  function findSequence(value, position) {
    const nextEscape = value.indexOf("\x1B[", position);
    if (nextEscape !== -1) {
      const nextClose = value.indexOf("m", nextEscape);
      return {
        sequence: value.substring(nextEscape + 2, nextClose).split(";"),
        startPosition: nextEscape,
        position: nextClose + 1
      };
    }
    return {
      position: value.length
    };
  }
  function parseColor(sequence, index) {
    let offset = 1;
    const colorMode = sequence[index + offset++];
    let color;
    if (colorMode === "2") {
      const rgb = [
        sequence[index + offset++],
        sequence[index + offset++],
        sequence[index + offset]
      ].map((x) => Number.parseInt(x));
      if (rgb.length === 3 && !rgb.some((x) => Number.isNaN(x))) {
        color = {
          type: "rgb",
          rgb
        };
      }
    } else if (colorMode === "5") {
      const colorIndex = Number.parseInt(sequence[index + offset]);
      if (!Number.isNaN(colorIndex)) {
        color = { type: "table", index: Number(colorIndex) };
      }
    }
    return [offset, color];
  }
  function parseSequence(sequence) {
    const commands = [];
    for (let i = 0; i < sequence.length; i++) {
      const code = sequence[i];
      const codeInt = Number.parseInt(code);
      if (Number.isNaN(codeInt))
        continue;
      if (codeInt === 0) {
        commands.push({ type: "resetAll" });
      } else if (codeInt <= 9) {
        const decoration = decorations[codeInt];
        if (decoration) {
          commands.push({
            type: "setDecoration",
            value: decorations[codeInt]
          });
        }
      } else if (codeInt <= 29) {
        const decoration = decorations[codeInt - 20];
        if (decoration) {
          commands.push({
            type: "resetDecoration",
            value: decoration
          });
        }
      } else if (codeInt <= 37) {
        commands.push({
          type: "setForegroundColor",
          value: { type: "named", name: namedColors[codeInt - 30] }
        });
      } else if (codeInt === 38) {
        const [offset, color] = parseColor(sequence, i);
        if (color) {
          commands.push({
            type: "setForegroundColor",
            value: color
          });
        }
        i += offset;
      } else if (codeInt === 39) {
        commands.push({
          type: "resetForegroundColor"
        });
      } else if (codeInt <= 47) {
        commands.push({
          type: "setBackgroundColor",
          value: { type: "named", name: namedColors[codeInt - 40] }
        });
      } else if (codeInt === 48) {
        const [offset, color] = parseColor(sequence, i);
        if (color) {
          commands.push({
            type: "setBackgroundColor",
            value: color
          });
        }
        i += offset;
      } else if (codeInt === 49) {
        commands.push({
          type: "resetBackgroundColor"
        });
      } else if (codeInt >= 90 && codeInt <= 97) {
        commands.push({
          type: "setForegroundColor",
          value: { type: "named", name: namedColors[codeInt - 90 + 8] }
        });
      } else if (codeInt >= 100 && codeInt <= 107) {
        commands.push({
          type: "setBackgroundColor",
          value: { type: "named", name: namedColors[codeInt - 100 + 8] }
        });
      }
    }
    return commands;
  }
  function createAnsiSequenceParser() {
    let foreground = null;
    let background = null;
    let decorations2 = /* @__PURE__ */ new Set();
    return {
      parse(value) {
        const tokens = [];
        let position = 0;
        do {
          const findResult = findSequence(value, position);
          const text = findResult.sequence ? value.substring(position, findResult.startPosition) : value.substring(position);
          if (text.length > 0) {
            tokens.push({
              value: text,
              foreground,
              background,
              decorations: new Set(decorations2)
            });
          }
          if (findResult.sequence) {
            const commands = parseSequence(findResult.sequence);
            for (const styleToken of commands) {
              if (styleToken.type === "resetAll") {
                foreground = null;
                background = null;
                decorations2.clear();
              } else if (styleToken.type === "resetForegroundColor") {
                foreground = null;
              } else if (styleToken.type === "resetBackgroundColor") {
                background = null;
              } else if (styleToken.type === "resetDecoration") {
                decorations2.delete(styleToken.value);
              }
            }
            for (const styleToken of commands) {
              if (styleToken.type === "setForegroundColor") {
                foreground = styleToken.value;
              } else if (styleToken.type === "setBackgroundColor") {
                background = styleToken.value;
              } else if (styleToken.type === "setDecoration") {
                decorations2.add(styleToken.value);
              }
            }
          }
          position = findResult.position;
        } while (position < value.length);
        return tokens;
      }
    };
  }

  // src/palette.ts
  var defaultNamedColorsMap = {
    black: "#000000",
    red: "#bb0000",
    green: "#00bb00",
    yellow: "#bbbb00",
    blue: "#0000bb",
    magenta: "#ff00ff",
    cyan: "#00bbbb",
    white: "#eeeeee",
    brightBlack: "#555555",
    brightRed: "#ff5555",
    brightGreen: "#00ff00",
    brightYellow: "#ffff55",
    brightBlue: "#5555ff",
    brightMagenta: "#ff55ff",
    brightCyan: "#55ffff",
    brightWhite: "#ffffff"
  };
  function createColorPalette(namedColorsMap = defaultNamedColorsMap) {
    function namedColor(name) {
      return namedColorsMap[name];
    }
    function rgbColor(rgb) {
      return `#${rgb.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, "0")).join("")}`;
    }
    let colorTable;
    function getColorTable() {
      if (colorTable) {
        return colorTable;
      }
      colorTable = [];
      for (let i = 0; i < namedColors.length; i++) {
        colorTable.push(namedColor(namedColors[i]));
      }
      let levels = [0, 95, 135, 175, 215, 255];
      for (let r = 0; r < 6; r++) {
        for (let g = 0; g < 6; g++) {
          for (let b = 0; b < 6; b++) {
            colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));
          }
        }
      }
      let level = 8;
      for (let i = 0; i < 24; i++, level += 10) {
        colorTable.push(rgbColor([level, level, level]));
      }
      return colorTable;
    }
    function tableColor(index) {
      return getColorTable()[index];
    }
    function value(color) {
      switch (color.type) {
        case "named":
          return namedColor(color.name);
        case "rgb":
          return rgbColor(color.rgb);
        case "table":
          return tableColor(color.index);
      }
    }
    return {
      value
    };
  }

  function tokenizeAnsiWithTheme(theme, fileContents, options) {
    const colorReplacements = resolveColorReplacements(theme, options);
    const lines = splitLines$1(fileContents);
    const colorPalette = createColorPalette(
      Object.fromEntries(
        namedColors.map((name) => [
          name,
          theme.colors?.[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`]
        ])
      )
    );
    const parser = createAnsiSequenceParser();
    return lines.map(
      (line) => parser.parse(line[0]).map((token) => {
        let color;
        let bgColor;
        if (token.decorations.has("reverse")) {
          color = token.background ? colorPalette.value(token.background) : theme.bg;
          bgColor = token.foreground ? colorPalette.value(token.foreground) : theme.fg;
        } else {
          color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;
          bgColor = token.background ? colorPalette.value(token.background) : undefined;
        }
        color = applyColorReplacements(color, colorReplacements);
        bgColor = applyColorReplacements(bgColor, colorReplacements);
        if (token.decorations.has("dim"))
          color = dimColor(color);
        let fontStyle = FontStyle.None;
        if (token.decorations.has("bold"))
          fontStyle |= FontStyle.Bold;
        if (token.decorations.has("italic"))
          fontStyle |= FontStyle.Italic;
        if (token.decorations.has("underline"))
          fontStyle |= FontStyle.Underline;
        return {
          content: token.value,
          offset: line[1],
          // TODO: more accurate offset? might need to fork ansi-sequence-parser
          color,
          bgColor,
          fontStyle
        };
      })
    );
  }
  function dimColor(color) {
    const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);
    if (hexMatch) {
      if (hexMatch[3]) {
        const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2).toString(16).padStart(2, "0");
        return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;
      } else if (hexMatch[2]) {
        return `#${hexMatch[1]}${hexMatch[2]}80`;
      } else {
        return `#${Array.from(hexMatch[1]).map((x) => `${x}${x}`).join("")}80`;
      }
    }
    const cssVarMatch = color.match(/var\((--[\w-]+-ansi-[\w-]+)\)/);
    if (cssVarMatch)
      return `var(${cssVarMatch[1]}-dim)`;
    return color;
  }

  function codeToTokensBase(internal, code, options = {}) {
    const {
      lang = "text",
      theme: themeName = internal.getLoadedThemes()[0]
    } = options;
    if (isPlainLang(lang) || isNoneTheme(themeName))
      return splitLines$1(code).map((line) => [{ content: line[0], offset: line[1] }]);
    const { theme, colorMap } = internal.setTheme(themeName);
    if (lang === "ansi")
      return tokenizeAnsiWithTheme(theme, code, options);
    const _grammar = internal.getLanguage(lang);
    if (options.grammarState) {
      if (options.grammarState.lang !== _grammar.name) {
        throw new ShikiError$2(`Grammar state language "${options.grammarState.lang}" does not match highlight language "${_grammar.name}"`);
      }
      if (!options.grammarState.themes.includes(theme.name)) {
        throw new ShikiError$2(`Grammar state themes "${options.grammarState.themes}" do not contain highlight theme "${theme.name}"`);
      }
    }
    return tokenizeWithTheme(code, _grammar, theme, colorMap, options);
  }
  function getLastGrammarState(...args) {
    if (args.length === 2) {
      return getLastGrammarStateFromMap(args[1]);
    }
    const [internal, code, options = {}] = args;
    const {
      lang = "text",
      theme: themeName = internal.getLoadedThemes()[0]
    } = options;
    if (isPlainLang(lang) || isNoneTheme(themeName))
      throw new ShikiError$2("Plain language does not have grammar state");
    if (lang === "ansi")
      throw new ShikiError$2("ANSI language does not have grammar state");
    const { theme, colorMap } = internal.setTheme(themeName);
    const _grammar = internal.getLanguage(lang);
    return new GrammarState(
      _tokenizeWithTheme(code, _grammar, theme, colorMap, options).stateStack,
      _grammar.name,
      theme.name
    );
  }
  function tokenizeWithTheme(code, grammar, theme, colorMap, options) {
    const result = _tokenizeWithTheme(code, grammar, theme, colorMap, options);
    const grammarState = new GrammarState(
      _tokenizeWithTheme(code, grammar, theme, colorMap, options).stateStack,
      grammar.name,
      theme.name
    );
    setLastGrammarStateToMap(result.tokens, grammarState);
    return result.tokens;
  }
  function _tokenizeWithTheme(code, grammar, theme, colorMap, options) {
    const colorReplacements = resolveColorReplacements(theme, options);
    const {
      tokenizeMaxLineLength = 0,
      tokenizeTimeLimit = 500
    } = options;
    const lines = splitLines$1(code);
    let stateStack = options.grammarState ? getGrammarStack(options.grammarState, theme.name) ?? INITIAL : options.grammarContextCode != null ? _tokenizeWithTheme(
      options.grammarContextCode,
      grammar,
      theme,
      colorMap,
      {
        ...options,
        grammarState: undefined,
        grammarContextCode: undefined
      }
    ).stateStack : INITIAL;
    let actual = [];
    const final = [];
    for (let i = 0, len = lines.length; i < len; i++) {
      const [line, lineOffset] = lines[i];
      if (line === "") {
        actual = [];
        final.push([]);
        continue;
      }
      if (tokenizeMaxLineLength > 0 && line.length >= tokenizeMaxLineLength) {
        actual = [];
        final.push([{
          content: line,
          offset: lineOffset,
          color: "",
          fontStyle: 0
        }]);
        continue;
      }
      let resultWithScopes;
      let tokensWithScopes;
      let tokensWithScopesIndex;
      if (options.includeExplanation) {
        resultWithScopes = grammar.tokenizeLine(line, stateStack);
        tokensWithScopes = resultWithScopes.tokens;
        tokensWithScopesIndex = 0;
      }
      const result = grammar.tokenizeLine2(line, stateStack, tokenizeTimeLimit);
      const tokensLength = result.tokens.length / 2;
      for (let j = 0; j < tokensLength; j++) {
        const startIndex = result.tokens[2 * j];
        const nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;
        if (startIndex === nextStartIndex)
          continue;
        const metadata = result.tokens[2 * j + 1];
        const color = applyColorReplacements(
          colorMap[EncodedTokenMetadata.getForeground(metadata)],
          colorReplacements
        );
        const fontStyle = EncodedTokenMetadata.getFontStyle(metadata);
        const token = {
          content: line.substring(startIndex, nextStartIndex),
          offset: lineOffset + startIndex,
          color,
          fontStyle
        };
        if (options.includeExplanation) {
          const themeSettingsSelectors = [];
          if (options.includeExplanation !== "scopeName") {
            for (const setting of theme.settings) {
              let selectors;
              switch (typeof setting.scope) {
                case "string":
                  selectors = setting.scope.split(/,/).map((scope) => scope.trim());
                  break;
                case "object":
                  selectors = setting.scope;
                  break;
                default:
                  continue;
              }
              themeSettingsSelectors.push({
                settings: setting,
                selectors: selectors.map((selector) => selector.split(/ /))
              });
            }
          }
          token.explanation = [];
          let offset = 0;
          while (startIndex + offset < nextStartIndex) {
            const tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];
            const tokenWithScopesText = line.substring(
              tokenWithScopes.startIndex,
              tokenWithScopes.endIndex
            );
            offset += tokenWithScopesText.length;
            token.explanation.push({
              content: tokenWithScopesText,
              scopes: options.includeExplanation === "scopeName" ? explainThemeScopesNameOnly(
                tokenWithScopes.scopes
              ) : explainThemeScopesFull(
                themeSettingsSelectors,
                tokenWithScopes.scopes
              )
            });
            tokensWithScopesIndex += 1;
          }
        }
        actual.push(token);
      }
      final.push(actual);
      actual = [];
      stateStack = result.ruleStack;
    }
    return {
      tokens: final,
      stateStack
    };
  }
  function explainThemeScopesNameOnly(scopes) {
    return scopes.map((scope) => ({ scopeName: scope }));
  }
  function explainThemeScopesFull(themeSelectors, scopes) {
    const result = [];
    for (let i = 0, len = scopes.length; i < len; i++) {
      const scope = scopes[i];
      result[i] = {
        scopeName: scope,
        themeMatches: explainThemeScope(themeSelectors, scope, scopes.slice(0, i))
      };
    }
    return result;
  }
  function matchesOne(selector, scope) {
    return selector === scope || scope.substring(0, selector.length) === selector && scope[selector.length] === ".";
  }
  function matches(selectors, scope, parentScopes) {
    if (!matchesOne(selectors[selectors.length - 1], scope))
      return false;
    let selectorParentIndex = selectors.length - 2;
    let parentIndex = parentScopes.length - 1;
    while (selectorParentIndex >= 0 && parentIndex >= 0) {
      if (matchesOne(selectors[selectorParentIndex], parentScopes[parentIndex]))
        selectorParentIndex -= 1;
      parentIndex -= 1;
    }
    if (selectorParentIndex === -1)
      return true;
    return false;
  }
  function explainThemeScope(themeSettingsSelectors, scope, parentScopes) {
    const result = [];
    for (const { selectors, settings } of themeSettingsSelectors) {
      for (const selectorPieces of selectors) {
        if (matches(selectorPieces, scope, parentScopes)) {
          result.push(settings);
          break;
        }
      }
    }
    return result;
  }

  function codeToTokensWithThemes(internal, code, options) {
    const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] }));
    const themedTokens = themes.map((t) => {
      const tokens2 = codeToTokensBase(internal, code, {
        ...options,
        theme: t.theme
      });
      const state = getLastGrammarStateFromMap(tokens2);
      const theme = typeof t.theme === "string" ? t.theme : t.theme.name;
      return {
        tokens: tokens2,
        state,
        theme
      };
    });
    const tokens = syncThemesTokenization(
      ...themedTokens.map((i) => i.tokens)
    );
    const mergedTokens = tokens[0].map(
      (line, lineIdx) => line.map((_token, tokenIdx) => {
        const mergedToken = {
          content: _token.content,
          variants: {},
          offset: _token.offset
        };
        if ("includeExplanation" in options && options.includeExplanation) {
          mergedToken.explanation = _token.explanation;
        }
        tokens.forEach((t, themeIdx) => {
          const {
            content: _,
            explanation: __,
            offset: ___,
            ...styles
          } = t[lineIdx][tokenIdx];
          mergedToken.variants[themes[themeIdx].color] = styles;
        });
        return mergedToken;
      })
    );
    const mergedGrammarState = themedTokens[0].state ? new GrammarState(
      Object.fromEntries(themedTokens.map((s) => [s.theme, s.state?.getInternalStack(s.theme)])),
      themedTokens[0].state.lang
    ) : undefined;
    if (mergedGrammarState)
      setLastGrammarStateToMap(mergedTokens, mergedGrammarState);
    return mergedTokens;
  }
  function syncThemesTokenization(...themes) {
    const outThemes = themes.map(() => []);
    const count = themes.length;
    for (let i = 0; i < themes[0].length; i++) {
      const lines = themes.map((t) => t[i]);
      const outLines = outThemes.map(() => []);
      outThemes.forEach((t, i2) => t.push(outLines[i2]));
      const indexes = lines.map(() => 0);
      const current = lines.map((l) => l[0]);
      while (current.every((t) => t)) {
        const minLength = Math.min(...current.map((t) => t.content.length));
        for (let n = 0; n < count; n++) {
          const token = current[n];
          if (token.content.length === minLength) {
            outLines[n].push(token);
            indexes[n] += 1;
            current[n] = lines[n][indexes[n]];
          } else {
            outLines[n].push({
              ...token,
              content: token.content.slice(0, minLength)
            });
            current[n] = {
              ...token,
              content: token.content.slice(minLength),
              offset: token.offset + minLength
            };
          }
        }
      }
    }
    return outThemes;
  }

  function codeToTokens(internal, code, options) {
    let bg;
    let fg;
    let tokens;
    let themeName;
    let rootStyle;
    let grammarState;
    if ("themes" in options) {
      const {
        defaultColor = "light",
        cssVariablePrefix = "--shiki-"
      } = options;
      const themes = Object.entries(options.themes).filter((i) => i[1]).map((i) => ({ color: i[0], theme: i[1] })).sort((a, b) => a.color === defaultColor ? -1 : b.color === defaultColor ? 1 : 0);
      if (themes.length === 0)
        throw new ShikiError$2("`themes` option must not be empty");
      const themeTokens = codeToTokensWithThemes(
        internal,
        code,
        options
      );
      grammarState = getLastGrammarStateFromMap(themeTokens);
      if (defaultColor && !themes.find((t) => t.color === defaultColor))
        throw new ShikiError$2(`\`themes\` option must contain the defaultColor key \`${defaultColor}\``);
      const themeRegs = themes.map((t) => internal.getTheme(t.theme));
      const themesOrder = themes.map((t) => t.color);
      tokens = themeTokens.map((line) => line.map((token) => mergeToken(token, themesOrder, cssVariablePrefix, defaultColor)));
      if (grammarState)
        setLastGrammarStateToMap(tokens, grammarState);
      const themeColorReplacements = themes.map((t) => resolveColorReplacements(t.theme, options));
      fg = themes.map((t, idx) => (idx === 0 && defaultColor ? "" : `${cssVariablePrefix + t.color}:`) + (applyColorReplacements(themeRegs[idx].fg, themeColorReplacements[idx]) || "inherit")).join(";");
      bg = themes.map((t, idx) => (idx === 0 && defaultColor ? "" : `${cssVariablePrefix + t.color}-bg:`) + (applyColorReplacements(themeRegs[idx].bg, themeColorReplacements[idx]) || "inherit")).join(";");
      themeName = `shiki-themes ${themeRegs.map((t) => t.name).join(" ")}`;
      rootStyle = defaultColor ? undefined : [fg, bg].join(";");
    } else if ("theme" in options) {
      const colorReplacements = resolveColorReplacements(options.theme, options);
      tokens = codeToTokensBase(
        internal,
        code,
        options
      );
      const _theme = internal.getTheme(options.theme);
      bg = applyColorReplacements(_theme.bg, colorReplacements);
      fg = applyColorReplacements(_theme.fg, colorReplacements);
      themeName = _theme.name;
      grammarState = getLastGrammarStateFromMap(tokens);
    } else {
      throw new ShikiError$2("Invalid options, either `theme` or `themes` must be provided");
    }
    return {
      tokens,
      fg,
      bg,
      themeName,
      rootStyle,
      grammarState
    };
  }
  function mergeToken(merged, variantsOrder, cssVariablePrefix, defaultColor) {
    const token = {
      content: merged.content,
      explanation: merged.explanation,
      offset: merged.offset
    };
    const styles = variantsOrder.map((t) => getTokenStyleObject(merged.variants[t]));
    const styleKeys = new Set(styles.flatMap((t) => Object.keys(t)));
    const mergedStyles = {};
    styles.forEach((cur, idx) => {
      for (const key of styleKeys) {
        const value = cur[key] || "inherit";
        if (idx === 0 && defaultColor) {
          mergedStyles[key] = value;
        } else {
          const keyName = key === "color" ? "" : key === "background-color" ? "-bg" : `-${key}`;
          const varKey = cssVariablePrefix + variantsOrder[idx] + (key === "color" ? "" : keyName);
          mergedStyles[varKey] = value;
        }
      }
    });
    token.htmlStyle = mergedStyles;
    return token;
  }

  function codeToHast(internal, code, options, transformerContext = {
    meta: {},
    options,
    codeToHast: (_code, _options) => codeToHast(internal, _code, _options),
    codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)
  }) {
    let input = code;
    for (const transformer of getTransformers(options))
      input = transformer.preprocess?.call(transformerContext, input, options) || input;
    let {
      tokens,
      fg,
      bg,
      themeName,
      rootStyle,
      grammarState
    } = codeToTokens(internal, input, options);
    const {
      mergeWhitespaces = true
    } = options;
    if (mergeWhitespaces === true)
      tokens = mergeWhitespaceTokens(tokens);
    else if (mergeWhitespaces === "never")
      tokens = splitWhitespaceTokens(tokens);
    const contextSource = {
      ...transformerContext,
      get source() {
        return input;
      }
    };
    for (const transformer of getTransformers(options))
      tokens = transformer.tokens?.call(contextSource, tokens) || tokens;
    return tokensToHast(
      tokens,
      {
        ...options,
        fg,
        bg,
        themeName,
        rootStyle
      },
      contextSource,
      grammarState
    );
  }
  function tokensToHast(tokens, options, transformerContext, grammarState = getLastGrammarStateFromMap(tokens)) {
    const transformers = getTransformers(options);
    const lines = [];
    const root = {
      type: "root",
      children: []
    };
    const {
      structure = "classic",
      tabindex = "0"
    } = options;
    let preNode = {
      type: "element",
      tagName: "pre",
      properties: {
        class: `shiki ${options.themeName || ""}`,
        style: options.rootStyle || `background-color:${options.bg};color:${options.fg}`,
        ...tabindex !== false && tabindex != null ? {
          tabindex: tabindex.toString()
        } : {},
        ...Object.fromEntries(
          Array.from(
            Object.entries(options.meta || {})
          ).filter(([key]) => !key.startsWith("_"))
        )
      },
      children: []
    };
    let codeNode = {
      type: "element",
      tagName: "code",
      properties: {},
      children: lines
    };
    const lineNodes = [];
    const context = {
      ...transformerContext,
      structure,
      addClassToHast,
      get source() {
        return transformerContext.source;
      },
      get tokens() {
        return tokens;
      },
      get options() {
        return options;
      },
      get root() {
        return root;
      },
      get pre() {
        return preNode;
      },
      get code() {
        return codeNode;
      },
      get lines() {
        return lineNodes;
      }
    };
    tokens.forEach((line, idx) => {
      if (idx) {
        if (structure === "inline")
          root.children.push({ type: "element", tagName: "br", properties: {}, children: [] });
        else if (structure === "classic")
          lines.push({ type: "text", value: "\n" });
      }
      let lineNode = {
        type: "element",
        tagName: "span",
        properties: { class: "line" },
        children: []
      };
      let col = 0;
      for (const token of line) {
        let tokenNode = {
          type: "element",
          tagName: "span",
          properties: {
            ...token.htmlAttrs
          },
          children: [{ type: "text", value: token.content }]
        };
        if (typeof token.htmlStyle === "string")
          warnDeprecated("`htmlStyle` as a string is deprecated. Use an object instead.");
        const style = stringifyTokenStyle(token.htmlStyle || getTokenStyleObject(token));
        if (style)
          tokenNode.properties.style = style;
        for (const transformer of transformers)
          tokenNode = transformer?.span?.call(context, tokenNode, idx + 1, col, lineNode, token) || tokenNode;
        if (structure === "inline")
          root.children.push(tokenNode);
        else if (structure === "classic")
          lineNode.children.push(tokenNode);
        col += token.content.length;
      }
      if (structure === "classic") {
        for (const transformer of transformers)
          lineNode = transformer?.line?.call(context, lineNode, idx + 1) || lineNode;
        lineNodes.push(lineNode);
        lines.push(lineNode);
      }
    });
    if (structure === "classic") {
      for (const transformer of transformers)
        codeNode = transformer?.code?.call(context, codeNode) || codeNode;
      preNode.children.push(codeNode);
      for (const transformer of transformers)
        preNode = transformer?.pre?.call(context, preNode) || preNode;
      root.children.push(preNode);
    }
    let result = root;
    for (const transformer of transformers)
      result = transformer?.root?.call(context, result) || result;
    if (grammarState)
      setLastGrammarStateToMap(result, grammarState);
    return result;
  }
  function mergeWhitespaceTokens(tokens) {
    return tokens.map((line) => {
      const newLine = [];
      let carryOnContent = "";
      let firstOffset = 0;
      line.forEach((token, idx) => {
        const isUnderline = token.fontStyle && token.fontStyle & FontStyle.Underline;
        const couldMerge = !isUnderline;
        if (couldMerge && token.content.match(/^\s+$/) && line[idx + 1]) {
          if (!firstOffset)
            firstOffset = token.offset;
          carryOnContent += token.content;
        } else {
          if (carryOnContent) {
            if (couldMerge) {
              newLine.push({
                ...token,
                offset: firstOffset,
                content: carryOnContent + token.content
              });
            } else {
              newLine.push(
                {
                  content: carryOnContent,
                  offset: firstOffset
                },
                token
              );
            }
            firstOffset = 0;
            carryOnContent = "";
          } else {
            newLine.push(token);
          }
        }
      });
      return newLine;
    });
  }
  function splitWhitespaceTokens(tokens) {
    return tokens.map((line) => {
      return line.flatMap((token) => {
        if (token.content.match(/^\s+$/))
          return token;
        const match = token.content.match(/^(\s*)(.*?)(\s*)$/);
        if (!match)
          return token;
        const [, leading, content, trailing] = match;
        if (!leading && !trailing)
          return token;
        const expanded = [{
          ...token,
          offset: token.offset + leading.length,
          content
        }];
        if (leading) {
          expanded.unshift({
            content: leading,
            offset: token.offset
          });
        }
        if (trailing) {
          expanded.push({
            content: trailing,
            offset: token.offset + leading.length + content.length
          });
        }
        return expanded;
      });
    });
  }

  function codeToHtml(internal, code, options) {
    const context = {
      meta: {},
      options,
      codeToHast: (_code, _options) => codeToHast(internal, _code, _options),
      codeToTokens: (_code, _options) => codeToTokens(internal, _code, _options)
    };
    let result = toHtml(codeToHast(internal, code, options, context));
    for (const transformer of getTransformers(options))
      result = transformer.postprocess?.call(context, result, options) || result;
    return result;
  }

  const VSCODE_FALLBACK_EDITOR_FG = { light: "#333333", dark: "#bbbbbb" };
  const VSCODE_FALLBACK_EDITOR_BG = { light: "#fffffe", dark: "#1e1e1e" };
  const RESOLVED_KEY = "__shiki_resolved";
  function normalizeTheme(rawTheme) {
    if (rawTheme?.[RESOLVED_KEY])
      return rawTheme;
    const theme = {
      ...rawTheme
    };
    if (theme.tokenColors && !theme.settings) {
      theme.settings = theme.tokenColors;
      delete theme.tokenColors;
    }
    theme.type ||= "dark";
    theme.colorReplacements = { ...theme.colorReplacements };
    theme.settings ||= [];
    let { bg, fg } = theme;
    if (!bg || !fg) {
      const globalSetting = theme.settings ? theme.settings.find((s) => !s.name && !s.scope) : undefined;
      if (globalSetting?.settings?.foreground)
        fg = globalSetting.settings.foreground;
      if (globalSetting?.settings?.background)
        bg = globalSetting.settings.background;
      if (!fg && theme?.colors?.["editor.foreground"])
        fg = theme.colors["editor.foreground"];
      if (!bg && theme?.colors?.["editor.background"])
        bg = theme.colors["editor.background"];
      if (!fg)
        fg = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
      if (!bg)
        bg = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
      theme.fg = fg;
      theme.bg = bg;
    }
    if (!(theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope)) {
      theme.settings.unshift({
        settings: {
          foreground: theme.fg,
          background: theme.bg
        }
      });
    }
    let replacementCount = 0;
    const replacementMap = /* @__PURE__ */ new Map();
    function getReplacementColor(value) {
      if (replacementMap.has(value))
        return replacementMap.get(value);
      replacementCount += 1;
      const hex = `#${replacementCount.toString(16).padStart(8, "0").toLowerCase()}`;
      if (theme.colorReplacements?.[`#${hex}`])
        return getReplacementColor(value);
      replacementMap.set(value, hex);
      return hex;
    }
    theme.settings = theme.settings.map((setting) => {
      const replaceFg = setting.settings?.foreground && !setting.settings.foreground.startsWith("#");
      const replaceBg = setting.settings?.background && !setting.settings.background.startsWith("#");
      if (!replaceFg && !replaceBg)
        return setting;
      const clone = {
        ...setting,
        settings: {
          ...setting.settings
        }
      };
      if (replaceFg) {
        const replacement = getReplacementColor(setting.settings.foreground);
        theme.colorReplacements[replacement] = setting.settings.foreground;
        clone.settings.foreground = replacement;
      }
      if (replaceBg) {
        const replacement = getReplacementColor(setting.settings.background);
        theme.colorReplacements[replacement] = setting.settings.background;
        clone.settings.background = replacement;
      }
      return clone;
    });
    for (const key of Object.keys(theme.colors || {})) {
      if (key === "editor.foreground" || key === "editor.background" || key.startsWith("terminal.ansi")) {
        if (!theme.colors[key]?.startsWith("#")) {
          const replacement = getReplacementColor(theme.colors[key]);
          theme.colorReplacements[replacement] = theme.colors[key];
          theme.colors[key] = replacement;
        }
      }
    }
    Object.defineProperty(theme, RESOLVED_KEY, {
      enumerable: false,
      writable: false,
      value: true
    });
    return theme;
  }

  async function resolveLangs(langs) {
    return Array.from(new Set((await Promise.all(
      langs.filter((l) => !isSpecialLang(l)).map(async (lang) => await normalizeGetter(lang).then((r) => Array.isArray(r) ? r : [r]))
    )).flat()));
  }
  async function resolveThemes(themes) {
    const resolved = await Promise.all(
      themes.map(
        async (theme) => isSpecialTheme(theme) ? null : normalizeTheme(await normalizeGetter(theme))
      )
    );
    return resolved.filter((i) => !!i);
  }

  class Registry extends Registry$1 {
    constructor(_resolver, _themes, _langs, _alias = {}) {
      super(_resolver);
      this._resolver = _resolver;
      this._themes = _themes;
      this._langs = _langs;
      this._alias = _alias;
      this._themes.map((t) => this.loadTheme(t));
      this.loadLanguages(this._langs);
    }
    _resolvedThemes = /* @__PURE__ */ new Map();
    _resolvedGrammars = /* @__PURE__ */ new Map();
    _langMap = /* @__PURE__ */ new Map();
    _langGraph = /* @__PURE__ */ new Map();
    _textmateThemeCache = /* @__PURE__ */ new WeakMap();
    _loadedThemesCache = null;
    _loadedLanguagesCache = null;
    getTheme(theme) {
      if (typeof theme === "string")
        return this._resolvedThemes.get(theme);
      else
        return this.loadTheme(theme);
    }
    loadTheme(theme) {
      const _theme = normalizeTheme(theme);
      if (_theme.name) {
        this._resolvedThemes.set(_theme.name, _theme);
        this._loadedThemesCache = null;
      }
      return _theme;
    }
    getLoadedThemes() {
      if (!this._loadedThemesCache)
        this._loadedThemesCache = [...this._resolvedThemes.keys()];
      return this._loadedThemesCache;
    }
    // Override and re-implement this method to cache the textmate themes as `TextMateTheme.createFromRawTheme`
    // is expensive. Themes can switch often especially for dual-theme support.
    //
    // The parent class also accepts `colorMap` as the second parameter, but since we don't use that,
    // we omit here so it's easier to cache the themes.
    setTheme(theme) {
      let textmateTheme = this._textmateThemeCache.get(theme);
      if (!textmateTheme) {
        textmateTheme = Theme.createFromRawTheme(theme);
        this._textmateThemeCache.set(theme, textmateTheme);
      }
      this._syncRegistry.setTheme(textmateTheme);
    }
    getGrammar(name) {
      if (this._alias[name]) {
        const resolved = /* @__PURE__ */ new Set([name]);
        while (this._alias[name]) {
          name = this._alias[name];
          if (resolved.has(name))
            throw new ShikiError(`Circular alias \`${Array.from(resolved).join(" -> ")} -> ${name}\``);
          resolved.add(name);
        }
      }
      return this._resolvedGrammars.get(name);
    }
    loadLanguage(lang) {
      if (this.getGrammar(lang.name))
        return;
      const embeddedLazilyBy = new Set(
        [...this._langMap.values()].filter((i) => i.embeddedLangsLazy?.includes(lang.name))
      );
      this._resolver.addLanguage(lang);
      const grammarConfig = {
        balancedBracketSelectors: lang.balancedBracketSelectors || ["*"],
        unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []
      };
      this._syncRegistry._rawGrammars.set(lang.scopeName, lang);
      const g = this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);
      g.name = lang.name;
      this._resolvedGrammars.set(lang.name, g);
      if (lang.aliases) {
        lang.aliases.forEach((alias) => {
          this._alias[alias] = lang.name;
        });
      }
      this._loadedLanguagesCache = null;
      if (embeddedLazilyBy.size) {
        for (const e of embeddedLazilyBy) {
          this._resolvedGrammars.delete(e.name);
          this._loadedLanguagesCache = null;
          this._syncRegistry?._injectionGrammars?.delete(e.scopeName);
          this._syncRegistry?._grammars?.delete(e.scopeName);
          this.loadLanguage(this._langMap.get(e.name));
        }
      }
    }
    dispose() {
      super.dispose();
      this._resolvedThemes.clear();
      this._resolvedGrammars.clear();
      this._langMap.clear();
      this._langGraph.clear();
      this._loadedThemesCache = null;
    }
    loadLanguages(langs) {
      for (const lang of langs)
        this.resolveEmbeddedLanguages(lang);
      const langsGraphArray = Array.from(this._langGraph.entries());
      const missingLangs = langsGraphArray.filter(([_, lang]) => !lang);
      if (missingLangs.length) {
        const dependents = langsGraphArray.filter(([_, lang]) => lang && lang.embeddedLangs?.some((l) => missingLangs.map(([name]) => name).includes(l))).filter((lang) => !missingLangs.includes(lang));
        throw new ShikiError(`Missing languages ${missingLangs.map(([name]) => `\`${name}\``).join(", ")}, required by ${dependents.map(([name]) => `\`${name}\``).join(", ")}`);
      }
      for (const [_, lang] of langsGraphArray)
        this._resolver.addLanguage(lang);
      for (const [_, lang] of langsGraphArray)
        this.loadLanguage(lang);
    }
    getLoadedLanguages() {
      if (!this._loadedLanguagesCache) {
        this._loadedLanguagesCache = [
          .../* @__PURE__ */ new Set([...this._resolvedGrammars.keys(), ...Object.keys(this._alias)])
        ];
      }
      return this._loadedLanguagesCache;
    }
    resolveEmbeddedLanguages(lang) {
      this._langMap.set(lang.name, lang);
      this._langGraph.set(lang.name, lang);
      if (lang.embeddedLangs) {
        for (const embeddedLang of lang.embeddedLangs)
          this._langGraph.set(embeddedLang, this._langMap.get(embeddedLang));
      }
    }
  }

  class Resolver {
    _langs = /* @__PURE__ */ new Map();
    _scopeToLang = /* @__PURE__ */ new Map();
    _injections = /* @__PURE__ */ new Map();
    _onigLib;
    constructor(engine, langs) {
      this._onigLib = {
        createOnigScanner: (patterns) => engine.createScanner(patterns),
        createOnigString: (s) => engine.createString(s)
      };
      langs.forEach((i) => this.addLanguage(i));
    }
    get onigLib() {
      return this._onigLib;
    }
    getLangRegistration(langIdOrAlias) {
      return this._langs.get(langIdOrAlias);
    }
    loadGrammar(scopeName) {
      return this._scopeToLang.get(scopeName);
    }
    addLanguage(l) {
      this._langs.set(l.name, l);
      if (l.aliases) {
        l.aliases.forEach((a) => {
          this._langs.set(a, l);
        });
      }
      this._scopeToLang.set(l.scopeName, l);
      if (l.injectTo) {
        l.injectTo.forEach((i) => {
          if (!this._injections.get(i))
            this._injections.set(i, []);
          this._injections.get(i).push(l.scopeName);
        });
      }
    }
    getInjections(scopeName) {
      const scopeParts = scopeName.split(".");
      let injections = [];
      for (let i = 1; i <= scopeParts.length; i++) {
        const subScopeName = scopeParts.slice(0, i).join(".");
        injections = [...injections, ...this._injections.get(subScopeName) || []];
      }
      return injections;
    }
  }

  let instancesCount = 0;
  function createShikiInternalSync(options) {
    instancesCount += 1;
    if (options.warnings !== false && instancesCount >= 10 && instancesCount % 10 === 0)
      console.warn(`[Shiki] ${instancesCount} instances have been created. Shiki is supposed to be used as a singleton, consider refactoring your code to cache your highlighter instance; Or call \`highlighter.dispose()\` to release unused instances.`);
    let isDisposed = false;
    if (!options.engine)
      throw new ShikiError("`engine` option is required for synchronous mode");
    const langs = (options.langs || []).flat(1);
    const themes = (options.themes || []).flat(1).map(normalizeTheme);
    const resolver = new Resolver(options.engine, langs);
    const _registry = new Registry(resolver, themes, langs, options.langAlias);
    let _lastTheme;
    function getLanguage(name) {
      ensureNotDisposed();
      const _lang = _registry.getGrammar(typeof name === "string" ? name : name.name);
      if (!_lang)
        throw new ShikiError(`Language \`${name}\` not found, you may need to load it first`);
      return _lang;
    }
    function getTheme(name) {
      if (name === "none")
        return { bg: "", fg: "", name: "none", settings: [], type: "dark" };
      ensureNotDisposed();
      const _theme = _registry.getTheme(name);
      if (!_theme)
        throw new ShikiError(`Theme \`${name}\` not found, you may need to load it first`);
      return _theme;
    }
    function setTheme(name) {
      ensureNotDisposed();
      const theme = getTheme(name);
      if (_lastTheme !== name) {
        _registry.setTheme(theme);
        _lastTheme = name;
      }
      const colorMap = _registry.getColorMap();
      return {
        theme,
        colorMap
      };
    }
    function getLoadedThemes() {
      ensureNotDisposed();
      return _registry.getLoadedThemes();
    }
    function getLoadedLanguages() {
      ensureNotDisposed();
      return _registry.getLoadedLanguages();
    }
    function loadLanguageSync(...langs2) {
      ensureNotDisposed();
      _registry.loadLanguages(langs2.flat(1));
    }
    async function loadLanguage(...langs2) {
      return loadLanguageSync(await resolveLangs(langs2));
    }
    function loadThemeSync(...themes2) {
      ensureNotDisposed();
      for (const theme of themes2.flat(1)) {
        _registry.loadTheme(theme);
      }
    }
    async function loadTheme(...themes2) {
      ensureNotDisposed();
      return loadThemeSync(await resolveThemes(themes2));
    }
    function ensureNotDisposed() {
      if (isDisposed)
        throw new ShikiError("Shiki instance has been disposed");
    }
    function dispose() {
      if (isDisposed)
        return;
      isDisposed = true;
      _registry.dispose();
      instancesCount -= 1;
    }
    return {
      setTheme,
      getTheme,
      getLanguage,
      getLoadedThemes,
      getLoadedLanguages,
      loadLanguage,
      loadLanguageSync,
      loadTheme,
      loadThemeSync,
      dispose,
      [Symbol.dispose]: dispose
    };
  }

  async function createShikiInternal(options = {}) {
    if (options.loadWasm) {
      warnDeprecated("`loadWasm` option is deprecated. Use `engine: createOnigurumaEngine(loadWasm)` instead.");
    }
    const [
      themes,
      langs,
      engine
    ] = await Promise.all([
      resolveThemes(options.themes || []),
      resolveLangs(options.langs || []),
      options.engine || createOnigurumaEngine(options.loadWasm || getDefaultWasmLoader())
    ]);
    return createShikiInternalSync({
      ...options,
      loadWasm: undefined,
      themes,
      langs,
      engine
    });
  }

  async function createHighlighterCore(options = {}) {
    const internal = await createShikiInternal(options);
    return {
      getLastGrammarState: (...args) => getLastGrammarState(internal, ...args),
      codeToTokensBase: (code, options2) => codeToTokensBase(internal, code, options2),
      codeToTokensWithThemes: (code, options2) => codeToTokensWithThemes(internal, code, options2),
      codeToTokens: (code, options2) => codeToTokens(internal, code, options2),
      codeToHast: (code, options2) => codeToHast(internal, code, options2),
      codeToHtml: (code, options2) => codeToHtml(internal, code, options2),
      ...internal,
      getInternalContext: () => internal
    };
  }

  // const defaultPlugins = [
  //   "markdown-it-abbr",
  //   "markdown-it-deflist",
  //   "markdown-it-emoji",
  //   "markdown-it-footnote",
  //   "markdown-it-ins",
  //   "markdown-it-mark",
  //   "markdown-it-sub",
  //   "markdown-it-sup",
  //   "markdown-it-task-lists",
  //   "markdown-it-toc",
  //   "markdown-it-attrs",
  //   "markdown-it-katex",
  //   "markdown-it-external-links",
  //   "markdown-it-table-of-contents",
  //   "markdown-it-anchor",
  //   "markdown-it-implicit-figures",
  //   "markdown-it-video",
  //   "markdown-it-highlightjs",
  // ];
  const renderer = MarkdownIt({
      linkify: true,
      typographer: true,
  });
  (async () => {
      const highlighter = (await createHighlighterCore({
          themes: [
              Promise.resolve().then(function () { return vitesseLight; }),
              Promise.resolve().then(function () { return vitesseDark; }),
          ],
          langs: [Promise.resolve().then(function () { return javascript; })],
      }));
      renderer.use(fromHighlighter(highlighter, {
          themes: {
              light: "vitesse-light",
              dark: "vitesse-dark",
          },
      }));
  })();
  function renderMarkdown(markdown, inline = true) {
      if (!inline)
          return renderer.render(markdown);
      return renderer.renderInline(markdown);
  }

  /**
  A parse stack. These are used internally by the parser to track
  parsing progress. They also provide some properties and methods
  that external code such as a tokenizer can use to get information
  about the parse state.
  */
  class Stack {
      /**
      @internal
      */
      constructor(
      /**
      The parse that this stack is part of @internal
      */
      p, 
      /**
      Holds state, input pos, buffer index triplets for all but the
      top state @internal
      */
      stack, 
      /**
      The current parse state @internal
      */
      state, 
      // The position at which the next reduce should take place. This
      // can be less than `this.pos` when skipped expressions have been
      // added to the stack (which should be moved outside of the next
      // reduction)
      /**
      @internal
      */
      reducePos, 
      /**
      The input position up to which this stack has parsed.
      */
      pos, 
      /**
      The dynamic score of the stack, including dynamic precedence
      and error-recovery penalties
      @internal
      */
      score, 
      // The output buffer. Holds (type, start, end, size) quads
      // representing nodes created by the parser, where `size` is
      // amount of buffer array entries covered by this node.
      /**
      @internal
      */
      buffer, 
      // The base offset of the buffer. When stacks are split, the split
      // instance shared the buffer history with its parent up to
      // `bufferBase`, which is the absolute offset (including the
      // offset of previous splits) into the buffer at which this stack
      // starts writing.
      /**
      @internal
      */
      bufferBase, 
      /**
      @internal
      */
      curContext, 
      /**
      @internal
      */
      lookAhead = 0, 
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /**
      @internal
      */
      parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
      }
      /**
      @internal
      */
      toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /**
      @internal
      */
      static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      get context() { return this.curContext ? this.curContext.context : null; }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
      pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
      reduce(action) {
          var _a;
          let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
          let { parser } = this.p;
          let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
          if (lookaheadRecord)
              this.setLookAhead(this.pos);
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
              this.score += dPrec;
          if (depth == 0) {
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm)
                  this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
              this.reduceContext(type, this.reducePos);
              return;
          }
          // Find the base index into `this.stack`, content after which will
          // be dropped. Note that with `StayFlag` reductions we need to
          // consume two extra frames (the dummy parent node for the skipped
          // expression and the state that we'll be staying in, which should
          // be moved to `this.state`).
          let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
          let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
          // This is a kludge to try and detect overly deep left-associative
          // trees, which will not increase the parse stack depth and thus
          // won't be caught by the regular stack-depth limit check.
          if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
              if (start == this.p.lastBigReductionStart) {
                  this.p.bigReductionCount++;
                  this.p.lastBigReductionSize = size;
              }
              else if (this.p.lastBigReductionSize < size) {
                  this.p.bigReductionCount = 1;
                  this.p.lastBigReductionStart = start;
                  this.p.lastBigReductionSize = size;
              }
          }
          let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
          // Store normal terms or `R -> R R` repeat reductions
          if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
              let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144 /* Action.StayFlag */) {
              this.state = this.stack[base];
          }
          else {
              let baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
              this.stack.pop();
          this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
      storeNode(term, start, end, size = 4, mustSink = false) {
          if (term == 0 /* Term.Err */ &&
              (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
              // Try to omit/merge adjacent error nodes
              let cur = this, top = this.buffer.length;
              if (top == 0 && cur.parent) {
                  top = cur.bufferBase - cur.parent.bufferBase;
                  cur = cur.parent;
              }
              if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                  if (start == end)
                      return;
                  if (cur.buffer[top - 2] >= start) {
                      cur.buffer[top - 2] = end;
                      return;
                  }
              }
          }
          if (!mustSink || this.pos == end) { // Simple case, just append
              this.buffer.push(term, start, end, size);
          }
          else { // There may be skipped nodes that have to be moved forward
              let index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                  let mustMove = false;
                  for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                      if (this.buffer[scan - 1] >= 0) {
                          mustMove = true;
                          break;
                      }
                  }
                  if (mustMove)
                      while (index > 0 && this.buffer[index - 2] > end) {
                          // Move this record forward
                          this.buffer[index] = this.buffer[index - 4];
                          this.buffer[index + 1] = this.buffer[index - 3];
                          this.buffer[index + 2] = this.buffer[index - 2];
                          this.buffer[index + 3] = this.buffer[index - 1];
                          index -= 4;
                          if (size > 4)
                              size -= 4;
                      }
              }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
          }
      }
      // Apply a shift action
      /**
      @internal
      */
      shift(action, type, start, end) {
          if (action & 131072 /* Action.GotoFlag */) {
              this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
          }
          else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
              let nextState = action, { parser } = this.p;
              if (end > this.pos || type <= parser.maxNode) {
                  this.pos = end;
                  if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                      this.reducePos = end;
              }
              this.pushState(nextState, start);
              this.shiftContext(type, start);
              if (type <= parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
          else { // Shift-and-stay, which means this is a skipped token
              this.pos = end;
              this.shiftContext(type, start);
              if (type <= this.p.parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
      }
      // Apply an action
      /**
      @internal
      */
      apply(action, next, nextStart, nextEnd) {
          if (action & 65536 /* Action.ReduceFlag */)
              this.reduce(action);
          else
              this.shift(action, next, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
      useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
      split() {
          let parent = this;
          let off = parent.buffer.length;
          // Because the top of the buffer (after this.pos) may be mutated
          // to reorder reductions and skipped tokens, and shared buffers
          // should be immutable, this copies any outstanding skipped tokens
          // to the new buffer, and puts the base pointer before them.
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
              off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          // Make sure parent points to an actual parent with content, if there is such a parent.
          while (parent && base == parent.bufferBase)
              parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
      recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
              this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190 /* Recover.Delete */;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
      canShift(term) {
          for (let sim = new SimulatedStack(this);;) {
              let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
              if (action == 0)
                  return false;
              if ((action & 65536 /* Action.ReduceFlag */) == 0)
                  return true;
              sim.reduce(action);
          }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
      recoverByInsert(next) {
          if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
              return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
              let best = [];
              for (let i = 0, s; i < nextStates.length; i += 2) {
                  if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                      best.push(nextStates[i], s);
              }
              if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                  for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                      let s = nextStates[i + 1];
                      if (!best.some((v, i) => (i & 1) && v == s))
                          best.push(nextStates[i], s);
                  }
              nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
              let s = nextStates[i + 1];
              if (s == this.state)
                  continue;
              let stack = this.split();
              stack.pushState(s, this.pos);
              stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
              stack.shiftContext(nextStates[i], this.pos);
              stack.reducePos = this.pos;
              stack.score -= 200 /* Recover.Insert */;
              result.push(stack);
          }
          return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
      forceReduce() {
          let { parser } = this.p;
          let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
          if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
              return false;
          if (!parser.validAction(this.state, reduce)) {
              let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
              let target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                  let backup = this.findForcedReduction();
                  if (backup == null)
                      return false;
                  reduce = backup;
              }
              this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
              this.score -= 100 /* Recover.Reduce */;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
      findForcedReduction() {
          let { parser } = this.p, seen = [];
          let explore = (state, depth) => {
              if (seen.includes(state))
                  return;
              seen.push(state);
              return parser.allActions(state, (action) => {
                  if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                  else if (action & 65536 /* Action.ReduceFlag */) {
                      let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                      if (rDepth > 1) {
                          let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                          if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                              return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                      }
                  }
                  else {
                      let found = explore(action, depth + 1);
                      if (found != null)
                          return found;
                  }
              });
          };
          return explore(this.state, 0);
      }
      /**
      @internal
      */
      forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
              if (!this.forceReduce()) {
                  this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                  break;
              }
          }
          return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
      get deadEnd() {
          if (this.stack.length != 3)
              return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
              !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
      restart() {
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          this.state = this.stack[0];
          this.stack.length = 0;
      }
      /**
      @internal
      */
      sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
              return false;
          for (let i = 0; i < this.stack.length; i += 3)
              if (this.stack[i] != other.stack[i])
                  return false;
          return true;
      }
      /**
      Get the parser used by this stack.
      */
      get parser() { return this.p.parser; }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
      dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
      shiftContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      reduceContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /**
      @internal
      */
      emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
              this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
      emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
              this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
      updateContext(context) {
          if (context != this.curContext.context) {
              let newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash)
                  this.emitContext();
              this.curContext = newCx;
          }
      }
      /**
      @internal
      */
      setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
          }
      }
      /**
      @internal
      */
      close() {
          if (this.curContext && this.curContext.tracker.strict)
              this.emitContext();
          if (this.lookAhead > 0)
              this.emitLookAhead();
      }
  }
  class StackContext {
      constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
  }
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
      constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
      }
      reduce(action) {
          let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
          if (depth == 0) {
              if (this.stack == this.start.stack)
                  this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
          }
          else {
              this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
      }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
      constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
              this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
          }
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
              this.maybeNext();
      }
      fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
      }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
      if (typeof input != "string")
          return input;
      let array = null;
      for (let pos = 0, out = 0; pos < input.length;) {
          let value = 0;
          for (;;) {
              let next = input.charCodeAt(pos++), stop = false;
              if (next == 126 /* Encode.BigValCode */) {
                  value = 65535 /* Encode.BigVal */;
                  break;
              }
              if (next >= 92 /* Encode.Gap2 */)
                  next--;
              if (next >= 34 /* Encode.Gap1 */)
                  next--;
              let digit = next - 32 /* Encode.Start */;
              if (digit >= 46 /* Encode.Base */) {
                  digit -= 46 /* Encode.Base */;
                  stop = true;
              }
              value += digit;
              if (stop)
                  break;
              value *= 46 /* Encode.Base */;
          }
          if (array)
              array[out++] = value;
          else
              array = new Type(value);
      }
      return array;
  }

  class CachedToken {
      constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
      }
  }
  const nullToken = new CachedToken;
  /**
  [Tokenizers](#lr.ExternalTokenizer) interact with the input
  through this interface. It presents the input as a stream of
  characters, tracking lookahead and hiding the complexity of
  [ranges](#common.Parser.parse^ranges) from tokenizer code.
  */
  class InputStream {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      input, 
      /**
      @internal
      */
      ranges) {
          this.input = input;
          this.ranges = ranges;
          /**
          @internal
          */
          this.chunk = "";
          /**
          @internal
          */
          this.chunkOff = 0;
          /**
          Backup chunk
          */
          this.chunk2 = "";
          this.chunk2Pos = 0;
          /**
          The character code of the next code unit in the input, or -1
          when the stream is at the end of the input.
          */
          this.next = -1;
          /**
          @internal
          */
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
      }
      /**
      @internal
      */
      resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
              if (!index)
                  return null;
              let next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1)
                  return null;
              let next = this.ranges[++index];
              pos += next.from - range.to;
              range = next;
          }
          return pos;
      }
      /**
      @internal
      */
      clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
              return pos;
          for (let range of this.ranges)
              if (range.to > pos)
                  return Math.max(pos, range.from);
          return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
      peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
          }
          else {
              let resolved = this.resolveOffset(offset, 1);
              if (resolved == null)
                  return -1;
              pos = resolved;
              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                  result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              }
              else {
                  let i = this.rangeIndex, range = this.range;
                  while (range.to <= pos)
                      range = this.ranges[++i];
                  this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                  if (pos + this.chunk2.length > range.to)
                      this.chunk2 = this.chunk2.slice(0, range.to - pos);
                  result = this.chunk2.charCodeAt(0);
              }
          }
          if (pos >= this.token.lookAhead)
              this.token.lookAhead = pos + 1;
          return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
      acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
              throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
      }
      /**
      Accept a token ending at a specific given position.
      */
      acceptTokenTo(token, endPos) {
          this.token.value = token;
          this.token.end = endPos;
      }
      getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              let { chunk, chunkPos } = this;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
          }
          else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              let nextChunk = this.input.chunk(this.pos);
              let end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
          }
      }
      readNext() {
          if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length)
                  return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
      advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1)
                  return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
              this.token.lookAhead = this.pos + 1;
          return this.readNext();
      }
      setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
      }
      /**
      @internal
      */
      reset(pos, token) {
          if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
          }
          else {
              this.token = nullToken;
          }
          if (this.pos != pos) {
              this.pos = pos;
              if (pos == this.end) {
                  this.setDone();
                  return this;
              }
              while (pos < this.range.from)
                  this.range = this.ranges[--this.rangeIndex];
              while (pos >= this.range.to)
                  this.range = this.ranges[++this.rangeIndex];
              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                  this.chunkOff = pos - this.chunkPos;
              }
              else {
                  this.chunk = "";
                  this.chunkOff = 0;
              }
              this.readNext();
          }
          return this;
      }
      /**
      @internal
      */
      read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
          if (from >= this.range.from && to <= this.range.to)
              return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
              if (r.from >= to)
                  break;
              if (r.to > from)
                  result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
      }
  }
  /**
  @internal
  */
  class TokenGroup {
      constructor(data, id) {
          this.data = data;
          this.id = id;
      }
      token(input, stack) {
          let { parser } = stack.p;
          readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
      }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group, precTable, precOffset) {
      let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
      scan: for (;;) {
          if ((groupMask & data[state]) == 0)
              break;
          let accEnd = data[state + 1];
          // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens
          for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                  let term = data[i];
                  if (dialect.allows(term) &&
                      (input.token.value == -1 || input.token.value == term ||
                          overrides(term, input.token.value, precTable, precOffset))) {
                      input.acceptToken(term);
                      break;
                  }
              }
          let next = input.next, low = 0, high = data[state + 2];
          // Special case for EOF
          if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
              state = data[accEnd + high * 3 - 1];
              continue scan;
          }
          // Do a binary search on the state's edges
          for (; low < high;) {
              let mid = (low + high) >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1] || 0x10000;
              if (next < from)
                  high = mid;
              else if (next >= to)
                  low = mid + 1;
              else {
                  state = data[index + 2];
                  input.advance();
                  continue scan;
              }
          }
          break;
      }
  }
  function findOffset(data, start, term) {
      for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
          if (next == term)
              return i - start;
      return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
      let iPrev = findOffset(tableData, tableOffset, prev);
      return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }

  // Environment variable used to control console output
  const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  let stackIDs = null;
  function cutAt(tree, pos, side) {
      let cursor = tree.cursor(IterMode.IncludeAnonymous);
      cursor.moveTo(pos);
      for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
              for (;;) {
                  if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                      return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                          : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                  if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                      break;
                  if (!cursor.parent())
                      return side < 0 ? 0 : tree.length;
              }
      }
  }
  class FragmentCursor {
      constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
      }
      nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
              while (this.trees.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
              }
              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
          }
          else {
              this.nextStart = 1e9;
          }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
          if (pos < this.nextStart)
              return null;
          while (this.fragment && this.safeTo <= pos)
              this.nextFragment();
          if (!this.fragment)
              return null;
          for (;;) {
              let last = this.trees.length - 1;
              if (last < 0) { // End of tree
                  this.nextFragment();
                  return null;
              }
              let top = this.trees[last], index = this.index[last];
              if (index == top.children.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
                  continue;
              }
              let next = top.children[index];
              let start = this.start[last] + top.positions[index];
              if (start > pos) {
                  this.nextStart = start;
                  return null;
              }
              if (next instanceof Tree) {
                  if (start == pos) {
                      if (start < this.safeFrom)
                          return null;
                      let end = start + next.length;
                      if (end <= this.safeTo) {
                          let lookAhead = next.prop(NodeProp.lookAhead);
                          if (!lookAhead || end + lookAhead < this.fragment.to)
                              return next;
                      }
                  }
                  this.index[last]++;
                  if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                      this.trees.push(next);
                      this.start.push(start);
                      this.index.push(0);
                  }
              }
              else {
                  this.index[last]++;
                  this.nextStart = start + next.length;
              }
          }
      }
  }
  class TokenCache {
      constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(_ => new CachedToken);
      }
      getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
              if (((1 << i) & mask) == 0)
                  continue;
              let tokenizer = tokenizers[i], token = this.tokens[i];
              if (main && !tokenizer.fallback)
                  continue;
              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                  this.updateCachedToken(token, tokenizer, stack);
                  token.mask = mask;
                  token.context = context;
              }
              if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                  lookAhead = Math.max(token.lookAhead, lookAhead);
              if (token.value != 0 /* Term.Err */) {
                  let startIndex = actionIndex;
                  if (token.extended > -1)
                      actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                  actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                  if (!tokenizer.extend) {
                      main = token;
                      if (actionIndex > startIndex)
                          break;
                  }
              }
          }
          while (this.actions.length > actionIndex)
              this.actions.pop();
          if (lookAhead)
              stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
              main = new CachedToken;
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
      }
      getMainToken(stack) {
          if (this.mainToken)
              return this.mainToken;
          let main = new CachedToken, { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
          return main;
      }
      updateCachedToken(token, tokenizer, stack) {
          let start = this.stream.clipPos(stack.pos);
          tokenizer.token(this.stream.reset(start, token), stack);
          if (token.value > -1) {
              let { parser } = stack.p;
              for (let i = 0; i < parser.specialized.length; i++)
                  if (parser.specialized[i] == token.value) {
                      let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                      if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                          if ((result & 1) == 0 /* Specialize.Specialize */)
                              token.value = result >> 1;
                          else
                              token.extended = result >> 1;
                          break;
                      }
                  }
          }
          else {
              token.value = 0 /* Term.Err */;
              token.end = this.stream.clipPos(start + 1);
          }
      }
      putAction(action, token, end, index) {
          // Don't add duplicate actions
          for (let i = 0; i < index; i += 3)
              if (this.actions[i] == action)
                  return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
      }
      addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
              for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                  if (data[i] == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */) {
                          i = pair(data, i + 2);
                      }
                      else {
                          if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                              index = this.putAction(pair(data, i + 2), token, end, index);
                          break;
                      }
                  }
                  if (data[i] == token)
                      index = this.putAction(pair(data, i + 1), token, end, index);
              }
          }
          return index;
      }
  }
  class Parse {
      constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.lastBigReductionStart = -1;
          this.lastBigReductionSize = 0;
          this.bigReductionCount = 0;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
              ? new FragmentCursor(fragments, parser.nodeSet) : null;
      }
      get parsedPos() {
          return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          // This will hold stacks beyond `pos`.
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          // If a large amount of reductions happened with the same start
          // position, force the stack out of that production in order to
          // avoid creating a tree too deep to recurse through.
          // (This is an ugly kludge, because unfortunately there is no
          // straightforward, cheap way to check for this happening, due to
          // the history of reductions only being available in an
          // expensive-to-access format in the stack buffers.)
          if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
              let [s] = stacks;
              while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
              this.bigReductionCount = this.lastBigReductionSize = 0;
          }
          // Keep advancing any stacks at `pos` until they either move
          // forward or can't be advanced. Gather stacks that can't be
          // advanced further in `stopped`.
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i];
              for (;;) {
                  this.tokens.mainToken = null;
                  if (stack.pos > pos) {
                      newStacks.push(stack);
                  }
                  else if (this.advanceStack(stack, newStacks, stacks)) {
                      continue;
                  }
                  else {
                      if (!stopped) {
                          stopped = [];
                          stoppedTokens = [];
                      }
                      stopped.push(stack);
                      let tok = this.tokens.getMainToken(stack);
                      stoppedTokens.push(tok.value, tok.end);
                  }
                  break;
              }
          }
          if (!newStacks.length) {
              let finished = stopped && findFinished(stopped);
              if (finished) {
                  if (verbose)
                      console.log("Finish with " + this.stackID(finished));
                  return this.stackToTree(finished);
              }
              if (this.parser.strict) {
                  if (verbose && stopped)
                      console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                  throw new SyntaxError("No parse at " + pos);
              }
              if (!this.recovering)
                  this.recovering = 5 /* Rec.Distance */;
          }
          if (this.recovering && stopped) {
              let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                  : this.runRecovery(stopped, stoppedTokens, newStacks);
              if (finished) {
                  if (verbose)
                      console.log("Force-finish " + this.stackID(finished));
                  return this.stackToTree(finished.forceAll());
              }
          }
          if (this.recovering) {
              let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
              if (newStacks.length > maxRemaining) {
                  newStacks.sort((a, b) => b.score - a.score);
                  while (newStacks.length > maxRemaining)
                      newStacks.pop();
              }
              if (newStacks.some(s => s.reducePos > pos))
                  this.recovering--;
          }
          else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (let i = 0; i < newStacks.length - 1; i++) {
                  let stack = newStacks[i];
                  for (let j = i + 1; j < newStacks.length; j++) {
                      let other = newStacks[j];
                      if (stack.sameState(other) ||
                          stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                          if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                              newStacks.splice(j--, 1);
                          }
                          else {
                              newStacks.splice(i--, 1);
                              continue outer;
                          }
                      }
                  }
              }
              if (newStacks.length > 12 /* Rec.MaxStackCount */)
                  newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
              if (newStacks[i].pos < this.minStackPos)
                  this.minStackPos = newStacks[i].pos;
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
              return stack.forceReduce() ? stack : null;
          if (this.fragments) {
              let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
              for (let cached = this.fragments.nodeAt(start); cached;) {
                  let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                  if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                      stack.useNode(cached, match);
                      if (verbose)
                          console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                      return true;
                  }
                  if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                      break;
                  let inner = cached.children[0];
                  if (inner instanceof Tree && cached.positions[0] == 0)
                      cached = inner;
                  else
                      break;
              }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
          if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose)
                  console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
              return true;
          }
          if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
              while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length;) {
              let action = actions[i++], term = actions[i++], end = actions[i++];
              let last = i == actions.length || !split;
              let localStack = last ? stack : stack.split();
              let main = this.tokens.mainToken;
              localStack.apply(action, term, main ? main.start : localStack.pos, end);
              if (verbose)
                  console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
              if (last)
                  return true;
              else if (localStack.pos > start)
                  stacks.push(localStack);
              else
                  split.push(localStack);
          }
          return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (;;) {
              if (!this.advanceStack(stack, null, null))
                  return false;
              if (stack.pos > pos) {
                  pushStackDedup(stack, newStacks);
                  return true;
              }
          }
      }
      runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
              let base = verbose ? this.stackID(stack) + " -> " : "";
              if (stack.deadEnd) {
                  if (restarted)
                      continue;
                  restarted = true;
                  stack.restart();
                  if (verbose)
                      console.log(base + this.stackID(stack) + " (restarted)");
                  let done = this.advanceFully(stack, newStacks);
                  if (done)
                      continue;
              }
              let force = stack.split(), forceBase = base;
              for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                  if (verbose)
                      console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                  let done = this.advanceFully(force, newStacks);
                  if (done)
                      break;
                  if (verbose)
                      forceBase = this.stackID(force) + " -> ";
              }
              for (let insert of stack.recoverByInsert(token)) {
                  if (verbose)
                      console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
              }
              if (this.stream.end > stack.pos) {
                  if (tokenEnd == stack.pos) {
                      tokenEnd++;
                      token = 0 /* Term.Err */;
                  }
                  stack.recoverByDelete(token, tokenEnd);
                  if (verbose)
                      console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                  pushStackDedup(stack, newStacks);
              }
              else if (!finished || finished.score < stack.score) {
                  finished = stack;
              }
          }
          return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
          stack.close();
          return Tree.build({ buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm });
      }
      stackID(stack) {
          let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
          if (!id)
              stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
          return id + stack;
      }
  }
  function pushStackDedup(stack, newStacks) {
      for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
              if (newStacks[i].score < stack.score)
                  newStacks[i] = stack;
              return;
          }
      }
      newStacks.push(stack);
  }
  class Dialect {
      constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
      }
      allows(term) { return !this.disabled || this.disabled[term] == 0; }
  }
  /**
  Holds the parse tables for a given grammar, as generated by
  `lezer-generator`, and provides [methods](#common.Parser) to parse
  content with.
  */
  class LRParser extends Parser$2 {
      /**
      @internal
      */
      constructor(spec) {
          super();
          /**
          @internal
          */
          this.wrappers = [];
          if (spec.version != 14 /* File.Version */)
              throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
              nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
              nodeProps.push([]);
          function setProp(nodeID, prop, value) {
              nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
              for (let propSpec of spec.nodeProps) {
                  let prop = propSpec[0];
                  if (typeof prop == "string")
                      prop = NodeProp[prop];
                  for (let i = 1; i < propSpec.length;) {
                      let next = propSpec[i++];
                      if (next >= 0) {
                          setProp(next, prop, propSpec[i++]);
                      }
                      else {
                          let value = propSpec[i + -next];
                          for (let j = -next; j > 0; j--)
                              setProp(propSpec[i++], prop, value);
                          i++;
                      }
                  }
              }
          this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
              name: i >= this.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
              this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
              this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Get a goto table entry @internal
      */
      getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
              return -1;
          for (let pos = table[term + 1];;) {
              let groupTag = table[pos++], last = groupTag & 1;
              let target = table[pos++];
              if (last && loose)
                  return target;
              for (let end = pos + (groupTag >> 1); pos < end; pos++)
                  if (table[pos] == state)
                      return target;
              if (last)
                  return -1;
          }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
      hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
              for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                  if ((next = data[i]) == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */)
                          next = data[i = pair(data, i + 2)];
                      else if (data[i + 1] == 2 /* Seq.Other */)
                          return pair(data, i + 2);
                      else
                          break;
                  }
                  if (next == terminal || next == 0 /* Term.Err */)
                      return pair(data, i + 1);
              }
          }
          return 0;
      }
      /**
      @internal
      */
      stateSlot(state, slot) {
          return this.states[(state * 6 /* ParseState.Size */) + slot];
      }
      /**
      @internal
      */
      stateFlag(state, flag) {
          return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
      }
      /**
      @internal
      */
      validAction(state, action) {
          return !!this.allActions(state, a => a == action ? true : null);
      }
      /**
      @internal
      */
      allActions(state, action) {
          let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
          let result = deflt ? action(deflt) : undefined;
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              result = action(pair(this.data, i + 1));
          }
          return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
      nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                  let value = this.data[i + 1];
                  if (!result.some((v, i) => (i & 1) && v == value))
                      result.push(this.data[i], value);
              }
          }
          return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
      configure(config) {
          // Hideous reflection-based kludge to make it easy to create a
          // slightly modified copy of a parser.
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
              copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
              let info = this.topRules[config.top];
              if (!info)
                  throw new RangeError(`Invalid top rule name ${config.top}`);
              copy.top = info;
          }
          if (config.tokenizers)
              copy.tokenizers = this.tokenizers.map(t => {
                  let found = config.tokenizers.find(r => r.from == t);
                  return found ? found.to : t;
              });
          if (config.specializers) {
              copy.specializers = this.specializers.slice();
              copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                  let found = config.specializers.find(r => r.from == s.external);
                  if (!found)
                      return s;
                  let spec = Object.assign(Object.assign({}, s), { external: found.to });
                  copy.specializers[i] = getSpecializer(spec);
                  return spec;
              });
          }
          if (config.contextTracker)
              copy.context = config.contextTracker;
          if (config.dialect)
              copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
              copy.strict = config.strict;
          if (config.wrap)
              copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
              copy.bufferLength = config.bufferLength;
          return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
      hasWrappers() {
          return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
      getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
      get eofTerm() { return this.maxNode + 1; }
      /**
      The type of top node produced by the parser.
      */
      get topNode() { return this.nodeSet.types[this.top[1]]; }
      /**
      @internal
      */
      dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
      }
      /**
      @internal
      */
      parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
              for (let part of dialect.split(" ")) {
                  let id = values.indexOf(part);
                  if (id >= 0)
                      flags[id] = true;
              }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
              if (!flags[i]) {
                  for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                      (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
              }
          return new Dialect(dialect, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
      static deserialize(spec) {
          return new LRParser(spec);
      }
  }
  function pair(data, off) { return data[off] | (data[off + 1] << 16); }
  function findFinished(stacks) {
      let best = null;
      for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
              stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
              (!best || best.score < stack.score))
              best = stack;
      }
      return best;
  }
  function getSpecializer(spec) {
      if (spec.external) {
          let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
          return (value, stack) => (spec.external(value, stack) << 1) | mask;
      }
      return spec.get;
  }

  const jsonHighlighting = styleTags({
    String: tags.string,
    Number: tags.number,
    "True False": tags.bool,
    PropertyName: tags.propertyName,
    Null: tags.null,
    ", :": tags.separator,
    "[ ]": tags.squareBracket,
    "{ }": tags.brace
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const parser = LRParser.deserialize({
    version: 14,
    states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#ClOOQO'#Cr'#CrQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CtOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59W,59WO!iQPO,59WOVQPO,59QOqQPO'#CmO!nQPO,59`OOQO1G.k1G.kOVQPO'#CnO!vQPO,59aOOQO1G.r1G.rOOQO1G.l1G.lOOQO,59X,59XOOQO-E6k-E6kOOQO,59Y,59YOOQO-E6l-E6l",
    stateData: "#O~OeOS~OQSORSOSSOTSOWQO_ROgPO~OVXOgUO~O^[O~PVO[^O~O]_OVhX~OVaO~O]bO^iX~O^dO~O]_OVha~O]bO^ia~O",
    goto: "!kjPPPPPPkPPkqwPPPPk{!RPPP!XP!e!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
    nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName : , ] [ Array",
    maxTerm: 25,
    nodeProps: [
      ["isolate", -2,6,11,""],
      ["openedBy", 7,"{",14,"["],
      ["closedBy", 8,"}",15,"]"]
    ],
    propSources: [jsonHighlighting],
    skippedNodes: [0],
    repeatNodeCount: 2,
    tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oe~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Og~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zO]~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yO[~~'OO_~~'TO^~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
    tokenizers: [0],
    topRules: {"JsonText":[0,1]},
    tokenPrec: 0
  });

  /**
  Calls
  [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
  on the document and, if that throws an error, reports it as a
  single diagnostic.
  */
  const jsonParseLinter = () => (view) => {
      try {
          JSON.parse(view.state.doc.toString());
      }
      catch (e) {
          if (!(e instanceof SyntaxError))
              throw e;
          const pos = getErrorPosition(e, view.state.doc);
          return [{
                  from: pos,
                  message: e.message,
                  severity: 'error',
                  to: pos
              }];
      }
      return [];
  };
  function getErrorPosition(error, doc) {
      let m;
      if (m = error.message.match(/at position (\d+)/))
          return Math.min(+m[1], doc.length);
      if (m = error.message.match(/at line (\d+) column (\d+)/))
          return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
      return 0;
  }

  /**
  A language provider that provides JSON parsing.
  */
  const jsonLanguage = /*@__PURE__*/LRLanguage.define({
      name: "json",
      parser: /*@__PURE__*/parser.configure({
          props: [
              /*@__PURE__*/indentNodeProp.add({
                  Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                  Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
              }),
              /*@__PURE__*/foldNodeProp.add({
                  "Object Array": foldInside
              })
          ]
      }),
      languageData: {
          closeBrackets: { brackets: ["[", "{", '"'] },
          indentOnInput: /^\s*[\}\]]$/
      }
  });
  /**
  JSON language support.
  */
  function json() {
      return new LanguageSupport(jsonLanguage);
  }

  var parse$2 = {};

  var hasRequiredParse;

  function requireParse () {
  	if (hasRequiredParse) return parse$2;
  	hasRequiredParse = 1;
  	(function (exports) {
  		Object.defineProperty(exports, "__esModule", { value: true });
  		exports.parse = exports.enableErrorLogging = exports.disableErrorLogging = exports.setErrorLogger = void 0;
  		let logError = console.error;
  		// for testing (spy/mock)
  		function setErrorLogger(logger) {
  		    logError = logger;
  		}
  		exports.setErrorLogger = setErrorLogger;
  		function disableErrorLogging() {
  		    logError = () => {
  		        /* do not output to console */
  		    };
  		}
  		exports.disableErrorLogging = disableErrorLogging;
  		function enableErrorLogging() {
  		    logError = console.error;
  		}
  		exports.enableErrorLogging = enableErrorLogging;
  		function parse(s) {
  		    if (s === undefined) {
  		        return undefined;
  		    }
  		    if (s === null) {
  		        return null;
  		    }
  		    if (s === '') {
  		        return '';
  		    }
  		    // remove incomplete escaped characters at the end of the string
  		    s = s.replace(/\\+$/, match => match.length % 2 === 0 ? match : match.slice(0, -1));
  		    try {
  		        return JSON.parse(s);
  		    }
  		    catch (e) {
  		        const [data, reminding] = s.trimLeft()[0] === ':'
  		            ? parseAny(s, e)
  		            : parseAny(s, e, parseStringWithoutQuote);
  		        parse.lastParseReminding = reminding;
  		        if (parse.onExtraToken && reminding.length > 0) {
  		            const trimmedReminding = reminding.trimRight();
  		            parse.lastParseReminding = trimmedReminding;
  		            if (trimmedReminding.length > 0) {
  		                parse.onExtraToken(s, data, trimmedReminding);
  		            }
  		        }
  		        return data;
  		    }
  		}
  		exports.parse = parse;
  		(function (parse) {
  		    parse.onExtraToken = (text, data, reminding) => {
  		        logError('parsed json with extra tokens:', {
  		            text,
  		            data,
  		            reminding,
  		        });
  		    };
  		})(parse = exports.parse || (exports.parse = {}));
  		function parseAny(s, e, fallback) {
  		    const parser = parsers[s[0]] || fallback;
  		    if (!parser) {
  		        logError(`no parser registered for ${JSON.stringify(s[0])}:`, { s });
  		        throw e;
  		    }
  		    return parser(s, e);
  		}
  		function parseStringCasual(s, e, delimiters) {
  		    if (s[0] === '"') {
  		        return parseString(s);
  		    }
  		    if (s[0] === "'") {
  		        return parseSingleQuoteString(s);
  		    }
  		    return parseStringWithoutQuote(s, e, delimiters);
  		}
  		const parsers = {};
  		function skipSpace(s) {
  		    return s.trimLeft();
  		}
  		parsers[' '] = parseSpace;
  		parsers['\r'] = parseSpace;
  		parsers['\n'] = parseSpace;
  		parsers['\t'] = parseSpace;
  		function parseSpace(s, e) {
  		    s = skipSpace(s);
  		    return parseAny(s, e);
  		}
  		parsers['['] = parseArray;
  		function parseArray(s, e) {
  		    s = s.substr(1); // skip starting '['
  		    const acc = [];
  		    s = skipSpace(s);
  		    for (; s.length > 0;) {
  		        if (s[0] === ']') {
  		            s = s.substr(1); // skip ending ']'
  		            break;
  		        }
  		        const res = parseAny(s, e, (s, e) => parseStringWithoutQuote(s, e, [',', ']']));
  		        acc.push(res[0]);
  		        s = res[1];
  		        s = skipSpace(s);
  		        if (s[0] === ',') {
  		            s = s.substring(1);
  		            s = skipSpace(s);
  		        }
  		    }
  		    return [acc, s];
  		}
  		for (const c of '0123456789.-'.slice()) {
  		    parsers[c] = parseNumber;
  		}
  		function parseNumber(s) {
  		    for (let i = 0; i < s.length; i++) {
  		        const c = s[i];
  		        if (parsers[c] === parseNumber) {
  		            continue;
  		        }
  		        const num = s.substring(0, i);
  		        s = s.substring(i);
  		        return [numToStr(num), s];
  		    }
  		    return [numToStr(s), ''];
  		}
  		function numToStr(s) {
  		    if (s === '-') {
  		        return -0;
  		    }
  		    const num = +s;
  		    if (Number.isNaN(num)) {
  		        return s;
  		    }
  		    return num;
  		}
  		parsers['"'] = parseString;
  		function parseString(s) {
  		    for (let i = 1; i < s.length; i++) {
  		        const c = s[i];
  		        if (c === '\\') {
  		            i++;
  		            continue;
  		        }
  		        if (c === '"') {
  		            const str = fixEscapedCharacters(s.substring(0, i + 1));
  		            s = s.substring(i + 1);
  		            return [JSON.parse(str), s];
  		        }
  		    }
  		    return [JSON.parse(fixEscapedCharacters(s) + '"'), ''];
  		}
  		function fixEscapedCharacters(s) {
  		    return s.replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(/\r/g, '\\r');
  		}
  		parsers["'"] = parseSingleQuoteString;
  		function parseSingleQuoteString(s) {
  		    for (let i = 1; i < s.length; i++) {
  		        const c = s[i];
  		        if (c === '\\') {
  		            i++;
  		            continue;
  		        }
  		        if (c === "'") {
  		            const str = fixEscapedCharacters(s.substring(0, i + 1));
  		            s = s.substring(i + 1);
  		            return [JSON.parse('"' + str.slice(1, -1) + '"'), s];
  		        }
  		    }
  		    return [JSON.parse('"' + fixEscapedCharacters(s.slice(1)) + '"'), ''];
  		}
  		function parseStringWithoutQuote(s, e, delimiters = [' ']) {
  		    const index = Math.min(...delimiters.map(delimiter => {
  		        const index = s.indexOf(delimiter);
  		        return index === -1 ? s.length : index;
  		    }));
  		    const value = s.substring(0, index).trim();
  		    const rest = s.substring(index);
  		    return [value, rest];
  		}
  		parsers['{'] = parseObject;
  		function parseObject(s, e) {
  		    s = s.substr(1); // skip starting '{'
  		    const acc = {};
  		    s = skipSpace(s);
  		    for (; s.length > 0;) {
  		        if (s[0] === '}') {
  		            s = s.substr(1); // skip ending '}'
  		            break;
  		        }
  		        const keyRes = parseStringCasual(s, e, [':', '}']);
  		        const key = keyRes[0];
  		        s = keyRes[1];
  		        s = skipSpace(s);
  		        if (s[0] !== ':') {
  		            acc[key] = undefined;
  		            break;
  		        }
  		        s = s.substr(1); // skip ':'
  		        s = skipSpace(s);
  		        if (s.length === 0) {
  		            acc[key] = undefined;
  		            break;
  		        }
  		        const valueRes = parseAny(s, e);
  		        acc[key] = valueRes[0];
  		        s = valueRes[1];
  		        s = skipSpace(s);
  		        if (s[0] === ',') {
  		            s = s.substr(1);
  		            s = skipSpace(s);
  		        }
  		    }
  		    return [acc, s];
  		}
  		parsers['t'] = parseTrue;
  		function parseTrue(s, e) {
  		    return parseToken(s, `true`, true, e);
  		}
  		parsers['f'] = parseFalse;
  		function parseFalse(s, e) {
  		    return parseToken(s, `false`, false, e);
  		}
  		parsers['n'] = parseNull;
  		function parseNull(s, e) {
  		    return parseToken(s, `null`, null, e);
  		}
  		function parseToken(s, tokenStr, tokenVal, e) {
  		    for (let i = tokenStr.length; i >= 1; i--) {
  		        if (s.startsWith(tokenStr.slice(0, i))) {
  		            return [tokenVal, s.slice(i)];
  		        }
  		    }
  		    /* istanbul ignore next */
  		    {
  		        const prefix = JSON.stringify(s.slice(0, tokenStr.length));
  		        logError(`unknown token starting with ${prefix}:`, { s });
  		        throw e;
  		    }
  		}
  		
  	} (parse$2));
  	return parse$2;
  }

  var parseExports = requireParse();

  /**
   * Return parsed data and json pointers for a given codemirror EditorState
   * @group Utilities
   */
  function parseJSONDocumentState(state) {
      let data = null;
      try {
          data = JSON.parse(state.doc.toString());
          // return pointers regardless of whether JSON.parse succeeds
      }
      catch (_a) {
          try {
              data = parseExports.parse(state.doc.toString());
          }
          catch (_b) { }
      }
      const pointers = getJsonPointers(state, MODES.JSON);
      return { data, pointers };
  }

  // This is a generated file. Do not edit.
  var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
  var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;

  var unicode = {
  	Space_Separator: Space_Separator,
  	ID_Start: ID_Start,
  	ID_Continue: ID_Continue
  };

  var util = {
      isSpaceSeparator (c) {
          return typeof c === 'string' && unicode.Space_Separator.test(c)
      },

      isIdStartChar (c) {
          return typeof c === 'string' && (
              (c >= 'a' && c <= 'z') ||
          (c >= 'A' && c <= 'Z') ||
          (c === '$') || (c === '_') ||
          unicode.ID_Start.test(c)
          )
      },

      isIdContinueChar (c) {
          return typeof c === 'string' && (
              (c >= 'a' && c <= 'z') ||
          (c >= 'A' && c <= 'Z') ||
          (c >= '0' && c <= '9') ||
          (c === '$') || (c === '_') ||
          (c === '\u200C') || (c === '\u200D') ||
          unicode.ID_Continue.test(c)
          )
      },

      isDigit (c) {
          return typeof c === 'string' && /[0-9]/.test(c)
      },

      isHexDigit (c) {
          return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)
      },
  };

  let source;
  let parseState;
  let stack;
  let pos;
  let line;
  let column;
  let token;
  let key;
  let root;

  var parse$1 = function parse (text, reviver) {
      source = String(text);
      parseState = 'start';
      stack = [];
      pos = 0;
      line = 1;
      column = 0;
      token = undefined;
      key = undefined;
      root = undefined;

      do {
          token = lex();

          // This code is unreachable.
          // if (!parseStates[parseState]) {
          //     throw invalidParseState()
          // }

          parseStates[parseState]();
      } while (token.type !== 'eof')

      if (typeof reviver === 'function') {
          return internalize({'': root}, '', reviver)
      }

      return root
  };

  function internalize (holder, name, reviver) {
      const value = holder[name];
      if (value != null && typeof value === 'object') {
          if (Array.isArray(value)) {
              for (let i = 0; i < value.length; i++) {
                  const key = String(i);
                  const replacement = internalize(value, key, reviver);
                  if (replacement === undefined) {
                      delete value[key];
                  } else {
                      Object.defineProperty(value, key, {
                          value: replacement,
                          writable: true,
                          enumerable: true,
                          configurable: true,
                      });
                  }
              }
          } else {
              for (const key in value) {
                  const replacement = internalize(value, key, reviver);
                  if (replacement === undefined) {
                      delete value[key];
                  } else {
                      Object.defineProperty(value, key, {
                          value: replacement,
                          writable: true,
                          enumerable: true,
                          configurable: true,
                      });
                  }
              }
          }
      }

      return reviver.call(holder, name, value)
  }

  let lexState;
  let buffer;
  let doubleQuote;
  let sign;
  let c;

  function lex () {
      lexState = 'default';
      buffer = '';
      doubleQuote = false;
      sign = 1;

      for (;;) {
          c = peek();

          // This code is unreachable.
          // if (!lexStates[lexState]) {
          //     throw invalidLexState(lexState)
          // }

          const token = lexStates[lexState]();
          if (token) {
              return token
          }
      }
  }

  function peek () {
      if (source[pos]) {
          return String.fromCodePoint(source.codePointAt(pos))
      }
  }

  function read () {
      const c = peek();

      if (c === '\n') {
          line++;
          column = 0;
      } else if (c) {
          column += c.length;
      } else {
          column++;
      }

      if (c) {
          pos += c.length;
      }

      return c
  }

  const lexStates = {
      default () {
          switch (c) {
          case '\t':
          case '\v':
          case '\f':
          case ' ':
          case '\u00A0':
          case '\uFEFF':
          case '\n':
          case '\r':
          case '\u2028':
          case '\u2029':
              read();
              return

          case '/':
              read();
              lexState = 'comment';
              return

          case undefined:
              read();
              return newToken('eof')
          }

          if (util.isSpaceSeparator(c)) {
              read();
              return
          }

          // This code is unreachable.
          // if (!lexStates[parseState]) {
          //     throw invalidLexState(parseState)
          // }

          return lexStates[parseState]()
      },

      comment () {
          switch (c) {
          case '*':
              read();
              lexState = 'multiLineComment';
              return

          case '/':
              read();
              lexState = 'singleLineComment';
              return
          }

          throw invalidChar(read())
      },

      multiLineComment () {
          switch (c) {
          case '*':
              read();
              lexState = 'multiLineCommentAsterisk';
              return

          case undefined:
              throw invalidChar(read())
          }

          read();
      },

      multiLineCommentAsterisk () {
          switch (c) {
          case '*':
              read();
              return

          case '/':
              read();
              lexState = 'default';
              return

          case undefined:
              throw invalidChar(read())
          }

          read();
          lexState = 'multiLineComment';
      },

      singleLineComment () {
          switch (c) {
          case '\n':
          case '\r':
          case '\u2028':
          case '\u2029':
              read();
              lexState = 'default';
              return

          case undefined:
              read();
              return newToken('eof')
          }

          read();
      },

      value () {
          switch (c) {
          case '{':
          case '[':
              return newToken('punctuator', read())

          case 'n':
              read();
              literal('ull');
              return newToken('null', null)

          case 't':
              read();
              literal('rue');
              return newToken('boolean', true)

          case 'f':
              read();
              literal('alse');
              return newToken('boolean', false)

          case '-':
          case '+':
              if (read() === '-') {
                  sign = -1;
              }

              lexState = 'sign';
              return

          case '.':
              buffer = read();
              lexState = 'decimalPointLeading';
              return

          case '0':
              buffer = read();
              lexState = 'zero';
              return

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
              buffer = read();
              lexState = 'decimalInteger';
              return

          case 'I':
              read();
              literal('nfinity');
              return newToken('numeric', Infinity)

          case 'N':
              read();
              literal('aN');
              return newToken('numeric', NaN)

          case '"':
          case "'":
              doubleQuote = (read() === '"');
              buffer = '';
              lexState = 'string';
              return
          }

          throw invalidChar(read())
      },

      identifierNameStartEscape () {
          if (c !== 'u') {
              throw invalidChar(read())
          }

          read();
          const u = unicodeEscape();
          switch (u) {
          case '$':
          case '_':
              break

          default:
              if (!util.isIdStartChar(u)) {
                  throw invalidIdentifier()
              }

              break
          }

          buffer += u;
          lexState = 'identifierName';
      },

      identifierName () {
          switch (c) {
          case '$':
          case '_':
          case '\u200C':
          case '\u200D':
              buffer += read();
              return

          case '\\':
              read();
              lexState = 'identifierNameEscape';
              return
          }

          if (util.isIdContinueChar(c)) {
              buffer += read();
              return
          }

          return newToken('identifier', buffer)
      },

      identifierNameEscape () {
          if (c !== 'u') {
              throw invalidChar(read())
          }

          read();
          const u = unicodeEscape();
          switch (u) {
          case '$':
          case '_':
          case '\u200C':
          case '\u200D':
              break

          default:
              if (!util.isIdContinueChar(u)) {
                  throw invalidIdentifier()
              }

              break
          }

          buffer += u;
          lexState = 'identifierName';
      },

      sign () {
          switch (c) {
          case '.':
              buffer = read();
              lexState = 'decimalPointLeading';
              return

          case '0':
              buffer = read();
              lexState = 'zero';
              return

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
              buffer = read();
              lexState = 'decimalInteger';
              return

          case 'I':
              read();
              literal('nfinity');
              return newToken('numeric', sign * Infinity)

          case 'N':
              read();
              literal('aN');
              return newToken('numeric', NaN)
          }

          throw invalidChar(read())
      },

      zero () {
          switch (c) {
          case '.':
              buffer += read();
              lexState = 'decimalPoint';
              return

          case 'e':
          case 'E':
              buffer += read();
              lexState = 'decimalExponent';
              return

          case 'x':
          case 'X':
              buffer += read();
              lexState = 'hexadecimal';
              return
          }

          return newToken('numeric', sign * 0)
      },

      decimalInteger () {
          switch (c) {
          case '.':
              buffer += read();
              lexState = 'decimalPoint';
              return

          case 'e':
          case 'E':
              buffer += read();
              lexState = 'decimalExponent';
              return
          }

          if (util.isDigit(c)) {
              buffer += read();
              return
          }

          return newToken('numeric', sign * Number(buffer))
      },

      decimalPointLeading () {
          if (util.isDigit(c)) {
              buffer += read();
              lexState = 'decimalFraction';
              return
          }

          throw invalidChar(read())
      },

      decimalPoint () {
          switch (c) {
          case 'e':
          case 'E':
              buffer += read();
              lexState = 'decimalExponent';
              return
          }

          if (util.isDigit(c)) {
              buffer += read();
              lexState = 'decimalFraction';
              return
          }

          return newToken('numeric', sign * Number(buffer))
      },

      decimalFraction () {
          switch (c) {
          case 'e':
          case 'E':
              buffer += read();
              lexState = 'decimalExponent';
              return
          }

          if (util.isDigit(c)) {
              buffer += read();
              return
          }

          return newToken('numeric', sign * Number(buffer))
      },

      decimalExponent () {
          switch (c) {
          case '+':
          case '-':
              buffer += read();
              lexState = 'decimalExponentSign';
              return
          }

          if (util.isDigit(c)) {
              buffer += read();
              lexState = 'decimalExponentInteger';
              return
          }

          throw invalidChar(read())
      },

      decimalExponentSign () {
          if (util.isDigit(c)) {
              buffer += read();
              lexState = 'decimalExponentInteger';
              return
          }

          throw invalidChar(read())
      },

      decimalExponentInteger () {
          if (util.isDigit(c)) {
              buffer += read();
              return
          }

          return newToken('numeric', sign * Number(buffer))
      },

      hexadecimal () {
          if (util.isHexDigit(c)) {
              buffer += read();
              lexState = 'hexadecimalInteger';
              return
          }

          throw invalidChar(read())
      },

      hexadecimalInteger () {
          if (util.isHexDigit(c)) {
              buffer += read();
              return
          }

          return newToken('numeric', sign * Number(buffer))
      },

      string () {
          switch (c) {
          case '\\':
              read();
              buffer += escape();
              return

          case '"':
              if (doubleQuote) {
                  read();
                  return newToken('string', buffer)
              }

              buffer += read();
              return

          case "'":
              if (!doubleQuote) {
                  read();
                  return newToken('string', buffer)
              }

              buffer += read();
              return

          case '\n':
          case '\r':
              throw invalidChar(read())

          case '\u2028':
          case '\u2029':
              separatorChar(c);
              break

          case undefined:
              throw invalidChar(read())
          }

          buffer += read();
      },

      start () {
          switch (c) {
          case '{':
          case '[':
              return newToken('punctuator', read())

          // This code is unreachable since the default lexState handles eof.
          // case undefined:
          //     return newToken('eof')
          }

          lexState = 'value';
      },

      beforePropertyName () {
          switch (c) {
          case '$':
          case '_':
              buffer = read();
              lexState = 'identifierName';
              return

          case '\\':
              read();
              lexState = 'identifierNameStartEscape';
              return

          case '}':
              return newToken('punctuator', read())

          case '"':
          case "'":
              doubleQuote = (read() === '"');
              lexState = 'string';
              return
          }

          if (util.isIdStartChar(c)) {
              buffer += read();
              lexState = 'identifierName';
              return
          }

          throw invalidChar(read())
      },

      afterPropertyName () {
          if (c === ':') {
              return newToken('punctuator', read())
          }

          throw invalidChar(read())
      },

      beforePropertyValue () {
          lexState = 'value';
      },

      afterPropertyValue () {
          switch (c) {
          case ',':
          case '}':
              return newToken('punctuator', read())
          }

          throw invalidChar(read())
      },

      beforeArrayValue () {
          if (c === ']') {
              return newToken('punctuator', read())
          }

          lexState = 'value';
      },

      afterArrayValue () {
          switch (c) {
          case ',':
          case ']':
              return newToken('punctuator', read())
          }

          throw invalidChar(read())
      },

      end () {
          // This code is unreachable since it's handled by the default lexState.
          // if (c === undefined) {
          //     read()
          //     return newToken('eof')
          // }

          throw invalidChar(read())
      },
  };

  function newToken (type, value) {
      return {
          type,
          value,
          line,
          column,
      }
  }

  function literal (s) {
      for (const c of s) {
          const p = peek();

          if (p !== c) {
              throw invalidChar(read())
          }

          read();
      }
  }

  function escape () {
      const c = peek();
      switch (c) {
      case 'b':
          read();
          return '\b'

      case 'f':
          read();
          return '\f'

      case 'n':
          read();
          return '\n'

      case 'r':
          read();
          return '\r'

      case 't':
          read();
          return '\t'

      case 'v':
          read();
          return '\v'

      case '0':
          read();
          if (util.isDigit(peek())) {
              throw invalidChar(read())
          }

          return '\0'

      case 'x':
          read();
          return hexEscape()

      case 'u':
          read();
          return unicodeEscape()

      case '\n':
      case '\u2028':
      case '\u2029':
          read();
          return ''

      case '\r':
          read();
          if (peek() === '\n') {
              read();
          }

          return ''

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
          throw invalidChar(read())

      case undefined:
          throw invalidChar(read())
      }

      return read()
  }

  function hexEscape () {
      let buffer = '';
      let c = peek();

      if (!util.isHexDigit(c)) {
          throw invalidChar(read())
      }

      buffer += read();

      c = peek();
      if (!util.isHexDigit(c)) {
          throw invalidChar(read())
      }

      buffer += read();

      return String.fromCodePoint(parseInt(buffer, 16))
  }

  function unicodeEscape () {
      let buffer = '';
      let count = 4;

      while (count-- > 0) {
          const c = peek();
          if (!util.isHexDigit(c)) {
              throw invalidChar(read())
          }

          buffer += read();
      }

      return String.fromCodePoint(parseInt(buffer, 16))
  }

  const parseStates = {
      start () {
          if (token.type === 'eof') {
              throw invalidEOF()
          }

          push();
      },

      beforePropertyName () {
          switch (token.type) {
          case 'identifier':
          case 'string':
              key = token.value;
              parseState = 'afterPropertyName';
              return

          case 'punctuator':
              // This code is unreachable since it's handled by the lexState.
              // if (token.value !== '}') {
              //     throw invalidToken()
              // }

              pop();
              return

          case 'eof':
              throw invalidEOF()
          }

          // This code is unreachable since it's handled by the lexState.
          // throw invalidToken()
      },

      afterPropertyName () {
          // This code is unreachable since it's handled by the lexState.
          // if (token.type !== 'punctuator' || token.value !== ':') {
          //     throw invalidToken()
          // }

          if (token.type === 'eof') {
              throw invalidEOF()
          }

          parseState = 'beforePropertyValue';
      },

      beforePropertyValue () {
          if (token.type === 'eof') {
              throw invalidEOF()
          }

          push();
      },

      beforeArrayValue () {
          if (token.type === 'eof') {
              throw invalidEOF()
          }

          if (token.type === 'punctuator' && token.value === ']') {
              pop();
              return
          }

          push();
      },

      afterPropertyValue () {
          // This code is unreachable since it's handled by the lexState.
          // if (token.type !== 'punctuator') {
          //     throw invalidToken()
          // }

          if (token.type === 'eof') {
              throw invalidEOF()
          }

          switch (token.value) {
          case ',':
              parseState = 'beforePropertyName';
              return

          case '}':
              pop();
          }

          // This code is unreachable since it's handled by the lexState.
          // throw invalidToken()
      },

      afterArrayValue () {
          // This code is unreachable since it's handled by the lexState.
          // if (token.type !== 'punctuator') {
          //     throw invalidToken()
          // }

          if (token.type === 'eof') {
              throw invalidEOF()
          }

          switch (token.value) {
          case ',':
              parseState = 'beforeArrayValue';
              return

          case ']':
              pop();
          }

          // This code is unreachable since it's handled by the lexState.
          // throw invalidToken()
      },

      end () {
          // This code is unreachable since it's handled by the lexState.
          // if (token.type !== 'eof') {
          //     throw invalidToken()
          // }
      },
  };

  function push () {
      let value;

      switch (token.type) {
      case 'punctuator':
          switch (token.value) {
          case '{':
              value = {};
              break

          case '[':
              value = [];
              break
          }

          break

      case 'null':
      case 'boolean':
      case 'numeric':
      case 'string':
          value = token.value;
          break

      // This code is unreachable.
      // default:
      //     throw invalidToken()
      }

      if (root === undefined) {
          root = value;
      } else {
          const parent = stack[stack.length - 1];
          if (Array.isArray(parent)) {
              parent.push(value);
          } else {
              Object.defineProperty(parent, key, {
                  value,
                  writable: true,
                  enumerable: true,
                  configurable: true,
              });
          }
      }

      if (value !== null && typeof value === 'object') {
          stack.push(value);

          if (Array.isArray(value)) {
              parseState = 'beforeArrayValue';
          } else {
              parseState = 'beforePropertyName';
          }
      } else {
          const current = stack[stack.length - 1];
          if (current == null) {
              parseState = 'end';
          } else if (Array.isArray(current)) {
              parseState = 'afterArrayValue';
          } else {
              parseState = 'afterPropertyValue';
          }
      }
  }

  function pop () {
      stack.pop();

      const current = stack[stack.length - 1];
      if (current == null) {
          parseState = 'end';
      } else if (Array.isArray(current)) {
          parseState = 'afterArrayValue';
      } else {
          parseState = 'afterPropertyValue';
      }
  }

  // This code is unreachable.
  // function invalidParseState () {
  //     return new Error(`JSON5: invalid parse state '${parseState}'`)
  // }

  // This code is unreachable.
  // function invalidLexState (state) {
  //     return new Error(`JSON5: invalid lex state '${state}'`)
  // }

  function invalidChar (c) {
      if (c === undefined) {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
      }

      return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
  }

  function invalidEOF () {
      return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
  }

  // This code is unreachable.
  // function invalidToken () {
  //     if (token.type === 'eof') {
  //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
  //     }

  //     const c = String.fromCodePoint(token.value.codePointAt(0))
  //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
  // }

  function invalidIdentifier () {
      column -= 5;
      return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)
  }

  function separatorChar (c) {
      console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);
  }

  function formatChar (c) {
      const replacements = {
          "'": "\\'",
          '"': '\\"',
          '\\': '\\\\',
          '\b': '\\b',
          '\f': '\\f',
          '\n': '\\n',
          '\r': '\\r',
          '\t': '\\t',
          '\v': '\\v',
          '\0': '\\0',
          '\u2028': '\\u2028',
          '\u2029': '\\u2029',
      };

      if (replacements[c]) {
          return replacements[c]
      }

      if (c < ' ') {
          const hexString = c.charCodeAt(0).toString(16);
          return '\\x' + ('00' + hexString).substring(hexString.length)
      }

      return c
  }

  function syntaxError (message) {
      const err = new SyntaxError(message);
      err.lineNumber = line;
      err.columnNumber = column;
      return err
  }

  var stringify$3 = function stringify (value, replacer, space) {
      const stack = [];
      let indent = '';
      let propertyList;
      let replacerFunc;
      let gap = '';
      let quote;

      if (
          replacer != null &&
          typeof replacer === 'object' &&
          !Array.isArray(replacer)
      ) {
          space = replacer.space;
          quote = replacer.quote;
          replacer = replacer.replacer;
      }

      if (typeof replacer === 'function') {
          replacerFunc = replacer;
      } else if (Array.isArray(replacer)) {
          propertyList = [];
          for (const v of replacer) {
              let item;

              if (typeof v === 'string') {
                  item = v;
              } else if (
                  typeof v === 'number' ||
                  v instanceof String ||
                  v instanceof Number
              ) {
                  item = String(v);
              }

              if (item !== undefined && propertyList.indexOf(item) < 0) {
                  propertyList.push(item);
              }
          }
      }

      if (space instanceof Number) {
          space = Number(space);
      } else if (space instanceof String) {
          space = String(space);
      }

      if (typeof space === 'number') {
          if (space > 0) {
              space = Math.min(10, Math.floor(space));
              gap = '          '.substr(0, space);
          }
      } else if (typeof space === 'string') {
          gap = space.substr(0, 10);
      }

      return serializeProperty('', {'': value})

      function serializeProperty (key, holder) {
          let value = holder[key];
          if (value != null) {
              if (typeof value.toJSON5 === 'function') {
                  value = value.toJSON5(key);
              } else if (typeof value.toJSON === 'function') {
                  value = value.toJSON(key);
              }
          }

          if (replacerFunc) {
              value = replacerFunc.call(holder, key, value);
          }

          if (value instanceof Number) {
              value = Number(value);
          } else if (value instanceof String) {
              value = String(value);
          } else if (value instanceof Boolean) {
              value = value.valueOf();
          }

          switch (value) {
          case null: return 'null'
          case true: return 'true'
          case false: return 'false'
          }

          if (typeof value === 'string') {
              return quoteString(value)
          }

          if (typeof value === 'number') {
              return String(value)
          }

          if (typeof value === 'object') {
              return Array.isArray(value) ? serializeArray(value) : serializeObject(value)
          }

          return undefined
      }

      function quoteString (value) {
          const quotes = {
              "'": 0.1,
              '"': 0.2,
          };

          const replacements = {
              "'": "\\'",
              '"': '\\"',
              '\\': '\\\\',
              '\b': '\\b',
              '\f': '\\f',
              '\n': '\\n',
              '\r': '\\r',
              '\t': '\\t',
              '\v': '\\v',
              '\0': '\\0',
              '\u2028': '\\u2028',
              '\u2029': '\\u2029',
          };

          let product = '';

          for (let i = 0; i < value.length; i++) {
              const c = value[i];
              switch (c) {
              case "'":
              case '"':
                  quotes[c]++;
                  product += c;
                  continue

              case '\0':
                  if (util.isDigit(value[i + 1])) {
                      product += '\\x00';
                      continue
                  }
              }

              if (replacements[c]) {
                  product += replacements[c];
                  continue
              }

              if (c < ' ') {
                  let hexString = c.charCodeAt(0).toString(16);
                  product += '\\x' + ('00' + hexString).substring(hexString.length);
                  continue
              }

              product += c;
          }

          const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b);

          product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);

          return quoteChar + product + quoteChar
      }

      function serializeObject (value) {
          if (stack.indexOf(value) >= 0) {
              throw TypeError('Converting circular structure to JSON5')
          }

          stack.push(value);

          let stepback = indent;
          indent = indent + gap;

          let keys = propertyList || Object.keys(value);
          let partial = [];
          for (const key of keys) {
              const propertyString = serializeProperty(key, value);
              if (propertyString !== undefined) {
                  let member = serializeKey(key) + ':';
                  if (gap !== '') {
                      member += ' ';
                  }
                  member += propertyString;
                  partial.push(member);
              }
          }

          let final;
          if (partial.length === 0) {
              final = '{}';
          } else {
              let properties;
              if (gap === '') {
                  properties = partial.join(',');
                  final = '{' + properties + '}';
              } else {
                  let separator = ',\n' + indent;
                  properties = partial.join(separator);
                  final = '{\n' + indent + properties + ',\n' + stepback + '}';
              }
          }

          stack.pop();
          indent = stepback;
          return final
      }

      function serializeKey (key) {
          if (key.length === 0) {
              return quoteString(key)
          }

          const firstChar = String.fromCodePoint(key.codePointAt(0));
          if (!util.isIdStartChar(firstChar)) {
              return quoteString(key)
          }

          for (let i = firstChar.length; i < key.length; i++) {
              if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
                  return quoteString(key)
              }
          }

          return key
      }

      function serializeArray (value) {
          if (stack.indexOf(value) >= 0) {
              throw TypeError('Converting circular structure to JSON5')
          }

          stack.push(value);

          let stepback = indent;
          indent = indent + gap;

          let partial = [];
          for (let i = 0; i < value.length; i++) {
              const propertyString = serializeProperty(String(i), value);
              partial.push((propertyString !== undefined) ? propertyString : 'null');
          }

          let final;
          if (partial.length === 0) {
              final = '[]';
          } else {
              if (gap === '') {
                  let properties = partial.join(',');
                  final = '[' + properties + ']';
              } else {
                  let separator = ',\n' + indent;
                  let properties = partial.join(separator);
                  final = '[\n' + indent + properties + ',\n' + stepback + ']';
              }
          }

          stack.pop();
          indent = stepback;
          return final
      }
  };

  const JSON5 = {
      parse: parse$1,
      stringify: stringify$3,
  };

  var lib = JSON5;

  /**
   * Mimics the behavior of `json-source-map`'s `parseJSONDocument` function using codemirror EditorState... for json5
   */
  /**
   * Return parsed data and json5 pointers for a given codemirror EditorState
   * @group Utilities
   */
  function parseJSON5DocumentState(state) {
      const stateDoc = state.doc.toString();
      let data = null;
      try {
          data = lib.parse(stateDoc);
      }
      catch (_a) {
          // try again with best-effort strategy
          try {
              data = parseExports.parse(stateDoc);
          }
          catch (_b) {
              // return pointers regardless of whether JSON.parse succeeds
          }
      }
      const pointers = getJsonPointers(state, MODES.JSON5);
      return { data, pointers };
  }

  const ALIAS = Symbol.for('yaml.alias');
  const DOC = Symbol.for('yaml.document');
  const MAP = Symbol.for('yaml.map');
  const PAIR = Symbol.for('yaml.pair');
  const SCALAR$1 = Symbol.for('yaml.scalar');
  const SEQ = Symbol.for('yaml.seq');
  const NODE_TYPE = Symbol.for('yaml.node.type');
  const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;
  const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;
  const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;
  const isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;
  const isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;
  const isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;
  function isCollection$1(node) {
      if (node && typeof node === 'object')
          switch (node[NODE_TYPE]) {
              case MAP:
              case SEQ:
                  return true;
          }
      return false;
  }
  function isNode(node) {
      if (node && typeof node === 'object')
          switch (node[NODE_TYPE]) {
              case ALIAS:
              case MAP:
              case SCALAR$1:
              case SEQ:
                  return true;
          }
      return false;
  }
  const hasAnchor = (node) => (isScalar$1(node) || isCollection$1(node)) && !!node.anchor;

  const BREAK$1 = Symbol('break visit');
  const SKIP$1 = Symbol('skip children');
  const REMOVE$1 = Symbol('remove node');
  /**
   * Apply a visitor to an AST node or document.
   *
   * Walks through the tree (depth-first) starting from `node`, calling a
   * `visitor` function with three arguments:
   *   - `key`: For sequence values and map `Pair`, the node's index in the
   *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
   *     `null` for the root node.
   *   - `node`: The current node.
   *   - `path`: The ancestry of the current node.
   *
   * The return value of the visitor may be used to control the traversal:
   *   - `undefined` (default): Do nothing and continue
   *   - `visit.SKIP`: Do not visit the children of this node, continue with next
   *     sibling
   *   - `visit.BREAK`: Terminate traversal completely
   *   - `visit.REMOVE`: Remove the current node, then continue with the next one
   *   - `Node`: Replace the current node, then continue by visiting it
   *   - `number`: While iterating the items of a sequence or map, set the index
   *     of the next step. This is useful especially if the index of the current
   *     node has changed.
   *
   * If `visitor` is a single function, it will be called with all values
   * encountered in the tree, including e.g. `null` values. Alternatively,
   * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
   * `Alias` and `Scalar` node. To define the same visitor function for more than
   * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
   * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
   * specific defined one will be used for each node.
   */
  function visit$1(node, visitor) {
      const visitor_ = initVisitor(visitor);
      if (isDocument(node)) {
          const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
          if (cd === REMOVE$1)
              node.contents = null;
      }
      else
          visit_(null, node, visitor_, Object.freeze([]));
  }
  // Without the `as symbol` casts, TS declares these in the `visit`
  // namespace using `var`, but then complains about that because
  // `unique symbol` must be `const`.
  /** Terminate visit traversal completely */
  visit$1.BREAK = BREAK$1;
  /** Do not visit the children of the current node */
  visit$1.SKIP = SKIP$1;
  /** Remove the current node */
  visit$1.REMOVE = REMOVE$1;
  function visit_(key, node, visitor, path) {
      const ctrl = callVisitor(key, node, visitor, path);
      if (isNode(ctrl) || isPair(ctrl)) {
          replaceNode(key, path, ctrl);
          return visit_(key, ctrl, visitor, path);
      }
      if (typeof ctrl !== 'symbol') {
          if (isCollection$1(node)) {
              path = Object.freeze(path.concat(node));
              for (let i = 0; i < node.items.length; ++i) {
                  const ci = visit_(i, node.items[i], visitor, path);
                  if (typeof ci === 'number')
                      i = ci - 1;
                  else if (ci === BREAK$1)
                      return BREAK$1;
                  else if (ci === REMOVE$1) {
                      node.items.splice(i, 1);
                      i -= 1;
                  }
              }
          }
          else if (isPair(node)) {
              path = Object.freeze(path.concat(node));
              const ck = visit_('key', node.key, visitor, path);
              if (ck === BREAK$1)
                  return BREAK$1;
              else if (ck === REMOVE$1)
                  node.key = null;
              const cv = visit_('value', node.value, visitor, path);
              if (cv === BREAK$1)
                  return BREAK$1;
              else if (cv === REMOVE$1)
                  node.value = null;
          }
      }
      return ctrl;
  }
  /**
   * Apply an async visitor to an AST node or document.
   *
   * Walks through the tree (depth-first) starting from `node`, calling a
   * `visitor` function with three arguments:
   *   - `key`: For sequence values and map `Pair`, the node's index in the
   *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.
   *     `null` for the root node.
   *   - `node`: The current node.
   *   - `path`: The ancestry of the current node.
   *
   * The return value of the visitor may be used to control the traversal:
   *   - `Promise`: Must resolve to one of the following values
   *   - `undefined` (default): Do nothing and continue
   *   - `visit.SKIP`: Do not visit the children of this node, continue with next
   *     sibling
   *   - `visit.BREAK`: Terminate traversal completely
   *   - `visit.REMOVE`: Remove the current node, then continue with the next one
   *   - `Node`: Replace the current node, then continue by visiting it
   *   - `number`: While iterating the items of a sequence or map, set the index
   *     of the next step. This is useful especially if the index of the current
   *     node has changed.
   *
   * If `visitor` is a single function, it will be called with all values
   * encountered in the tree, including e.g. `null` values. Alternatively,
   * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,
   * `Alias` and `Scalar` node. To define the same visitor function for more than
   * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)
   * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most
   * specific defined one will be used for each node.
   */
  async function visitAsync(node, visitor) {
      const visitor_ = initVisitor(visitor);
      if (isDocument(node)) {
          const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
          if (cd === REMOVE$1)
              node.contents = null;
      }
      else
          await visitAsync_(null, node, visitor_, Object.freeze([]));
  }
  // Without the `as symbol` casts, TS declares these in the `visit`
  // namespace using `var`, but then complains about that because
  // `unique symbol` must be `const`.
  /** Terminate visit traversal completely */
  visitAsync.BREAK = BREAK$1;
  /** Do not visit the children of the current node */
  visitAsync.SKIP = SKIP$1;
  /** Remove the current node */
  visitAsync.REMOVE = REMOVE$1;
  async function visitAsync_(key, node, visitor, path) {
      const ctrl = await callVisitor(key, node, visitor, path);
      if (isNode(ctrl) || isPair(ctrl)) {
          replaceNode(key, path, ctrl);
          return visitAsync_(key, ctrl, visitor, path);
      }
      if (typeof ctrl !== 'symbol') {
          if (isCollection$1(node)) {
              path = Object.freeze(path.concat(node));
              for (let i = 0; i < node.items.length; ++i) {
                  const ci = await visitAsync_(i, node.items[i], visitor, path);
                  if (typeof ci === 'number')
                      i = ci - 1;
                  else if (ci === BREAK$1)
                      return BREAK$1;
                  else if (ci === REMOVE$1) {
                      node.items.splice(i, 1);
                      i -= 1;
                  }
              }
          }
          else if (isPair(node)) {
              path = Object.freeze(path.concat(node));
              const ck = await visitAsync_('key', node.key, visitor, path);
              if (ck === BREAK$1)
                  return BREAK$1;
              else if (ck === REMOVE$1)
                  node.key = null;
              const cv = await visitAsync_('value', node.value, visitor, path);
              if (cv === BREAK$1)
                  return BREAK$1;
              else if (cv === REMOVE$1)
                  node.value = null;
          }
      }
      return ctrl;
  }
  function initVisitor(visitor) {
      if (typeof visitor === 'object' &&
          (visitor.Collection || visitor.Node || visitor.Value)) {
          return Object.assign({
              Alias: visitor.Node,
              Map: visitor.Node,
              Scalar: visitor.Node,
              Seq: visitor.Node
          }, visitor.Value && {
              Map: visitor.Value,
              Scalar: visitor.Value,
              Seq: visitor.Value
          }, visitor.Collection && {
              Map: visitor.Collection,
              Seq: visitor.Collection
          }, visitor);
      }
      return visitor;
  }
  function callVisitor(key, node, visitor, path) {
      if (typeof visitor === 'function')
          return visitor(key, node, path);
      if (isMap(node))
          return visitor.Map?.(key, node, path);
      if (isSeq(node))
          return visitor.Seq?.(key, node, path);
      if (isPair(node))
          return visitor.Pair?.(key, node, path);
      if (isScalar$1(node))
          return visitor.Scalar?.(key, node, path);
      if (isAlias(node))
          return visitor.Alias?.(key, node, path);
      return undefined;
  }
  function replaceNode(key, path, node) {
      const parent = path[path.length - 1];
      if (isCollection$1(parent)) {
          parent.items[key] = node;
      }
      else if (isPair(parent)) {
          if (key === 'key')
              parent.key = node;
          else
              parent.value = node;
      }
      else if (isDocument(parent)) {
          parent.contents = node;
      }
      else {
          const pt = isAlias(parent) ? 'alias' : 'scalar';
          throw new Error(`Cannot replace node with ${pt} parent`);
      }
  }

  const escapeChars = {
      '!': '%21',
      ',': '%2C',
      '[': '%5B',
      ']': '%5D',
      '{': '%7B',
      '}': '%7D'
  };
  const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);
  class Directives {
      constructor(yaml, tags) {
          /**
           * The directives-end/doc-start marker `---`. If `null`, a marker may still be
           * included in the document's stringified representation.
           */
          this.docStart = null;
          /** The doc-end marker `...`.  */
          this.docEnd = false;
          this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
          this.tags = Object.assign({}, Directives.defaultTags, tags);
      }
      clone() {
          const copy = new Directives(this.yaml, this.tags);
          copy.docStart = this.docStart;
          return copy;
      }
      /**
       * During parsing, get a Directives instance for the current document and
       * update the stream state according to the current version's spec.
       */
      atDocument() {
          const res = new Directives(this.yaml, this.tags);
          switch (this.yaml.version) {
              case '1.1':
                  this.atNextDocument = true;
                  break;
              case '1.2':
                  this.atNextDocument = false;
                  this.yaml = {
                      explicit: Directives.defaultYaml.explicit,
                      version: '1.2'
                  };
                  this.tags = Object.assign({}, Directives.defaultTags);
                  break;
          }
          return res;
      }
      /**
       * @param onError - May be called even if the action was successful
       * @returns `true` on success
       */
      add(line, onError) {
          if (this.atNextDocument) {
              this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };
              this.tags = Object.assign({}, Directives.defaultTags);
              this.atNextDocument = false;
          }
          const parts = line.trim().split(/[ \t]+/);
          const name = parts.shift();
          switch (name) {
              case '%TAG': {
                  if (parts.length !== 2) {
                      onError(0, '%TAG directive should contain exactly two parts');
                      if (parts.length < 2)
                          return false;
                  }
                  const [handle, prefix] = parts;
                  this.tags[handle] = prefix;
                  return true;
              }
              case '%YAML': {
                  this.yaml.explicit = true;
                  if (parts.length !== 1) {
                      onError(0, '%YAML directive should contain exactly one part');
                      return false;
                  }
                  const [version] = parts;
                  if (version === '1.1' || version === '1.2') {
                      this.yaml.version = version;
                      return true;
                  }
                  else {
                      const isValid = /^\d+\.\d+$/.test(version);
                      onError(6, `Unsupported YAML version ${version}`, isValid);
                      return false;
                  }
              }
              default:
                  onError(0, `Unknown directive ${name}`, true);
                  return false;
          }
      }
      /**
       * Resolves a tag, matching handles to those defined in %TAG directives.
       *
       * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
       *   `'!local'` tag, or `null` if unresolvable.
       */
      tagName(source, onError) {
          if (source === '!')
              return '!'; // non-specific tag
          if (source[0] !== '!') {
              onError(`Not a valid tag: ${source}`);
              return null;
          }
          if (source[1] === '<') {
              const verbatim = source.slice(2, -1);
              if (verbatim === '!' || verbatim === '!!') {
                  onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                  return null;
              }
              if (source[source.length - 1] !== '>')
                  onError('Verbatim tags must end with a >');
              return verbatim;
          }
          const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);
          if (!suffix)
              onError(`The ${source} tag has no suffix`);
          const prefix = this.tags[handle];
          if (prefix) {
              try {
                  return prefix + decodeURIComponent(suffix);
              }
              catch (error) {
                  onError(String(error));
                  return null;
              }
          }
          if (handle === '!')
              return source; // local tag
          onError(`Could not resolve tag: ${source}`);
          return null;
      }
      /**
       * Given a fully resolved tag, returns its printable string form,
       * taking into account current tag prefixes and defaults.
       */
      tagString(tag) {
          for (const [handle, prefix] of Object.entries(this.tags)) {
              if (tag.startsWith(prefix))
                  return handle + escapeTagName(tag.substring(prefix.length));
          }
          return tag[0] === '!' ? tag : `!<${tag}>`;
      }
      toString(doc) {
          const lines = this.yaml.explicit
              ? [`%YAML ${this.yaml.version || '1.2'}`]
              : [];
          const tagEntries = Object.entries(this.tags);
          let tagNames;
          if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
              const tags = {};
              visit$1(doc.contents, (_key, node) => {
                  if (isNode(node) && node.tag)
                      tags[node.tag] = true;
              });
              tagNames = Object.keys(tags);
          }
          else
              tagNames = [];
          for (const [handle, prefix] of tagEntries) {
              if (handle === '!!' && prefix === 'tag:yaml.org,2002:')
                  continue;
              if (!doc || tagNames.some(tn => tn.startsWith(prefix)))
                  lines.push(`%TAG ${handle} ${prefix}`);
          }
          return lines.join('\n');
      }
  }
  Directives.defaultYaml = { explicit: false, version: '1.2' };
  Directives.defaultTags = { '!!': 'tag:yaml.org,2002:' };

  /**
   * Verify that the input string is a valid anchor.
   *
   * Will throw on errors.
   */
  function anchorIsValid(anchor) {
      if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
          const sa = JSON.stringify(anchor);
          const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
          throw new Error(msg);
      }
      return true;
  }
  function anchorNames(root) {
      const anchors = new Set();
      visit$1(root, {
          Value(_key, node) {
              if (node.anchor)
                  anchors.add(node.anchor);
          }
      });
      return anchors;
  }
  /** Find a new anchor name with the given `prefix` and a one-indexed suffix. */
  function findNewAnchor(prefix, exclude) {
      for (let i = 1; true; ++i) {
          const name = `${prefix}${i}`;
          if (!exclude.has(name))
              return name;
      }
  }
  function createNodeAnchors(doc, prefix) {
      const aliasObjects = [];
      const sourceObjects = new Map();
      let prevAnchors = null;
      return {
          onAnchor: (source) => {
              aliasObjects.push(source);
              prevAnchors ?? (prevAnchors = anchorNames(doc));
              const anchor = findNewAnchor(prefix, prevAnchors);
              prevAnchors.add(anchor);
              return anchor;
          },
          /**
           * With circular references, the source node is only resolved after all
           * of its child nodes are. This is why anchors are set only after all of
           * the nodes have been created.
           */
          setAnchors: () => {
              for (const source of aliasObjects) {
                  const ref = sourceObjects.get(source);
                  if (typeof ref === 'object' &&
                      ref.anchor &&
                      (isScalar$1(ref.node) || isCollection$1(ref.node))) {
                      ref.node.anchor = ref.anchor;
                  }
                  else {
                      const error = new Error('Failed to resolve repeated object (this should not happen)');
                      error.source = source;
                      throw error;
                  }
              }
          },
          sourceObjects
      };
  }

  /**
   * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,
   * in section 24.5.1.1 "Runtime Semantics: InternalizeJSONProperty" of the
   * 2021 edition: https://tc39.es/ecma262/#sec-json.parse
   *
   * Includes extensions for handling Map and Set objects.
   */
  function applyReviver(reviver, obj, key, val) {
      if (val && typeof val === 'object') {
          if (Array.isArray(val)) {
              for (let i = 0, len = val.length; i < len; ++i) {
                  const v0 = val[i];
                  const v1 = applyReviver(reviver, val, String(i), v0);
                  // eslint-disable-next-line @typescript-eslint/no-array-delete
                  if (v1 === undefined)
                      delete val[i];
                  else if (v1 !== v0)
                      val[i] = v1;
              }
          }
          else if (val instanceof Map) {
              for (const k of Array.from(val.keys())) {
                  const v0 = val.get(k);
                  const v1 = applyReviver(reviver, val, k, v0);
                  if (v1 === undefined)
                      val.delete(k);
                  else if (v1 !== v0)
                      val.set(k, v1);
              }
          }
          else if (val instanceof Set) {
              for (const v0 of Array.from(val)) {
                  const v1 = applyReviver(reviver, val, v0, v0);
                  if (v1 === undefined)
                      val.delete(v0);
                  else if (v1 !== v0) {
                      val.delete(v0);
                      val.add(v1);
                  }
              }
          }
          else {
              for (const [k, v0] of Object.entries(val)) {
                  const v1 = applyReviver(reviver, val, k, v0);
                  if (v1 === undefined)
                      delete val[k];
                  else if (v1 !== v0)
                      val[k] = v1;
              }
          }
      }
      return reviver.call(obj, key, val);
  }

  /**
   * Recursively convert any node or its contents to native JavaScript
   *
   * @param value - The input value
   * @param arg - If `value` defines a `toJSON()` method, use this
   *   as its first argument
   * @param ctx - Conversion context, originally set in Document#toJS(). If
   *   `{ keep: true }` is not set, output should be suitable for JSON
   *   stringification.
   */
  function toJS(value, arg, ctx) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      if (Array.isArray(value))
          return value.map((v, i) => toJS(v, String(i), ctx));
      if (value && typeof value.toJSON === 'function') {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call
          if (!ctx || !hasAnchor(value))
              return value.toJSON(arg, ctx);
          const data = { aliasCount: 0, count: 1, res: undefined };
          ctx.anchors.set(value, data);
          ctx.onCreate = res => {
              data.res = res;
              delete ctx.onCreate;
          };
          const res = value.toJSON(arg, ctx);
          if (ctx.onCreate)
              ctx.onCreate(res);
          return res;
      }
      if (typeof value === 'bigint' && !ctx?.keep)
          return Number(value);
      return value;
  }

  class NodeBase {
      constructor(type) {
          Object.defineProperty(this, NODE_TYPE, { value: type });
      }
      /** Create a copy of this node.  */
      clone() {
          const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
          if (this.range)
              copy.range = this.range.slice();
          return copy;
      }
      /** A plain JavaScript representation of this node. */
      toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
          if (!isDocument(doc))
              throw new TypeError('A document argument is required');
          const ctx = {
              anchors: new Map(),
              doc,
              keep: true,
              mapAsMap: mapAsMap === true,
              mapKeyWarned: false,
              maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100
          };
          const res = toJS(this, '', ctx);
          if (typeof onAnchor === 'function')
              for (const { count, res } of ctx.anchors.values())
                  onAnchor(res, count);
          return typeof reviver === 'function'
              ? applyReviver(reviver, { '': res }, '', res)
              : res;
      }
  }

  class Alias extends NodeBase {
      constructor(source) {
          super(ALIAS);
          this.source = source;
          Object.defineProperty(this, 'tag', {
              set() {
                  throw new Error('Alias nodes cannot have tags');
              }
          });
      }
      /**
       * Resolve the value of this alias within `doc`, finding the last
       * instance of the `source` anchor before this node.
       */
      resolve(doc, ctx) {
          let nodes;
          if (ctx?.aliasResolveCache) {
              nodes = ctx.aliasResolveCache;
          }
          else {
              nodes = [];
              visit$1(doc, {
                  Node: (_key, node) => {
                      if (isAlias(node) || hasAnchor(node))
                          nodes.push(node);
                  }
              });
              if (ctx)
                  ctx.aliasResolveCache = nodes;
          }
          let found = undefined;
          for (const node of nodes) {
              if (node === this)
                  break;
              if (node.anchor === this.source)
                  found = node;
          }
          return found;
      }
      toJSON(_arg, ctx) {
          if (!ctx)
              return { source: this.source };
          const { anchors, doc, maxAliasCount } = ctx;
          const source = this.resolve(doc, ctx);
          if (!source) {
              const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
              throw new ReferenceError(msg);
          }
          let data = anchors.get(source);
          if (!data) {
              // Resolve anchors for Node.prototype.toJS()
              toJS(source, null, ctx);
              data = anchors.get(source);
          }
          /* istanbul ignore if */
          if (!data || data.res === undefined) {
              const msg = 'This should not happen: Alias anchor was not resolved?';
              throw new ReferenceError(msg);
          }
          if (maxAliasCount >= 0) {
              data.count += 1;
              if (data.aliasCount === 0)
                  data.aliasCount = getAliasCount(doc, source, anchors);
              if (data.count * data.aliasCount > maxAliasCount) {
                  const msg = 'Excessive alias count indicates a resource exhaustion attack';
                  throw new ReferenceError(msg);
              }
          }
          return data.res;
      }
      toString(ctx, _onComment, _onChompKeep) {
          const src = `*${this.source}`;
          if (ctx) {
              anchorIsValid(this.source);
              if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                  const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                  throw new Error(msg);
              }
              if (ctx.implicitKey)
                  return `${src} `;
          }
          return src;
      }
  }
  function getAliasCount(doc, node, anchors) {
      if (isAlias(node)) {
          const source = node.resolve(doc);
          const anchor = anchors && source && anchors.get(source);
          return anchor ? anchor.count * anchor.aliasCount : 0;
      }
      else if (isCollection$1(node)) {
          let count = 0;
          for (const item of node.items) {
              const c = getAliasCount(doc, item, anchors);
              if (c > count)
                  count = c;
          }
          return count;
      }
      else if (isPair(node)) {
          const kc = getAliasCount(doc, node.key, anchors);
          const vc = getAliasCount(doc, node.value, anchors);
          return Math.max(kc, vc);
      }
      return 1;
  }

  const isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');
  class Scalar extends NodeBase {
      constructor(value) {
          super(SCALAR$1);
          this.value = value;
      }
      toJSON(arg, ctx) {
          return ctx?.keep ? this.value : toJS(this.value, arg, ctx);
      }
      toString() {
          return String(this.value);
      }
  }
  Scalar.BLOCK_FOLDED = 'BLOCK_FOLDED';
  Scalar.BLOCK_LITERAL = 'BLOCK_LITERAL';
  Scalar.PLAIN = 'PLAIN';
  Scalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';
  Scalar.QUOTE_SINGLE = 'QUOTE_SINGLE';

  const defaultTagPrefix = 'tag:yaml.org,2002:';
  function findTagObject(value, tagName, tags) {
      if (tagName) {
          const match = tags.filter(t => t.tag === tagName);
          const tagObj = match.find(t => !t.format) ?? match[0];
          if (!tagObj)
              throw new Error(`Tag ${tagName} not found`);
          return tagObj;
      }
      return tags.find(t => t.identify?.(value) && !t.format);
  }
  function createNode(value, tagName, ctx) {
      if (isDocument(value))
          value = value.contents;
      if (isNode(value))
          return value;
      if (isPair(value)) {
          const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);
          map.items.push(value);
          return map;
      }
      if (value instanceof String ||
          value instanceof Number ||
          value instanceof Boolean ||
          (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere
      ) {
          // https://tc39.es/ecma262/#sec-serializejsonproperty
          value = value.valueOf();
      }
      const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
      // Detect duplicate references to the same object & use Alias nodes for all
      // after first. The `ref` wrapper allows for circular references to resolve.
      let ref = undefined;
      if (aliasDuplicateObjects && value && typeof value === 'object') {
          ref = sourceObjects.get(value);
          if (ref) {
              ref.anchor ?? (ref.anchor = onAnchor(value));
              return new Alias(ref.anchor);
          }
          else {
              ref = { anchor: null, node: null };
              sourceObjects.set(value, ref);
          }
      }
      if (tagName?.startsWith('!!'))
          tagName = defaultTagPrefix + tagName.slice(2);
      let tagObj = findTagObject(value, tagName, schema.tags);
      if (!tagObj) {
          if (value && typeof value.toJSON === 'function') {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-call
              value = value.toJSON();
          }
          if (!value || typeof value !== 'object') {
              const node = new Scalar(value);
              if (ref)
                  ref.node = node;
              return node;
          }
          tagObj =
              value instanceof Map
                  ? schema[MAP]
                  : Symbol.iterator in Object(value)
                      ? schema[SEQ]
                      : schema[MAP];
      }
      if (onTagObj) {
          onTagObj(tagObj);
          delete ctx.onTagObj;
      }
      const node = tagObj?.createNode
          ? tagObj.createNode(ctx.schema, value, ctx)
          : typeof tagObj?.nodeClass?.from === 'function'
              ? tagObj.nodeClass.from(ctx.schema, value, ctx)
              : new Scalar(value);
      if (tagName)
          node.tag = tagName;
      else if (!tagObj.default)
          node.tag = tagObj.tag;
      if (ref)
          ref.node = node;
      return node;
  }

  function collectionFromPath(schema, path, value) {
      let v = value;
      for (let i = path.length - 1; i >= 0; --i) {
          const k = path[i];
          if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {
              const a = [];
              a[k] = v;
              v = a;
          }
          else {
              v = new Map([[k, v]]);
          }
      }
      return createNode(v, undefined, {
          aliasDuplicateObjects: false,
          keepUndefined: false,
          onAnchor: () => {
              throw new Error('This should not happen, please report a bug.');
          },
          schema,
          sourceObjects: new Map()
      });
  }
  // Type guard is intentionally a little wrong so as to be more useful,
  // as it does not cover untypable empty non-string iterables (e.g. []).
  const isEmptyPath = (path) => path == null ||
      (typeof path === 'object' && !!path[Symbol.iterator]().next().done);
  class Collection extends NodeBase {
      constructor(type, schema) {
          super(type);
          Object.defineProperty(this, 'schema', {
              value: schema,
              configurable: true,
              enumerable: false,
              writable: true
          });
      }
      /**
       * Create a copy of this collection.
       *
       * @param schema - If defined, overwrites the original's schema
       */
      clone(schema) {
          const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
          if (schema)
              copy.schema = schema;
          copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);
          if (this.range)
              copy.range = this.range.slice();
          return copy;
      }
      /**
       * Adds a value to the collection. For `!!map` and `!!omap` the value must
       * be a Pair instance or a `{ key, value }` object, which may not have a key
       * that already exists in the map.
       */
      addIn(path, value) {
          if (isEmptyPath(path))
              this.add(value);
          else {
              const [key, ...rest] = path;
              const node = this.get(key, true);
              if (isCollection$1(node))
                  node.addIn(rest, value);
              else if (node === undefined && this.schema)
                  this.set(key, collectionFromPath(this.schema, rest, value));
              else
                  throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
          }
      }
      /**
       * Removes a value from the collection.
       * @returns `true` if the item was found and removed.
       */
      deleteIn(path) {
          const [key, ...rest] = path;
          if (rest.length === 0)
              return this.delete(key);
          const node = this.get(key, true);
          if (isCollection$1(node))
              return node.deleteIn(rest);
          else
              throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
      /**
       * Returns item at `key`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      getIn(path, keepScalar) {
          const [key, ...rest] = path;
          const node = this.get(key, true);
          if (rest.length === 0)
              return !keepScalar && isScalar$1(node) ? node.value : node;
          else
              return isCollection$1(node) ? node.getIn(rest, keepScalar) : undefined;
      }
      hasAllNullValues(allowScalar) {
          return this.items.every(node => {
              if (!isPair(node))
                  return false;
              const n = node.value;
              return (n == null ||
                  (allowScalar &&
                      isScalar$1(n) &&
                      n.value == null &&
                      !n.commentBefore &&
                      !n.comment &&
                      !n.tag));
          });
      }
      /**
       * Checks if the collection includes a value with the key `key`.
       */
      hasIn(path) {
          const [key, ...rest] = path;
          if (rest.length === 0)
              return this.has(key);
          const node = this.get(key, true);
          return isCollection$1(node) ? node.hasIn(rest) : false;
      }
      /**
       * Sets a value in this collection. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      setIn(path, value) {
          const [key, ...rest] = path;
          if (rest.length === 0) {
              this.set(key, value);
          }
          else {
              const node = this.get(key, true);
              if (isCollection$1(node))
                  node.setIn(rest, value);
              else if (node === undefined && this.schema)
                  this.set(key, collectionFromPath(this.schema, rest, value));
              else
                  throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
          }
      }
  }

  /**
   * Stringifies a comment.
   *
   * Empty comment lines are left empty,
   * lines consisting of a single space are replaced by `#`,
   * and all other lines are prefixed with a `#`.
   */
  const stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');
  function indentComment(comment, indent) {
      if (/^\n+$/.test(comment))
          return comment.substring(1);
      return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
  }
  const lineComment = (str, indent, comment) => str.endsWith('\n')
      ? indentComment(comment, indent)
      : comment.includes('\n')
          ? '\n' + indentComment(comment, indent)
          : (str.endsWith(' ') ? '' : ' ') + comment;

  const FOLD_FLOW = 'flow';
  const FOLD_BLOCK = 'block';
  const FOLD_QUOTED = 'quoted';
  /**
   * Tries to keep input at up to `lineWidth` characters, splitting only on spaces
   * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are
   * terminated with `\n` and started with `indent`.
   */
  function foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
      if (!lineWidth || lineWidth < 0)
          return text;
      if (lineWidth < minContentWidth)
          minContentWidth = 0;
      const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
      if (text.length <= endStep)
          return text;
      const folds = [];
      const escapedFolds = {};
      let end = lineWidth - indent.length;
      if (typeof indentAtStart === 'number') {
          if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
              folds.push(0);
          else
              end = lineWidth - indentAtStart;
      }
      let split = undefined;
      let prev = undefined;
      let overflow = false;
      let i = -1;
      let escStart = -1;
      let escEnd = -1;
      if (mode === FOLD_BLOCK) {
          i = consumeMoreIndentedLines(text, i, indent.length);
          if (i !== -1)
              end = i + endStep;
      }
      for (let ch; (ch = text[(i += 1)]);) {
          if (mode === FOLD_QUOTED && ch === '\\') {
              escStart = i;
              switch (text[i + 1]) {
                  case 'x':
                      i += 3;
                      break;
                  case 'u':
                      i += 5;
                      break;
                  case 'U':
                      i += 9;
                      break;
                  default:
                      i += 1;
              }
              escEnd = i;
          }
          if (ch === '\n') {
              if (mode === FOLD_BLOCK)
                  i = consumeMoreIndentedLines(text, i, indent.length);
              end = i + indent.length + endStep;
              split = undefined;
          }
          else {
              if (ch === ' ' &&
                  prev &&
                  prev !== ' ' &&
                  prev !== '\n' &&
                  prev !== '\t') {
                  // space surrounded by non-space can be replaced with newline + indent
                  const next = text[i + 1];
                  if (next && next !== ' ' && next !== '\n' && next !== '\t')
                      split = i;
              }
              if (i >= end) {
                  if (split) {
                      folds.push(split);
                      end = split + endStep;
                      split = undefined;
                  }
                  else if (mode === FOLD_QUOTED) {
                      // white-space collected at end may stretch past lineWidth
                      while (prev === ' ' || prev === '\t') {
                          prev = ch;
                          ch = text[(i += 1)];
                          overflow = true;
                      }
                      // Account for newline escape, but don't break preceding escape
                      const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                      // Bail out if lineWidth & minContentWidth are shorter than an escape string
                      if (escapedFolds[j])
                          return text;
                      folds.push(j);
                      escapedFolds[j] = true;
                      end = j + endStep;
                      split = undefined;
                  }
                  else {
                      overflow = true;
                  }
              }
          }
          prev = ch;
      }
      if (overflow && onOverflow)
          onOverflow();
      if (folds.length === 0)
          return text;
      if (onFold)
          onFold();
      let res = text.slice(0, folds[0]);
      for (let i = 0; i < folds.length; ++i) {
          const fold = folds[i];
          const end = folds[i + 1] || text.length;
          if (fold === 0)
              res = `\n${indent}${text.slice(0, end)}`;
          else {
              if (mode === FOLD_QUOTED && escapedFolds[fold])
                  res += `${text[fold]}\\`;
              res += `\n${indent}${text.slice(fold + 1, end)}`;
          }
      }
      return res;
  }
  /**
   * Presumes `i + 1` is at the start of a line
   * @returns index of last newline in more-indented block
   */
  function consumeMoreIndentedLines(text, i, indent) {
      let end = i;
      let start = i + 1;
      let ch = text[start];
      while (ch === ' ' || ch === '\t') {
          if (i < start + indent) {
              ch = text[++i];
          }
          else {
              do {
                  ch = text[++i];
              } while (ch && ch !== '\n');
              end = i;
              start = i + 1;
              ch = text[start];
          }
      }
      return end;
  }

  const getFoldOptions = (ctx, isBlock) => ({
      indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
      lineWidth: ctx.options.lineWidth,
      minContentWidth: ctx.options.minContentWidth
  });
  // Also checks for lines starting with %, as parsing the output as YAML 1.1 will
  // presume that's starting a new document.
  const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
  function lineLengthOverLimit(str, lineWidth, indentLength) {
      if (!lineWidth || lineWidth < 0)
          return false;
      const limit = lineWidth - indentLength;
      const strLen = str.length;
      if (strLen <= limit)
          return false;
      for (let i = 0, start = 0; i < strLen; ++i) {
          if (str[i] === '\n') {
              if (i - start > limit)
                  return true;
              start = i + 1;
              if (strLen - start <= limit)
                  return false;
          }
      }
      return true;
  }
  function doubleQuotedString(value, ctx) {
      const json = JSON.stringify(value);
      if (ctx.options.doubleQuotedAsJSON)
          return json;
      const { implicitKey } = ctx;
      const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
      const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
      let str = '';
      let start = 0;
      for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
          if (ch === ' ' && json[i + 1] === '\\' && json[i + 2] === 'n') {
              // space before newline needs to be escaped to not be folded
              str += json.slice(start, i) + '\\ ';
              i += 1;
              start = i;
              ch = '\\';
          }
          if (ch === '\\')
              switch (json[i + 1]) {
                  case 'u':
                      {
                          str += json.slice(start, i);
                          const code = json.substr(i + 2, 4);
                          switch (code) {
                              case '0000':
                                  str += '\\0';
                                  break;
                              case '0007':
                                  str += '\\a';
                                  break;
                              case '000b':
                                  str += '\\v';
                                  break;
                              case '001b':
                                  str += '\\e';
                                  break;
                              case '0085':
                                  str += '\\N';
                                  break;
                              case '00a0':
                                  str += '\\_';
                                  break;
                              case '2028':
                                  str += '\\L';
                                  break;
                              case '2029':
                                  str += '\\P';
                                  break;
                              default:
                                  if (code.substr(0, 2) === '00')
                                      str += '\\x' + code.substr(2);
                                  else
                                      str += json.substr(i, 6);
                          }
                          i += 5;
                          start = i + 1;
                      }
                      break;
                  case 'n':
                      if (implicitKey ||
                          json[i + 2] === '"' ||
                          json.length < minMultiLineLength) {
                          i += 1;
                      }
                      else {
                          // folding will eat first newline
                          str += json.slice(start, i) + '\n\n';
                          while (json[i + 2] === '\\' &&
                              json[i + 3] === 'n' &&
                              json[i + 4] !== '"') {
                              str += '\n';
                              i += 2;
                          }
                          str += indent;
                          // space after newline needs to be escaped to not be folded
                          if (json[i + 2] === ' ')
                              str += '\\';
                          i += 1;
                          start = i + 1;
                      }
                      break;
                  default:
                      i += 1;
              }
      }
      str = start ? str + json.slice(start) : json;
      return implicitKey
          ? str
          : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));
  }
  function singleQuotedString(value, ctx) {
      if (ctx.options.singleQuote === false ||
          (ctx.implicitKey && value.includes('\n')) ||
          /[ \t]\n|\n[ \t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline
      )
          return doubleQuotedString(value, ctx);
      const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');
      const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&\n${indent}`) + "'";
      return ctx.implicitKey
          ? res
          : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));
  }
  function quotedString(value, ctx) {
      const { singleQuote } = ctx.options;
      let qs;
      if (singleQuote === false)
          qs = doubleQuotedString;
      else {
          const hasDouble = value.includes('"');
          const hasSingle = value.includes("'");
          if (hasDouble && !hasSingle)
              qs = singleQuotedString;
          else if (hasSingle && !hasDouble)
              qs = doubleQuotedString;
          else
              qs = singleQuote ? singleQuotedString : doubleQuotedString;
      }
      return qs(value, ctx);
  }
  // The negative lookbehind avoids a polynomial search,
  // but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind
  let blockEndNewlines;
  try {
      blockEndNewlines = new RegExp('(^|(?<!\n))\n+(?!\n|$)', 'g');
  }
  catch {
      blockEndNewlines = /\n+(?!\n|$)/g;
  }
  function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
      const { blockQuote, commentString, lineWidth } = ctx.options;
      // 1. Block can't end in whitespace unless the last line is non-empty.
      // 2. Strings consisting of only whitespace are best rendered explicitly.
      if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
          return quotedString(value, ctx);
      }
      const indent = ctx.indent ||
          (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');
      const literal = blockQuote === 'literal'
          ? true
          : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED
              ? false
              : type === Scalar.BLOCK_LITERAL
                  ? true
                  : !lineLengthOverLimit(value, lineWidth, indent.length);
      if (!value)
          return literal ? '|\n' : '>\n';
      // determine chomping from whitespace at value end
      let chomp;
      let endStart;
      for (endStart = value.length; endStart > 0; --endStart) {
          const ch = value[endStart - 1];
          if (ch !== '\n' && ch !== '\t' && ch !== ' ')
              break;
      }
      let end = value.substring(endStart);
      const endNlPos = end.indexOf('\n');
      if (endNlPos === -1) {
          chomp = '-'; // strip
      }
      else if (value === end || endNlPos !== end.length - 1) {
          chomp = '+'; // keep
          if (onChompKeep)
              onChompKeep();
      }
      else {
          chomp = ''; // clip
      }
      if (end) {
          value = value.slice(0, -end.length);
          if (end[end.length - 1] === '\n')
              end = end.slice(0, -1);
          end = end.replace(blockEndNewlines, `$&${indent}`);
      }
      // determine indent indicator from whitespace at value start
      let startWithSpace = false;
      let startEnd;
      let startNlPos = -1;
      for (startEnd = 0; startEnd < value.length; ++startEnd) {
          const ch = value[startEnd];
          if (ch === ' ')
              startWithSpace = true;
          else if (ch === '\n')
              startNlPos = startEnd;
          else
              break;
      }
      let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
      if (start) {
          value = value.substring(start.length);
          start = start.replace(/\n+/g, `$&${indent}`);
      }
      const indentSize = indent ? '2' : '1'; // root is at -1
      // Leading | or > is added later
      let header = (startWithSpace ? indentSize : '') + chomp;
      if (comment) {
          header += ' ' + commentString(comment.replace(/ ?[\r\n]+/g, ' '));
          if (onComment)
              onComment();
      }
      if (!literal) {
          const foldedValue = value
              .replace(/\n+/g, '\n$&')
              .replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, '$1$2') // more-indented lines aren't folded
              //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent
              .replace(/\n+/g, `$&${indent}`);
          let literalFallback = false;
          const foldOptions = getFoldOptions(ctx, true);
          if (blockQuote !== 'folded' && type !== Scalar.BLOCK_FOLDED) {
              foldOptions.onOverflow = () => {
                  literalFallback = true;
              };
          }
          const body = foldFlowLines(`${start}${foldedValue}${end}`, indent, FOLD_BLOCK, foldOptions);
          if (!literalFallback)
              return `>${header}\n${indent}${body}`;
      }
      value = value.replace(/\n+/g, `$&${indent}`);
      return `|${header}\n${indent}${start}${value}${end}`;
  }
  function plainString(item, ctx, onComment, onChompKeep) {
      const { type, value } = item;
      const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
      if ((implicitKey && value.includes('\n')) ||
          (inFlow && /[[\]{},]/.test(value))) {
          return quotedString(value, ctx);
      }
      if (/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
          // not allowed:
          // - '-' or '?'
          // - start with an indicator character (except [?:-]) or /[?-] /
          // - '\n ', ': ' or ' \n' anywhere
          // - '#' not preceded by a non-space char
          // - end with ' ' or ':'
          return implicitKey || inFlow || !value.includes('\n')
              ? quotedString(value, ctx)
              : blockString(item, ctx, onComment, onChompKeep);
      }
      if (!implicitKey &&
          !inFlow &&
          type !== Scalar.PLAIN &&
          value.includes('\n')) {
          // Where allowed & type not set explicitly, prefer block style for multiline strings
          return blockString(item, ctx, onComment, onChompKeep);
      }
      if (containsDocumentMarker(value)) {
          if (indent === '') {
              ctx.forceBlockIndent = true;
              return blockString(item, ctx, onComment, onChompKeep);
          }
          else if (implicitKey && indent === indentStep) {
              return quotedString(value, ctx);
          }
      }
      const str = value.replace(/\n+/g, `$&\n${indent}`);
      // Verify that output will be parsed as a string, as e.g. plain numbers and
      // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),
      // and others in v1.1.
      if (actualString) {
          const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);
          const { compat, tags } = ctx.doc.schema;
          if (tags.some(test) || compat?.some(test))
              return quotedString(value, ctx);
      }
      return implicitKey
          ? str
          : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));
  }
  function stringifyString(item, ctx, onComment, onChompKeep) {
      const { implicitKey, inFlow } = ctx;
      const ss = typeof item.value === 'string'
          ? item
          : Object.assign({}, item, { value: String(item.value) });
      let { type } = item;
      if (type !== Scalar.QUOTE_DOUBLE) {
          // force double quotes on control characters & unpaired surrogates
          if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
              type = Scalar.QUOTE_DOUBLE;
      }
      const _stringify = (_type) => {
          switch (_type) {
              case Scalar.BLOCK_FOLDED:
              case Scalar.BLOCK_LITERAL:
                  return implicitKey || inFlow
                      ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers
                      : blockString(ss, ctx, onComment, onChompKeep);
              case Scalar.QUOTE_DOUBLE:
                  return doubleQuotedString(ss.value, ctx);
              case Scalar.QUOTE_SINGLE:
                  return singleQuotedString(ss.value, ctx);
              case Scalar.PLAIN:
                  return plainString(ss, ctx, onComment, onChompKeep);
              default:
                  return null;
          }
      };
      let res = _stringify(type);
      if (res === null) {
          const { defaultKeyType, defaultStringType } = ctx.options;
          const t = (implicitKey && defaultKeyType) || defaultStringType;
          res = _stringify(t);
          if (res === null)
              throw new Error(`Unsupported default string type ${t}`);
      }
      return res;
  }

  function createStringifyContext(doc, options) {
      const opt = Object.assign({
          blockQuote: true,
          commentString: stringifyComment,
          defaultKeyType: null,
          defaultStringType: 'PLAIN',
          directives: null,
          doubleQuotedAsJSON: false,
          doubleQuotedMinMultiLineLength: 40,
          falseStr: 'false',
          flowCollectionPadding: true,
          indentSeq: true,
          lineWidth: 80,
          minContentWidth: 20,
          nullStr: 'null',
          simpleKeys: false,
          singleQuote: null,
          trueStr: 'true',
          verifyAliasOrder: true
      }, doc.schema.toStringOptions, options);
      let inFlow;
      switch (opt.collectionStyle) {
          case 'block':
              inFlow = false;
              break;
          case 'flow':
              inFlow = true;
              break;
          default:
              inFlow = null;
      }
      return {
          anchors: new Set(),
          doc,
          flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',
          indent: '',
          indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',
          inFlow,
          options: opt
      };
  }
  function getTagObject(tags, item) {
      if (item.tag) {
          const match = tags.filter(t => t.tag === item.tag);
          if (match.length > 0)
              return match.find(t => t.format === item.format) ?? match[0];
      }
      let tagObj = undefined;
      let obj;
      if (isScalar$1(item)) {
          obj = item.value;
          let match = tags.filter(t => t.identify?.(obj));
          if (match.length > 1) {
              const testMatch = match.filter(t => t.test);
              if (testMatch.length > 0)
                  match = testMatch;
          }
          tagObj =
              match.find(t => t.format === item.format) ?? match.find(t => !t.format);
      }
      else {
          obj = item;
          tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);
      }
      if (!tagObj) {
          const name = obj?.constructor?.name ?? (obj === null ? 'null' : typeof obj);
          throw new Error(`Tag not resolved for ${name} value`);
      }
      return tagObj;
  }
  // needs to be called before value stringifier to allow for circular anchor refs
  function stringifyProps(node, tagObj, { anchors, doc }) {
      if (!doc.directives)
          return '';
      const props = [];
      const anchor = (isScalar$1(node) || isCollection$1(node)) && node.anchor;
      if (anchor && anchorIsValid(anchor)) {
          anchors.add(anchor);
          props.push(`&${anchor}`);
      }
      const tag = node.tag ?? (tagObj.default ? null : tagObj.tag);
      if (tag)
          props.push(doc.directives.tagString(tag));
      return props.join(' ');
  }
  function stringify$2(item, ctx, onComment, onChompKeep) {
      if (isPair(item))
          return item.toString(ctx, onComment, onChompKeep);
      if (isAlias(item)) {
          if (ctx.doc.directives)
              return item.toString(ctx);
          if (ctx.resolvedAliases?.has(item)) {
              throw new TypeError(`Cannot stringify circular structure without alias nodes`);
          }
          else {
              if (ctx.resolvedAliases)
                  ctx.resolvedAliases.add(item);
              else
                  ctx.resolvedAliases = new Set([item]);
              item = item.resolve(ctx.doc);
          }
      }
      let tagObj = undefined;
      const node = isNode(item)
          ? item
          : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });
      tagObj ?? (tagObj = getTagObject(ctx.doc.schema.tags, node));
      const props = stringifyProps(node, tagObj, ctx);
      if (props.length > 0)
          ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
      const str = typeof tagObj.stringify === 'function'
          ? tagObj.stringify(node, ctx, onComment, onChompKeep)
          : isScalar$1(node)
              ? stringifyString(node, ctx, onComment, onChompKeep)
              : node.toString(ctx, onComment, onChompKeep);
      if (!props)
          return str;
      return isScalar$1(node) || str[0] === '{' || str[0] === '['
          ? `${props} ${str}`
          : `${props}\n${ctx.indent}${str}`;
  }

  function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
      const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
      let keyComment = (isNode(key) && key.comment) || null;
      if (simpleKeys) {
          if (keyComment) {
              throw new Error('With simple keys, key nodes cannot have comments');
          }
          if (isCollection$1(key) || (!isNode(key) && typeof key === 'object')) {
              const msg = 'With simple keys, collection cannot be used as a key value';
              throw new Error(msg);
          }
      }
      let explicitKey = !simpleKeys &&
          (!key ||
              (keyComment && value == null && !ctx.inFlow) ||
              isCollection$1(key) ||
              (isScalar$1(key)
                  ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL
                  : typeof key === 'object'));
      ctx = Object.assign({}, ctx, {
          allNullValues: false,
          implicitKey: !explicitKey && (simpleKeys || !allNullValues),
          indent: indent + indentStep
      });
      let keyCommentDone = false;
      let chompKeep = false;
      let str = stringify$2(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));
      if (!explicitKey && !ctx.inFlow && str.length > 1024) {
          if (simpleKeys)
              throw new Error('With simple keys, single line scalar must not span more than 1024 characters');
          explicitKey = true;
      }
      if (ctx.inFlow) {
          if (allNullValues || value == null) {
              if (keyCommentDone && onComment)
                  onComment();
              return str === '' ? '?' : explicitKey ? `? ${str}` : str;
          }
      }
      else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {
          str = `? ${str}`;
          if (keyComment && !keyCommentDone) {
              str += lineComment(str, ctx.indent, commentString(keyComment));
          }
          else if (chompKeep && onChompKeep)
              onChompKeep();
          return str;
      }
      if (keyCommentDone)
          keyComment = null;
      if (explicitKey) {
          if (keyComment)
              str += lineComment(str, ctx.indent, commentString(keyComment));
          str = `? ${str}\n${indent}:`;
      }
      else {
          str = `${str}:`;
          if (keyComment)
              str += lineComment(str, ctx.indent, commentString(keyComment));
      }
      let vsb, vcb, valueComment;
      if (isNode(value)) {
          vsb = !!value.spaceBefore;
          vcb = value.commentBefore;
          valueComment = value.comment;
      }
      else {
          vsb = false;
          vcb = null;
          valueComment = null;
          if (value && typeof value === 'object')
              value = doc.createNode(value);
      }
      ctx.implicitKey = false;
      if (!explicitKey && !keyComment && isScalar$1(value))
          ctx.indentAtStart = str.length + 1;
      chompKeep = false;
      if (!indentSeq &&
          indentStep.length >= 2 &&
          !ctx.inFlow &&
          !explicitKey &&
          isSeq(value) &&
          !value.flow &&
          !value.tag &&
          !value.anchor) {
          // If indentSeq === false, consider '- ' as part of indentation where possible
          ctx.indent = ctx.indent.substring(2);
      }
      let valueCommentDone = false;
      const valueStr = stringify$2(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));
      let ws = ' ';
      if (keyComment || vsb || vcb) {
          ws = vsb ? '\n' : '';
          if (vcb) {
              const cs = commentString(vcb);
              ws += `\n${indentComment(cs, ctx.indent)}`;
          }
          if (valueStr === '' && !ctx.inFlow) {
              if (ws === '\n')
                  ws = '\n\n';
          }
          else {
              ws += `\n${ctx.indent}`;
          }
      }
      else if (!explicitKey && isCollection$1(value)) {
          const vs0 = valueStr[0];
          const nl0 = valueStr.indexOf('\n');
          const hasNewline = nl0 !== -1;
          const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
          if (hasNewline || !flow) {
              let hasPropsLine = false;
              if (hasNewline && (vs0 === '&' || vs0 === '!')) {
                  let sp0 = valueStr.indexOf(' ');
                  if (vs0 === '&' &&
                      sp0 !== -1 &&
                      sp0 < nl0 &&
                      valueStr[sp0 + 1] === '!') {
                      sp0 = valueStr.indexOf(' ', sp0 + 1);
                  }
                  if (sp0 === -1 || nl0 < sp0)
                      hasPropsLine = true;
              }
              if (!hasPropsLine)
                  ws = `\n${ctx.indent}`;
          }
      }
      else if (valueStr === '' || valueStr[0] === '\n') {
          ws = '';
      }
      str += ws + valueStr;
      if (ctx.inFlow) {
          if (valueCommentDone && onComment)
              onComment();
      }
      else if (valueComment && !valueCommentDone) {
          str += lineComment(str, ctx.indent, commentString(valueComment));
      }
      else if (chompKeep && onChompKeep) {
          onChompKeep();
      }
      return str;
  }

  function warn(logLevel, warning) {
      if (logLevel === 'debug' || logLevel === 'warn') {
          console.warn(warning);
      }
  }

  // If the value associated with a merge key is a single mapping node, each of
  // its key/value pairs is inserted into the current mapping, unless the key
  // already exists in it. If the value associated with the merge key is a
  // sequence, then this sequence is expected to contain mapping nodes and each
  // of these nodes is merged in turn according to its order in the sequence.
  // Keys in mapping nodes earlier in the sequence override keys specified in
  // later mapping nodes. -- http://yaml.org/type/merge.html
  const MERGE_KEY = '<<';
  const merge = {
      identify: value => value === MERGE_KEY ||
          (typeof value === 'symbol' && value.description === MERGE_KEY),
      default: 'key',
      tag: 'tag:yaml.org,2002:merge',
      test: /^<<$/,
      resolve: () => Object.assign(new Scalar(Symbol(MERGE_KEY)), {
          addToJSMap: addMergeToJSMap
      }),
      stringify: () => MERGE_KEY
  };
  const isMergeKey = (ctx, key) => (merge.identify(key) ||
      (isScalar$1(key) &&
          (!key.type || key.type === Scalar.PLAIN) &&
          merge.identify(key.value))) &&
      ctx?.doc.schema.tags.some(tag => tag.tag === merge.tag && tag.default);
  function addMergeToJSMap(ctx, map, value) {
      value = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
      if (isSeq(value))
          for (const it of value.items)
              mergeValue(ctx, map, it);
      else if (Array.isArray(value))
          for (const it of value)
              mergeValue(ctx, map, it);
      else
          mergeValue(ctx, map, value);
  }
  function mergeValue(ctx, map, value) {
      const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;
      if (!isMap(source))
          throw new Error('Merge sources must be maps or map aliases');
      const srcMap = source.toJSON(null, ctx, Map);
      for (const [key, value] of srcMap) {
          if (map instanceof Map) {
              if (!map.has(key))
                  map.set(key, value);
          }
          else if (map instanceof Set) {
              map.add(key);
          }
          else if (!Object.prototype.hasOwnProperty.call(map, key)) {
              Object.defineProperty(map, key, {
                  value,
                  writable: true,
                  enumerable: true,
                  configurable: true
              });
          }
      }
      return map;
  }

  function addPairToJSMap(ctx, map, { key, value }) {
      if (isNode(key) && key.addToJSMap)
          key.addToJSMap(ctx, map, value);
      // TODO: Should drop this special case for bare << handling
      else if (isMergeKey(ctx, key))
          addMergeToJSMap(ctx, map, value);
      else {
          const jsKey = toJS(key, '', ctx);
          if (map instanceof Map) {
              map.set(jsKey, toJS(value, jsKey, ctx));
          }
          else if (map instanceof Set) {
              map.add(jsKey);
          }
          else {
              const stringKey = stringifyKey(key, jsKey, ctx);
              const jsValue = toJS(value, stringKey, ctx);
              if (stringKey in map)
                  Object.defineProperty(map, stringKey, {
                      value: jsValue,
                      writable: true,
                      enumerable: true,
                      configurable: true
                  });
              else
                  map[stringKey] = jsValue;
          }
      }
      return map;
  }
  function stringifyKey(key, jsKey, ctx) {
      if (jsKey === null)
          return '';
      // eslint-disable-next-line @typescript-eslint/no-base-to-string
      if (typeof jsKey !== 'object')
          return String(jsKey);
      if (isNode(key) && ctx?.doc) {
          const strCtx = createStringifyContext(ctx.doc, {});
          strCtx.anchors = new Set();
          for (const node of ctx.anchors.keys())
              strCtx.anchors.add(node.anchor);
          strCtx.inFlow = true;
          strCtx.inStringifyKey = true;
          const strKey = key.toString(strCtx);
          if (!ctx.mapKeyWarned) {
              let jsonStr = JSON.stringify(strKey);
              if (jsonStr.length > 40)
                  jsonStr = jsonStr.substring(0, 36) + '..."';
              warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
              ctx.mapKeyWarned = true;
          }
          return strKey;
      }
      return JSON.stringify(jsKey);
  }

  function createPair(key, value, ctx) {
      const k = createNode(key, undefined, ctx);
      const v = createNode(value, undefined, ctx);
      return new Pair(k, v);
  }
  class Pair {
      constructor(key, value = null) {
          Object.defineProperty(this, NODE_TYPE, { value: PAIR });
          this.key = key;
          this.value = value;
      }
      clone(schema) {
          let { key, value } = this;
          if (isNode(key))
              key = key.clone(schema);
          if (isNode(value))
              value = value.clone(schema);
          return new Pair(key, value);
      }
      toJSON(_, ctx) {
          const pair = ctx?.mapAsMap ? new Map() : {};
          return addPairToJSMap(ctx, pair, this);
      }
      toString(ctx, onComment, onChompKeep) {
          return ctx?.doc
              ? stringifyPair(this, ctx, onComment, onChompKeep)
              : JSON.stringify(this);
      }
  }

  function stringifyCollection(collection, ctx, options) {
      const flow = ctx.inFlow ?? collection.flow;
      const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;
      return stringify(collection, ctx, options);
  }
  function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
      const { indent, options: { commentString } } = ctx;
      const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
      let chompKeep = false; // flag for the preceding node's status
      const lines = [];
      for (let i = 0; i < items.length; ++i) {
          const item = items[i];
          let comment = null;
          if (isNode(item)) {
              if (!chompKeep && item.spaceBefore)
                  lines.push('');
              addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
              if (item.comment)
                  comment = item.comment;
          }
          else if (isPair(item)) {
              const ik = isNode(item.key) ? item.key : null;
              if (ik) {
                  if (!chompKeep && ik.spaceBefore)
                      lines.push('');
                  addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
              }
          }
          chompKeep = false;
          let str = stringify$2(item, itemCtx, () => (comment = null), () => (chompKeep = true));
          if (comment)
              str += lineComment(str, itemIndent, commentString(comment));
          if (chompKeep && comment)
              chompKeep = false;
          lines.push(blockItemPrefix + str);
      }
      let str;
      if (lines.length === 0) {
          str = flowChars.start + flowChars.end;
      }
      else {
          str = lines[0];
          for (let i = 1; i < lines.length; ++i) {
              const line = lines[i];
              str += line ? `\n${indent}${line}` : '\n';
          }
      }
      if (comment) {
          str += '\n' + indentComment(commentString(comment), indent);
          if (onComment)
              onComment();
      }
      else if (chompKeep && onChompKeep)
          onChompKeep();
      return str;
  }
  function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
      const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
      itemIndent += indentStep;
      const itemCtx = Object.assign({}, ctx, {
          indent: itemIndent,
          inFlow: true,
          type: null
      });
      let reqNewline = false;
      let linesAtValue = 0;
      const lines = [];
      for (let i = 0; i < items.length; ++i) {
          const item = items[i];
          let comment = null;
          if (isNode(item)) {
              if (item.spaceBefore)
                  lines.push('');
              addCommentBefore(ctx, lines, item.commentBefore, false);
              if (item.comment)
                  comment = item.comment;
          }
          else if (isPair(item)) {
              const ik = isNode(item.key) ? item.key : null;
              if (ik) {
                  if (ik.spaceBefore)
                      lines.push('');
                  addCommentBefore(ctx, lines, ik.commentBefore, false);
                  if (ik.comment)
                      reqNewline = true;
              }
              const iv = isNode(item.value) ? item.value : null;
              if (iv) {
                  if (iv.comment)
                      comment = iv.comment;
                  if (iv.commentBefore)
                      reqNewline = true;
              }
              else if (item.value == null && ik?.comment) {
                  comment = ik.comment;
              }
          }
          if (comment)
              reqNewline = true;
          let str = stringify$2(item, itemCtx, () => (comment = null));
          if (i < items.length - 1)
              str += ',';
          if (comment)
              str += lineComment(str, itemIndent, commentString(comment));
          if (!reqNewline && (lines.length > linesAtValue || str.includes('\n')))
              reqNewline = true;
          lines.push(str);
          linesAtValue = lines.length;
      }
      const { start, end } = flowChars;
      if (lines.length === 0) {
          return start + end;
      }
      else {
          if (!reqNewline) {
              const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
              reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
          }
          if (reqNewline) {
              let str = start;
              for (const line of lines)
                  str += line ? `\n${indentStep}${indent}${line}` : '\n';
              return `${str}\n${indent}${end}`;
          }
          else {
              return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;
          }
      }
  }
  function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
      if (comment && chompKeep)
          comment = comment.replace(/^\n+/, '');
      if (comment) {
          const ic = indentComment(commentString(comment), indent);
          lines.push(ic.trimStart()); // Avoid double indent on first line
      }
  }

  function findPair(items, key) {
      const k = isScalar$1(key) ? key.value : key;
      for (const it of items) {
          if (isPair(it)) {
              if (it.key === key || it.key === k)
                  return it;
              if (isScalar$1(it.key) && it.key.value === k)
                  return it;
          }
      }
      return undefined;
  }
  class YAMLMap extends Collection {
      static get tagName() {
          return 'tag:yaml.org,2002:map';
      }
      constructor(schema) {
          super(MAP, schema);
          this.items = [];
      }
      /**
       * A generic collection parsing method that can be extended
       * to other node classes that inherit from YAMLMap
       */
      static from(schema, obj, ctx) {
          const { keepUndefined, replacer } = ctx;
          const map = new this(schema);
          const add = (key, value) => {
              if (typeof replacer === 'function')
                  value = replacer.call(obj, key, value);
              else if (Array.isArray(replacer) && !replacer.includes(key))
                  return;
              if (value !== undefined || keepUndefined)
                  map.items.push(createPair(key, value, ctx));
          };
          if (obj instanceof Map) {
              for (const [key, value] of obj)
                  add(key, value);
          }
          else if (obj && typeof obj === 'object') {
              for (const key of Object.keys(obj))
                  add(key, obj[key]);
          }
          if (typeof schema.sortMapEntries === 'function') {
              map.items.sort(schema.sortMapEntries);
          }
          return map;
      }
      /**
       * Adds a value to the collection.
       *
       * @param overwrite - If not set `true`, using a key that is already in the
       *   collection will throw. Otherwise, overwrites the previous value.
       */
      add(pair, overwrite) {
          let _pair;
          if (isPair(pair))
              _pair = pair;
          else if (!pair || typeof pair !== 'object' || !('key' in pair)) {
              // In TypeScript, this never happens.
              _pair = new Pair(pair, pair?.value);
          }
          else
              _pair = new Pair(pair.key, pair.value);
          const prev = findPair(this.items, _pair.key);
          const sortEntries = this.schema?.sortMapEntries;
          if (prev) {
              if (!overwrite)
                  throw new Error(`Key ${_pair.key} already set`);
              // For scalars, keep the old node & its comments and anchors
              if (isScalar$1(prev.value) && isScalarValue(_pair.value))
                  prev.value.value = _pair.value;
              else
                  prev.value = _pair.value;
          }
          else if (sortEntries) {
              const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);
              if (i === -1)
                  this.items.push(_pair);
              else
                  this.items.splice(i, 0, _pair);
          }
          else {
              this.items.push(_pair);
          }
      }
      delete(key) {
          const it = findPair(this.items, key);
          if (!it)
              return false;
          const del = this.items.splice(this.items.indexOf(it), 1);
          return del.length > 0;
      }
      get(key, keepScalar) {
          const it = findPair(this.items, key);
          const node = it?.value;
          return (!keepScalar && isScalar$1(node) ? node.value : node) ?? undefined;
      }
      has(key) {
          return !!findPair(this.items, key);
      }
      set(key, value) {
          this.add(new Pair(key, value), true);
      }
      /**
       * @param ctx - Conversion context, originally set in Document#toJS()
       * @param {Class} Type - If set, forces the returned collection type
       * @returns Instance of Type, Map, or Object
       */
      toJSON(_, ctx, Type) {
          const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};
          if (ctx?.onCreate)
              ctx.onCreate(map);
          for (const item of this.items)
              addPairToJSMap(ctx, map, item);
          return map;
      }
      toString(ctx, onComment, onChompKeep) {
          if (!ctx)
              return JSON.stringify(this);
          for (const item of this.items) {
              if (!isPair(item))
                  throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
          }
          if (!ctx.allNullValues && this.hasAllNullValues(false))
              ctx = Object.assign({}, ctx, { allNullValues: true });
          return stringifyCollection(this, ctx, {
              blockItemPrefix: '',
              flowChars: { start: '{', end: '}' },
              itemIndent: ctx.indent || '',
              onChompKeep,
              onComment
          });
      }
  }

  const map = {
      collection: 'map',
      default: true,
      nodeClass: YAMLMap,
      tag: 'tag:yaml.org,2002:map',
      resolve(map, onError) {
          if (!isMap(map))
              onError('Expected a mapping for this tag');
          return map;
      },
      createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)
  };

  class YAMLSeq extends Collection {
      static get tagName() {
          return 'tag:yaml.org,2002:seq';
      }
      constructor(schema) {
          super(SEQ, schema);
          this.items = [];
      }
      add(value) {
          this.items.push(value);
      }
      /**
       * Removes a value from the collection.
       *
       * `key` must contain a representation of an integer for this to succeed.
       * It may be wrapped in a `Scalar`.
       *
       * @returns `true` if the item was found and removed.
       */
      delete(key) {
          const idx = asItemIndex(key);
          if (typeof idx !== 'number')
              return false;
          const del = this.items.splice(idx, 1);
          return del.length > 0;
      }
      get(key, keepScalar) {
          const idx = asItemIndex(key);
          if (typeof idx !== 'number')
              return undefined;
          const it = this.items[idx];
          return !keepScalar && isScalar$1(it) ? it.value : it;
      }
      /**
       * Checks if the collection includes a value with the key `key`.
       *
       * `key` must contain a representation of an integer for this to succeed.
       * It may be wrapped in a `Scalar`.
       */
      has(key) {
          const idx = asItemIndex(key);
          return typeof idx === 'number' && idx < this.items.length;
      }
      /**
       * Sets a value in this collection. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       *
       * If `key` does not contain a representation of an integer, this will throw.
       * It may be wrapped in a `Scalar`.
       */
      set(key, value) {
          const idx = asItemIndex(key);
          if (typeof idx !== 'number')
              throw new Error(`Expected a valid index, not ${key}.`);
          const prev = this.items[idx];
          if (isScalar$1(prev) && isScalarValue(value))
              prev.value = value;
          else
              this.items[idx] = value;
      }
      toJSON(_, ctx) {
          const seq = [];
          if (ctx?.onCreate)
              ctx.onCreate(seq);
          let i = 0;
          for (const item of this.items)
              seq.push(toJS(item, String(i++), ctx));
          return seq;
      }
      toString(ctx, onComment, onChompKeep) {
          if (!ctx)
              return JSON.stringify(this);
          return stringifyCollection(this, ctx, {
              blockItemPrefix: '- ',
              flowChars: { start: '[', end: ']' },
              itemIndent: (ctx.indent || '') + '  ',
              onChompKeep,
              onComment
          });
      }
      static from(schema, obj, ctx) {
          const { replacer } = ctx;
          const seq = new this(schema);
          if (obj && Symbol.iterator in Object(obj)) {
              let i = 0;
              for (let it of obj) {
                  if (typeof replacer === 'function') {
                      const key = obj instanceof Set ? it : String(i++);
                      it = replacer.call(obj, key, it);
                  }
                  seq.items.push(createNode(it, undefined, ctx));
              }
          }
          return seq;
      }
  }
  function asItemIndex(key) {
      let idx = isScalar$1(key) ? key.value : key;
      if (idx && typeof idx === 'string')
          idx = Number(idx);
      return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0
          ? idx
          : null;
  }

  const seq = {
      collection: 'seq',
      default: true,
      nodeClass: YAMLSeq,
      tag: 'tag:yaml.org,2002:seq',
      resolve(seq, onError) {
          if (!isSeq(seq))
              onError('Expected a sequence for this tag');
          return seq;
      },
      createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)
  };

  const string = {
      identify: value => typeof value === 'string',
      default: true,
      tag: 'tag:yaml.org,2002:str',
      resolve: str => str,
      stringify(item, ctx, onComment, onChompKeep) {
          ctx = Object.assign({ actualString: true }, ctx);
          return stringifyString(item, ctx, onComment, onChompKeep);
      }
  };

  const nullTag = {
      identify: value => value == null,
      createNode: () => new Scalar(null),
      default: true,
      tag: 'tag:yaml.org,2002:null',
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: () => new Scalar(null),
      stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)
          ? source
          : ctx.options.nullStr
  };

  const boolTag = {
      identify: value => typeof value === 'boolean',
      default: true,
      tag: 'tag:yaml.org,2002:bool',
      test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
      resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),
      stringify({ source, value }, ctx) {
          if (source && boolTag.test.test(source)) {
              const sv = source[0] === 't' || source[0] === 'T';
              if (value === sv)
                  return source;
          }
          return value ? ctx.options.trueStr : ctx.options.falseStr;
      }
  };

  function stringifyNumber({ format, minFractionDigits, tag, value }) {
      if (typeof value === 'bigint')
          return String(value);
      const num = typeof value === 'number' ? value : Number(value);
      if (!isFinite(num))
          return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';
      let n = JSON.stringify(value);
      if (!format &&
          minFractionDigits &&
          (!tag || tag === 'tag:yaml.org,2002:float') &&
          /^\d/.test(n)) {
          let i = n.indexOf('.');
          if (i < 0) {
              i = n.length;
              n += '.';
          }
          let d = minFractionDigits - (n.length - i - 1);
          while (d-- > 0)
              n += '0';
      }
      return n;
  }

  const floatNaN$1 = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
      resolve: str => str.slice(-3).toLowerCase() === 'nan'
          ? NaN
          : str[0] === '-'
              ? Number.NEGATIVE_INFINITY
              : Number.POSITIVE_INFINITY,
      stringify: stringifyNumber
  };
  const floatExp$1 = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      format: 'EXP',
      test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
      resolve: str => parseFloat(str),
      stringify(node) {
          const num = Number(node.value);
          return isFinite(num) ? num.toExponential() : stringifyNumber(node);
      }
  };
  const float$1 = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
      resolve(str) {
          const node = new Scalar(parseFloat(str));
          const dot = str.indexOf('.');
          if (dot !== -1 && str[str.length - 1] === '0')
              node.minFractionDigits = str.length - dot - 1;
          return node;
      },
      stringify: stringifyNumber
  };

  const intIdentify$2 = (value) => typeof value === 'bigint' || Number.isInteger(value);
  const intResolve$1 = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));
  function intStringify$1(node, radix, prefix) {
      const { value } = node;
      if (intIdentify$2(value) && value >= 0)
          return prefix + value.toString(radix);
      return stringifyNumber(node);
  }
  const intOct$1 = {
      identify: value => intIdentify$2(value) && value >= 0,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'OCT',
      test: /^0o[0-7]+$/,
      resolve: (str, _onError, opt) => intResolve$1(str, 2, 8, opt),
      stringify: node => intStringify$1(node, 8, '0o')
  };
  const int$1 = {
      identify: intIdentify$2,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      test: /^[-+]?[0-9]+$/,
      resolve: (str, _onError, opt) => intResolve$1(str, 0, 10, opt),
      stringify: stringifyNumber
  };
  const intHex$1 = {
      identify: value => intIdentify$2(value) && value >= 0,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'HEX',
      test: /^0x[0-9a-fA-F]+$/,
      resolve: (str, _onError, opt) => intResolve$1(str, 2, 16, opt),
      stringify: node => intStringify$1(node, 16, '0x')
  };

  const schema$3 = [
      map,
      seq,
      string,
      nullTag,
      boolTag,
      intOct$1,
      int$1,
      intHex$1,
      floatNaN$1,
      floatExp$1,
      float$1
  ];

  function intIdentify$1(value) {
      return typeof value === 'bigint' || Number.isInteger(value);
  }
  const stringifyJSON = ({ value }) => JSON.stringify(value);
  const jsonScalars = [
      {
          identify: value => typeof value === 'string',
          default: true,
          tag: 'tag:yaml.org,2002:str',
          resolve: str => str,
          stringify: stringifyJSON
      },
      {
          identify: value => value == null,
          createNode: () => new Scalar(null),
          default: true,
          tag: 'tag:yaml.org,2002:null',
          test: /^null$/,
          resolve: () => null,
          stringify: stringifyJSON
      },
      {
          identify: value => typeof value === 'boolean',
          default: true,
          tag: 'tag:yaml.org,2002:bool',
          test: /^true$|^false$/,
          resolve: str => str === 'true',
          stringify: stringifyJSON
      },
      {
          identify: intIdentify$1,
          default: true,
          tag: 'tag:yaml.org,2002:int',
          test: /^-?(?:0|[1-9][0-9]*)$/,
          resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
          stringify: ({ value }) => intIdentify$1(value) ? value.toString() : JSON.stringify(value)
      },
      {
          identify: value => typeof value === 'number',
          default: true,
          tag: 'tag:yaml.org,2002:float',
          test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
          resolve: str => parseFloat(str),
          stringify: stringifyJSON
      }
  ];
  const jsonError = {
      default: true,
      tag: '',
      test: /^/,
      resolve(str, onError) {
          onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
          return str;
      }
  };
  const schema$2 = [map, seq].concat(jsonScalars, jsonError);

  const binary = {
      identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array
      default: false,
      tag: 'tag:yaml.org,2002:binary',
      /**
       * Returns a Buffer in node and an Uint8Array in browsers
       *
       * To use the resulting buffer as an image, you'll want to do something like:
       *
       *   const blob = new Blob([buffer], { type: 'image/jpeg' })
       *   document.querySelector('#photo').src = URL.createObjectURL(blob)
       */
      resolve(src, onError) {
          if (typeof atob === 'function') {
              // On IE 11, atob() can't handle newlines
              const str = atob(src.replace(/[\n\r]/g, ''));
              const buffer = new Uint8Array(str.length);
              for (let i = 0; i < str.length; ++i)
                  buffer[i] = str.charCodeAt(i);
              return buffer;
          }
          else {
              onError('This environment does not support reading binary tags; either Buffer or atob is required');
              return src;
          }
      },
      stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
          if (!value)
              return '';
          const buf = value; // checked earlier by binary.identify()
          let str;
          if (typeof btoa === 'function') {
              let s = '';
              for (let i = 0; i < buf.length; ++i)
                  s += String.fromCharCode(buf[i]);
              str = btoa(s);
          }
          else {
              throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');
          }
          type ?? (type = Scalar.BLOCK_LITERAL);
          if (type !== Scalar.QUOTE_DOUBLE) {
              const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
              const n = Math.ceil(str.length / lineWidth);
              const lines = new Array(n);
              for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
                  lines[i] = str.substr(o, lineWidth);
              }
              str = lines.join(type === Scalar.BLOCK_LITERAL ? '\n' : ' ');
          }
          return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
      }
  };

  function resolvePairs(seq, onError) {
      if (isSeq(seq)) {
          for (let i = 0; i < seq.items.length; ++i) {
              let item = seq.items[i];
              if (isPair(item))
                  continue;
              else if (isMap(item)) {
                  if (item.items.length > 1)
                      onError('Each pair must have its own sequence indicator');
                  const pair = item.items[0] || new Pair(new Scalar(null));
                  if (item.commentBefore)
                      pair.key.commentBefore = pair.key.commentBefore
                          ? `${item.commentBefore}\n${pair.key.commentBefore}`
                          : item.commentBefore;
                  if (item.comment) {
                      const cn = pair.value ?? pair.key;
                      cn.comment = cn.comment
                          ? `${item.comment}\n${cn.comment}`
                          : item.comment;
                  }
                  item = pair;
              }
              seq.items[i] = isPair(item) ? item : new Pair(item);
          }
      }
      else
          onError('Expected a sequence for this tag');
      return seq;
  }
  function createPairs(schema, iterable, ctx) {
      const { replacer } = ctx;
      const pairs = new YAMLSeq(schema);
      pairs.tag = 'tag:yaml.org,2002:pairs';
      let i = 0;
      if (iterable && Symbol.iterator in Object(iterable))
          for (let it of iterable) {
              if (typeof replacer === 'function')
                  it = replacer.call(iterable, String(i++), it);
              let key, value;
              if (Array.isArray(it)) {
                  if (it.length === 2) {
                      key = it[0];
                      value = it[1];
                  }
                  else
                      throw new TypeError(`Expected [key, value] tuple: ${it}`);
              }
              else if (it && it instanceof Object) {
                  const keys = Object.keys(it);
                  if (keys.length === 1) {
                      key = keys[0];
                      value = it[key];
                  }
                  else {
                      throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
                  }
              }
              else {
                  key = it;
              }
              pairs.items.push(createPair(key, value, ctx));
          }
      return pairs;
  }
  const pairs = {
      collection: 'seq',
      default: false,
      tag: 'tag:yaml.org,2002:pairs',
      resolve: resolvePairs,
      createNode: createPairs
  };

  class YAMLOMap extends YAMLSeq {
      constructor() {
          super();
          this.add = YAMLMap.prototype.add.bind(this);
          this.delete = YAMLMap.prototype.delete.bind(this);
          this.get = YAMLMap.prototype.get.bind(this);
          this.has = YAMLMap.prototype.has.bind(this);
          this.set = YAMLMap.prototype.set.bind(this);
          this.tag = YAMLOMap.tag;
      }
      /**
       * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
       * but TypeScript won't allow widening the signature of a child method.
       */
      toJSON(_, ctx) {
          if (!ctx)
              return super.toJSON(_);
          const map = new Map();
          if (ctx?.onCreate)
              ctx.onCreate(map);
          for (const pair of this.items) {
              let key, value;
              if (isPair(pair)) {
                  key = toJS(pair.key, '', ctx);
                  value = toJS(pair.value, key, ctx);
              }
              else {
                  key = toJS(pair, '', ctx);
              }
              if (map.has(key))
                  throw new Error('Ordered maps must not include duplicate keys');
              map.set(key, value);
          }
          return map;
      }
      static from(schema, iterable, ctx) {
          const pairs = createPairs(schema, iterable, ctx);
          const omap = new this();
          omap.items = pairs.items;
          return omap;
      }
  }
  YAMLOMap.tag = 'tag:yaml.org,2002:omap';
  const omap = {
      collection: 'seq',
      identify: value => value instanceof Map,
      nodeClass: YAMLOMap,
      default: false,
      tag: 'tag:yaml.org,2002:omap',
      resolve(seq, onError) {
          const pairs = resolvePairs(seq, onError);
          const seenKeys = [];
          for (const { key } of pairs.items) {
              if (isScalar$1(key)) {
                  if (seenKeys.includes(key.value)) {
                      onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                  }
                  else {
                      seenKeys.push(key.value);
                  }
              }
          }
          return Object.assign(new YAMLOMap(), pairs);
      },
      createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)
  };

  function boolStringify({ value, source }, ctx) {
      const boolObj = value ? trueTag : falseTag;
      if (source && boolObj.test.test(source))
          return source;
      return value ? ctx.options.trueStr : ctx.options.falseStr;
  }
  const trueTag = {
      identify: value => value === true,
      default: true,
      tag: 'tag:yaml.org,2002:bool',
      test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
      resolve: () => new Scalar(true),
      stringify: boolStringify
  };
  const falseTag = {
      identify: value => value === false,
      default: true,
      tag: 'tag:yaml.org,2002:bool',
      test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
      resolve: () => new Scalar(false),
      stringify: boolStringify
  };

  const floatNaN = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
      resolve: (str) => str.slice(-3).toLowerCase() === 'nan'
          ? NaN
          : str[0] === '-'
              ? Number.NEGATIVE_INFINITY
              : Number.POSITIVE_INFINITY,
      stringify: stringifyNumber
  };
  const floatExp = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      format: 'EXP',
      test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
      resolve: (str) => parseFloat(str.replace(/_/g, '')),
      stringify(node) {
          const num = Number(node.value);
          return isFinite(num) ? num.toExponential() : stringifyNumber(node);
      }
  };
  const float = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
      resolve(str) {
          const node = new Scalar(parseFloat(str.replace(/_/g, '')));
          const dot = str.indexOf('.');
          if (dot !== -1) {
              const f = str.substring(dot + 1).replace(/_/g, '');
              if (f[f.length - 1] === '0')
                  node.minFractionDigits = f.length;
          }
          return node;
      },
      stringify: stringifyNumber
  };

  const intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);
  function intResolve(str, offset, radix, { intAsBigInt }) {
      const sign = str[0];
      if (sign === '-' || sign === '+')
          offset += 1;
      str = str.substring(offset).replace(/_/g, '');
      if (intAsBigInt) {
          switch (radix) {
              case 2:
                  str = `0b${str}`;
                  break;
              case 8:
                  str = `0o${str}`;
                  break;
              case 16:
                  str = `0x${str}`;
                  break;
          }
          const n = BigInt(str);
          return sign === '-' ? BigInt(-1) * n : n;
      }
      const n = parseInt(str, radix);
      return sign === '-' ? -1 * n : n;
  }
  function intStringify(node, radix, prefix) {
      const { value } = node;
      if (intIdentify(value)) {
          const str = value.toString(radix);
          return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
      }
      return stringifyNumber(node);
  }
  const intBin = {
      identify: intIdentify,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'BIN',
      test: /^[-+]?0b[0-1_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
      stringify: node => intStringify(node, 2, '0b')
  };
  const intOct = {
      identify: intIdentify,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'OCT',
      test: /^[-+]?0[0-7_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
      stringify: node => intStringify(node, 8, '0')
  };
  const int = {
      identify: intIdentify,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      test: /^[-+]?[0-9][0-9_]*$/,
      resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
      stringify: stringifyNumber
  };
  const intHex = {
      identify: intIdentify,
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'HEX',
      test: /^[-+]?0x[0-9a-fA-F_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
      stringify: node => intStringify(node, 16, '0x')
  };

  class YAMLSet extends YAMLMap {
      constructor(schema) {
          super(schema);
          this.tag = YAMLSet.tag;
      }
      add(key) {
          let pair;
          if (isPair(key))
              pair = key;
          else if (key &&
              typeof key === 'object' &&
              'key' in key &&
              'value' in key &&
              key.value === null)
              pair = new Pair(key.key, null);
          else
              pair = new Pair(key, null);
          const prev = findPair(this.items, pair.key);
          if (!prev)
              this.items.push(pair);
      }
      /**
       * If `keepPair` is `true`, returns the Pair matching `key`.
       * Otherwise, returns the value of that Pair's key.
       */
      get(key, keepPair) {
          const pair = findPair(this.items, key);
          return !keepPair && isPair(pair)
              ? isScalar$1(pair.key)
                  ? pair.key.value
                  : pair.key
              : pair;
      }
      set(key, value) {
          if (typeof value !== 'boolean')
              throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
          const prev = findPair(this.items, key);
          if (prev && !value) {
              this.items.splice(this.items.indexOf(prev), 1);
          }
          else if (!prev && value) {
              this.items.push(new Pair(key));
          }
      }
      toJSON(_, ctx) {
          return super.toJSON(_, ctx, Set);
      }
      toString(ctx, onComment, onChompKeep) {
          if (!ctx)
              return JSON.stringify(this);
          if (this.hasAllNullValues(true))
              return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
          else
              throw new Error('Set items must all have null values');
      }
      static from(schema, iterable, ctx) {
          const { replacer } = ctx;
          const set = new this(schema);
          if (iterable && Symbol.iterator in Object(iterable))
              for (let value of iterable) {
                  if (typeof replacer === 'function')
                      value = replacer.call(iterable, value, value);
                  set.items.push(createPair(value, null, ctx));
              }
          return set;
      }
  }
  YAMLSet.tag = 'tag:yaml.org,2002:set';
  const set = {
      collection: 'map',
      identify: value => value instanceof Set,
      nodeClass: YAMLSet,
      default: false,
      tag: 'tag:yaml.org,2002:set',
      createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),
      resolve(map, onError) {
          if (isMap(map)) {
              if (map.hasAllNullValues(true))
                  return Object.assign(new YAMLSet(), map);
              else
                  onError('Set items must all have null values');
          }
          else
              onError('Expected a mapping for this tag');
          return map;
      }
  };

  /** Internal types handle bigint as number, because TS can't figure it out. */
  function parseSexagesimal(str, asBigInt) {
      const sign = str[0];
      const parts = sign === '-' || sign === '+' ? str.substring(1) : str;
      const num = (n) => asBigInt ? BigInt(n) : Number(n);
      const res = parts
          .replace(/_/g, '')
          .split(':')
          .reduce((res, p) => res * num(60) + num(p), num(0));
      return (sign === '-' ? num(-1) * res : res);
  }
  /**
   * hhhh:mm:ss.sss
   *
   * Internal types handle bigint as number, because TS can't figure it out.
   */
  function stringifySexagesimal(node) {
      let { value } = node;
      let num = (n) => n;
      if (typeof value === 'bigint')
          num = n => BigInt(n);
      else if (isNaN(value) || !isFinite(value))
          return stringifyNumber(node);
      let sign = '';
      if (value < 0) {
          sign = '-';
          value *= num(-1);
      }
      const _60 = num(60);
      const parts = [value % _60]; // seconds, including ms
      if (value < 60) {
          parts.unshift(0); // at least one : is required
      }
      else {
          value = (value - parts[0]) / _60;
          parts.unshift(value % _60); // minutes
          if (value >= 60) {
              value = (value - parts[0]) / _60;
              parts.unshift(value); // hours
          }
      }
      return (sign +
          parts
              .map(n => String(n).padStart(2, '0'))
              .join(':')
              .replace(/000000\d*$/, '') // % 60 may introduce error
      );
  }
  const intTime = {
      identify: value => typeof value === 'bigint' || Number.isInteger(value),
      default: true,
      tag: 'tag:yaml.org,2002:int',
      format: 'TIME',
      test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
      resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
      stringify: stringifySexagesimal
  };
  const floatTime = {
      identify: value => typeof value === 'number',
      default: true,
      tag: 'tag:yaml.org,2002:float',
      format: 'TIME',
      test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
      resolve: str => parseSexagesimal(str, false),
      stringify: stringifySexagesimal
  };
  const timestamp = {
      identify: value => value instanceof Date,
      default: true,
      tag: 'tag:yaml.org,2002:timestamp',
      // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
      // may be omitted altogether, resulting in a date format. In such a case, the time part is
      // assumed to be 00:00:00Z (start of day, UTC).
      test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd
          '(?:' + // time is optional
          '(?:t|T|[ \\t]+)' + // t | T | whitespace
          '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?
          '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30
          ')?$'),
      resolve(str) {
          const match = str.match(timestamp.test);
          if (!match)
              throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');
          const [, year, month, day, hour, minute, second] = match.map(Number);
          const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;
          let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
          const tz = match[8];
          if (tz && tz !== 'Z') {
              let d = parseSexagesimal(tz, false);
              if (Math.abs(d) < 30)
                  d *= 60;
              date -= 60000 * d;
          }
          return new Date(date);
      },
      stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\.000Z$/, '') ?? ''
  };

  const schema$1 = [
      map,
      seq,
      string,
      nullTag,
      trueTag,
      falseTag,
      intBin,
      intOct,
      int,
      intHex,
      floatNaN,
      floatExp,
      float,
      binary,
      merge,
      omap,
      pairs,
      set,
      intTime,
      floatTime,
      timestamp
  ];

  const schemas = new Map([
      ['core', schema$3],
      ['failsafe', [map, seq, string]],
      ['json', schema$2],
      ['yaml11', schema$1],
      ['yaml-1.1', schema$1]
  ]);
  const tagsByName = {
      binary,
      bool: boolTag,
      float: float$1,
      floatExp: floatExp$1,
      floatNaN: floatNaN$1,
      floatTime,
      int: int$1,
      intHex: intHex$1,
      intOct: intOct$1,
      intTime,
      map,
      merge,
      null: nullTag,
      omap,
      pairs,
      seq,
      set,
      timestamp
  };
  const coreKnownTags = {
      'tag:yaml.org,2002:binary': binary,
      'tag:yaml.org,2002:merge': merge,
      'tag:yaml.org,2002:omap': omap,
      'tag:yaml.org,2002:pairs': pairs,
      'tag:yaml.org,2002:set': set,
      'tag:yaml.org,2002:timestamp': timestamp
  };
  function getTags(customTags, schemaName, addMergeTag) {
      const schemaTags = schemas.get(schemaName);
      if (schemaTags && !customTags) {
          return addMergeTag && !schemaTags.includes(merge)
              ? schemaTags.concat(merge)
              : schemaTags.slice();
      }
      let tags = schemaTags;
      if (!tags) {
          if (Array.isArray(customTags))
              tags = [];
          else {
              const keys = Array.from(schemas.keys())
                  .filter(key => key !== 'yaml11')
                  .map(key => JSON.stringify(key))
                  .join(', ');
              throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
          }
      }
      if (Array.isArray(customTags)) {
          for (const tag of customTags)
              tags = tags.concat(tag);
      }
      else if (typeof customTags === 'function') {
          tags = customTags(tags.slice());
      }
      if (addMergeTag)
          tags = tags.concat(merge);
      return tags.reduce((tags, tag) => {
          const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;
          if (!tagObj) {
              const tagName = JSON.stringify(tag);
              const keys = Object.keys(tagsByName)
                  .map(key => JSON.stringify(key))
                  .join(', ');
              throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);
          }
          if (!tags.includes(tagObj))
              tags.push(tagObj);
          return tags;
      }, []);
  }

  const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
  class Schema {
      constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
          this.compat = Array.isArray(compat)
              ? getTags(compat, 'compat')
              : compat
                  ? getTags(null, compat)
                  : null;
          this.name = (typeof schema === 'string' && schema) || 'core';
          this.knownTags = resolveKnownTags ? coreKnownTags : {};
          this.tags = getTags(customTags, this.name, merge);
          this.toStringOptions = toStringDefaults ?? null;
          Object.defineProperty(this, MAP, { value: map });
          Object.defineProperty(this, SCALAR$1, { value: string });
          Object.defineProperty(this, SEQ, { value: seq });
          // Used by createMap()
          this.sortMapEntries =
              typeof sortMapEntries === 'function'
                  ? sortMapEntries
                  : sortMapEntries === true
                      ? sortMapEntriesByKey
                      : null;
      }
      clone() {
          const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
          copy.tags = this.tags.slice();
          return copy;
      }
  }

  function stringifyDocument(doc, options) {
      const lines = [];
      let hasDirectives = options.directives === true;
      if (options.directives !== false && doc.directives) {
          const dir = doc.directives.toString(doc);
          if (dir) {
              lines.push(dir);
              hasDirectives = true;
          }
          else if (doc.directives.docStart)
              hasDirectives = true;
      }
      if (hasDirectives)
          lines.push('---');
      const ctx = createStringifyContext(doc, options);
      const { commentString } = ctx.options;
      if (doc.commentBefore) {
          if (lines.length !== 1)
              lines.unshift('');
          const cs = commentString(doc.commentBefore);
          lines.unshift(indentComment(cs, ''));
      }
      let chompKeep = false;
      let contentComment = null;
      if (doc.contents) {
          if (isNode(doc.contents)) {
              if (doc.contents.spaceBefore && hasDirectives)
                  lines.push('');
              if (doc.contents.commentBefore) {
                  const cs = commentString(doc.contents.commentBefore);
                  lines.push(indentComment(cs, ''));
              }
              // top-level block scalars need to be indented if followed by a comment
              ctx.forceBlockIndent = !!doc.comment;
              contentComment = doc.contents.comment;
          }
          const onChompKeep = contentComment ? undefined : () => (chompKeep = true);
          let body = stringify$2(doc.contents, ctx, () => (contentComment = null), onChompKeep);
          if (contentComment)
              body += lineComment(body, '', commentString(contentComment));
          if ((body[0] === '|' || body[0] === '>') &&
              lines[lines.length - 1] === '---') {
              // Top-level block scalars with a preceding doc marker ought to use the
              // same line for their header.
              lines[lines.length - 1] = `--- ${body}`;
          }
          else
              lines.push(body);
      }
      else {
          lines.push(stringify$2(doc.contents, ctx));
      }
      if (doc.directives?.docEnd) {
          if (doc.comment) {
              const cs = commentString(doc.comment);
              if (cs.includes('\n')) {
                  lines.push('...');
                  lines.push(indentComment(cs, ''));
              }
              else {
                  lines.push(`... ${cs}`);
              }
          }
          else {
              lines.push('...');
          }
      }
      else {
          let dc = doc.comment;
          if (dc && chompKeep)
              dc = dc.replace(/^\n+/, '');
          if (dc) {
              if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')
                  lines.push('');
              lines.push(indentComment(commentString(dc), ''));
          }
      }
      return lines.join('\n') + '\n';
  }

  class Document {
      constructor(value, replacer, options) {
          /** A comment before this Document */
          this.commentBefore = null;
          /** A comment immediately after this Document */
          this.comment = null;
          /** Errors encountered during parsing. */
          this.errors = [];
          /** Warnings encountered during parsing. */
          this.warnings = [];
          Object.defineProperty(this, NODE_TYPE, { value: DOC });
          let _replacer = null;
          if (typeof replacer === 'function' || Array.isArray(replacer)) {
              _replacer = replacer;
          }
          else if (options === undefined && replacer) {
              options = replacer;
              replacer = undefined;
          }
          const opt = Object.assign({
              intAsBigInt: false,
              keepSourceTokens: false,
              logLevel: 'warn',
              prettyErrors: true,
              strict: true,
              stringKeys: false,
              uniqueKeys: true,
              version: '1.2'
          }, options);
          this.options = opt;
          let { version } = opt;
          if (options?._directives) {
              this.directives = options._directives.atDocument();
              if (this.directives.yaml.explicit)
                  version = this.directives.yaml.version;
          }
          else
              this.directives = new Directives({ version });
          this.setSchema(version, options);
          // @ts-expect-error We can't really know that this matches Contents.
          this.contents =
              value === undefined ? null : this.createNode(value, _replacer, options);
      }
      /**
       * Create a deep copy of this Document and its contents.
       *
       * Custom Node values that inherit from `Object` still refer to their original instances.
       */
      clone() {
          const copy = Object.create(Document.prototype, {
              [NODE_TYPE]: { value: DOC }
          });
          copy.commentBefore = this.commentBefore;
          copy.comment = this.comment;
          copy.errors = this.errors.slice();
          copy.warnings = this.warnings.slice();
          copy.options = Object.assign({}, this.options);
          if (this.directives)
              copy.directives = this.directives.clone();
          copy.schema = this.schema.clone();
          // @ts-expect-error We can't really know that this matches Contents.
          copy.contents = isNode(this.contents)
              ? this.contents.clone(copy.schema)
              : this.contents;
          if (this.range)
              copy.range = this.range.slice();
          return copy;
      }
      /** Adds a value to the document. */
      add(value) {
          if (assertCollection(this.contents))
              this.contents.add(value);
      }
      /** Adds a value to the document. */
      addIn(path, value) {
          if (assertCollection(this.contents))
              this.contents.addIn(path, value);
      }
      /**
       * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
       *
       * If `node` already has an anchor, `name` is ignored.
       * Otherwise, the `node.anchor` value will be set to `name`,
       * or if an anchor with that name is already present in the document,
       * `name` will be used as a prefix for a new unique anchor.
       * If `name` is undefined, the generated anchor will use 'a' as a prefix.
       */
      createAlias(node, name) {
          if (!node.anchor) {
              const prev = anchorNames(this);
              node.anchor =
                  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
                  !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;
          }
          return new Alias(node.anchor);
      }
      createNode(value, replacer, options) {
          let _replacer = undefined;
          if (typeof replacer === 'function') {
              value = replacer.call({ '': value }, '', value);
              _replacer = replacer;
          }
          else if (Array.isArray(replacer)) {
              const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;
              const asStr = replacer.filter(keyToStr).map(String);
              if (asStr.length > 0)
                  replacer = replacer.concat(asStr);
              _replacer = replacer;
          }
          else if (options === undefined && replacer) {
              options = replacer;
              replacer = undefined;
          }
          const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
          const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, 
          // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
          anchorPrefix || 'a');
          const ctx = {
              aliasDuplicateObjects: aliasDuplicateObjects ?? true,
              keepUndefined: keepUndefined ?? false,
              onAnchor,
              onTagObj,
              replacer: _replacer,
              schema: this.schema,
              sourceObjects
          };
          const node = createNode(value, tag, ctx);
          if (flow && isCollection$1(node))
              node.flow = true;
          setAnchors();
          return node;
      }
      /**
       * Convert a key and a value into a `Pair` using the current schema,
       * recursively wrapping all values as `Scalar` or `Collection` nodes.
       */
      createPair(key, value, options = {}) {
          const k = this.createNode(key, null, options);
          const v = this.createNode(value, null, options);
          return new Pair(k, v);
      }
      /**
       * Removes a value from the document.
       * @returns `true` if the item was found and removed.
       */
      delete(key) {
          return assertCollection(this.contents) ? this.contents.delete(key) : false;
      }
      /**
       * Removes a value from the document.
       * @returns `true` if the item was found and removed.
       */
      deleteIn(path) {
          if (isEmptyPath(path)) {
              if (this.contents == null)
                  return false;
              // @ts-expect-error Presumed impossible if Strict extends false
              this.contents = null;
              return true;
          }
          return assertCollection(this.contents)
              ? this.contents.deleteIn(path)
              : false;
      }
      /**
       * Returns item at `key`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      get(key, keepScalar) {
          return isCollection$1(this.contents)
              ? this.contents.get(key, keepScalar)
              : undefined;
      }
      /**
       * Returns item at `path`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      getIn(path, keepScalar) {
          if (isEmptyPath(path))
              return !keepScalar && isScalar$1(this.contents)
                  ? this.contents.value
                  : this.contents;
          return isCollection$1(this.contents)
              ? this.contents.getIn(path, keepScalar)
              : undefined;
      }
      /**
       * Checks if the document includes a value with the key `key`.
       */
      has(key) {
          return isCollection$1(this.contents) ? this.contents.has(key) : false;
      }
      /**
       * Checks if the document includes a value at `path`.
       */
      hasIn(path) {
          if (isEmptyPath(path))
              return this.contents !== undefined;
          return isCollection$1(this.contents) ? this.contents.hasIn(path) : false;
      }
      /**
       * Sets a value in this document. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      set(key, value) {
          if (this.contents == null) {
              // @ts-expect-error We can't really know that this matches Contents.
              this.contents = collectionFromPath(this.schema, [key], value);
          }
          else if (assertCollection(this.contents)) {
              this.contents.set(key, value);
          }
      }
      /**
       * Sets a value in this document. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      setIn(path, value) {
          if (isEmptyPath(path)) {
              // @ts-expect-error We can't really know that this matches Contents.
              this.contents = value;
          }
          else if (this.contents == null) {
              // @ts-expect-error We can't really know that this matches Contents.
              this.contents = collectionFromPath(this.schema, Array.from(path), value);
          }
          else if (assertCollection(this.contents)) {
              this.contents.setIn(path, value);
          }
      }
      /**
       * Change the YAML version and schema used by the document.
       * A `null` version disables support for directives, explicit tags, anchors, and aliases.
       * It also requires the `schema` option to be given as a `Schema` instance value.
       *
       * Overrides all previously set schema options.
       */
      setSchema(version, options = {}) {
          if (typeof version === 'number')
              version = String(version);
          let opt;
          switch (version) {
              case '1.1':
                  if (this.directives)
                      this.directives.yaml.version = '1.1';
                  else
                      this.directives = new Directives({ version: '1.1' });
                  opt = { resolveKnownTags: false, schema: 'yaml-1.1' };
                  break;
              case '1.2':
              case 'next':
                  if (this.directives)
                      this.directives.yaml.version = version;
                  else
                      this.directives = new Directives({ version });
                  opt = { resolveKnownTags: true, schema: 'core' };
                  break;
              case null:
                  if (this.directives)
                      delete this.directives;
                  opt = null;
                  break;
              default: {
                  const sv = JSON.stringify(version);
                  throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
              }
          }
          // Not using `instanceof Schema` to allow for duck typing
          if (options.schema instanceof Object)
              this.schema = options.schema;
          else if (opt)
              this.schema = new Schema(Object.assign(opt, options));
          else
              throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
      }
      // json & jsonArg are only used from toJSON()
      toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
          const ctx = {
              anchors: new Map(),
              doc: this,
              keep: !json,
              mapAsMap: mapAsMap === true,
              mapKeyWarned: false,
              maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100
          };
          const res = toJS(this.contents, jsonArg ?? '', ctx);
          if (typeof onAnchor === 'function')
              for (const { count, res } of ctx.anchors.values())
                  onAnchor(res, count);
          return typeof reviver === 'function'
              ? applyReviver(reviver, { '': res }, '', res)
              : res;
      }
      /**
       * A JSON representation of the document `contents`.
       *
       * @param jsonArg Used by `JSON.stringify` to indicate the array index or
       *   property name.
       */
      toJSON(jsonArg, onAnchor) {
          return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
      }
      /** A YAML representation of the document. */
      toString(options = {}) {
          if (this.errors.length > 0)
              throw new Error('Document with errors cannot be stringified');
          if ('indent' in options &&
              (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
              const s = JSON.stringify(options.indent);
              throw new Error(`"indent" option must be a positive integer, not ${s}`);
          }
          return stringifyDocument(this, options);
      }
  }
  function assertCollection(contents) {
      if (isCollection$1(contents))
          return true;
      throw new Error('Expected a YAML collection as document contents');
  }

  class YAMLError extends Error {
      constructor(name, pos, code, message) {
          super();
          this.name = name;
          this.code = code;
          this.message = message;
          this.pos = pos;
      }
  }
  class YAMLParseError extends YAMLError {
      constructor(pos, code, message) {
          super('YAMLParseError', pos, code, message);
      }
  }
  class YAMLWarning extends YAMLError {
      constructor(pos, code, message) {
          super('YAMLWarning', pos, code, message);
      }
  }
  const prettifyError = (src, lc) => (error) => {
      if (error.pos[0] === -1)
          return;
      error.linePos = error.pos.map(pos => lc.linePos(pos));
      const { line, col } = error.linePos[0];
      error.message += ` at line ${line}, column ${col}`;
      let ci = col - 1;
      let lineStr = src
          .substring(lc.lineStarts[line - 1], lc.lineStarts[line])
          .replace(/[\n\r]+$/, '');
      // Trim to max 80 chars, keeping col position near the middle
      if (ci >= 60 && lineStr.length > 80) {
          const trimStart = Math.min(ci - 39, lineStr.length - 79);
          lineStr = '…' + lineStr.substring(trimStart);
          ci -= trimStart - 1;
      }
      if (lineStr.length > 80)
          lineStr = lineStr.substring(0, 79) + '…';
      // Include previous line in context if pointing at line start
      if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
          // Regexp won't match if start is trimmed
          let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
          if (prev.length > 80)
              prev = prev.substring(0, 79) + '…\n';
          lineStr = prev + lineStr;
      }
      if (/[^ ]/.test(lineStr)) {
          let count = 1;
          const end = error.linePos[1];
          if (end && end.line === line && end.col > col) {
              count = Math.max(1, Math.min(end.col - col, 80 - ci));
          }
          const pointer = ' '.repeat(ci) + '^'.repeat(count);
          error.message += `:\n\n${lineStr}\n${pointer}\n`;
      }
  };

  function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {
      let spaceBefore = false;
      let atNewline = startOnNewline;
      let hasSpace = startOnNewline;
      let comment = '';
      let commentSep = '';
      let hasNewline = false;
      let reqSpace = false;
      let tab = null;
      let anchor = null;
      let tag = null;
      let newlineAfterProp = null;
      let comma = null;
      let found = null;
      let start = null;
      for (const token of tokens) {
          if (reqSpace) {
              if (token.type !== 'space' &&
                  token.type !== 'newline' &&
                  token.type !== 'comma')
                  onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
              reqSpace = false;
          }
          if (tab) {
              if (atNewline && token.type !== 'comment' && token.type !== 'newline') {
                  onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
              }
              tab = null;
          }
          switch (token.type) {
              case 'space':
                  // At the doc level, tabs at line start may be parsed
                  // as leading white space rather than indentation.
                  // In a flow collection, only the parser handles indent.
                  if (!flow &&
                      (indicator !== 'doc-start' || next?.type !== 'flow-collection') &&
                      token.source.includes('\t')) {
                      tab = token;
                  }
                  hasSpace = true;
                  break;
              case 'comment': {
                  if (!hasSpace)
                      onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                  const cb = token.source.substring(1) || ' ';
                  if (!comment)
                      comment = cb;
                  else
                      comment += commentSep + cb;
                  commentSep = '';
                  atNewline = false;
                  break;
              }
              case 'newline':
                  if (atNewline) {
                      if (comment)
                          comment += token.source;
                      else if (!found || indicator !== 'seq-item-ind')
                          spaceBefore = true;
                  }
                  else
                      commentSep += token.source;
                  atNewline = true;
                  hasNewline = true;
                  if (anchor || tag)
                      newlineAfterProp = token;
                  hasSpace = true;
                  break;
              case 'anchor':
                  if (anchor)
                      onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');
                  if (token.source.endsWith(':'))
                      onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);
                  anchor = token;
                  start ?? (start = token.offset);
                  atNewline = false;
                  hasSpace = false;
                  reqSpace = true;
                  break;
              case 'tag': {
                  if (tag)
                      onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');
                  tag = token;
                  start ?? (start = token.offset);
                  atNewline = false;
                  hasSpace = false;
                  reqSpace = true;
                  break;
              }
              case indicator:
                  // Could here handle preceding comments differently
                  if (anchor || tag)
                      onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);
                  if (found)
                      onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);
                  found = token;
                  atNewline =
                      indicator === 'seq-item-ind' || indicator === 'explicit-key-ind';
                  hasSpace = false;
                  break;
              case 'comma':
                  if (flow) {
                      if (comma)
                          onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);
                      comma = token;
                      atNewline = false;
                      hasSpace = false;
                      break;
                  }
              // else fallthrough
              default:
                  onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);
                  atNewline = false;
                  hasSpace = false;
          }
      }
      const last = tokens[tokens.length - 1];
      const end = last ? last.offset + last.source.length : offset;
      if (reqSpace &&
          next &&
          next.type !== 'space' &&
          next.type !== 'newline' &&
          next.type !== 'comma' &&
          (next.type !== 'scalar' || next.source !== '')) {
          onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');
      }
      if (tab &&
          ((atNewline && tab.indent <= parentIndent) ||
              next?.type === 'block-map' ||
              next?.type === 'block-seq'))
          onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
      return {
          comma,
          found,
          spaceBefore,
          comment,
          hasNewline,
          anchor,
          tag,
          newlineAfterProp,
          end,
          start: start ?? end
      };
  }

  function containsNewline(key) {
      if (!key)
          return null;
      switch (key.type) {
          case 'alias':
          case 'scalar':
          case 'double-quoted-scalar':
          case 'single-quoted-scalar':
              if (key.source.includes('\n'))
                  return true;
              if (key.end)
                  for (const st of key.end)
                      if (st.type === 'newline')
                          return true;
              return false;
          case 'flow-collection':
              for (const it of key.items) {
                  for (const st of it.start)
                      if (st.type === 'newline')
                          return true;
                  if (it.sep)
                      for (const st of it.sep)
                          if (st.type === 'newline')
                              return true;
                  if (containsNewline(it.key) || containsNewline(it.value))
                      return true;
              }
              return false;
          default:
              return true;
      }
  }

  function flowIndentCheck(indent, fc, onError) {
      if (fc?.type === 'flow-collection') {
          const end = fc.end[0];
          if (end.indent === indent &&
              (end.source === ']' || end.source === '}') &&
              containsNewline(fc)) {
              const msg = 'Flow end indicator should be more indented than parent';
              onError(end, 'BAD_INDENT', msg, true);
          }
      }
  }

  function mapIncludes(ctx, items, search) {
      const { uniqueKeys } = ctx.options;
      if (uniqueKeys === false)
          return false;
      const isEqual = typeof uniqueKeys === 'function'
          ? uniqueKeys
          : (a, b) => a === b || (isScalar$1(a) && isScalar$1(b) && a.value === b.value);
      return items.some(pair => isEqual(pair.key, search));
  }

  const startColMsg = 'All mapping items must start at the same column';
  function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
      const NodeClass = tag?.nodeClass ?? YAMLMap;
      const map = new NodeClass(ctx.schema);
      if (ctx.atRoot)
          ctx.atRoot = false;
      let offset = bm.offset;
      let commentEnd = null;
      for (const collItem of bm.items) {
          const { start, key, sep, value } = collItem;
          // key properties
          const keyProps = resolveProps(start, {
              indicator: 'explicit-key-ind',
              next: key ?? sep?.[0],
              offset,
              onError,
              parentIndent: bm.indent,
              startOnNewline: true
          });
          const implicitKey = !keyProps.found;
          if (implicitKey) {
              if (key) {
                  if (key.type === 'block-seq')
                      onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');
                  else if ('indent' in key && key.indent !== bm.indent)
                      onError(offset, 'BAD_INDENT', startColMsg);
              }
              if (!keyProps.anchor && !keyProps.tag && !sep) {
                  commentEnd = keyProps.end;
                  if (keyProps.comment) {
                      if (map.comment)
                          map.comment += '\n' + keyProps.comment;
                      else
                          map.comment = keyProps.comment;
                  }
                  continue;
              }
              if (keyProps.newlineAfterProp || containsNewline(key)) {
                  onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');
              }
          }
          else if (keyProps.found?.indent !== bm.indent) {
              onError(offset, 'BAD_INDENT', startColMsg);
          }
          // key value
          ctx.atKey = true;
          const keyStart = keyProps.end;
          const keyNode = key
              ? composeNode(ctx, key, keyProps, onError)
              : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
          if (ctx.schema.compat)
              flowIndentCheck(bm.indent, key, onError);
          ctx.atKey = false;
          if (mapIncludes(ctx, map.items, keyNode))
              onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
          // value properties
          const valueProps = resolveProps(sep ?? [], {
              indicator: 'map-value-ind',
              next: value,
              offset: keyNode.range[2],
              onError,
              parentIndent: bm.indent,
              startOnNewline: !key || key.type === 'block-scalar'
          });
          offset = valueProps.end;
          if (valueProps.found) {
              if (implicitKey) {
                  if (value?.type === 'block-map' && !valueProps.hasNewline)
                      onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');
                  if (ctx.options.strict &&
                      keyProps.start < valueProps.found.offset - 1024)
                      onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');
              }
              // value value
              const valueNode = value
                  ? composeNode(ctx, value, valueProps, onError)
                  : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
              if (ctx.schema.compat)
                  flowIndentCheck(bm.indent, value, onError);
              offset = valueNode.range[2];
              const pair = new Pair(keyNode, valueNode);
              if (ctx.options.keepSourceTokens)
                  pair.srcToken = collItem;
              map.items.push(pair);
          }
          else {
              // key with no value
              if (implicitKey)
                  onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');
              if (valueProps.comment) {
                  if (keyNode.comment)
                      keyNode.comment += '\n' + valueProps.comment;
                  else
                      keyNode.comment = valueProps.comment;
              }
              const pair = new Pair(keyNode);
              if (ctx.options.keepSourceTokens)
                  pair.srcToken = collItem;
              map.items.push(pair);
          }
      }
      if (commentEnd && commentEnd < offset)
          onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');
      map.range = [bm.offset, offset, commentEnd ?? offset];
      return map;
  }

  function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
      const NodeClass = tag?.nodeClass ?? YAMLSeq;
      const seq = new NodeClass(ctx.schema);
      if (ctx.atRoot)
          ctx.atRoot = false;
      if (ctx.atKey)
          ctx.atKey = false;
      let offset = bs.offset;
      let commentEnd = null;
      for (const { start, value } of bs.items) {
          const props = resolveProps(start, {
              indicator: 'seq-item-ind',
              next: value,
              offset,
              onError,
              parentIndent: bs.indent,
              startOnNewline: true
          });
          if (!props.found) {
              if (props.anchor || props.tag || value) {
                  if (value && value.type === 'block-seq')
                      onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');
                  else
                      onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');
              }
              else {
                  commentEnd = props.end;
                  if (props.comment)
                      seq.comment = props.comment;
                  continue;
              }
          }
          const node = value
              ? composeNode(ctx, value, props, onError)
              : composeEmptyNode(ctx, props.end, start, null, props, onError);
          if (ctx.schema.compat)
              flowIndentCheck(bs.indent, value, onError);
          offset = node.range[2];
          seq.items.push(node);
      }
      seq.range = [bs.offset, offset, commentEnd ?? offset];
      return seq;
  }

  function resolveEnd(end, offset, reqSpace, onError) {
      let comment = '';
      if (end) {
          let hasSpace = false;
          let sep = '';
          for (const token of end) {
              const { source, type } = token;
              switch (type) {
                  case 'space':
                      hasSpace = true;
                      break;
                  case 'comment': {
                      if (reqSpace && !hasSpace)
                          onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');
                      const cb = source.substring(1) || ' ';
                      if (!comment)
                          comment = cb;
                      else
                          comment += sep + cb;
                      sep = '';
                      break;
                  }
                  case 'newline':
                      if (comment)
                          sep += source;
                      hasSpace = true;
                      break;
                  default:
                      onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);
              }
              offset += source.length;
          }
      }
      return { comment, offset };
  }

  const blockMsg = 'Block collections are not allowed within flow collections';
  const isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');
  function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
      const isMap = fc.start.source === '{';
      const fcName = isMap ? 'flow map' : 'flow sequence';
      const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));
      const coll = new NodeClass(ctx.schema);
      coll.flow = true;
      const atRoot = ctx.atRoot;
      if (atRoot)
          ctx.atRoot = false;
      if (ctx.atKey)
          ctx.atKey = false;
      let offset = fc.offset + fc.start.source.length;
      for (let i = 0; i < fc.items.length; ++i) {
          const collItem = fc.items[i];
          const { start, key, sep, value } = collItem;
          const props = resolveProps(start, {
              flow: fcName,
              indicator: 'explicit-key-ind',
              next: key ?? sep?.[0],
              offset,
              onError,
              parentIndent: fc.indent,
              startOnNewline: false
          });
          if (!props.found) {
              if (!props.anchor && !props.tag && !sep && !value) {
                  if (i === 0 && props.comma)
                      onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
                  else if (i < fc.items.length - 1)
                      onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);
                  if (props.comment) {
                      if (coll.comment)
                          coll.comment += '\n' + props.comment;
                      else
                          coll.comment = props.comment;
                  }
                  offset = props.end;
                  continue;
              }
              if (!isMap && ctx.options.strict && containsNewline(key))
                  onError(key, // checked by containsNewline()
                  'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
          }
          if (i === 0) {
              if (props.comma)
                  onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);
          }
          else {
              if (!props.comma)
                  onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);
              if (props.comment) {
                  let prevItemComment = '';
                  loop: for (const st of start) {
                      switch (st.type) {
                          case 'comma':
                          case 'space':
                              break;
                          case 'comment':
                              prevItemComment = st.source.substring(1);
                              break loop;
                          default:
                              break loop;
                      }
                  }
                  if (prevItemComment) {
                      let prev = coll.items[coll.items.length - 1];
                      if (isPair(prev))
                          prev = prev.value ?? prev.key;
                      if (prev.comment)
                          prev.comment += '\n' + prevItemComment;
                      else
                          prev.comment = prevItemComment;
                      props.comment = props.comment.substring(prevItemComment.length + 1);
                  }
              }
          }
          if (!isMap && !sep && !props.found) {
              // item is a value in a seq
              // → key & sep are empty, start does not include ? or :
              const valueNode = value
                  ? composeNode(ctx, value, props, onError)
                  : composeEmptyNode(ctx, props.end, sep, null, props, onError);
              coll.items.push(valueNode);
              offset = valueNode.range[2];
              if (isBlock(value))
                  onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
          }
          else {
              // item is a key+value pair
              // key value
              ctx.atKey = true;
              const keyStart = props.end;
              const keyNode = key
                  ? composeNode(ctx, key, props, onError)
                  : composeEmptyNode(ctx, keyStart, start, null, props, onError);
              if (isBlock(key))
                  onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);
              ctx.atKey = false;
              // value properties
              const valueProps = resolveProps(sep ?? [], {
                  flow: fcName,
                  indicator: 'map-value-ind',
                  next: value,
                  offset: keyNode.range[2],
                  onError,
                  parentIndent: fc.indent,
                  startOnNewline: false
              });
              if (valueProps.found) {
                  if (!isMap && !props.found && ctx.options.strict) {
                      if (sep)
                          for (const st of sep) {
                              if (st === valueProps.found)
                                  break;
                              if (st.type === 'newline') {
                                  onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');
                                  break;
                              }
                          }
                      if (props.start < valueProps.found.offset - 1024)
                          onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');
                  }
              }
              else if (value) {
                  if ('source' in value && value.source && value.source[0] === ':')
                      onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);
                  else
                      onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);
              }
              // value value
              const valueNode = value
                  ? composeNode(ctx, value, valueProps, onError)
                  : valueProps.found
                      ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)
                      : null;
              if (valueNode) {
                  if (isBlock(value))
                      onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);
              }
              else if (valueProps.comment) {
                  if (keyNode.comment)
                      keyNode.comment += '\n' + valueProps.comment;
                  else
                      keyNode.comment = valueProps.comment;
              }
              const pair = new Pair(keyNode, valueNode);
              if (ctx.options.keepSourceTokens)
                  pair.srcToken = collItem;
              if (isMap) {
                  const map = coll;
                  if (mapIncludes(ctx, map.items, keyNode))
                      onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
                  map.items.push(pair);
              }
              else {
                  const map = new YAMLMap(ctx.schema);
                  map.flow = true;
                  map.items.push(pair);
                  const endRange = (valueNode ?? keyNode).range;
                  map.range = [keyNode.range[0], endRange[1], endRange[2]];
                  coll.items.push(map);
              }
              offset = valueNode ? valueNode.range[2] : valueProps.end;
          }
      }
      const expectedEnd = isMap ? '}' : ']';
      const [ce, ...ee] = fc.end;
      let cePos = offset;
      if (ce && ce.source === expectedEnd)
          cePos = ce.offset + ce.source.length;
      else {
          const name = fcName[0].toUpperCase() + fcName.substring(1);
          const msg = atRoot
              ? `${name} must end with a ${expectedEnd}`
              : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
          onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);
          if (ce && ce.source.length !== 1)
              ee.unshift(ce);
      }
      if (ee.length > 0) {
          const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
          if (end.comment) {
              if (coll.comment)
                  coll.comment += '\n' + end.comment;
              else
                  coll.comment = end.comment;
          }
          coll.range = [fc.offset, cePos, end.offset];
      }
      else {
          coll.range = [fc.offset, cePos, cePos];
      }
      return coll;
  }

  function resolveCollection(CN, ctx, token, onError, tagName, tag) {
      const coll = token.type === 'block-map'
          ? resolveBlockMap(CN, ctx, token, onError, tag)
          : token.type === 'block-seq'
              ? resolveBlockSeq(CN, ctx, token, onError, tag)
              : resolveFlowCollection(CN, ctx, token, onError, tag);
      const Coll = coll.constructor;
      // If we got a tagName matching the class, or the tag name is '!',
      // then use the tagName from the node class used to create it.
      if (tagName === '!' || tagName === Coll.tagName) {
          coll.tag = Coll.tagName;
          return coll;
      }
      if (tagName)
          coll.tag = tagName;
      return coll;
  }
  function composeCollection(CN, ctx, token, props, onError) {
      const tagToken = props.tag;
      const tagName = !tagToken
          ? null
          : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));
      if (token.type === 'block-seq') {
          const { anchor, newlineAfterProp: nl } = props;
          const lastProp = anchor && tagToken
              ? anchor.offset > tagToken.offset
                  ? anchor
                  : tagToken
              : (anchor ?? tagToken);
          if (lastProp && (!nl || nl.offset < lastProp.offset)) {
              const message = 'Missing newline after block sequence props';
              onError(lastProp, 'MISSING_CHAR', message);
          }
      }
      const expType = token.type === 'block-map'
          ? 'map'
          : token.type === 'block-seq'
              ? 'seq'
              : token.start.source === '{'
                  ? 'map'
                  : 'seq';
      // shortcut: check if it's a generic YAMLMap or YAMLSeq
      // before jumping into the custom tag logic.
      if (!tagToken ||
          !tagName ||
          tagName === '!' ||
          (tagName === YAMLMap.tagName && expType === 'map') ||
          (tagName === YAMLSeq.tagName && expType === 'seq')) {
          return resolveCollection(CN, ctx, token, onError, tagName);
      }
      let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);
      if (!tag) {
          const kt = ctx.schema.knownTags[tagName];
          if (kt && kt.collection === expType) {
              ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
              tag = kt;
          }
          else {
              if (kt) {
                  onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection ?? 'scalar'}`, true);
              }
              else {
                  onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);
              }
              return resolveCollection(CN, ctx, token, onError, tagName);
          }
      }
      const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
      const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;
      const node = isNode(res)
          ? res
          : new Scalar(res);
      node.range = coll.range;
      node.tag = tagName;
      if (tag?.format)
          node.format = tag.format;
      return node;
  }

  function resolveBlockScalar(ctx, scalar, onError) {
      const start = scalar.offset;
      const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);
      if (!header)
          return { value: '', type: null, comment: '', range: [start, start, start] };
      const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
      const lines = scalar.source ? splitLines(scalar.source) : [];
      // determine the end of content & start of chomping
      let chompStart = lines.length;
      for (let i = lines.length - 1; i >= 0; --i) {
          const content = lines[i][1];
          if (content === '' || content === '\r')
              chompStart = i;
          else
              break;
      }
      // shortcut for empty contents
      if (chompStart === 0) {
          const value = header.chomp === '+' && lines.length > 0
              ? '\n'.repeat(Math.max(1, lines.length - 1))
              : '';
          let end = start + header.length;
          if (scalar.source)
              end += scalar.source.length;
          return { value, type, comment: header.comment, range: [start, end, end] };
      }
      // find the indentation level to trim from start
      let trimIndent = scalar.indent + header.indent;
      let offset = scalar.offset + header.length;
      let contentStart = 0;
      for (let i = 0; i < chompStart; ++i) {
          const [indent, content] = lines[i];
          if (content === '' || content === '\r') {
              if (header.indent === 0 && indent.length > trimIndent)
                  trimIndent = indent.length;
          }
          else {
              if (indent.length < trimIndent) {
                  const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';
                  onError(offset + indent.length, 'MISSING_CHAR', message);
              }
              if (header.indent === 0)
                  trimIndent = indent.length;
              contentStart = i;
              if (trimIndent === 0 && !ctx.atRoot) {
                  const message = 'Block scalar values in collections must be indented';
                  onError(offset, 'BAD_INDENT', message);
              }
              break;
          }
          offset += indent.length + content.length + 1;
      }
      // include trailing more-indented empty lines in content
      for (let i = lines.length - 1; i >= chompStart; --i) {
          if (lines[i][0].length > trimIndent)
              chompStart = i + 1;
      }
      let value = '';
      let sep = '';
      let prevMoreIndented = false;
      // leading whitespace is kept intact
      for (let i = 0; i < contentStart; ++i)
          value += lines[i][0].slice(trimIndent) + '\n';
      for (let i = contentStart; i < chompStart; ++i) {
          let [indent, content] = lines[i];
          offset += indent.length + content.length + 1;
          const crlf = content[content.length - 1] === '\r';
          if (crlf)
              content = content.slice(0, -1);
          /* istanbul ignore if already caught in lexer */
          if (content && indent.length < trimIndent) {
              const src = header.indent
                  ? 'explicit indentation indicator'
                  : 'first line';
              const message = `Block scalar lines must not be less indented than their ${src}`;
              onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);
              indent = '';
          }
          if (type === Scalar.BLOCK_LITERAL) {
              value += sep + indent.slice(trimIndent) + content;
              sep = '\n';
          }
          else if (indent.length > trimIndent || content[0] === '\t') {
              // more-indented content within a folded block
              if (sep === ' ')
                  sep = '\n';
              else if (!prevMoreIndented && sep === '\n')
                  sep = '\n\n';
              value += sep + indent.slice(trimIndent) + content;
              sep = '\n';
              prevMoreIndented = true;
          }
          else if (content === '') {
              // empty line
              if (sep === '\n')
                  value += '\n';
              else
                  sep = '\n';
          }
          else {
              value += sep + content;
              sep = ' ';
              prevMoreIndented = false;
          }
      }
      switch (header.chomp) {
          case '-':
              break;
          case '+':
              for (let i = chompStart; i < lines.length; ++i)
                  value += '\n' + lines[i][0].slice(trimIndent);
              if (value[value.length - 1] !== '\n')
                  value += '\n';
              break;
          default:
              value += '\n';
      }
      const end = start + header.length + scalar.source.length;
      return { value, type, comment: header.comment, range: [start, end, end] };
  }
  function parseBlockScalarHeader({ offset, props }, strict, onError) {
      /* istanbul ignore if should not happen */
      if (props[0].type !== 'block-scalar-header') {
          onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');
          return null;
      }
      const { source } = props[0];
      const mode = source[0];
      let indent = 0;
      let chomp = '';
      let error = -1;
      for (let i = 1; i < source.length; ++i) {
          const ch = source[i];
          if (!chomp && (ch === '-' || ch === '+'))
              chomp = ch;
          else {
              const n = Number(ch);
              if (!indent && n)
                  indent = n;
              else if (error === -1)
                  error = offset + i;
          }
      }
      if (error !== -1)
          onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);
      let hasSpace = false;
      let comment = '';
      let length = source.length;
      for (let i = 1; i < props.length; ++i) {
          const token = props[i];
          switch (token.type) {
              case 'space':
                  hasSpace = true;
              // fallthrough
              case 'newline':
                  length += token.source.length;
                  break;
              case 'comment':
                  if (strict && !hasSpace) {
                      const message = 'Comments must be separated from other tokens by white space characters';
                      onError(token, 'MISSING_CHAR', message);
                  }
                  length += token.source.length;
                  comment = token.source.substring(1);
                  break;
              case 'error':
                  onError(token, 'UNEXPECTED_TOKEN', token.message);
                  length += token.source.length;
                  break;
              /* istanbul ignore next should not happen */
              default: {
                  const message = `Unexpected token in block scalar header: ${token.type}`;
                  onError(token, 'UNEXPECTED_TOKEN', message);
                  const ts = token.source;
                  if (ts && typeof ts === 'string')
                      length += ts.length;
              }
          }
      }
      return { mode, indent, chomp, comment, length };
  }
  /** @returns Array of lines split up as `[indent, content]` */
  function splitLines(source) {
      const split = source.split(/\n( *)/);
      const first = split[0];
      const m = first.match(/^( *)/);
      const line0 = m?.[1]
          ? [m[1], first.slice(m[1].length)]
          : ['', first];
      const lines = [line0];
      for (let i = 1; i < split.length; i += 2)
          lines.push([split[i], split[i + 1]]);
      return lines;
  }

  function resolveFlowScalar(scalar, strict, onError) {
      const { offset, type, source, end } = scalar;
      let _type;
      let value;
      const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
      switch (type) {
          case 'scalar':
              _type = Scalar.PLAIN;
              value = plainValue(source, _onError);
              break;
          case 'single-quoted-scalar':
              _type = Scalar.QUOTE_SINGLE;
              value = singleQuotedValue(source, _onError);
              break;
          case 'double-quoted-scalar':
              _type = Scalar.QUOTE_DOUBLE;
              value = doubleQuotedValue(source, _onError);
              break;
          /* istanbul ignore next should not happen */
          default:
              onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);
              return {
                  value: '',
                  type: null,
                  comment: '',
                  range: [offset, offset + source.length, offset + source.length]
              };
      }
      const valueEnd = offset + source.length;
      const re = resolveEnd(end, valueEnd, strict, onError);
      return {
          value,
          type: _type,
          comment: re.comment,
          range: [offset, valueEnd, re.offset]
      };
  }
  function plainValue(source, onError) {
      let badChar = '';
      switch (source[0]) {
          /* istanbul ignore next should not happen */
          case '\t':
              badChar = 'a tab character';
              break;
          case ',':
              badChar = 'flow indicator character ,';
              break;
          case '%':
              badChar = 'directive indicator character %';
              break;
          case '|':
          case '>': {
              badChar = `block scalar indicator ${source[0]}`;
              break;
          }
          case '@':
          case '`': {
              badChar = `reserved character ${source[0]}`;
              break;
          }
      }
      if (badChar)
          onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);
      return foldLines(source);
  }
  function singleQuotedValue(source, onError) {
      if (source[source.length - 1] !== "'" || source.length === 1)
          onError(source.length, 'MISSING_CHAR', "Missing closing 'quote");
      return foldLines(source.slice(1, -1)).replace(/''/g, "'");
  }
  function foldLines(source) {
      /**
       * The negative lookbehind here and in the `re` RegExp is to
       * prevent causing a polynomial search time in certain cases.
       *
       * The try-catch is for Safari, which doesn't support this yet:
       * https://caniuse.com/js-regexp-lookbehind
       */
      let first, line;
      try {
          first = new RegExp('(.*?)(?<![ \t])[ \t]*\r?\n', 'sy');
          line = new RegExp('[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n', 'sy');
      }
      catch {
          first = /(.*?)[ \t]*\r?\n/sy;
          line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
      }
      let match = first.exec(source);
      if (!match)
          return source;
      let res = match[1];
      let sep = ' ';
      let pos = first.lastIndex;
      line.lastIndex = pos;
      while ((match = line.exec(source))) {
          if (match[1] === '') {
              if (sep === '\n')
                  res += sep;
              else
                  sep = '\n';
          }
          else {
              res += sep + match[1];
              sep = ' ';
          }
          pos = line.lastIndex;
      }
      const last = /[ \t]*(.*)/sy;
      last.lastIndex = pos;
      match = last.exec(source);
      return res + sep + (match?.[1] ?? '');
  }
  function doubleQuotedValue(source, onError) {
      let res = '';
      for (let i = 1; i < source.length - 1; ++i) {
          const ch = source[i];
          if (ch === '\r' && source[i + 1] === '\n')
              continue;
          if (ch === '\n') {
              const { fold, offset } = foldNewline(source, i);
              res += fold;
              i = offset;
          }
          else if (ch === '\\') {
              let next = source[++i];
              const cc = escapeCodes[next];
              if (cc)
                  res += cc;
              else if (next === '\n') {
                  // skip escaped newlines, but still trim the following line
                  next = source[i + 1];
                  while (next === ' ' || next === '\t')
                      next = source[++i + 1];
              }
              else if (next === '\r' && source[i + 1] === '\n') {
                  // skip escaped CRLF newlines, but still trim the following line
                  next = source[++i + 1];
                  while (next === ' ' || next === '\t')
                      next = source[++i + 1];
              }
              else if (next === 'x' || next === 'u' || next === 'U') {
                  const length = { x: 2, u: 4, U: 8 }[next];
                  res += parseCharCode(source, i + 1, length, onError);
                  i += length;
              }
              else {
                  const raw = source.substr(i - 1, 2);
                  onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
                  res += raw;
              }
          }
          else if (ch === ' ' || ch === '\t') {
              // trim trailing whitespace
              const wsStart = i;
              let next = source[i + 1];
              while (next === ' ' || next === '\t')
                  next = source[++i + 1];
              if (next !== '\n' && !(next === '\r' && source[i + 2] === '\n'))
                  res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
          }
          else {
              res += ch;
          }
      }
      if (source[source.length - 1] !== '"' || source.length === 1)
          onError(source.length, 'MISSING_CHAR', 'Missing closing "quote');
      return res;
  }
  /**
   * Fold a single newline into a space, multiple newlines to N - 1 newlines.
   * Presumes `source[offset] === '\n'`
   */
  function foldNewline(source, offset) {
      let fold = '';
      let ch = source[offset + 1];
      while (ch === ' ' || ch === '\t' || ch === '\n' || ch === '\r') {
          if (ch === '\r' && source[offset + 2] !== '\n')
              break;
          if (ch === '\n')
              fold += '\n';
          offset += 1;
          ch = source[offset + 1];
      }
      if (!fold)
          fold = ' ';
      return { fold, offset };
  }
  const escapeCodes = {
      '0': '\0', // null character
      a: '\x07', // bell character
      b: '\b', // backspace
      e: '\x1b', // escape character
      f: '\f', // form feed
      n: '\n', // line feed
      r: '\r', // carriage return
      t: '\t', // horizontal tab
      v: '\v', // vertical tab
      N: '\u0085', // Unicode next line
      _: '\u00a0', // Unicode non-breaking space
      L: '\u2028', // Unicode line separator
      P: '\u2029', // Unicode paragraph separator
      ' ': ' ',
      '"': '"',
      '/': '/',
      '\\': '\\',
      '\t': '\t'
  };
  function parseCharCode(source, offset, length, onError) {
      const cc = source.substr(offset, length);
      const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
      const code = ok ? parseInt(cc, 16) : NaN;
      if (isNaN(code)) {
          const raw = source.substr(offset - 2, length + 2);
          onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);
          return raw;
      }
      return String.fromCodePoint(code);
  }

  function composeScalar(ctx, token, tagToken, onError) {
      const { value, type, comment, range } = token.type === 'block-scalar'
          ? resolveBlockScalar(ctx, token, onError)
          : resolveFlowScalar(token, ctx.options.strict, onError);
      const tagName = tagToken
          ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))
          : null;
      let tag;
      if (ctx.options.stringKeys && ctx.atKey) {
          tag = ctx.schema[SCALAR$1];
      }
      else if (tagName)
          tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);
      else if (token.type === 'scalar')
          tag = findScalarTagByTest(ctx, value, token, onError);
      else
          tag = ctx.schema[SCALAR$1];
      let scalar;
      try {
          const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);
          scalar = isScalar$1(res) ? res : new Scalar(res);
      }
      catch (error) {
          const msg = error instanceof Error ? error.message : String(error);
          onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);
          scalar = new Scalar(value);
      }
      scalar.range = range;
      scalar.source = value;
      if (type)
          scalar.type = type;
      if (tagName)
          scalar.tag = tagName;
      if (tag.format)
          scalar.format = tag.format;
      if (comment)
          scalar.comment = comment;
      return scalar;
  }
  function findScalarTagByName(schema, value, tagName, tagToken, onError) {
      if (tagName === '!')
          return schema[SCALAR$1]; // non-specific tag
      const matchWithTest = [];
      for (const tag of schema.tags) {
          if (!tag.collection && tag.tag === tagName) {
              if (tag.default && tag.test)
                  matchWithTest.push(tag);
              else
                  return tag;
          }
      }
      for (const tag of matchWithTest)
          if (tag.test?.test(value))
              return tag;
      const kt = schema.knownTags[tagName];
      if (kt && !kt.collection) {
          // Ensure that the known tag is available for stringifying,
          // but does not get used by default.
          schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));
          return kt;
      }
      onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');
      return schema[SCALAR$1];
  }
  function findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {
      const tag = schema.tags.find(tag => (tag.default === true || (atKey && tag.default === 'key')) &&
          tag.test?.test(value)) || schema[SCALAR$1];
      if (schema.compat) {
          const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??
              schema[SCALAR$1];
          if (tag.tag !== compat.tag) {
              const ts = directives.tagString(tag.tag);
              const cs = directives.tagString(compat.tag);
              const msg = `Value may be parsed as either ${ts} or ${cs}`;
              onError(token, 'TAG_RESOLVE_FAILED', msg, true);
          }
      }
      return tag;
  }

  function emptyScalarPosition(offset, before, pos) {
      if (before) {
          pos ?? (pos = before.length);
          for (let i = pos - 1; i >= 0; --i) {
              let st = before[i];
              switch (st.type) {
                  case 'space':
                  case 'comment':
                  case 'newline':
                      offset -= st.source.length;
                      continue;
              }
              // Technically, an empty scalar is immediately after the last non-empty
              // node, but it's more useful to place it after any whitespace.
              st = before[++i];
              while (st?.type === 'space') {
                  offset += st.source.length;
                  st = before[++i];
              }
              break;
          }
      }
      return offset;
  }

  const CN = { composeNode, composeEmptyNode };
  function composeNode(ctx, token, props, onError) {
      const atKey = ctx.atKey;
      const { spaceBefore, comment, anchor, tag } = props;
      let node;
      let isSrcToken = true;
      switch (token.type) {
          case 'alias':
              node = composeAlias(ctx, token, onError);
              if (anchor || tag)
                  onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');
              break;
          case 'scalar':
          case 'single-quoted-scalar':
          case 'double-quoted-scalar':
          case 'block-scalar':
              node = composeScalar(ctx, token, tag, onError);
              if (anchor)
                  node.anchor = anchor.source.substring(1);
              break;
          case 'block-map':
          case 'block-seq':
          case 'flow-collection':
              node = composeCollection(CN, ctx, token, props, onError);
              if (anchor)
                  node.anchor = anchor.source.substring(1);
              break;
          default: {
              const message = token.type === 'error'
                  ? token.message
                  : `Unsupported token (type: ${token.type})`;
              onError(token, 'UNEXPECTED_TOKEN', message);
              node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);
              isSrcToken = false;
          }
      }
      if (anchor && node.anchor === '')
          onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
      if (atKey &&
          ctx.options.stringKeys &&
          (!isScalar$1(node) ||
              typeof node.value !== 'string' ||
              (node.tag && node.tag !== 'tag:yaml.org,2002:str'))) {
          const msg = 'With stringKeys, all keys must be strings';
          onError(tag ?? token, 'NON_STRING_KEY', msg);
      }
      if (spaceBefore)
          node.spaceBefore = true;
      if (comment) {
          if (token.type === 'scalar' && token.source === '')
              node.comment = comment;
          else
              node.commentBefore = comment;
      }
      // @ts-expect-error Type checking misses meaning of isSrcToken
      if (ctx.options.keepSourceTokens && isSrcToken)
          node.srcToken = token;
      return node;
  }
  function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
      const token = {
          type: 'scalar',
          offset: emptyScalarPosition(offset, before, pos),
          indent: -1,
          source: ''
      };
      const node = composeScalar(ctx, token, tag, onError);
      if (anchor) {
          node.anchor = anchor.source.substring(1);
          if (node.anchor === '')
              onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');
      }
      if (spaceBefore)
          node.spaceBefore = true;
      if (comment) {
          node.comment = comment;
          node.range[2] = end;
      }
      return node;
  }
  function composeAlias({ options }, { offset, source, end }, onError) {
      const alias = new Alias(source.substring(1));
      if (alias.source === '')
          onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');
      if (alias.source.endsWith(':'))
          onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);
      const valueEnd = offset + source.length;
      const re = resolveEnd(end, valueEnd, options.strict, onError);
      alias.range = [offset, valueEnd, re.offset];
      if (re.comment)
          alias.comment = re.comment;
      return alias;
  }

  function composeDoc(options, directives, { offset, start, value, end }, onError) {
      const opts = Object.assign({ _directives: directives }, options);
      const doc = new Document(undefined, opts);
      const ctx = {
          atKey: false,
          atRoot: true,
          directives: doc.directives,
          options: doc.options,
          schema: doc.schema
      };
      const props = resolveProps(start, {
          indicator: 'doc-start',
          next: value ?? end?.[0],
          offset,
          onError,
          parentIndent: 0,
          startOnNewline: true
      });
      if (props.found) {
          doc.directives.docStart = true;
          if (value &&
              (value.type === 'block-map' || value.type === 'block-seq') &&
              !props.hasNewline)
              onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');
      }
      // @ts-expect-error If Contents is set, let's trust the user
      doc.contents = value
          ? composeNode(ctx, value, props, onError)
          : composeEmptyNode(ctx, props.end, start, null, props, onError);
      const contentEnd = doc.contents.range[2];
      const re = resolveEnd(end, contentEnd, false, onError);
      if (re.comment)
          doc.comment = re.comment;
      doc.range = [offset, contentEnd, re.offset];
      return doc;
  }

  function getErrorPos(src) {
      if (typeof src === 'number')
          return [src, src + 1];
      if (Array.isArray(src))
          return src.length === 2 ? src : [src[0], src[1]];
      const { offset, source } = src;
      return [offset, offset + (typeof source === 'string' ? source.length : 1)];
  }
  function parsePrelude(prelude) {
      let comment = '';
      let atComment = false;
      let afterEmptyLine = false;
      for (let i = 0; i < prelude.length; ++i) {
          const source = prelude[i];
          switch (source[0]) {
              case '#':
                  comment +=
                      (comment === '' ? '' : afterEmptyLine ? '\n\n' : '\n') +
                          (source.substring(1) || ' ');
                  atComment = true;
                  afterEmptyLine = false;
                  break;
              case '%':
                  if (prelude[i + 1]?.[0] !== '#')
                      i += 1;
                  atComment = false;
                  break;
              default:
                  // This may be wrong after doc-end, but in that case it doesn't matter
                  if (!atComment)
                      afterEmptyLine = true;
                  atComment = false;
          }
      }
      return { comment, afterEmptyLine };
  }
  /**
   * Compose a stream of CST nodes into a stream of YAML Documents.
   *
   * ```ts
   * import { Composer, Parser } from 'yaml'
   *
   * const src: string = ...
   * const tokens = new Parser().parse(src)
   * const docs = new Composer().compose(tokens)
   * ```
   */
  class Composer {
      constructor(options = {}) {
          this.doc = null;
          this.atDirectives = false;
          this.prelude = [];
          this.errors = [];
          this.warnings = [];
          this.onError = (source, code, message, warning) => {
              const pos = getErrorPos(source);
              if (warning)
                  this.warnings.push(new YAMLWarning(pos, code, message));
              else
                  this.errors.push(new YAMLParseError(pos, code, message));
          };
          // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
          this.directives = new Directives({ version: options.version || '1.2' });
          this.options = options;
      }
      decorate(doc, afterDoc) {
          const { comment, afterEmptyLine } = parsePrelude(this.prelude);
          //console.log({ dc: doc.comment, prelude, comment })
          if (comment) {
              const dc = doc.contents;
              if (afterDoc) {
                  doc.comment = doc.comment ? `${doc.comment}\n${comment}` : comment;
              }
              else if (afterEmptyLine || doc.directives.docStart || !dc) {
                  doc.commentBefore = comment;
              }
              else if (isCollection$1(dc) && !dc.flow && dc.items.length > 0) {
                  let it = dc.items[0];
                  if (isPair(it))
                      it = it.key;
                  const cb = it.commentBefore;
                  it.commentBefore = cb ? `${comment}\n${cb}` : comment;
              }
              else {
                  const cb = dc.commentBefore;
                  dc.commentBefore = cb ? `${comment}\n${cb}` : comment;
              }
          }
          if (afterDoc) {
              Array.prototype.push.apply(doc.errors, this.errors);
              Array.prototype.push.apply(doc.warnings, this.warnings);
          }
          else {
              doc.errors = this.errors;
              doc.warnings = this.warnings;
          }
          this.prelude = [];
          this.errors = [];
          this.warnings = [];
      }
      /**
       * Current stream status information.
       *
       * Mostly useful at the end of input for an empty stream.
       */
      streamInfo() {
          return {
              comment: parsePrelude(this.prelude).comment,
              directives: this.directives,
              errors: this.errors,
              warnings: this.warnings
          };
      }
      /**
       * Compose tokens into documents.
       *
       * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
       * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
       */
      *compose(tokens, forceDoc = false, endOffset = -1) {
          for (const token of tokens)
              yield* this.next(token);
          yield* this.end(forceDoc, endOffset);
      }
      /** Advance the composer by one CST token. */
      *next(token) {
          switch (token.type) {
              case 'directive':
                  this.directives.add(token.source, (offset, message, warning) => {
                      const pos = getErrorPos(token);
                      pos[0] += offset;
                      this.onError(pos, 'BAD_DIRECTIVE', message, warning);
                  });
                  this.prelude.push(token.source);
                  this.atDirectives = true;
                  break;
              case 'document': {
                  const doc = composeDoc(this.options, this.directives, token, this.onError);
                  if (this.atDirectives && !doc.directives.docStart)
                      this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');
                  this.decorate(doc, false);
                  if (this.doc)
                      yield this.doc;
                  this.doc = doc;
                  this.atDirectives = false;
                  break;
              }
              case 'byte-order-mark':
              case 'space':
                  break;
              case 'comment':
              case 'newline':
                  this.prelude.push(token.source);
                  break;
              case 'error': {
                  const msg = token.source
                      ? `${token.message}: ${JSON.stringify(token.source)}`
                      : token.message;
                  const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);
                  if (this.atDirectives || !this.doc)
                      this.errors.push(error);
                  else
                      this.doc.errors.push(error);
                  break;
              }
              case 'doc-end': {
                  if (!this.doc) {
                      const msg = 'Unexpected doc-end without preceding document';
                      this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));
                      break;
                  }
                  this.doc.directives.docEnd = true;
                  const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                  this.decorate(this.doc, true);
                  if (end.comment) {
                      const dc = this.doc.comment;
                      this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
                  }
                  this.doc.range[2] = end.offset;
                  break;
              }
              default:
                  this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));
          }
      }
      /**
       * Call at end of input to yield any remaining document.
       *
       * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
       * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
       */
      *end(forceDoc = false, endOffset = -1) {
          if (this.doc) {
              this.decorate(this.doc, true);
              yield this.doc;
              this.doc = null;
          }
          else if (forceDoc) {
              const opts = Object.assign({ _directives: this.directives }, this.options);
              const doc = new Document(undefined, opts);
              if (this.atDirectives)
                  this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');
              doc.range = [0, endOffset, endOffset];
              this.decorate(doc, false);
              yield doc;
          }
      }
  }

  function resolveAsScalar(token, strict = true, onError) {
      if (token) {
          const _onError = (pos, code, message) => {
              const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
              if (onError)
                  onError(offset, code, message);
              else
                  throw new YAMLParseError([offset, offset + 1], code, message);
          };
          switch (token.type) {
              case 'scalar':
              case 'single-quoted-scalar':
              case 'double-quoted-scalar':
                  return resolveFlowScalar(token, strict, _onError);
              case 'block-scalar':
                  return resolveBlockScalar({ options: { strict } }, token, _onError);
          }
      }
      return null;
  }
  /**
   * Create a new scalar token with `value`
   *
   * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
   * as this function does not support any schema operations and won't check for such conflicts.
   *
   * @param value The string representation of the value, which will have its content properly indented.
   * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.
   * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
   * @param context.indent The indent level of the token.
   * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.
   * @param context.offset The offset position of the token.
   * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
   */
  function createScalarToken(value, context) {
      const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;
      const source = stringifyString({ type, value }, {
          implicitKey,
          indent: indent > 0 ? ' '.repeat(indent) : '',
          inFlow,
          options: { blockQuote: true, lineWidth: -1 }
      });
      const end = context.end ?? [
          { type: 'newline', offset: -1, indent, source: '\n' }
      ];
      switch (source[0]) {
          case '|':
          case '>': {
              const he = source.indexOf('\n');
              const head = source.substring(0, he);
              const body = source.substring(he + 1) + '\n';
              const props = [
                  { type: 'block-scalar-header', offset, indent, source: head }
              ];
              if (!addEndtoBlockProps(props, end))
                  props.push({ type: 'newline', offset: -1, indent, source: '\n' });
              return { type: 'block-scalar', offset, indent, props, source: body };
          }
          case '"':
              return { type: 'double-quoted-scalar', offset, indent, source, end };
          case "'":
              return { type: 'single-quoted-scalar', offset, indent, source, end };
          default:
              return { type: 'scalar', offset, indent, source, end };
      }
  }
  /**
   * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.
   *
   * Best efforts are made to retain any comments previously associated with the `token`,
   * though all contents within a collection's `items` will be overwritten.
   *
   * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
   * as this function does not support any schema operations and won't check for such conflicts.
   *
   * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.
   * @param value The string representation of the value, which will have its content properly indented.
   * @param context.afterKey In most cases, values after a key should have an additional level of indentation.
   * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
   * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.
   * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
   */
  function setScalarValue(token, value, context = {}) {
      let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
      let indent = 'indent' in token ? token.indent : null;
      if (afterKey && typeof indent === 'number')
          indent += 2;
      if (!type)
          switch (token.type) {
              case 'single-quoted-scalar':
                  type = 'QUOTE_SINGLE';
                  break;
              case 'double-quoted-scalar':
                  type = 'QUOTE_DOUBLE';
                  break;
              case 'block-scalar': {
                  const header = token.props[0];
                  if (header.type !== 'block-scalar-header')
                      throw new Error('Invalid block scalar header');
                  type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';
                  break;
              }
              default:
                  type = 'PLAIN';
          }
      const source = stringifyString({ type, value }, {
          implicitKey: implicitKey || indent === null,
          indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',
          inFlow,
          options: { blockQuote: true, lineWidth: -1 }
      });
      switch (source[0]) {
          case '|':
          case '>':
              setBlockScalarValue(token, source);
              break;
          case '"':
              setFlowScalarValue(token, source, 'double-quoted-scalar');
              break;
          case "'":
              setFlowScalarValue(token, source, 'single-quoted-scalar');
              break;
          default:
              setFlowScalarValue(token, source, 'scalar');
      }
  }
  function setBlockScalarValue(token, source) {
      const he = source.indexOf('\n');
      const head = source.substring(0, he);
      const body = source.substring(he + 1) + '\n';
      if (token.type === 'block-scalar') {
          const header = token.props[0];
          if (header.type !== 'block-scalar-header')
              throw new Error('Invalid block scalar header');
          header.source = head;
          token.source = body;
      }
      else {
          const { offset } = token;
          const indent = 'indent' in token ? token.indent : -1;
          const props = [
              { type: 'block-scalar-header', offset, indent, source: head }
          ];
          if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))
              props.push({ type: 'newline', offset: -1, indent, source: '\n' });
          for (const key of Object.keys(token))
              if (key !== 'type' && key !== 'offset')
                  delete token[key];
          Object.assign(token, { type: 'block-scalar', indent, props, source: body });
      }
  }
  /** @returns `true` if last token is a newline */
  function addEndtoBlockProps(props, end) {
      if (end)
          for (const st of end)
              switch (st.type) {
                  case 'space':
                  case 'comment':
                      props.push(st);
                      break;
                  case 'newline':
                      props.push(st);
                      return true;
              }
      return false;
  }
  function setFlowScalarValue(token, source, type) {
      switch (token.type) {
          case 'scalar':
          case 'double-quoted-scalar':
          case 'single-quoted-scalar':
              token.type = type;
              token.source = source;
              break;
          case 'block-scalar': {
              const end = token.props.slice(1);
              let oa = source.length;
              if (token.props[0].type === 'block-scalar-header')
                  oa -= token.props[0].source.length;
              for (const tok of end)
                  tok.offset += oa;
              delete token.props;
              Object.assign(token, { type, source, end });
              break;
          }
          case 'block-map':
          case 'block-seq': {
              const offset = token.offset + source.length;
              const nl = { type: 'newline', offset, indent: token.indent, source: '\n' };
              delete token.items;
              Object.assign(token, { type, source, end: [nl] });
              break;
          }
          default: {
              const indent = 'indent' in token ? token.indent : -1;
              const end = 'end' in token && Array.isArray(token.end)
                  ? token.end.filter(st => st.type === 'space' ||
                      st.type === 'comment' ||
                      st.type === 'newline')
                  : [];
              for (const key of Object.keys(token))
                  if (key !== 'type' && key !== 'offset')
                      delete token[key];
              Object.assign(token, { type, indent, source, end });
          }
      }
  }

  /**
   * Stringify a CST document, token, or collection item
   *
   * Fair warning: This applies no validation whatsoever, and
   * simply concatenates the sources in their logical order.
   */
  const stringify$1 = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);
  function stringifyToken(token) {
      switch (token.type) {
          case 'block-scalar': {
              let res = '';
              for (const tok of token.props)
                  res += stringifyToken(tok);
              return res + token.source;
          }
          case 'block-map':
          case 'block-seq': {
              let res = '';
              for (const item of token.items)
                  res += stringifyItem(item);
              return res;
          }
          case 'flow-collection': {
              let res = token.start.source;
              for (const item of token.items)
                  res += stringifyItem(item);
              for (const st of token.end)
                  res += st.source;
              return res;
          }
          case 'document': {
              let res = stringifyItem(token);
              if (token.end)
                  for (const st of token.end)
                      res += st.source;
              return res;
          }
          default: {
              let res = token.source;
              if ('end' in token && token.end)
                  for (const st of token.end)
                      res += st.source;
              return res;
          }
      }
  }
  function stringifyItem({ start, key, sep, value }) {
      let res = '';
      for (const st of start)
          res += st.source;
      if (key)
          res += stringifyToken(key);
      if (sep)
          for (const st of sep)
              res += st.source;
      if (value)
          res += stringifyToken(value);
      return res;
  }

  const BREAK = Symbol('break visit');
  const SKIP = Symbol('skip children');
  const REMOVE = Symbol('remove item');
  /**
   * Apply a visitor to a CST document or item.
   *
   * Walks through the tree (depth-first) starting from the root, calling a
   * `visitor` function with two arguments when entering each item:
   *   - `item`: The current item, which included the following members:
   *     - `start: SourceToken[]` – Source tokens before the key or value,
   *       possibly including its anchor or tag.
   *     - `key?: Token | null` – Set for pair values. May then be `null`, if
   *       the key before the `:` separator is empty.
   *     - `sep?: SourceToken[]` – Source tokens between the key and the value,
   *       which should include the `:` map value indicator if `value` is set.
   *     - `value?: Token` – The value of a sequence item, or of a map pair.
   *   - `path`: The steps from the root to the current node, as an array of
   *     `['key' | 'value', number]` tuples.
   *
   * The return value of the visitor may be used to control the traversal:
   *   - `undefined` (default): Do nothing and continue
   *   - `visit.SKIP`: Do not visit the children of this token, continue with
   *      next sibling
   *   - `visit.BREAK`: Terminate traversal completely
   *   - `visit.REMOVE`: Remove the current item, then continue with the next one
   *   - `number`: Set the index of the next step. This is useful especially if
   *     the index of the current token has changed.
   *   - `function`: Define the next visitor for this item. After the original
   *     visitor is called on item entry, next visitors are called after handling
   *     a non-empty `key` and when exiting the item.
   */
  function visit(cst, visitor) {
      if ('type' in cst && cst.type === 'document')
          cst = { start: cst.start, value: cst.value };
      _visit(Object.freeze([]), cst, visitor);
  }
  // Without the `as symbol` casts, TS declares these in the `visit`
  // namespace using `var`, but then complains about that because
  // `unique symbol` must be `const`.
  /** Terminate visit traversal completely */
  visit.BREAK = BREAK;
  /** Do not visit the children of the current item */
  visit.SKIP = SKIP;
  /** Remove the current item */
  visit.REMOVE = REMOVE;
  /** Find the item at `path` from `cst` as the root */
  visit.itemAtPath = (cst, path) => {
      let item = cst;
      for (const [field, index] of path) {
          const tok = item?.[field];
          if (tok && 'items' in tok) {
              item = tok.items[index];
          }
          else
              return undefined;
      }
      return item;
  };
  /**
   * Get the immediate parent collection of the item at `path` from `cst` as the root.
   *
   * Throws an error if the collection is not found, which should never happen if the item itself exists.
   */
  visit.parentCollection = (cst, path) => {
      const parent = visit.itemAtPath(cst, path.slice(0, -1));
      const field = path[path.length - 1][0];
      const coll = parent?.[field];
      if (coll && 'items' in coll)
          return coll;
      throw new Error('Parent collection not found');
  };
  function _visit(path, item, visitor) {
      let ctrl = visitor(item, path);
      if (typeof ctrl === 'symbol')
          return ctrl;
      for (const field of ['key', 'value']) {
          const token = item[field];
          if (token && 'items' in token) {
              for (let i = 0; i < token.items.length; ++i) {
                  const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);
                  if (typeof ci === 'number')
                      i = ci - 1;
                  else if (ci === BREAK)
                      return BREAK;
                  else if (ci === REMOVE) {
                      token.items.splice(i, 1);
                      i -= 1;
                  }
              }
              if (typeof ctrl === 'function' && field === 'key')
                  ctrl = ctrl(item, path);
          }
      }
      return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;
  }

  /** The byte order mark */
  const BOM = '\u{FEFF}';
  /** Start of doc-mode */
  const DOCUMENT = '\x02'; // C0: Start of Text
  /** Unexpected end of flow-mode */
  const FLOW_END = '\x18'; // C0: Cancel
  /** Next token is a scalar value */
  const SCALAR = '\x1f'; // C0: Unit Separator
  /** @returns `true` if `token` is a flow or block collection */
  const isCollection = (token) => !!token && 'items' in token;
  /** @returns `true` if `token` is a flow or block scalar; not an alias */
  const isScalar = (token) => !!token &&
      (token.type === 'scalar' ||
          token.type === 'single-quoted-scalar' ||
          token.type === 'double-quoted-scalar' ||
          token.type === 'block-scalar');
  /* istanbul ignore next */
  /** Get a printable representation of a lexer token */
  function prettyToken(token) {
      switch (token) {
          case BOM:
              return '<BOM>';
          case DOCUMENT:
              return '<DOC>';
          case FLOW_END:
              return '<FLOW_END>';
          case SCALAR:
              return '<SCALAR>';
          default:
              return JSON.stringify(token);
      }
  }
  /** Identify the type of a lexer token. May return `null` for unknown tokens. */
  function tokenType(source) {
      switch (source) {
          case BOM:
              return 'byte-order-mark';
          case DOCUMENT:
              return 'doc-mode';
          case FLOW_END:
              return 'flow-error-end';
          case SCALAR:
              return 'scalar';
          case '---':
              return 'doc-start';
          case '...':
              return 'doc-end';
          case '':
          case '\n':
          case '\r\n':
              return 'newline';
          case '-':
              return 'seq-item-ind';
          case '?':
              return 'explicit-key-ind';
          case ':':
              return 'map-value-ind';
          case '{':
              return 'flow-map-start';
          case '}':
              return 'flow-map-end';
          case '[':
              return 'flow-seq-start';
          case ']':
              return 'flow-seq-end';
          case ',':
              return 'comma';
      }
      switch (source[0]) {
          case ' ':
          case '\t':
              return 'space';
          case '#':
              return 'comment';
          case '%':
              return 'directive-line';
          case '*':
              return 'alias';
          case '&':
              return 'anchor';
          case '!':
              return 'tag';
          case "'":
              return 'single-quoted-scalar';
          case '"':
              return 'double-quoted-scalar';
          case '|':
          case '>':
              return 'block-scalar-header';
      }
      return null;
  }

  var cst = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BOM: BOM,
    DOCUMENT: DOCUMENT,
    FLOW_END: FLOW_END,
    SCALAR: SCALAR,
    createScalarToken: createScalarToken,
    isCollection: isCollection,
    isScalar: isScalar,
    prettyToken: prettyToken,
    resolveAsScalar: resolveAsScalar,
    setScalarValue: setScalarValue,
    stringify: stringify$1,
    tokenType: tokenType,
    visit: visit
  });

  /*
  START -> stream

  stream
    directive -> line-end -> stream
    indent + line-end -> stream
    [else] -> line-start

  line-end
    comment -> line-end
    newline -> .
    input-end -> END

  line-start
    doc-start -> doc
    doc-end -> stream
    [else] -> indent -> block-start

  block-start
    seq-item-start -> block-start
    explicit-key-start -> block-start
    map-value-start -> block-start
    [else] -> doc

  doc
    line-end -> line-start
    spaces -> doc
    anchor -> doc
    tag -> doc
    flow-start -> flow -> doc
    flow-end -> error -> doc
    seq-item-start -> error -> doc
    explicit-key-start -> error -> doc
    map-value-start -> doc
    alias -> doc
    quote-start -> quoted-scalar -> doc
    block-scalar-header -> line-end -> block-scalar(min) -> line-start
    [else] -> plain-scalar(false, min) -> doc

  flow
    line-end -> flow
    spaces -> flow
    anchor -> flow
    tag -> flow
    flow-start -> flow -> flow
    flow-end -> .
    seq-item-start -> error -> flow
    explicit-key-start -> flow
    map-value-start -> flow
    alias -> flow
    quote-start -> quoted-scalar -> flow
    comma -> flow
    [else] -> plain-scalar(true, 0) -> flow

  quoted-scalar
    quote-end -> .
    [else] -> quoted-scalar

  block-scalar(min)
    newline + peek(indent < min) -> .
    [else] -> block-scalar(min)

  plain-scalar(is-flow, min)
    scalar-end(is-flow) -> .
    peek(newline + (indent < min)) -> .
    [else] -> plain-scalar(min)
  */
  function isEmpty(ch) {
      switch (ch) {
          case undefined:
          case ' ':
          case '\n':
          case '\r':
          case '\t':
              return true;
          default:
              return false;
      }
  }
  const hexDigits = new Set('0123456789ABCDEFabcdef');
  const tagChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()");
  const flowIndicatorChars = new Set(',[]{}');
  const invalidAnchorChars = new Set(' ,[]{}\n\r\t');
  const isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);
  /**
   * Splits an input string into lexical tokens, i.e. smaller strings that are
   * easily identifiable by `tokens.tokenType()`.
   *
   * Lexing starts always in a "stream" context. Incomplete input may be buffered
   * until a complete token can be emitted.
   *
   * In addition to slices of the original input, the following control characters
   * may also be emitted:
   *
   * - `\x02` (Start of Text): A document starts with the next token
   * - `\x18` (Cancel): Unexpected end of flow-mode (indicates an error)
   * - `\x1f` (Unit Separator): Next token is a scalar value
   * - `\u{FEFF}` (Byte order mark): Emitted separately outside documents
   */
  class Lexer {
      constructor() {
          /**
           * Flag indicating whether the end of the current buffer marks the end of
           * all input
           */
          this.atEnd = false;
          /**
           * Explicit indent set in block scalar header, as an offset from the current
           * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not
           * explicitly set.
           */
          this.blockScalarIndent = -1;
          /**
           * Block scalars that include a + (keep) chomping indicator in their header
           * include trailing empty lines, which are otherwise excluded from the
           * scalar's contents.
           */
          this.blockScalarKeep = false;
          /** Current input */
          this.buffer = '';
          /**
           * Flag noting whether the map value indicator : can immediately follow this
           * node within a flow context.
           */
          this.flowKey = false;
          /** Count of surrounding flow collection levels. */
          this.flowLevel = 0;
          /**
           * Minimum level of indentation required for next lines to be parsed as a
           * part of the current scalar value.
           */
          this.indentNext = 0;
          /** Indentation level of the current line. */
          this.indentValue = 0;
          /** Position of the next \n character. */
          this.lineEndPos = null;
          /** Stores the state of the lexer if reaching the end of incpomplete input */
          this.next = null;
          /** A pointer to `buffer`; the current position of the lexer. */
          this.pos = 0;
      }
      /**
       * Generate YAML tokens from the `source` string. If `incomplete`,
       * a part of the last line may be left as a buffer for the next call.
       *
       * @returns A generator of lexical tokens
       */
      *lex(source, incomplete = false) {
          if (source) {
              if (typeof source !== 'string')
                  throw TypeError('source is not a string');
              this.buffer = this.buffer ? this.buffer + source : source;
              this.lineEndPos = null;
          }
          this.atEnd = !incomplete;
          let next = this.next ?? 'stream';
          while (next && (incomplete || this.hasChars(1)))
              next = yield* this.parseNext(next);
      }
      atLineEnd() {
          let i = this.pos;
          let ch = this.buffer[i];
          while (ch === ' ' || ch === '\t')
              ch = this.buffer[++i];
          if (!ch || ch === '#' || ch === '\n')
              return true;
          if (ch === '\r')
              return this.buffer[i + 1] === '\n';
          return false;
      }
      charAt(n) {
          return this.buffer[this.pos + n];
      }
      continueScalar(offset) {
          let ch = this.buffer[offset];
          if (this.indentNext > 0) {
              let indent = 0;
              while (ch === ' ')
                  ch = this.buffer[++indent + offset];
              if (ch === '\r') {
                  const next = this.buffer[indent + offset + 1];
                  if (next === '\n' || (!next && !this.atEnd))
                      return offset + indent + 1;
              }
              return ch === '\n' || indent >= this.indentNext || (!ch && !this.atEnd)
                  ? offset + indent
                  : -1;
          }
          if (ch === '-' || ch === '.') {
              const dt = this.buffer.substr(offset, 3);
              if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))
                  return -1;
          }
          return offset;
      }
      getLine() {
          let end = this.lineEndPos;
          if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {
              end = this.buffer.indexOf('\n', this.pos);
              this.lineEndPos = end;
          }
          if (end === -1)
              return this.atEnd ? this.buffer.substring(this.pos) : null;
          if (this.buffer[end - 1] === '\r')
              end -= 1;
          return this.buffer.substring(this.pos, end);
      }
      hasChars(n) {
          return this.pos + n <= this.buffer.length;
      }
      setNext(state) {
          this.buffer = this.buffer.substring(this.pos);
          this.pos = 0;
          this.lineEndPos = null;
          this.next = state;
          return null;
      }
      peek(n) {
          return this.buffer.substr(this.pos, n);
      }
      *parseNext(next) {
          switch (next) {
              case 'stream':
                  return yield* this.parseStream();
              case 'line-start':
                  return yield* this.parseLineStart();
              case 'block-start':
                  return yield* this.parseBlockStart();
              case 'doc':
                  return yield* this.parseDocument();
              case 'flow':
                  return yield* this.parseFlowCollection();
              case 'quoted-scalar':
                  return yield* this.parseQuotedScalar();
              case 'block-scalar':
                  return yield* this.parseBlockScalar();
              case 'plain-scalar':
                  return yield* this.parsePlainScalar();
          }
      }
      *parseStream() {
          let line = this.getLine();
          if (line === null)
              return this.setNext('stream');
          if (line[0] === BOM) {
              yield* this.pushCount(1);
              line = line.substring(1);
          }
          if (line[0] === '%') {
              let dirEnd = line.length;
              let cs = line.indexOf('#');
              while (cs !== -1) {
                  const ch = line[cs - 1];
                  if (ch === ' ' || ch === '\t') {
                      dirEnd = cs - 1;
                      break;
                  }
                  else {
                      cs = line.indexOf('#', cs + 1);
                  }
              }
              while (true) {
                  const ch = line[dirEnd - 1];
                  if (ch === ' ' || ch === '\t')
                      dirEnd -= 1;
                  else
                      break;
              }
              const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
              yield* this.pushCount(line.length - n); // possible comment
              this.pushNewline();
              return 'stream';
          }
          if (this.atLineEnd()) {
              const sp = yield* this.pushSpaces(true);
              yield* this.pushCount(line.length - sp);
              yield* this.pushNewline();
              return 'stream';
          }
          yield DOCUMENT;
          return yield* this.parseLineStart();
      }
      *parseLineStart() {
          const ch = this.charAt(0);
          if (!ch && !this.atEnd)
              return this.setNext('line-start');
          if (ch === '-' || ch === '.') {
              if (!this.atEnd && !this.hasChars(4))
                  return this.setNext('line-start');
              const s = this.peek(3);
              if ((s === '---' || s === '...') && isEmpty(this.charAt(3))) {
                  yield* this.pushCount(3);
                  this.indentValue = 0;
                  this.indentNext = 0;
                  return s === '---' ? 'doc' : 'stream';
              }
          }
          this.indentValue = yield* this.pushSpaces(false);
          if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
              this.indentNext = this.indentValue;
          return yield* this.parseBlockStart();
      }
      *parseBlockStart() {
          const [ch0, ch1] = this.peek(2);
          if (!ch1 && !this.atEnd)
              return this.setNext('block-start');
          if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {
              const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
              this.indentNext = this.indentValue + 1;
              this.indentValue += n;
              return yield* this.parseBlockStart();
          }
          return 'doc';
      }
      *parseDocument() {
          yield* this.pushSpaces(true);
          const line = this.getLine();
          if (line === null)
              return this.setNext('doc');
          let n = yield* this.pushIndicators();
          switch (line[n]) {
              case '#':
                  yield* this.pushCount(line.length - n);
              // fallthrough
              case undefined:
                  yield* this.pushNewline();
                  return yield* this.parseLineStart();
              case '{':
              case '[':
                  yield* this.pushCount(1);
                  this.flowKey = false;
                  this.flowLevel = 1;
                  return 'flow';
              case '}':
              case ']':
                  // this is an error
                  yield* this.pushCount(1);
                  return 'doc';
              case '*':
                  yield* this.pushUntil(isNotAnchorChar);
                  return 'doc';
              case '"':
              case "'":
                  return yield* this.parseQuotedScalar();
              case '|':
              case '>':
                  n += yield* this.parseBlockScalarHeader();
                  n += yield* this.pushSpaces(true);
                  yield* this.pushCount(line.length - n);
                  yield* this.pushNewline();
                  return yield* this.parseBlockScalar();
              default:
                  return yield* this.parsePlainScalar();
          }
      }
      *parseFlowCollection() {
          let nl, sp;
          let indent = -1;
          do {
              nl = yield* this.pushNewline();
              if (nl > 0) {
                  sp = yield* this.pushSpaces(false);
                  this.indentValue = indent = sp;
              }
              else {
                  sp = 0;
              }
              sp += yield* this.pushSpaces(true);
          } while (nl + sp > 0);
          const line = this.getLine();
          if (line === null)
              return this.setNext('flow');
          if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||
              (indent === 0 &&
                  (line.startsWith('---') || line.startsWith('...')) &&
                  isEmpty(line[3]))) {
              // Allowing for the terminal ] or } at the same (rather than greater)
              // indent level as the initial [ or { is technically invalid, but
              // failing here would be surprising to users.
              const atFlowEndMarker = indent === this.indentNext - 1 &&
                  this.flowLevel === 1 &&
                  (line[0] === ']' || line[0] === '}');
              if (!atFlowEndMarker) {
                  // this is an error
                  this.flowLevel = 0;
                  yield FLOW_END;
                  return yield* this.parseLineStart();
              }
          }
          let n = 0;
          while (line[n] === ',') {
              n += yield* this.pushCount(1);
              n += yield* this.pushSpaces(true);
              this.flowKey = false;
          }
          n += yield* this.pushIndicators();
          switch (line[n]) {
              case undefined:
                  return 'flow';
              case '#':
                  yield* this.pushCount(line.length - n);
                  return 'flow';
              case '{':
              case '[':
                  yield* this.pushCount(1);
                  this.flowKey = false;
                  this.flowLevel += 1;
                  return 'flow';
              case '}':
              case ']':
                  yield* this.pushCount(1);
                  this.flowKey = true;
                  this.flowLevel -= 1;
                  return this.flowLevel ? 'flow' : 'doc';
              case '*':
                  yield* this.pushUntil(isNotAnchorChar);
                  return 'flow';
              case '"':
              case "'":
                  this.flowKey = true;
                  return yield* this.parseQuotedScalar();
              case ':': {
                  const next = this.charAt(1);
                  if (this.flowKey || isEmpty(next) || next === ',') {
                      this.flowKey = false;
                      yield* this.pushCount(1);
                      yield* this.pushSpaces(true);
                      return 'flow';
                  }
              }
              // fallthrough
              default:
                  this.flowKey = false;
                  return yield* this.parsePlainScalar();
          }
      }
      *parseQuotedScalar() {
          const quote = this.charAt(0);
          let end = this.buffer.indexOf(quote, this.pos + 1);
          if (quote === "'") {
              while (end !== -1 && this.buffer[end + 1] === "'")
                  end = this.buffer.indexOf("'", end + 2);
          }
          else {
              // double-quote
              while (end !== -1) {
                  let n = 0;
                  while (this.buffer[end - 1 - n] === '\\')
                      n += 1;
                  if (n % 2 === 0)
                      break;
                  end = this.buffer.indexOf('"', end + 1);
              }
          }
          // Only looking for newlines within the quotes
          const qb = this.buffer.substring(0, end);
          let nl = qb.indexOf('\n', this.pos);
          if (nl !== -1) {
              while (nl !== -1) {
                  const cs = this.continueScalar(nl + 1);
                  if (cs === -1)
                      break;
                  nl = qb.indexOf('\n', cs);
              }
              if (nl !== -1) {
                  // this is an error caused by an unexpected unindent
                  end = nl - (qb[nl - 1] === '\r' ? 2 : 1);
              }
          }
          if (end === -1) {
              if (!this.atEnd)
                  return this.setNext('quoted-scalar');
              end = this.buffer.length;
          }
          yield* this.pushToIndex(end + 1, false);
          return this.flowLevel ? 'flow' : 'doc';
      }
      *parseBlockScalarHeader() {
          this.blockScalarIndent = -1;
          this.blockScalarKeep = false;
          let i = this.pos;
          while (true) {
              const ch = this.buffer[++i];
              if (ch === '+')
                  this.blockScalarKeep = true;
              else if (ch > '0' && ch <= '9')
                  this.blockScalarIndent = Number(ch) - 1;
              else if (ch !== '-')
                  break;
          }
          return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');
      }
      *parseBlockScalar() {
          let nl = this.pos - 1; // may be -1 if this.pos === 0
          let indent = 0;
          let ch;
          loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {
              switch (ch) {
                  case ' ':
                      indent += 1;
                      break;
                  case '\n':
                      nl = i;
                      indent = 0;
                      break;
                  case '\r': {
                      const next = this.buffer[i + 1];
                      if (!next && !this.atEnd)
                          return this.setNext('block-scalar');
                      if (next === '\n')
                          break;
                  } // fallthrough
                  default:
                      break loop;
              }
          }
          if (!ch && !this.atEnd)
              return this.setNext('block-scalar');
          if (indent >= this.indentNext) {
              if (this.blockScalarIndent === -1)
                  this.indentNext = indent;
              else {
                  this.indentNext =
                      this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
              }
              do {
                  const cs = this.continueScalar(nl + 1);
                  if (cs === -1)
                      break;
                  nl = this.buffer.indexOf('\n', cs);
              } while (nl !== -1);
              if (nl === -1) {
                  if (!this.atEnd)
                      return this.setNext('block-scalar');
                  nl = this.buffer.length;
              }
          }
          // Trailing insufficiently indented tabs are invalid.
          // To catch that during parsing, we include them in the block scalar value.
          let i = nl + 1;
          ch = this.buffer[i];
          while (ch === ' ')
              ch = this.buffer[++i];
          if (ch === '\t') {
              while (ch === '\t' || ch === ' ' || ch === '\r' || ch === '\n')
                  ch = this.buffer[++i];
              nl = i - 1;
          }
          else if (!this.blockScalarKeep) {
              do {
                  let i = nl - 1;
                  let ch = this.buffer[i];
                  if (ch === '\r')
                      ch = this.buffer[--i];
                  const lastChar = i; // Drop the line if last char not more indented
                  while (ch === ' ')
                      ch = this.buffer[--i];
                  if (ch === '\n' && i >= this.pos && i + 1 + indent > lastChar)
                      nl = i;
                  else
                      break;
              } while (true);
          }
          yield SCALAR;
          yield* this.pushToIndex(nl + 1, true);
          return yield* this.parseLineStart();
      }
      *parsePlainScalar() {
          const inFlow = this.flowLevel > 0;
          let end = this.pos - 1;
          let i = this.pos - 1;
          let ch;
          while ((ch = this.buffer[++i])) {
              if (ch === ':') {
                  const next = this.buffer[i + 1];
                  if (isEmpty(next) || (inFlow && flowIndicatorChars.has(next)))
                      break;
                  end = i;
              }
              else if (isEmpty(ch)) {
                  let next = this.buffer[i + 1];
                  if (ch === '\r') {
                      if (next === '\n') {
                          i += 1;
                          ch = '\n';
                          next = this.buffer[i + 1];
                      }
                      else
                          end = i;
                  }
                  if (next === '#' || (inFlow && flowIndicatorChars.has(next)))
                      break;
                  if (ch === '\n') {
                      const cs = this.continueScalar(i + 1);
                      if (cs === -1)
                          break;
                      i = Math.max(i, cs - 2); // to advance, but still account for ' #'
                  }
              }
              else {
                  if (inFlow && flowIndicatorChars.has(ch))
                      break;
                  end = i;
              }
          }
          if (!ch && !this.atEnd)
              return this.setNext('plain-scalar');
          yield SCALAR;
          yield* this.pushToIndex(end + 1, true);
          return inFlow ? 'flow' : 'doc';
      }
      *pushCount(n) {
          if (n > 0) {
              yield this.buffer.substr(this.pos, n);
              this.pos += n;
              return n;
          }
          return 0;
      }
      *pushToIndex(i, allowEmpty) {
          const s = this.buffer.slice(this.pos, i);
          if (s) {
              yield s;
              this.pos += s.length;
              return s.length;
          }
          else if (allowEmpty)
              yield '';
          return 0;
      }
      *pushIndicators() {
          switch (this.charAt(0)) {
              case '!':
                  return ((yield* this.pushTag()) +
                      (yield* this.pushSpaces(true)) +
                      (yield* this.pushIndicators()));
              case '&':
                  return ((yield* this.pushUntil(isNotAnchorChar)) +
                      (yield* this.pushSpaces(true)) +
                      (yield* this.pushIndicators()));
              case '-': // this is an error
              case '?': // this is an error outside flow collections
              case ':': {
                  const inFlow = this.flowLevel > 0;
                  const ch1 = this.charAt(1);
                  if (isEmpty(ch1) || (inFlow && flowIndicatorChars.has(ch1))) {
                      if (!inFlow)
                          this.indentNext = this.indentValue + 1;
                      else if (this.flowKey)
                          this.flowKey = false;
                      return ((yield* this.pushCount(1)) +
                          (yield* this.pushSpaces(true)) +
                          (yield* this.pushIndicators()));
                  }
              }
          }
          return 0;
      }
      *pushTag() {
          if (this.charAt(1) === '<') {
              let i = this.pos + 2;
              let ch = this.buffer[i];
              while (!isEmpty(ch) && ch !== '>')
                  ch = this.buffer[++i];
              return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);
          }
          else {
              let i = this.pos + 1;
              let ch = this.buffer[i];
              while (ch) {
                  if (tagChars.has(ch))
                      ch = this.buffer[++i];
                  else if (ch === '%' &&
                      hexDigits.has(this.buffer[i + 1]) &&
                      hexDigits.has(this.buffer[i + 2])) {
                      ch = this.buffer[(i += 3)];
                  }
                  else
                      break;
              }
              return yield* this.pushToIndex(i, false);
          }
      }
      *pushNewline() {
          const ch = this.buffer[this.pos];
          if (ch === '\n')
              return yield* this.pushCount(1);
          else if (ch === '\r' && this.charAt(1) === '\n')
              return yield* this.pushCount(2);
          else
              return 0;
      }
      *pushSpaces(allowTabs) {
          let i = this.pos - 1;
          let ch;
          do {
              ch = this.buffer[++i];
          } while (ch === ' ' || (allowTabs && ch === '\t'));
          const n = i - this.pos;
          if (n > 0) {
              yield this.buffer.substr(this.pos, n);
              this.pos = i;
          }
          return n;
      }
      *pushUntil(test) {
          let i = this.pos;
          let ch = this.buffer[i];
          while (!test(ch))
              ch = this.buffer[++i];
          return yield* this.pushToIndex(i, false);
      }
  }

  /**
   * Tracks newlines during parsing in order to provide an efficient API for
   * determining the one-indexed `{ line, col }` position for any offset
   * within the input.
   */
  class LineCounter {
      constructor() {
          this.lineStarts = [];
          /**
           * Should be called in ascending order. Otherwise, call
           * `lineCounter.lineStarts.sort()` before calling `linePos()`.
           */
          this.addNewLine = (offset) => this.lineStarts.push(offset);
          /**
           * Performs a binary search and returns the 1-indexed { line, col }
           * position of `offset`. If `line === 0`, `addNewLine` has never been
           * called or `offset` is before the first known newline.
           */
          this.linePos = (offset) => {
              let low = 0;
              let high = this.lineStarts.length;
              while (low < high) {
                  const mid = (low + high) >> 1; // Math.floor((low + high) / 2)
                  if (this.lineStarts[mid] < offset)
                      low = mid + 1;
                  else
                      high = mid;
              }
              if (this.lineStarts[low] === offset)
                  return { line: low + 1, col: 1 };
              if (low === 0)
                  return { line: 0, col: offset };
              const start = this.lineStarts[low - 1];
              return { line: low, col: offset - start + 1 };
          };
      }
  }

  function includesToken(list, type) {
      for (let i = 0; i < list.length; ++i)
          if (list[i].type === type)
              return true;
      return false;
  }
  function findNonEmptyIndex(list) {
      for (let i = 0; i < list.length; ++i) {
          switch (list[i].type) {
              case 'space':
              case 'comment':
              case 'newline':
                  break;
              default:
                  return i;
          }
      }
      return -1;
  }
  function isFlowToken(token) {
      switch (token?.type) {
          case 'alias':
          case 'scalar':
          case 'single-quoted-scalar':
          case 'double-quoted-scalar':
          case 'flow-collection':
              return true;
          default:
              return false;
      }
  }
  function getPrevProps(parent) {
      switch (parent.type) {
          case 'document':
              return parent.start;
          case 'block-map': {
              const it = parent.items[parent.items.length - 1];
              return it.sep ?? it.start;
          }
          case 'block-seq':
              return parent.items[parent.items.length - 1].start;
          /* istanbul ignore next should not happen */
          default:
              return [];
      }
  }
  /** Note: May modify input array */
  function getFirstKeyStartProps(prev) {
      if (prev.length === 0)
          return [];
      let i = prev.length;
      loop: while (--i >= 0) {
          switch (prev[i].type) {
              case 'doc-start':
              case 'explicit-key-ind':
              case 'map-value-ind':
              case 'seq-item-ind':
              case 'newline':
                  break loop;
          }
      }
      while (prev[++i]?.type === 'space') {
          /* loop */
      }
      return prev.splice(i, prev.length);
  }
  function fixFlowSeqItems(fc) {
      if (fc.start.type === 'flow-seq-start') {
          for (const it of fc.items) {
              if (it.sep &&
                  !it.value &&
                  !includesToken(it.start, 'explicit-key-ind') &&
                  !includesToken(it.sep, 'map-value-ind')) {
                  if (it.key)
                      it.value = it.key;
                  delete it.key;
                  if (isFlowToken(it.value)) {
                      if (it.value.end)
                          Array.prototype.push.apply(it.value.end, it.sep);
                      else
                          it.value.end = it.sep;
                  }
                  else
                      Array.prototype.push.apply(it.start, it.sep);
                  delete it.sep;
              }
          }
      }
  }
  /**
   * A YAML concrete syntax tree (CST) parser
   *
   * ```ts
   * const src: string = ...
   * for (const token of new Parser().parse(src)) {
   *   // token: Token
   * }
   * ```
   *
   * To use the parser with a user-provided lexer:
   *
   * ```ts
   * function* parse(source: string, lexer: Lexer) {
   *   const parser = new Parser()
   *   for (const lexeme of lexer.lex(source))
   *     yield* parser.next(lexeme)
   *   yield* parser.end()
   * }
   *
   * const src: string = ...
   * const lexer = new Lexer()
   * for (const token of parse(src, lexer)) {
   *   // token: Token
   * }
   * ```
   */
  class Parser {
      /**
       * @param onNewLine - If defined, called separately with the start position of
       *   each new line (in `parse()`, including the start of input).
       */
      constructor(onNewLine) {
          /** If true, space and sequence indicators count as indentation */
          this.atNewLine = true;
          /** If true, next token is a scalar value */
          this.atScalar = false;
          /** Current indentation level */
          this.indent = 0;
          /** Current offset since the start of parsing */
          this.offset = 0;
          /** On the same line with a block map key */
          this.onKeyLine = false;
          /** Top indicates the node that's currently being built */
          this.stack = [];
          /** The source of the current token, set in parse() */
          this.source = '';
          /** The type of the current token, set in parse() */
          this.type = '';
          // Must be defined after `next()`
          this.lexer = new Lexer();
          this.onNewLine = onNewLine;
      }
      /**
       * Parse `source` as a YAML stream.
       * If `incomplete`, a part of the last line may be left as a buffer for the next call.
       *
       * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
       *
       * @returns A generator of tokens representing each directive, document, and other structure.
       */
      *parse(source, incomplete = false) {
          if (this.onNewLine && this.offset === 0)
              this.onNewLine(0);
          for (const lexeme of this.lexer.lex(source, incomplete))
              yield* this.next(lexeme);
          if (!incomplete)
              yield* this.end();
      }
      /**
       * Advance the parser by the `source` of one lexical token.
       */
      *next(source) {
          this.source = source;
          if (this.atScalar) {
              this.atScalar = false;
              yield* this.step();
              this.offset += source.length;
              return;
          }
          const type = tokenType(source);
          if (!type) {
              const message = `Not a YAML token: ${source}`;
              yield* this.pop({ type: 'error', offset: this.offset, message, source });
              this.offset += source.length;
          }
          else if (type === 'scalar') {
              this.atNewLine = false;
              this.atScalar = true;
              this.type = 'scalar';
          }
          else {
              this.type = type;
              yield* this.step();
              switch (type) {
                  case 'newline':
                      this.atNewLine = true;
                      this.indent = 0;
                      if (this.onNewLine)
                          this.onNewLine(this.offset + source.length);
                      break;
                  case 'space':
                      if (this.atNewLine && source[0] === ' ')
                          this.indent += source.length;
                      break;
                  case 'explicit-key-ind':
                  case 'map-value-ind':
                  case 'seq-item-ind':
                      if (this.atNewLine)
                          this.indent += source.length;
                      break;
                  case 'doc-mode':
                  case 'flow-error-end':
                      return;
                  default:
                      this.atNewLine = false;
              }
              this.offset += source.length;
          }
      }
      /** Call at end of input to push out any remaining constructions */
      *end() {
          while (this.stack.length > 0)
              yield* this.pop();
      }
      get sourceToken() {
          const st = {
              type: this.type,
              offset: this.offset,
              indent: this.indent,
              source: this.source
          };
          return st;
      }
      *step() {
          const top = this.peek(1);
          if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {
              while (this.stack.length > 0)
                  yield* this.pop();
              this.stack.push({
                  type: 'doc-end',
                  offset: this.offset,
                  source: this.source
              });
              return;
          }
          if (!top)
              return yield* this.stream();
          switch (top.type) {
              case 'document':
                  return yield* this.document(top);
              case 'alias':
              case 'scalar':
              case 'single-quoted-scalar':
              case 'double-quoted-scalar':
                  return yield* this.scalar(top);
              case 'block-scalar':
                  return yield* this.blockScalar(top);
              case 'block-map':
                  return yield* this.blockMap(top);
              case 'block-seq':
                  return yield* this.blockSequence(top);
              case 'flow-collection':
                  return yield* this.flowCollection(top);
              case 'doc-end':
                  return yield* this.documentEnd(top);
          }
          /* istanbul ignore next should not happen */
          yield* this.pop();
      }
      peek(n) {
          return this.stack[this.stack.length - n];
      }
      *pop(error) {
          const token = error ?? this.stack.pop();
          /* istanbul ignore if should not happen */
          if (!token) {
              const message = 'Tried to pop an empty stack';
              yield { type: 'error', offset: this.offset, source: '', message };
          }
          else if (this.stack.length === 0) {
              yield token;
          }
          else {
              const top = this.peek(1);
              if (token.type === 'block-scalar') {
                  // Block scalars use their parent rather than header indent
                  token.indent = 'indent' in top ? top.indent : 0;
              }
              else if (token.type === 'flow-collection' && top.type === 'document') {
                  // Ignore all indent for top-level flow collections
                  token.indent = 0;
              }
              if (token.type === 'flow-collection')
                  fixFlowSeqItems(token);
              switch (top.type) {
                  case 'document':
                      top.value = token;
                      break;
                  case 'block-scalar':
                      top.props.push(token); // error
                      break;
                  case 'block-map': {
                      const it = top.items[top.items.length - 1];
                      if (it.value) {
                          top.items.push({ start: [], key: token, sep: [] });
                          this.onKeyLine = true;
                          return;
                      }
                      else if (it.sep) {
                          it.value = token;
                      }
                      else {
                          Object.assign(it, { key: token, sep: [] });
                          this.onKeyLine = !it.explicitKey;
                          return;
                      }
                      break;
                  }
                  case 'block-seq': {
                      const it = top.items[top.items.length - 1];
                      if (it.value)
                          top.items.push({ start: [], value: token });
                      else
                          it.value = token;
                      break;
                  }
                  case 'flow-collection': {
                      const it = top.items[top.items.length - 1];
                      if (!it || it.value)
                          top.items.push({ start: [], key: token, sep: [] });
                      else if (it.sep)
                          it.value = token;
                      else
                          Object.assign(it, { key: token, sep: [] });
                      return;
                  }
                  /* istanbul ignore next should not happen */
                  default:
                      yield* this.pop();
                      yield* this.pop(token);
              }
              if ((top.type === 'document' ||
                  top.type === 'block-map' ||
                  top.type === 'block-seq') &&
                  (token.type === 'block-map' || token.type === 'block-seq')) {
                  const last = token.items[token.items.length - 1];
                  if (last &&
                      !last.sep &&
                      !last.value &&
                      last.start.length > 0 &&
                      findNonEmptyIndex(last.start) === -1 &&
                      (token.indent === 0 ||
                          last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {
                      if (top.type === 'document')
                          top.end = last.start;
                      else
                          top.items.push({ start: last.start });
                      token.items.splice(-1, 1);
                  }
              }
          }
      }
      *stream() {
          switch (this.type) {
              case 'directive-line':
                  yield { type: 'directive', offset: this.offset, source: this.source };
                  return;
              case 'byte-order-mark':
              case 'space':
              case 'comment':
              case 'newline':
                  yield this.sourceToken;
                  return;
              case 'doc-mode':
              case 'doc-start': {
                  const doc = {
                      type: 'document',
                      offset: this.offset,
                      start: []
                  };
                  if (this.type === 'doc-start')
                      doc.start.push(this.sourceToken);
                  this.stack.push(doc);
                  return;
              }
          }
          yield {
              type: 'error',
              offset: this.offset,
              message: `Unexpected ${this.type} token in YAML stream`,
              source: this.source
          };
      }
      *document(doc) {
          if (doc.value)
              return yield* this.lineEnd(doc);
          switch (this.type) {
              case 'doc-start': {
                  if (findNonEmptyIndex(doc.start) !== -1) {
                      yield* this.pop();
                      yield* this.step();
                  }
                  else
                      doc.start.push(this.sourceToken);
                  return;
              }
              case 'anchor':
              case 'tag':
              case 'space':
              case 'comment':
              case 'newline':
                  doc.start.push(this.sourceToken);
                  return;
          }
          const bv = this.startBlockValue(doc);
          if (bv)
              this.stack.push(bv);
          else {
              yield {
                  type: 'error',
                  offset: this.offset,
                  message: `Unexpected ${this.type} token in YAML document`,
                  source: this.source
              };
          }
      }
      *scalar(scalar) {
          if (this.type === 'map-value-ind') {
              const prev = getPrevProps(this.peek(2));
              const start = getFirstKeyStartProps(prev);
              let sep;
              if (scalar.end) {
                  sep = scalar.end;
                  sep.push(this.sourceToken);
                  delete scalar.end;
              }
              else
                  sep = [this.sourceToken];
              const map = {
                  type: 'block-map',
                  offset: scalar.offset,
                  indent: scalar.indent,
                  items: [{ start, key: scalar, sep }]
              };
              this.onKeyLine = true;
              this.stack[this.stack.length - 1] = map;
          }
          else
              yield* this.lineEnd(scalar);
      }
      *blockScalar(scalar) {
          switch (this.type) {
              case 'space':
              case 'comment':
              case 'newline':
                  scalar.props.push(this.sourceToken);
                  return;
              case 'scalar':
                  scalar.source = this.source;
                  // block-scalar source includes trailing newline
                  this.atNewLine = true;
                  this.indent = 0;
                  if (this.onNewLine) {
                      let nl = this.source.indexOf('\n') + 1;
                      while (nl !== 0) {
                          this.onNewLine(this.offset + nl);
                          nl = this.source.indexOf('\n', nl) + 1;
                      }
                  }
                  yield* this.pop();
                  break;
              /* istanbul ignore next should not happen */
              default:
                  yield* this.pop();
                  yield* this.step();
          }
      }
      *blockMap(map) {
          const it = map.items[map.items.length - 1];
          // it.sep is true-ish if pair already has key or : separator
          switch (this.type) {
              case 'newline':
                  this.onKeyLine = false;
                  if (it.value) {
                      const end = 'end' in it.value ? it.value.end : undefined;
                      const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                      if (last?.type === 'comment')
                          end?.push(this.sourceToken);
                      else
                          map.items.push({ start: [this.sourceToken] });
                  }
                  else if (it.sep) {
                      it.sep.push(this.sourceToken);
                  }
                  else {
                      it.start.push(this.sourceToken);
                  }
                  return;
              case 'space':
              case 'comment':
                  if (it.value) {
                      map.items.push({ start: [this.sourceToken] });
                  }
                  else if (it.sep) {
                      it.sep.push(this.sourceToken);
                  }
                  else {
                      if (this.atIndentedComment(it.start, map.indent)) {
                          const prev = map.items[map.items.length - 2];
                          const end = prev?.value?.end;
                          if (Array.isArray(end)) {
                              Array.prototype.push.apply(end, it.start);
                              end.push(this.sourceToken);
                              map.items.pop();
                              return;
                          }
                      }
                      it.start.push(this.sourceToken);
                  }
                  return;
          }
          if (this.indent >= map.indent) {
              const atMapIndent = !this.onKeyLine && this.indent === map.indent;
              const atNextItem = atMapIndent &&
                  (it.sep || it.explicitKey) &&
                  this.type !== 'seq-item-ind';
              // For empty nodes, assign newline-separated not indented empty tokens to following node
              let start = [];
              if (atNextItem && it.sep && !it.value) {
                  const nl = [];
                  for (let i = 0; i < it.sep.length; ++i) {
                      const st = it.sep[i];
                      switch (st.type) {
                          case 'newline':
                              nl.push(i);
                              break;
                          case 'space':
                              break;
                          case 'comment':
                              if (st.indent > map.indent)
                                  nl.length = 0;
                              break;
                          default:
                              nl.length = 0;
                      }
                  }
                  if (nl.length >= 2)
                      start = it.sep.splice(nl[1]);
              }
              switch (this.type) {
                  case 'anchor':
                  case 'tag':
                      if (atNextItem || it.value) {
                          start.push(this.sourceToken);
                          map.items.push({ start });
                          this.onKeyLine = true;
                      }
                      else if (it.sep) {
                          it.sep.push(this.sourceToken);
                      }
                      else {
                          it.start.push(this.sourceToken);
                      }
                      return;
                  case 'explicit-key-ind':
                      if (!it.sep && !it.explicitKey) {
                          it.start.push(this.sourceToken);
                          it.explicitKey = true;
                      }
                      else if (atNextItem || it.value) {
                          start.push(this.sourceToken);
                          map.items.push({ start, explicitKey: true });
                      }
                      else {
                          this.stack.push({
                              type: 'block-map',
                              offset: this.offset,
                              indent: this.indent,
                              items: [{ start: [this.sourceToken], explicitKey: true }]
                          });
                      }
                      this.onKeyLine = true;
                      return;
                  case 'map-value-ind':
                      if (it.explicitKey) {
                          if (!it.sep) {
                              if (includesToken(it.start, 'newline')) {
                                  Object.assign(it, { key: null, sep: [this.sourceToken] });
                              }
                              else {
                                  const start = getFirstKeyStartProps(it.start);
                                  this.stack.push({
                                      type: 'block-map',
                                      offset: this.offset,
                                      indent: this.indent,
                                      items: [{ start, key: null, sep: [this.sourceToken] }]
                                  });
                              }
                          }
                          else if (it.value) {
                              map.items.push({ start: [], key: null, sep: [this.sourceToken] });
                          }
                          else if (includesToken(it.sep, 'map-value-ind')) {
                              this.stack.push({
                                  type: 'block-map',
                                  offset: this.offset,
                                  indent: this.indent,
                                  items: [{ start, key: null, sep: [this.sourceToken] }]
                              });
                          }
                          else if (isFlowToken(it.key) &&
                              !includesToken(it.sep, 'newline')) {
                              const start = getFirstKeyStartProps(it.start);
                              const key = it.key;
                              const sep = it.sep;
                              sep.push(this.sourceToken);
                              // @ts-expect-error type guard is wrong here
                              delete it.key;
                              // @ts-expect-error type guard is wrong here
                              delete it.sep;
                              this.stack.push({
                                  type: 'block-map',
                                  offset: this.offset,
                                  indent: this.indent,
                                  items: [{ start, key, sep }]
                              });
                          }
                          else if (start.length > 0) {
                              // Not actually at next item
                              it.sep = it.sep.concat(start, this.sourceToken);
                          }
                          else {
                              it.sep.push(this.sourceToken);
                          }
                      }
                      else {
                          if (!it.sep) {
                              Object.assign(it, { key: null, sep: [this.sourceToken] });
                          }
                          else if (it.value || atNextItem) {
                              map.items.push({ start, key: null, sep: [this.sourceToken] });
                          }
                          else if (includesToken(it.sep, 'map-value-ind')) {
                              this.stack.push({
                                  type: 'block-map',
                                  offset: this.offset,
                                  indent: this.indent,
                                  items: [{ start: [], key: null, sep: [this.sourceToken] }]
                              });
                          }
                          else {
                              it.sep.push(this.sourceToken);
                          }
                      }
                      this.onKeyLine = true;
                      return;
                  case 'alias':
                  case 'scalar':
                  case 'single-quoted-scalar':
                  case 'double-quoted-scalar': {
                      const fs = this.flowScalar(this.type);
                      if (atNextItem || it.value) {
                          map.items.push({ start, key: fs, sep: [] });
                          this.onKeyLine = true;
                      }
                      else if (it.sep) {
                          this.stack.push(fs);
                      }
                      else {
                          Object.assign(it, { key: fs, sep: [] });
                          this.onKeyLine = true;
                      }
                      return;
                  }
                  default: {
                      const bv = this.startBlockValue(map);
                      if (bv) {
                          if (bv.type === 'block-seq') {
                              if (!it.explicitKey &&
                                  it.sep &&
                                  !includesToken(it.sep, 'newline')) {
                                  yield* this.pop({
                                      type: 'error',
                                      offset: this.offset,
                                      message: 'Unexpected block-seq-ind on same line with key',
                                      source: this.source
                                  });
                                  return;
                              }
                          }
                          else if (atMapIndent) {
                              map.items.push({ start });
                          }
                          this.stack.push(bv);
                          return;
                      }
                  }
              }
          }
          yield* this.pop();
          yield* this.step();
      }
      *blockSequence(seq) {
          const it = seq.items[seq.items.length - 1];
          switch (this.type) {
              case 'newline':
                  if (it.value) {
                      const end = 'end' in it.value ? it.value.end : undefined;
                      const last = Array.isArray(end) ? end[end.length - 1] : undefined;
                      if (last?.type === 'comment')
                          end?.push(this.sourceToken);
                      else
                          seq.items.push({ start: [this.sourceToken] });
                  }
                  else
                      it.start.push(this.sourceToken);
                  return;
              case 'space':
              case 'comment':
                  if (it.value)
                      seq.items.push({ start: [this.sourceToken] });
                  else {
                      if (this.atIndentedComment(it.start, seq.indent)) {
                          const prev = seq.items[seq.items.length - 2];
                          const end = prev?.value?.end;
                          if (Array.isArray(end)) {
                              Array.prototype.push.apply(end, it.start);
                              end.push(this.sourceToken);
                              seq.items.pop();
                              return;
                          }
                      }
                      it.start.push(this.sourceToken);
                  }
                  return;
              case 'anchor':
              case 'tag':
                  if (it.value || this.indent <= seq.indent)
                      break;
                  it.start.push(this.sourceToken);
                  return;
              case 'seq-item-ind':
                  if (this.indent !== seq.indent)
                      break;
                  if (it.value || includesToken(it.start, 'seq-item-ind'))
                      seq.items.push({ start: [this.sourceToken] });
                  else
                      it.start.push(this.sourceToken);
                  return;
          }
          if (this.indent > seq.indent) {
              const bv = this.startBlockValue(seq);
              if (bv) {
                  this.stack.push(bv);
                  return;
              }
          }
          yield* this.pop();
          yield* this.step();
      }
      *flowCollection(fc) {
          const it = fc.items[fc.items.length - 1];
          if (this.type === 'flow-error-end') {
              let top;
              do {
                  yield* this.pop();
                  top = this.peek(1);
              } while (top && top.type === 'flow-collection');
          }
          else if (fc.end.length === 0) {
              switch (this.type) {
                  case 'comma':
                  case 'explicit-key-ind':
                      if (!it || it.sep)
                          fc.items.push({ start: [this.sourceToken] });
                      else
                          it.start.push(this.sourceToken);
                      return;
                  case 'map-value-ind':
                      if (!it || it.value)
                          fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
                      else if (it.sep)
                          it.sep.push(this.sourceToken);
                      else
                          Object.assign(it, { key: null, sep: [this.sourceToken] });
                      return;
                  case 'space':
                  case 'comment':
                  case 'newline':
                  case 'anchor':
                  case 'tag':
                      if (!it || it.value)
                          fc.items.push({ start: [this.sourceToken] });
                      else if (it.sep)
                          it.sep.push(this.sourceToken);
                      else
                          it.start.push(this.sourceToken);
                      return;
                  case 'alias':
                  case 'scalar':
                  case 'single-quoted-scalar':
                  case 'double-quoted-scalar': {
                      const fs = this.flowScalar(this.type);
                      if (!it || it.value)
                          fc.items.push({ start: [], key: fs, sep: [] });
                      else if (it.sep)
                          this.stack.push(fs);
                      else
                          Object.assign(it, { key: fs, sep: [] });
                      return;
                  }
                  case 'flow-map-end':
                  case 'flow-seq-end':
                      fc.end.push(this.sourceToken);
                      return;
              }
              const bv = this.startBlockValue(fc);
              /* istanbul ignore else should not happen */
              if (bv)
                  this.stack.push(bv);
              else {
                  yield* this.pop();
                  yield* this.step();
              }
          }
          else {
              const parent = this.peek(2);
              if (parent.type === 'block-map' &&
                  ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||
                      (this.type === 'newline' &&
                          !parent.items[parent.items.length - 1].sep))) {
                  yield* this.pop();
                  yield* this.step();
              }
              else if (this.type === 'map-value-ind' &&
                  parent.type !== 'flow-collection') {
                  const prev = getPrevProps(parent);
                  const start = getFirstKeyStartProps(prev);
                  fixFlowSeqItems(fc);
                  const sep = fc.end.splice(1, fc.end.length);
                  sep.push(this.sourceToken);
                  const map = {
                      type: 'block-map',
                      offset: fc.offset,
                      indent: fc.indent,
                      items: [{ start, key: fc, sep }]
                  };
                  this.onKeyLine = true;
                  this.stack[this.stack.length - 1] = map;
              }
              else {
                  yield* this.lineEnd(fc);
              }
          }
      }
      flowScalar(type) {
          if (this.onNewLine) {
              let nl = this.source.indexOf('\n') + 1;
              while (nl !== 0) {
                  this.onNewLine(this.offset + nl);
                  nl = this.source.indexOf('\n', nl) + 1;
              }
          }
          return {
              type,
              offset: this.offset,
              indent: this.indent,
              source: this.source
          };
      }
      startBlockValue(parent) {
          switch (this.type) {
              case 'alias':
              case 'scalar':
              case 'single-quoted-scalar':
              case 'double-quoted-scalar':
                  return this.flowScalar(this.type);
              case 'block-scalar-header':
                  return {
                      type: 'block-scalar',
                      offset: this.offset,
                      indent: this.indent,
                      props: [this.sourceToken],
                      source: ''
                  };
              case 'flow-map-start':
              case 'flow-seq-start':
                  return {
                      type: 'flow-collection',
                      offset: this.offset,
                      indent: this.indent,
                      start: this.sourceToken,
                      items: [],
                      end: []
                  };
              case 'seq-item-ind':
                  return {
                      type: 'block-seq',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: [this.sourceToken] }]
                  };
              case 'explicit-key-ind': {
                  this.onKeyLine = true;
                  const prev = getPrevProps(parent);
                  const start = getFirstKeyStartProps(prev);
                  start.push(this.sourceToken);
                  return {
                      type: 'block-map',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start, explicitKey: true }]
                  };
              }
              case 'map-value-ind': {
                  this.onKeyLine = true;
                  const prev = getPrevProps(parent);
                  const start = getFirstKeyStartProps(prev);
                  return {
                      type: 'block-map',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start, key: null, sep: [this.sourceToken] }]
                  };
              }
          }
          return null;
      }
      atIndentedComment(start, indent) {
          if (this.type !== 'comment')
              return false;
          if (this.indent <= indent)
              return false;
          return start.every(st => st.type === 'newline' || st.type === 'space');
      }
      *documentEnd(docEnd) {
          if (this.type !== 'doc-mode') {
              if (docEnd.end)
                  docEnd.end.push(this.sourceToken);
              else
                  docEnd.end = [this.sourceToken];
              if (this.type === 'newline')
                  yield* this.pop();
          }
      }
      *lineEnd(token) {
          switch (this.type) {
              case 'comma':
              case 'doc-start':
              case 'doc-end':
              case 'flow-seq-end':
              case 'flow-map-end':
              case 'map-value-ind':
                  yield* this.pop();
                  yield* this.step();
                  break;
              case 'newline':
                  this.onKeyLine = false;
              // fallthrough
              case 'space':
              case 'comment':
              default:
                  // all other values are errors
                  if (token.end)
                      token.end.push(this.sourceToken);
                  else
                      token.end = [this.sourceToken];
                  if (this.type === 'newline')
                      yield* this.pop();
          }
      }
  }

  function parseOptions(options) {
      const prettyErrors = options.prettyErrors !== false;
      const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;
      return { lineCounter, prettyErrors };
  }
  /**
   * Parse the input as a stream of YAML documents.
   *
   * Documents should be separated from each other by `...` or `---` marker lines.
   *
   * @returns If an empty `docs` array is returned, it will be of type
   *   EmptyStream and contain additional stream information. In
   *   TypeScript, you should use `'empty' in docs` as a type guard for it.
   */
  function parseAllDocuments(source, options = {}) {
      const { lineCounter, prettyErrors } = parseOptions(options);
      const parser = new Parser(lineCounter?.addNewLine);
      const composer = new Composer(options);
      const docs = Array.from(composer.compose(parser.parse(source)));
      if (prettyErrors && lineCounter)
          for (const doc of docs) {
              doc.errors.forEach(prettifyError(source, lineCounter));
              doc.warnings.forEach(prettifyError(source, lineCounter));
          }
      if (docs.length > 0)
          return docs;
      return Object.assign([], { empty: true }, composer.streamInfo());
  }
  /** Parse an input string into a single YAML.Document */
  function parseDocument(source, options = {}) {
      const { lineCounter, prettyErrors } = parseOptions(options);
      const parser = new Parser(lineCounter?.addNewLine);
      const composer = new Composer(options);
      // `doc` is always set by compose.end(true) at the very latest
      let doc = null;
      for (const _doc of composer.compose(parser.parse(source), true, source.length)) {
          if (!doc)
              doc = _doc;
          else if (doc.options.logLevel !== 'silent') {
              doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));
              break;
          }
      }
      if (prettyErrors && lineCounter) {
          doc.errors.forEach(prettifyError(source, lineCounter));
          doc.warnings.forEach(prettifyError(source, lineCounter));
      }
      return doc;
  }
  function parse(src, reviver, options) {
      let _reviver = undefined;
      if (typeof reviver === 'function') {
          _reviver = reviver;
      }
      else if (options === undefined && reviver && typeof reviver === 'object') {
          options = reviver;
      }
      const doc = parseDocument(src, options);
      if (!doc)
          return null;
      doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));
      if (doc.errors.length > 0) {
          if (doc.options.logLevel !== 'silent')
              throw doc.errors[0];
          else
              doc.errors = [];
      }
      return doc.toJS(Object.assign({ reviver: _reviver }, options));
  }
  function stringify(value, replacer, options) {
      let _replacer = null;
      if (typeof replacer === 'function' || Array.isArray(replacer)) {
          _replacer = replacer;
      }
      else if (options === undefined && replacer) {
          options = replacer;
      }
      if (typeof options === 'string')
          options = options.length;
      if (typeof options === 'number') {
          const indent = Math.round(options);
          options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };
      }
      if (value === undefined) {
          const { keepUndefined } = options ?? replacer ?? {};
          if (!keepUndefined)
              return undefined;
      }
      if (isDocument(value) && !_replacer)
          return value.toString(options);
      return new Document(value, _replacer, options).toString(options);
  }

  var YAML = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Alias: Alias,
    CST: cst,
    Composer: Composer,
    Document: Document,
    Lexer: Lexer,
    LineCounter: LineCounter,
    Pair: Pair,
    Parser: Parser,
    Scalar: Scalar,
    Schema: Schema,
    YAMLError: YAMLError,
    YAMLMap: YAMLMap,
    YAMLParseError: YAMLParseError,
    YAMLSeq: YAMLSeq,
    YAMLWarning: YAMLWarning,
    isAlias: isAlias,
    isCollection: isCollection$1,
    isDocument: isDocument,
    isMap: isMap,
    isNode: isNode,
    isPair: isPair,
    isScalar: isScalar$1,
    isSeq: isSeq,
    parse: parse,
    parseAllDocuments: parseAllDocuments,
    parseDocument: parseDocument,
    stringify: stringify,
    visit: visit$1,
    visitAsync: visitAsync
  });

  // `export * as default from ...` fails on Webpack v4
  // https://github.com/eemeli/yaml/issues/228

  /**
   * Mimics the behavior of `json-source-map`'s `parseJSONDocument` function using codemirror EditorState... for YAML
   */
  /**
   * Return parsed data and YAML pointers for a given codemirror EditorState
   * @group Utilities
   */
  function parseYAMLDocumentState(state) {
      let data = null;
      try {
          data = YAML.parse(state.doc.toString());
          // return pointers regardless of whether YAML.parse succeeds
      }
      catch (_a) { }
      const pointers = getJsonPointers(state, MODES.YAML);
      return { data, pointers };
  }

  const getDefaultParser = (mode) => {
      switch (mode) {
          case MODES.JSON:
              return parseJSONDocumentState;
          case MODES.JSON5:
              return parseJSON5DocumentState;
          case MODES.YAML:
              return parseYAMLDocumentState;
      }
  };

  function getRecordEntries(record) {
      return Object.entries(record);
  }
  function replacePropertiesDeeply(object, getReplacement) {
      if (typeof object === "string") {
          return object;
      }
      if (typeof object !== "object" || object === null) {
          return object;
      }
      if (Array.isArray(object)) {
          return object.map((element) => replacePropertiesDeeply(element, getReplacement));
      }
      if (object instanceof Map) {
          const newMap = new Map();
          for (const [key, value] of object) {
              const newKey = key;
              const newValue = replacePropertiesDeeply(value, getReplacement);
              newMap.set(newKey, newValue);
          }
          return newMap;
      }
      if (object instanceof Set) {
          const newSet = new Set();
          for (const value of object) {
              const newValue = replacePropertiesDeeply(value, getReplacement);
              newSet.add(newValue);
          }
          return newSet;
      }
      // assertAlways(object instanceof Object);
      const newObject = {};
      function handleReplacementEntry(oldKey, oldValue, newKey, newValue) {
          if (newKey === oldKey && newValue === oldValue) {
              newObject[newKey] = replacePropertiesDeeply(oldValue, getReplacement);
          }
          else {
              newObject[newKey] = newValue;
          }
      }
      for (const [key, value] of getRecordEntries(object)) {
          const replacement = getReplacement(key, value);
          if (replacement.length === 2 && typeof replacement[0] === "string") {
              handleReplacementEntry(key, value, replacement[0], replacement[1]);
          }
          else {
              for (const [newKey, newValue] of replacement) {
                  handleReplacementEntry(key, value, newKey, newValue);
              }
          }
      }
      return newObject;
  }

  var __rest = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class CompletionCollector {
      constructor() {
          this.completions = new Map();
          this.reservedKeys = new Set();
      }
      reserve(key) {
          this.reservedKeys.add(key);
      }
      add(completion) {
          if (this.reservedKeys.has(completion.label)) {
              return;
          }
          this.completions.set(completion.label, completion);
      }
  }
  function isRealSchema(subSchema) {
      return !(!subSchema ||
          isJsonError(subSchema) ||
          subSchema.name === "UnknownPropertyError" ||
          subSchema.type === "undefined");
  }
  class JSONCompletion {
      // private lastKnownValidData: object | null = null;
      constructor(opts) {
          var _a, _b, _c;
          this.opts = opts;
          this.originalSchema = null;
          /**
           * Inlined (expanded) top-level $ref if present.
           */
          this.schema = null;
          /**
           * Inlined (expanded) top-level $ref if present.
           * Does not contain any required properties and allows any additional properties everywhere.
           */
          this.laxSchema = null;
          this.mode = MODES.JSON;
          this.mode = (_a = opts.mode) !== null && _a !== void 0 ? _a : MODES.JSON;
          this.parser = (_c = (_b = this.opts) === null || _b === void 0 ? void 0 : _b.jsonParser) !== null && _c !== void 0 ? _c : getDefaultParser(this.mode);
      }
      doComplete(ctx) {
          var _a;
          const schemaFromState = getJSONSchema(ctx.state);
          if (this.originalSchema !== schemaFromState) {
              // only process schema when it changed (could be huge)
              this.schema =
                  (_a = expandSchemaProperty(schemaFromState, schemaFromState)) !== null && _a !== void 0 ? _a : schemaFromState;
              this.laxSchema = makeSchemaLax(this.schema);
          }
          if (!this.schema || !this.laxSchema) {
              // todo: should we even do anything without schema
              // without taking over the existing mode responsibilties?
              return [];
          }
          // first attempt to complete with the original schema
          debug.log("xxx", "trying with original schema");
          const completionResultForOriginalSchema = this.doCompleteForSchema(ctx, this.schema);
          if (completionResultForOriginalSchema.options.length !== 0) {
              return completionResultForOriginalSchema;
          }
          // if there are no completions, try with the lax schema (because json-schema-library would otherwise not provide schemas if invalid properties are present)
          debug.log("xxx", "no completions with original schema, trying with lax schema");
          return this.doCompleteForSchema(ctx, this.laxSchema);
      }
      doCompleteForSchema(ctx, rootSchema) {
          var _a, _b;
          const result = {
              from: ctx.pos,
              to: ctx.pos,
              options: [],
              filter: false, // will be handled manually
          };
          const text = ctx.state.doc.sliceString(0);
          let node = getNodeAtPosition(ctx.state, ctx.pos);
          // position node word prefix (without quotes) for matching
          let prefix = ctx.state.sliceDoc(node.from, ctx.pos).replace(/^(["'])/, "");
          debug.log("xxx", "node", node, "prefix", prefix, "ctx", ctx);
          // Only show completions if we are filling out a word or right after the starting quote, or if explicitly requested
          if (!(isPrimitiveValueNode(node, this.mode) ||
              isPropertyNameNode(node, this.mode)) &&
              !ctx.explicit) {
              debug.log("xxx", "no completions for non-word/primitive", node);
              return result;
          }
          const currentWord = getWord(ctx.state.doc, node);
          const rawWord = getWord(ctx.state.doc, node, false);
          // Calculate overwrite range
          if (node &&
              (isPrimitiveValueNode(node, this.mode) ||
                  isPropertyNameNode(node, this.mode))) {
              result.from = node.from;
              result.to = node.to;
          }
          else {
              const word = ctx.matchBefore(/[A-Za-z0-9._]*/);
              const overwriteStart = ctx.pos - currentWord.length;
              debug.log("xxx", "overwriteStart after", overwriteStart, "ctx.pos", ctx.pos, "word", word, "currentWord", currentWord, "=>", text[overwriteStart - 1], "..", text[overwriteStart], "..", text);
              result.from =
                  node.name === TOKENS.INVALID ? ((_a = word === null || word === void 0 ? void 0 : word.from) !== null && _a !== void 0 ? _a : ctx.pos) : overwriteStart;
              result.to = ctx.pos;
          }
          const collector = new CompletionCollector();
          let addValue = true;
          const closestPropertyNameNode = getClosestNode(node, TOKENS.PROPERTY_NAME, this.mode);
          // if we are inside a property name node, we need to get the parent property name node
          // The only reason we would be inside a property name node is if the current node is invalid or a literal/primitive node
          if (closestPropertyNameNode) {
              debug.log("xxx", "closestPropertyNameNode", closestPropertyNameNode, "node", node);
              node = closestPropertyNameNode;
          }
          if (isPropertyNameNode(node, this.mode)) {
              debug.log("xxx", "isPropertyNameNode", node);
              const parent = node.parent;
              if (parent) {
                  // get value node from parent
                  const valueNode = getChildValueNode(parent, this.mode);
                  addValue =
                      !valueNode ||
                          (valueNode.name === TOKENS.INVALID &&
                              valueNode.from - valueNode.to === 0) ||
                          // TODO: Verify this doesn't break anything else
                          (valueNode.parent
                              ? getChildrenNodes(valueNode.parent).length <= 1
                              : false);
                  debug.log("xxx", "addValue", addValue, getChildValueNode(parent, this.mode), node);
                  // find object node
                  node = (_b = getClosestNode(parent, TOKENS.OBJECT, this.mode)) !== null && _b !== void 0 ? _b : null;
              }
          }
          debug.log("xxx", node, currentWord, ctx, "node at pos", getNodeAtPosition(ctx.state, ctx.pos));
          // proposals for properties
          if (node &&
              [TOKENS.OBJECT, TOKENS.JSON_TEXT].includes(resolveTokenName(node.name, this.mode)) &&
              (isPropertyNameNode(getNodeAtPosition(ctx.state, ctx.pos), this.mode) ||
                  closestPropertyNameNode)) {
              // don't suggest keys when the cursor is just before the opening curly brace
              if (node.from === ctx.pos) {
                  debug.log("xxx", "no completions for just before opening brace");
                  return result;
              }
              // property proposals with schema
              this.getPropertyCompletions(rootSchema, ctx, node, collector, addValue, rawWord);
          }
          else {
              // proposals for values
              const types = {};
              // value proposals with schema
              const res = this.getValueCompletions(rootSchema, ctx, types, collector);
              debug.log("xxx", "getValueCompletions res", res);
          }
          // handle filtering
          result.options = Array.from(collector.completions.values()).filter((v) => stripSurroundingQuotes(v.label).startsWith(prefix));
          debug.log("xxx", "result", result, "prefix", prefix, "collector.completions", collector.completions, "reservedKeys", collector.reservedKeys);
          return result;
      }
      applySnippetCompletion(completion) {
          return snippetCompletion(typeof completion.apply !== "string"
              ? completion.label
              : completion.apply, completion);
      }
      getPropertyCompletions(rootSchema, ctx, node, collector, addValue, rawWord) {
          // don't suggest properties that are already present
          const properties = getMatchingChildrenNodes(node, TOKENS.PROPERTY, this.mode);
          debug.log("xxx", "getPropertyCompletions", node, ctx, properties);
          properties.forEach((p) => {
              const key = getWord(ctx.state.doc, getMatchingChildNode(p, TOKENS.PROPERTY_NAME, this.mode));
              collector.reserve(stripSurroundingQuotes(key));
          });
          // TODO: Handle separatorAfter
          // Get matching schemas
          const schemas = this.getSchemas(rootSchema, ctx);
          debug.log("xxx", "propertyCompletion schemas", schemas);
          schemas.forEach((s) => {
              if (typeof s !== "object") {
                  return;
              }
              const properties = s.properties;
              if (properties) {
                  Object.entries(properties).forEach(([key, value]) => {
                      var _a, _b;
                      if (typeof value === "object") {
                          const description = (_a = value.description) !== null && _a !== void 0 ? _a : "";
                          const type = (_b = value.type) !== null && _b !== void 0 ? _b : "";
                          const typeStr = Array.isArray(type) ? type.toString() : type;
                          const completion = {
                              // label is the unquoted key which will be displayed.
                              label: key,
                              apply: this.getInsertTextForProperty(key, addValue, rawWord, rootSchema, value),
                              type: "property",
                              detail: typeStr,
                              info: () => el("div", {
                                  inner: renderMarkdown(description),
                              }),
                          };
                          collector.add(this.applySnippetCompletion(completion));
                      }
                  });
              }
              const propertyNames = s.propertyNames;
              if (typeof propertyNames === "object") {
                  if (propertyNames.enum) {
                      propertyNames.enum.forEach((v) => {
                          const label = v === null || v === void 0 ? void 0 : v.toString();
                          if (label) {
                              const completion = {
                                  label,
                                  apply: this.getInsertTextForProperty(label, addValue, rawWord, rootSchema),
                                  type: "property",
                              };
                              collector.add(this.applySnippetCompletion(completion));
                          }
                      });
                  }
                  if (propertyNames.const) {
                      const label = propertyNames.const.toString();
                      const completion = {
                          label,
                          apply: this.getInsertTextForProperty(label, addValue, rawWord, rootSchema),
                          type: "property",
                      };
                      collector.add(this.applySnippetCompletion(completion));
                  }
              }
          });
      }
      // apply is the quoted key which will be applied.
      // Normally the label needs to match the token
      // prefix i.e. if the token begins with `"to`, then the
      // label needs to have the quotes as well for it to match.
      // However we are manually filtering the results so we can
      // just use the unquoted key as the label, which is nicer
      // and gives us more control.
      // If no property value is present, then we add the colon as well.
      // Use snippetCompletion to handle insert value + position cursor e.g. "key": "#{}"
      // doc: https://codemirror.net/docs/ref/#autocomplete.snippetCompletion
      // idea: https://discuss.codemirror.net/t/autocomplete-cursor-position-in-apply-function/4088/3
      getInsertTextForProperty(key, addValue, rawWord, rootSchema, propertySchema) {
          // expand schema property if it is a reference
          propertySchema = propertySchema
              ? expandSchemaProperty(propertySchema, rootSchema)
              : propertySchema;
          let resultText = this.getInsertTextForPropertyName(key, rawWord);
          if (!addValue) {
              return resultText;
          }
          resultText += ": ";
          let value;
          let nValueProposals = 0;
          if (typeof propertySchema === "object") {
              if (typeof propertySchema.default !== "undefined") {
                  if (!value) {
                      value = this.getInsertTextForGuessedValue(propertySchema.default, "");
                  }
                  nValueProposals++;
              }
              else {
                  if (propertySchema.enum) {
                      if (!value && propertySchema.enum.length === 1) {
                          value = this.getInsertTextForGuessedValue(propertySchema.enum[0], "");
                      }
                      nValueProposals += propertySchema.enum.length;
                  }
                  if (typeof propertySchema.const !== "undefined") {
                      if (!value) {
                          value = this.getInsertTextForGuessedValue(propertySchema.const, "");
                      }
                      nValueProposals++;
                  }
                  if (Array.isArray(propertySchema.examples) &&
                      propertySchema.examples.length) {
                      if (!value) {
                          value = this.getInsertTextForGuessedValue(propertySchema.examples[0], "");
                      }
                      nValueProposals += propertySchema.examples.length;
                  }
                  if (value === undefined && nValueProposals === 0) {
                      let type = Array.isArray(propertySchema.type)
                          ? propertySchema.type[0]
                          : propertySchema.type;
                      if (!type) {
                          if (propertySchema.properties) {
                              type = "object";
                          }
                          else if (propertySchema.items) {
                              type = "array";
                          }
                      }
                      switch (type) {
                          case "boolean":
                              value = "#{}";
                              break;
                          case "string":
                              value = this.getInsertTextForString("");
                              break;
                          case "object":
                              switch (this.mode) {
                                  case MODES.JSON5:
                                      value = "{#{}}";
                                      break;
                                  case MODES.YAML:
                                      value = "#{}";
                                      break;
                                  default:
                                      value = "{#{}}";
                                      break;
                              }
                              break;
                          case "array":
                              value = "[#{}]";
                              break;
                          case "number":
                          case "integer":
                              value = "#{0}";
                              break;
                          case "null":
                              value = "#{null}";
                              break;
                          default:
                              // always advance the cursor after completing a property
                              value = "#{}";
                              break;
                      }
                  }
              }
          }
          if (!value || nValueProposals > 1) {
              debug.log("xxx", "value", value, "nValueProposals", nValueProposals, propertySchema);
              value = "#{}";
          }
          return resultText + value;
      }
      getInsertTextForPropertyName(key, rawWord) {
          switch (this.mode) {
              case MODES.JSON5:
              case MODES.YAML: {
                  if (rawWord.startsWith('"')) {
                      return `"${key}"`;
                  }
                  if (rawWord.startsWith("'")) {
                      return `'${key}'`;
                  }
                  return key;
              }
              default:
                  return `"${key}"`;
          }
      }
      getInsertTextForString(value, prf = "#") {
          switch (this.mode) {
              case MODES.JSON5:
                  return `'${prf}{${value}}'`;
              case MODES.YAML:
                  return `${prf}{${value}}`;
              default:
                  return `"${prf}{${value}}"`;
          }
      }
      // TODO: Is this actually working?
      getInsertTextForGuessedValue(value, separatorAfter = "") {
          switch (typeof value) {
              case "object":
                  if (value === null) {
                      return "${null}" + separatorAfter;
                  }
                  return this.getInsertTextForValue(value, separatorAfter);
              case "string": {
                  let snippetValue = JSON.stringify(value);
                  snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes
                  snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \ and }
                  return this.getInsertTextForString(snippetValue, "$") + separatorAfter;
              }
              case "number":
              case "boolean":
                  return "${" + JSON.stringify(value) + "}" + separatorAfter;
          }
          return this.getInsertTextForValue(value, separatorAfter);
      }
      getInsertTextForPlainText(text) {
          return text.replace(/[\\$}]/g, "\\$&"); // escape $, \ and }
      }
      getInsertTextForValue(value, separatorAfter) {
          const text = JSON.stringify(value, null, "\t");
          if (text === "{}") {
              return "{#{}}" + separatorAfter;
          }
          else if (text === "[]") {
              return "[#{}]" + separatorAfter;
          }
          return this.getInsertTextForPlainText(text + separatorAfter);
      }
      getValueCompletions(rootSchema, ctx, types, collector) {
          let node = syntaxTree(ctx.state).resolveInner(ctx.pos, -1);
          let valueNode = null;
          let parentKey = undefined;
          debug.log("xxx", "getValueCompletions", node, ctx);
          if (node && isPrimitiveValueNode(node, this.mode)) {
              valueNode = node;
              node = node.parent;
          }
          if (!node) {
              this.addSchemaValueCompletions(rootSchema, types, collector);
              return;
          }
          if (resolveTokenName(node.name, this.mode) === TOKENS.PROPERTY) {
              const keyNode = getMatchingChildNode(node, TOKENS.PROPERTY_NAME, this.mode);
              if (keyNode) {
                  parentKey = getWord(ctx.state.doc, keyNode);
                  node = node.parent;
              }
          }
          debug.log("xxx", "node", node, "parentKey", parentKey);
          if (node &&
              (parentKey !== undefined ||
                  resolveTokenName(node.name, this.mode) === TOKENS.ARRAY)) {
              // Get matching schemas
              const schemas = this.getSchemas(rootSchema, ctx);
              for (const s of schemas) {
                  if (typeof s !== "object") {
                      return;
                  }
                  if (resolveTokenName(node.name, this.mode) === TOKENS.ARRAY &&
                      s.items) {
                      let c = collector;
                      if (s.uniqueItems) {
                          c = Object.assign(Object.assign({}, c), { add(completion) {
                                  if (!c.completions.has(completion.label)) {
                                      collector.add(completion);
                                  }
                              },
                              reserve(key) {
                                  collector.reserve(key);
                              } });
                      }
                      if (Array.isArray(s.items)) {
                          let arrayIndex = 0;
                          if (valueNode) {
                              // get index of next node in array
                              const foundIdx = findNodeIndexInArrayNode(node, valueNode, this.mode);
                              if (foundIdx >= 0) {
                                  arrayIndex = foundIdx;
                              }
                          }
                          const itemSchema = s.items[arrayIndex];
                          if (itemSchema) {
                              this.addSchemaValueCompletions(itemSchema, types, c);
                          }
                      }
                      else {
                          this.addSchemaValueCompletions(s.items, types, c);
                      }
                  }
                  if (s.type == null || s.type !== "object") {
                      this.addSchemaValueCompletions(s, types, collector);
                  }
                  if (parentKey !== undefined) {
                      let propertyMatched = false;
                      if (s.properties) {
                          const propertySchema = s.properties[parentKey];
                          if (propertySchema) {
                              propertyMatched = true;
                              this.addSchemaValueCompletions(propertySchema, types, collector);
                          }
                      }
                      if (s.patternProperties && !propertyMatched) {
                          for (const pattern of Object.keys(s.patternProperties)) {
                              const regex = this.extendedRegExp(pattern);
                              if (regex === null || regex === void 0 ? void 0 : regex.test(parentKey)) {
                                  propertyMatched = true;
                                  const propertySchema = s.patternProperties[pattern];
                                  if (propertySchema) {
                                      this.addSchemaValueCompletions(propertySchema, types, collector);
                                  }
                              }
                          }
                      }
                      if (s.additionalProperties && !propertyMatched) {
                          const propertySchema = s.additionalProperties;
                          this.addSchemaValueCompletions(propertySchema, types, collector);
                      }
                  }
                  if (types["boolean"]) {
                      this.addBooleanValueCompletion(true, collector);
                      this.addBooleanValueCompletion(false, collector);
                  }
                  if (types["null"]) {
                      this.addNullValueCompletion(collector);
                  }
              }
          }
          // TODO: We need to pass the from and to for the value node as well
          // TODO: What should be the from and to when the value node is null?
          // TODO: (NOTE: if we pass a prefix but no from and to, it will autocomplete the value but replace
          // TODO: the entire property nodewhich isn't what we want). Instead we need to change the from and to
          // TODO: based on the corresponding (relevant) value node
          const valuePrefix = valueNode
              ? getWord(ctx.state.doc, valueNode, true, false)
              : "";
          return {
              valuePrefix,
          };
      }
      addSchemaValueCompletions(schema, 
      // TODO this is buggy because it does not resolve refs, should hand down rootSchema and expand each ref
      // rootSchema: JSONSchema7,
      types, collector) {
          if (typeof schema === "object") {
              this.addEnumValueCompletions(schema, collector);
              this.addDefaultValueCompletions(schema, collector);
              this.collectTypes(schema, types);
              if (Array.isArray(schema.allOf)) {
                  schema.allOf.forEach((s) => this.addSchemaValueCompletions(s, types, collector));
              }
              if (Array.isArray(schema.anyOf)) {
                  schema.anyOf.forEach((s) => this.addSchemaValueCompletions(s, types, collector));
              }
              if (Array.isArray(schema.oneOf)) {
                  schema.oneOf.forEach((s) => this.addSchemaValueCompletions(s, types, collector));
              }
          }
      }
      addDefaultValueCompletions(schema, collector, arrayDepth = 0) {
          let hasProposals = false;
          if (typeof schema.default !== "undefined") {
              let type = schema.type;
              let value = schema.default;
              for (let i = arrayDepth; i > 0; i--) {
                  value = [value];
                  type = "array";
              }
              const completionItem = Object.assign(Object.assign({ type: type === null || type === void 0 ? void 0 : type.toString() }, this.getAppliedValue(value)), { detail: "Default value" });
              collector.add(completionItem);
              hasProposals = true;
          }
          if (Array.isArray(schema.examples)) {
              schema.examples.forEach((example) => {
                  let type = schema.type;
                  let value = example;
                  for (let i = arrayDepth; i > 0; i--) {
                      value = [value];
                      type = "array";
                  }
                  collector.add(Object.assign({ type: type === null || type === void 0 ? void 0 : type.toString() }, this.getAppliedValue(value)));
                  hasProposals = true;
              });
          }
          if (!hasProposals &&
              typeof schema.items === "object" &&
              !Array.isArray(schema.items) &&
              arrayDepth < 5 /* beware of recursion */) {
              this.addDefaultValueCompletions(schema.items, collector, arrayDepth + 1);
          }
      }
      addEnumValueCompletions(schema, collector) {
          var _a, _b;
          if (typeof schema.const !== "undefined") {
              collector.add(Object.assign(Object.assign({ type: (_a = schema.type) === null || _a === void 0 ? void 0 : _a.toString() }, this.getAppliedValue(schema.const)), { info: schema.description }));
          }
          if (Array.isArray(schema.enum)) {
              for (let i = 0, length = schema.enum.length; i < length; i++) {
                  const enm = schema.enum[i];
                  collector.add(Object.assign(Object.assign({ type: (_b = schema.type) === null || _b === void 0 ? void 0 : _b.toString() }, this.getAppliedValue(enm)), { info: schema.description }));
              }
          }
      }
      addBooleanValueCompletion(value, collector) {
          collector.add({
              type: "boolean",
              label: value ? "true" : "false",
          });
      }
      addNullValueCompletion(collector) {
          collector.add({
              type: "null",
              label: "null",
          });
      }
      collectTypes(schema, types) {
          if (Array.isArray(schema.enum) || typeof schema.const !== "undefined") {
              return;
          }
          const type = schema.type;
          if (Array.isArray(type)) {
              type.forEach((t) => (types[t] = true));
          }
          else if (type) {
              types[type] = true;
          }
      }
      getSchemas(rootSchema, ctx) {
          var _a, _b, _c;
          const { data: documentData } = this.parser(ctx.state);
          const draft = new Draft07(rootSchema);
          let pointer = jsonPointerForPosition(ctx.state, ctx.pos, -1, this.mode);
          // TODO make jsonPointer consistent and compatible with json-schema-library by default (root path '/' or ' ' or undefined or '#', idk)
          if (pointer === "")
              pointer = undefined;
          if (pointer != null && pointer.endsWith("/")) {
              // opening new property under pointer
              // the property name is empty but json-schema-library would puke itself with a trailing slash, so we shouldn't even call it with that
              pointer = pointer.substring(0, pointer.length - 1);
              // when adding a new property, we just wanna return the possible properties if possible
              const effectiveSchemaOfPointer = getEffectiveObjectWithPropertiesSchema(rootSchema, documentData, pointer);
              if (effectiveSchemaOfPointer != null) {
                  return [effectiveSchemaOfPointer];
              }
          }
          let parentPointer = pointer != null ? pointer.replace(/\/[^/]*$/, "") : undefined;
          if (parentPointer === "")
              parentPointer = undefined;
          // Pass parsed data to getSchema to get the correct schema based on the data context (e.g. for anyOf or if-then)
          const effectiveSchemaOfParent = getEffectiveObjectWithPropertiesSchema(rootSchema, documentData, parentPointer);
          const deepestPropertyKey = pointer === null || pointer === void 0 ? void 0 : pointer.split("/").pop();
          const pointerPointsToKnownProperty = deepestPropertyKey == null ||
              deepestPropertyKey in ((_a = effectiveSchemaOfParent === null || effectiveSchemaOfParent === void 0 ? void 0 : effectiveSchemaOfParent.properties) !== null && _a !== void 0 ? _a : {});
          // TODO upgrade json-schema-library, so this actually returns undefined if data and schema are incompatible (currently it sometimes pukes itself with invalid data and imagines schemas on-the-fly)
          let subSchema = draft.getSchema({
              pointer,
              data: documentData !== null && documentData !== void 0 ? documentData : undefined,
          });
          if (!pointerPointsToKnownProperty &&
              (subSchema === null || subSchema === void 0 ? void 0 : subSchema.type) === "null" &&
              this.mode === "yaml") {
              // TODO describe YAML special-case where null is given the value and json-schema-library simply makes up a new schema based on that null value for whatever reason
              subSchema = undefined;
          }
          debug.log("xxxx", "draft.getSchema", subSchema, "data", documentData, "pointer", pointer, "pointerPointsToKnownProperty", pointerPointsToKnownProperty);
          if (isJsonError(subSchema)) {
              subSchema = (_b = subSchema.data) === null || _b === void 0 ? void 0 : _b.schema;
          }
          // if we don't have a schema for the current pointer, try the parent pointer with data to get a list of possible properties
          if (!isRealSchema(subSchema)) {
              if (effectiveSchemaOfParent) {
                  return [effectiveSchemaOfParent];
              }
          }
          // then try the parent pointer without data
          if (!isRealSchema(subSchema)) {
              subSchema = draft.getSchema({ pointer: parentPointer });
              // TODO should probably only change pointer if it actually found a schema there, but i left it as-is
              pointer = parentPointer;
          }
          debug.log("xxx", "pointer..", JSON.stringify(pointer));
          // For some reason, it returns undefined schema for the root pointer
          // We use the root schema in that case as the relevant (sub)schema
          if (!isRealSchema(subSchema) && (!pointer || pointer === "/")) {
              subSchema = (_c = expandSchemaProperty(rootSchema, rootSchema)) !== null && _c !== void 0 ? _c : rootSchema;
          }
          // const subSchema = new Draft07(this.dirtyCtx.rootSchema).getSchema(pointer);
          debug.log("xxx", "subSchema..", subSchema);
          if (!subSchema) {
              return [];
          }
          if (Array.isArray(subSchema.allOf)) {
              return [
                  subSchema,
                  ...subSchema.allOf.map((s) => expandSchemaProperty(s, rootSchema)),
              ];
          }
          if (Array.isArray(subSchema.oneOf)) {
              return [
                  subSchema,
                  ...subSchema.oneOf.map((s) => expandSchemaProperty(s, rootSchema)),
              ];
          }
          if (Array.isArray(subSchema.anyOf)) {
              return [
                  subSchema,
                  ...subSchema.anyOf.map((s) => expandSchemaProperty(s, rootSchema)),
              ];
          }
          return [subSchema];
      }
      getAppliedValue(value) {
          const stripped = stripSurroundingQuotes(JSON.stringify(value));
          switch (this.mode) {
              case MODES.JSON5:
                  return {
                      label: stripped,
                      apply: surroundingDoubleQuotesToSingle(JSON.stringify(value)),
                  };
              case MODES.YAML:
                  return {
                      label: stripped,
                      apply: stripped,
                  };
              default:
                  return {
                      label: stripped,
                      apply: JSON.stringify(value),
                  };
          }
      }
      getValueFromLabel(value) {
          return JSON.parse(value);
      }
      extendedRegExp(pattern) {
          let flags = "";
          if (pattern.startsWith("(?i)")) {
              pattern = pattern.substring(4);
              flags = "i";
          }
          try {
              return new RegExp(pattern, flags + "u");
          }
          catch (e) {
              // could be an exception due to the 'u ' flag
              try {
                  return new RegExp(pattern, flags);
              }
              catch (e) {
                  // invalid pattern
                  return undefined;
              }
          }
      }
  }
  /**
   * provides a JSON schema enabled autocomplete extension for codemirror
   * @group Codemirror Extensions
   */
  function jsonCompletion(opts = {}) {
      const completion = new JSONCompletion(opts);
      return function jsonDoCompletion(ctx) {
          return completion.doComplete(ctx);
      };
  }
  /**
   * removes required properties and allows additional properties everywhere
   * @param schema
   */
  function makeSchemaLax(schema) {
      return replacePropertiesDeeply(schema, (key, value) => {
          if (key === "additionalProperties" && value === false) {
              return [];
          }
          if (key === "required" && Array.isArray(value)) {
              return [];
          }
          if (key === "unevaluatedProperties" && value === false) {
              return [];
          }
          if (key === "unevaluatedItems" && value === false) {
              return [];
          }
          // TODO remove dependencies and other restrictions
          // if (key === 'dependencies' && typeof value === 'object') {
          //   return Object.keys(value).reduce((acc: any, depKey) => {
          //     const depValue = value[depKey];
          //     if (Array.isArray(depValue)) {
          //       return acc;
          //     }
          //     return { ...acc, [depKey]: depValue };
          //   }, {});
          // }
          return [key, value];
      });
  }
  /**
   * determines effective object schema for given data
   * TODO support patternProperties, etc.
   * @param schema
   * @param data
   * @param pointer
   */
  function getEffectiveObjectWithPropertiesSchema(schema, data, pointer) {
      // TODO (unimportant): [performance] cache Draft07 in case it does some pre-processing? but does not seem to be significant
      const draft = new Draft07(schema);
      const subSchema = draft.getSchema({
          pointer,
          data: data !== null && data !== void 0 ? data : undefined,
      });
      if (!isRealSchema(subSchema)) {
          return undefined;
      }
      const possibleDirectPropertyNames = getAllPossibleDirectStaticPropertyNames(draft, subSchema);
      const effectiveProperties = {};
      for (let possibleDirectPropertyName of possibleDirectPropertyNames) {
          let propertyPointer = extendJsonPointer(pointer, possibleDirectPropertyName);
          const subSchemaForPropertyConsideringData = draft.getSchema({
              // TODO [performance] use subSchema and only check it's sub-properties
              pointer: propertyPointer,
              data: data !== null && data !== void 0 ? data : undefined,
              // pointer: `/${possibleDirectPropertyName}`,
              // schema: subSchema
          });
          if (isRealSchema(subSchemaForPropertyConsideringData)) {
              Object.assign(effectiveProperties, {
                  [possibleDirectPropertyName]: subSchemaForPropertyConsideringData,
              });
          }
      }
      if (possibleDirectPropertyNames.length === 0 ||
          Object.keys(effectiveProperties).length === 0) {
          // in case json-schema-library behaves too weirdly and returns nothing, just return no schema too to let other cases handle this edge-case
          return undefined;
      }
      // TODO also resolve patternProperties of allOf, anyOf, oneOf
      const _a = subSchema, subSchemaRest = __rest(_a, ["allOf", "anyOf", "oneOf"]);
      return Object.assign(Object.assign({}, subSchemaRest), { properties: effectiveProperties });
  }
  /**
   * static means not from patternProperties
   * @param rootDraft
   * @param schema
   */
  function getAllPossibleDirectStaticPropertyNames(rootDraft, schema) {
      schema = expandSchemaProperty(schema, rootDraft.rootSchema);
      if (typeof schema !== "object" || schema == null) {
          return [];
      }
      const possiblePropertyNames = [];
      function addFrom(subSchema) {
          const possiblePropertyNamesOfSubSchema = getAllPossibleDirectStaticPropertyNames(rootDraft, subSchema);
          possiblePropertyNames.push(...possiblePropertyNamesOfSubSchema);
      }
      if (typeof schema.properties === "object" && schema.properties != null) {
          possiblePropertyNames.push(...Object.keys(schema.properties));
      }
      if (typeof schema.then === "object" && schema.then != null) {
          addFrom(schema.then);
      }
      if (Array.isArray(schema.allOf)) {
          for (const subSchema of schema.allOf) {
              addFrom(subSchema);
          }
      }
      if (Array.isArray(schema.anyOf)) {
          for (const subSchema of schema.anyOf) {
              addFrom(subSchema);
          }
      }
      if (Array.isArray(schema.oneOf)) {
          for (const subSchema of schema.oneOf) {
              addFrom(subSchema);
          }
      }
      return possiblePropertyNames;
  }
  function expandSchemaProperty(propertySchema, rootSchema) {
      if (typeof propertySchema === "object" && propertySchema.$ref) {
          const refSchema = getReferenceSchema(rootSchema, propertySchema.$ref);
          if (typeof refSchema === "object") {
              const dereferenced = Object.assign(Object.assign({}, propertySchema), refSchema);
              Reflect.deleteProperty(dereferenced, "$ref");
              return dereferenced;
          }
      }
      return propertySchema;
  }
  function getReferenceSchema(schema, ref) {
      const refPath = ref.split("/");
      let curReference = schema;
      refPath.forEach((cur) => {
          if (!cur) {
              return;
          }
          if (cur === "#") {
              curReference = schema;
              return;
          }
          if (typeof curReference === "object") {
              curReference = curReference[cur];
          }
      });
      return curReference;
  }
  function extendJsonPointer(pointer, key) {
      return pointer === undefined ? `/${key}` : `${pointer}/${key}`;
  }

  // a little english-centric utility
  // to join members of an array with commas and "or"
  const joinWithOr = (arr, getPath) => {
      const needsComma = arr.length > 2;
      let data = arr.map((err, i) => {
          const result = `\`` + (getPath ? getPath(err) : err) + `\``;
          if (i === arr.length - 1)
              return "or " + result;
          return result;
      });
      if (needsComma) {
          return data.join(", ");
      }
      return data.join(" ");
  };

  // return an object path that matches with the json-source-map pointer
  const getErrorPath = (error) => {
      var _a, _b, _c;
      // if a pointer is present, return without #
      if (((_a = error === null || error === void 0 ? void 0 : error.data) === null || _a === void 0 ? void 0 : _a.pointer) && ((_b = error === null || error === void 0 ? void 0 : error.data) === null || _b === void 0 ? void 0 : _b.pointer) !== "#") {
          return error.data.pointer.slice(1);
      }
      // return plain data.property if present
      if ((_c = error === null || error === void 0 ? void 0 : error.data) === null || _c === void 0 ? void 0 : _c.property) {
          return `/${error.data.property}`;
      }
      // else, return the empty pointer to represent the whole document
      return "";
  };
  const handleRefresh = (vu) => {
      return (vu.startState.field(schemaStateField) !== vu.state.field(schemaStateField));
  };
  /**
   * Helper for simpler class instantiaton
   * @group Codemirror Extensions
   */
  function jsonSchemaLinter(options) {
      const validation = new JSONValidation(options);
      return (view) => {
          return validation.doValidation(view);
      };
  }
  // all the error types that apply to a specific key or value
  const positionalErrors = [
      "NoAdditionalPropertiesError",
      "RequiredPropertyError",
      "InvalidPropertyNameError",
      "ForbiddenPropertyError",
      "UndefinedValueError",
  ];
  class JSONValidation {
      constructor(options) {
          var _a, _b, _c, _d;
          this.options = options;
          this.schema = null;
          this.mode = MODES.JSON;
          // rewrite the error message to be more human readable
          this.rewriteError = (error) => {
              var _a, _b, _c, _d, _e;
              const errorData = error === null || error === void 0 ? void 0 : error.data;
              const errors = errorData === null || errorData === void 0 ? void 0 : errorData.errors;
              if (error.code === "one-of-error" && (errors === null || errors === void 0 ? void 0 : errors.length)) {
                  return `Expected one of ${joinWithOr(errors, (data) => data.data.expected)}`;
              }
              if (error.code === "type-error") {
                  return `Expected \`${((_a = error === null || error === void 0 ? void 0 : error.data) === null || _a === void 0 ? void 0 : _a.expected) && Array.isArray((_b = error === null || error === void 0 ? void 0 : error.data) === null || _b === void 0 ? void 0 : _b.expected)
                    ? joinWithOr((_c = error === null || error === void 0 ? void 0 : error.data) === null || _c === void 0 ? void 0 : _c.expected)
                    : (_d = error === null || error === void 0 ? void 0 : error.data) === null || _d === void 0 ? void 0 : _d.expected}\` but received \`${(_e = error === null || error === void 0 ? void 0 : error.data) === null || _e === void 0 ? void 0 : _e.received}\``;
              }
              const message = error.message
                  // don't mention root object
                  .replaceAll("in `#` ", "")
                  .replaceAll("at `#`", "")
                  .replaceAll("/", ".")
                  .replaceAll("#.", "");
              return message;
          };
          this.mode = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : MODES.JSON;
          this.parser = (_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.jsonParser) !== null && _d !== void 0 ? _d : getDefaultParser(this.mode);
          // TODO: support other versions of json schema.
          // most standard schemas are draft 4 for some reason, probably
          // backwards compatibility
          //
          // ajv did not support draft 4, so I used json-schema-library
      }
      get schemaTitle() {
          var _a, _b, _c;
          return (_c = (_b = (_a = this.schema) === null || _a === void 0 ? void 0 : _a.getSchema()) === null || _b === void 0 ? void 0 : _b.title) !== null && _c !== void 0 ? _c : "json-schema";
      }
      // validate using view as the linter extension signature requires
      doValidation(view) {
          const schema = getJSONSchema(view.state);
          if (!schema) {
              return [];
          }
          this.schema = new Draft04(schema);
          if (!this.schema)
              return [];
          const text = view.state.doc.toString();
          // ignore blank json strings
          if (!(text === null || text === void 0 ? void 0 : text.length))
              return [];
          const json = this.parser(view.state);
          // skip validation if parsing fails
          if (json.data == null)
              return [];
          let errors = [];
          try {
              errors = this.schema.validate(json.data);
          }
          catch (_a) { }
          debug.log("xxx", "validation errors", errors, json.data);
          if (!errors.length)
              return [];
          // reduce() because we want to filter out errors that don't have a pointer
          return errors.reduce((acc, error) => {
              const pushRoot = () => {
                  const errorString = this.rewriteError(error);
                  acc.push({
                      from: 0,
                      to: 0,
                      message: errorString,
                      severity: "error",
                      source: this.schemaTitle,
                      renderMessage: () => {
                          const dom = el("div", {});
                          dom.innerHTML = renderMarkdown(errorString);
                          return dom;
                      },
                  });
              };
              const errorPath = getErrorPath(error);
              const pointer = json.pointers.get(errorPath);
              if (error.name === "MaxPropertiesError" ||
                  error.name === "MinPropertiesError" ||
                  errorPath === "" // root level type errors
              ) {
                  pushRoot();
              }
              else if (pointer) {
                  // if the error is a property error, use the key position
                  const isKeyError = positionalErrors.includes(error.name);
                  const errorString = this.rewriteError(error);
                  const from = isKeyError ? pointer.keyFrom : pointer.valueFrom;
                  const to = isKeyError ? pointer.keyTo : pointer.valueTo;
                  // skip error if no from/to value is found
                  if (to !== undefined && from !== undefined) {
                      acc.push({
                          from,
                          to,
                          message: errorString,
                          renderMessage: () => {
                              const dom = el("div", {});
                              dom.innerHTML = renderMarkdown(errorString);
                              return dom;
                          },
                          severity: "error",
                          source: this.schemaTitle,
                      });
                  }
              }
              else {
                  pushRoot();
              }
              return acc;
          }, []);
      }
  }

  /**
   * provides a JSON schema enabled tooltip extension for codemirror
   * @group Codemirror Extensions
   */
  function jsonSchemaHover(options) {
      const hover = new JSONHover(options);
      return async function jsonDoHover(view, pos, side) {
          return hover.doHover(view, pos, side);
      };
  }
  function formatType(data) {
      if (data.type) {
          if (data.$ref) {
              return `${data.$ref} (${data.type})`;
          }
          return data.type;
      }
      if (data.$ref) {
          return `${data.$ref}`;
      }
  }
  function formatComplexType(schema, complexType, draft) {
      return `${complexType}: ${joinWithOr(schema[complexType].map((s) => {
        try {
            const { data } = draft.resolveRef({ data: s, pointer: s.$ref });
            if (data) {
                return formatType(data);
            }
            return formatType(s);
        }
        catch (err) {
            return s.type;
        }
    }))}`;
  }
  class JSONHover {
      constructor(opts) {
          var _a, _b;
          this.opts = opts;
          this.schema = null;
          this.mode = MODES.JSON;
          this.opts = Object.assign({ parser: JSON.parse }, this.opts);
          this.mode = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : MODES.JSON;
      }
      getDataForCursor(view, pos, side) {
          const schema = getJSONSchema(view.state);
          if (!schema) {
              // todo: should we even do anything without schema
              // without taking over the existing mode responsibilties?
              return null;
          }
          this.schema = new Draft04(schema);
          const pointer = jsonPointerForPosition(view.state, pos, side, this.mode);
          let data = undefined;
          // TODO: use the AST tree to return the right hand, data so that we don't have to parse the doc
          try {
              data = this.opts.parser(view.state.doc.toString());
          }
          catch (_a) { }
          if (!pointer) {
              return null;
          }
          // if the data is valid, we can infer a type for complex types
          let subSchema = this.schema.getSchema({
              pointer,
              data,
              withSchemaWarning: true,
          });
          if (isJsonError(subSchema)) {
              if (subSchema === null || subSchema === void 0 ? void 0 : subSchema.data.schema["$ref"]) {
                  subSchema = this.schema.resolveRef(subSchema);
              }
              else {
                  subSchema = subSchema === null || subSchema === void 0 ? void 0 : subSchema.data.schema;
              }
          }
          return { schema: subSchema, pointer };
      }
      formatMessage(texts) {
          const { message, typeInfo } = texts;
          if (message) {
              return el("div", { class: "cm6-json-schema-hover" }, [
                  el("div", {
                      class: "cm6-json-schema-hover--description",
                      inner: renderMarkdown(message, false),
                  }),
                  el("div", { class: "cm6-json-schema-hover--code-wrapper" }, [
                      el("div", {
                          class: "cm6-json-schema-hover--code",
                          inner: renderMarkdown(typeInfo, false),
                      }),
                  ]),
              ]);
          }
          return el("div", { class: "cm6-json-schema-hover" }, [
              el("div", { class: "cm6-json-schema-hover--code-wrapper" }, [
                  el("code", {
                      class: "cm6-json-schema-hover--code",
                      inner: renderMarkdown(typeInfo, false),
                  }),
              ]),
          ]);
      }
      getHoverTexts(data, draft) {
          let typeInfo = "";
          let message = null;
          const { schema } = data;
          if (schema.oneOf) {
              typeInfo = formatComplexType(schema, "oneOf", draft);
          }
          if (schema.anyOf) {
              typeInfo = formatComplexType(schema, "anyOf", draft);
          }
          if (schema.allOf) {
              typeInfo = formatComplexType(schema, "allOf", draft);
          }
          if (schema.type) {
              typeInfo = Array.isArray(schema.type)
                  ? joinWithOr(schema.type)
                  : schema.type;
          }
          if (schema.$ref) {
              typeInfo = ` Reference: ${schema.$ref}`;
          }
          if (schema.enum) {
              typeInfo = `\`enum\`: ${joinWithOr(schema.enum)}`;
          }
          if (schema.format) {
              typeInfo += `\`format\`: ${schema.format}`;
          }
          if (schema.pattern) {
              typeInfo += `\`pattern\`: ${schema.pattern}`;
          }
          if (schema.description) {
              message = schema.description;
          }
          return { message, typeInfo };
      }
      // return hover state for the current json schema property
      async doHover(view, pos, side) {
          var _a, _b, _c, _d;
          const start = pos, end = pos;
          try {
              const cursorData = this.getDataForCursor(view, pos, side);
              debug.log("cursorData", cursorData);
              // if we don't have a (sub)schema, we can't show anything
              if (!(cursorData === null || cursorData === void 0 ? void 0 : cursorData.schema))
                  return null;
              const getHoverTexts = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.getHoverTexts) !== null && _b !== void 0 ? _b : this.getHoverTexts;
              const hoverTexts = getHoverTexts(cursorData, this.schema);
              // allow users to override the hover
              const formatter = (_d = (_c = this.opts) === null || _c === void 0 ? void 0 : _c.formatHover) !== null && _d !== void 0 ? _d : this.formatMessage;
              const formattedDom = formatter(hoverTexts);
              return {
                  pos: start,
                  end,
                  arrow: true,
                  // to mimic similar modes for other editors
                  // otherwise, it gets into a z-index battle with completion/etc
                  above: true,
                  create: (view) => {
                      return {
                          dom: formattedDom,
                      };
                  },
              };
          }
          catch (err) {
              debug.log(err);
              return null;
          }
      }
  }

  class SelectedDiagnostic {
      constructor(from, to, diagnostic) {
          this.from = from;
          this.to = to;
          this.diagnostic = diagnostic;
      }
  }
  class LintState {
      constructor(diagnostics, panel, selected) {
          this.diagnostics = diagnostics;
          this.panel = panel;
          this.selected = selected;
      }
      static init(diagnostics, panel, state) {
          // Filter the list of diagnostics for which to create markers
          let diagnosticFilter = state.facet(lintConfig).markerFilter;
          if (diagnosticFilter)
              diagnostics = diagnosticFilter(diagnostics, state);
          let sorted = diagnostics.slice().sort((a, b) => a.from - b.from || a.to - b.to);
          let deco = new RangeSetBuilder(), active = [], pos = 0;
          for (let i = 0;;) {
              let next = i == sorted.length ? null : sorted[i];
              if (!next && !active.length)
                  break;
              let from, to;
              if (active.length) {
                  from = pos;
                  to = active.reduce((p, d) => Math.min(p, d.to), next && next.from > from ? next.from : 1e8);
              }
              else {
                  from = next.from;
                  to = next.to;
                  active.push(next);
                  i++;
              }
              while (i < sorted.length) {
                  let next = sorted[i];
                  if (next.from == from && (next.to > next.from || next.to == from)) {
                      active.push(next);
                      i++;
                      to = Math.min(next.to, to);
                  }
                  else {
                      to = Math.min(next.from, to);
                      break;
                  }
              }
              let sev = maxSeverity(active);
              if (active.some(d => d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from))) {
                  deco.add(from, from, Decoration.widget({
                      widget: new DiagnosticWidget(sev),
                      diagnostics: active.slice()
                  }));
              }
              else {
                  let markClass = active.reduce((c, d) => d.markClass ? c + " " + d.markClass : c, "");
                  deco.add(from, to, Decoration.mark({
                      class: "cm-lintRange cm-lintRange-" + sev + markClass,
                      diagnostics: active.slice(),
                      inclusiveEnd: active.some(a => a.to > to)
                  }));
              }
              pos = to;
              for (let i = 0; i < active.length; i++)
                  if (active[i].to <= pos)
                      active.splice(i--, 1);
          }
          let set = deco.finish();
          return new LintState(set, panel, findDiagnostic(set));
      }
  }
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
      let found = null;
      diagnostics.between(after, 1e9, (from, to, { spec }) => {
          if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
              return;
          if (!found)
              found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
          else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
              return false;
          else
              found = new SelectedDiagnostic(found.from, to, found.diagnostic);
      });
      return found;
  }
  function hideTooltip(tr, tooltip) {
      let from = tooltip.pos, to = tooltip.end || from;
      let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
      if (result != null)
          return result;
      let line = tr.startState.doc.lineAt(tooltip.pos);
      return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  function maybeEnableLint(state, effects) {
      return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  /**
  Returns a transaction spec which updates the current set of
  diagnostics, and enables the lint extension if if wasn't already
  active.
  */
  function setDiagnostics(state, diagnostics) {
      return {
          effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
      };
  }
  /**
  The state effect that updates the set of active diagnostics. Can
  be useful when writing an extension that needs to track these.
  */
  const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
  const togglePanel$1 = /*@__PURE__*/StateEffect.define();
  const movePanelSelection = /*@__PURE__*/StateEffect.define();
  const lintState = /*@__PURE__*/StateField.define({
      create() {
          return new LintState(Decoration.none, null, null);
      },
      update(value, tr) {
          if (tr.docChanged && value.diagnostics.size) {
              let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
              if (value.selected) {
                  let selPos = tr.changes.mapPos(value.selected.from, 1);
                  selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
              }
              if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
                  panel = null;
              value = new LintState(mapped, panel, selected);
          }
          for (let effect of tr.effects) {
              if (effect.is(setDiagnosticsEffect)) {
                  let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
                  value = LintState.init(effect.value, panel, tr.state);
              }
              else if (effect.is(togglePanel$1)) {
                  value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
              }
              else if (effect.is(movePanelSelection)) {
                  value = new LintState(value.diagnostics, value.panel, effect.value);
              }
          }
          return value;
      },
      provide: f => [showPanel.from(f, val => val.panel),
          EditorView.decorations.from(f, s => s.diagnostics)]
  });
  const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
  function lintTooltip(view, pos, side) {
      let { diagnostics } = view.state.field(lintState);
      let found, start = -1, end = -1;
      diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
          if (pos >= from && pos <= to &&
              (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
              found = spec.diagnostics;
              start = from;
              end = to;
              return false;
          }
      });
      let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
      if (found && diagnosticFilter)
          found = diagnosticFilter(found, view.state);
      if (!found)
          return null;
      return {
          pos: start,
          end: end,
          above: view.state.doc.lineAt(start).to < end,
          create() {
              return { dom: diagnosticsTooltip(view, found) };
          }
      };
  }
  function diagnosticsTooltip(view, diagnostics) {
      return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
  }
  /**
  Command to open and focus the lint panel.
  */
  const openLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
          view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel$1.of(true)]) });
      let panel = getPanel(view, LintPanel.open);
      if (panel)
          panel.dom.querySelector(".cm-panel-lint ul").focus();
      return true;
  };
  /**
  Command to close the lint panel, when open.
  */
  const closeLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
          return false;
      view.dispatch({ effects: togglePanel$1.of(false) });
      return true;
  };
  /**
  Move the selection to the next diagnostic.
  */
  const nextDiagnostic = (view) => {
      let field = view.state.field(lintState, false);
      if (!field)
          return false;
      let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
      if (!next.value) {
          next = field.diagnostics.iter(0);
          if (!next.value || next.from == sel.from && next.to == sel.to)
              return false;
      }
      view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
      return true;
  };
  /**
  A set of default key bindings for the lint functionality.

  - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
  - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
  */
  const lintKeymap = [
      { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
      { key: "F8", run: nextDiagnostic }
  ];
  const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.timeout = -1;
          this.set = true;
          let { delay } = view.state.facet(lintConfig);
          this.lintTime = Date.now() + delay;
          this.run = this.run.bind(this);
          this.timeout = setTimeout(this.run, delay);
      }
      run() {
          clearTimeout(this.timeout);
          let now = Date.now();
          if (now < this.lintTime - 10) {
              this.timeout = setTimeout(this.run, this.lintTime - now);
          }
          else {
              this.set = false;
              let { state } = this.view, { sources } = state.facet(lintConfig);
              if (sources.length)
                  batchResults(sources.map(s => Promise.resolve(s(this.view))), annotations => {
                      if (this.view.state.doc == state.doc)
                          this.view.dispatch(setDiagnostics(this.view.state, annotations.reduce((a, b) => a.concat(b))));
                  }, error => { logException(this.view.state, error); });
          }
      }
      update(update) {
          let config = update.state.facet(lintConfig);
          if (update.docChanged || config != update.startState.facet(lintConfig) ||
              config.needsRefresh && config.needsRefresh(update)) {
              this.lintTime = Date.now() + config.delay;
              if (!this.set) {
                  this.set = true;
                  this.timeout = setTimeout(this.run, config.delay);
              }
          }
      }
      force() {
          if (this.set) {
              this.lintTime = Date.now();
              this.run();
          }
      }
      destroy() {
          clearTimeout(this.timeout);
      }
  });
  function batchResults(promises, sink, error) {
      let collected = [], timeout = -1;
      for (let p of promises)
          p.then(value => {
              collected.push(value);
              clearTimeout(timeout);
              if (collected.length == promises.length)
                  sink(collected);
              else
                  timeout = setTimeout(() => sink(collected), 200);
          }, error);
  }
  const lintConfig = /*@__PURE__*/Facet.define({
      combine(input) {
          return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {
              delay: 750,
              markerFilter: null,
              tooltipFilter: null,
              needsRefresh: null,
              hideOn: () => null,
          }, {
              needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)
          }));
      }
  });
  /**
  Given a diagnostic source, this function returns an extension that
  enables linting with that source. It will be called whenever the
  editor is idle (after its content changed). If `null` is given as
  source, this only configures the lint extension.
  */
  function linter(source, config = {}) {
      return [
          lintConfig.of({ source, config }),
          lintPlugin,
          lintExtensions
      ];
  }
  function assignKeys(actions) {
      let assigned = [];
      if (actions)
          actions: for (let { name } of actions) {
              for (let i = 0; i < name.length; i++) {
                  let ch = name[i];
                  if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                      assigned.push(ch);
                      continue actions;
                  }
              }
              assigned.push("");
          }
      return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
      var _a;
      let keys = inPanel ? assignKeys(diagnostic.actions) : [];
      return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
          let fired = false, click = (e) => {
              e.preventDefault();
              if (fired)
                  return;
              fired = true;
              let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
              if (found)
                  action.apply(view, found.from, found.to);
          };
          let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
          let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
              crelt("u", name.slice(keyIndex, keyIndex + 1)),
              name.slice(keyIndex + 1)];
          return crelt("button", {
              type: "button",
              class: "cm-diagnosticAction",
              onclick: click,
              onmousedown: click,
              "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
          }, nameElt);
      }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  class DiagnosticWidget extends WidgetType {
      constructor(sev) {
          super();
          this.sev = sev;
      }
      eq(other) { return other.sev == this.sev; }
      toDOM() {
          return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
      }
  }
  class PanelItem {
      constructor(view, diagnostic) {
          this.diagnostic = diagnostic;
          this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
          this.dom = renderDiagnostic(view, diagnostic, true);
          this.dom.id = this.id;
          this.dom.setAttribute("role", "option");
      }
  }
  class LintPanel {
      constructor(view) {
          this.view = view;
          this.items = [];
          let onkeydown = (event) => {
              if (event.keyCode == 27) { // Escape
                  closeLintPanel(this.view);
                  this.view.focus();
              }
              else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                  this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
              }
              else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                  this.moveSelection((this.selectedIndex + 1) % this.items.length);
              }
              else if (event.keyCode == 36) { // Home
                  this.moveSelection(0);
              }
              else if (event.keyCode == 35) { // End
                  this.moveSelection(this.items.length - 1);
              }
              else if (event.keyCode == 13) { // Enter
                  this.view.focus();
              }
              else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                  let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                  for (let i = 0; i < keys.length; i++)
                      if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                          if (found)
                              diagnostic.actions[i].apply(view, found.from, found.to);
                      }
              }
              else {
                  return;
              }
              event.preventDefault();
          };
          let onclick = (event) => {
              for (let i = 0; i < this.items.length; i++) {
                  if (this.items[i].dom.contains(event.target))
                      this.moveSelection(i);
              }
          };
          this.list = crelt("ul", {
              tabIndex: 0,
              role: "listbox",
              "aria-label": this.view.state.phrase("Diagnostics"),
              onkeydown,
              onclick
          });
          this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
              type: "button",
              name: "close",
              "aria-label": this.view.state.phrase("close"),
              onclick: () => closeLintPanel(this.view)
          }, "×"));
          this.update();
      }
      get selectedIndex() {
          let selected = this.view.state.field(lintState).selected;
          if (!selected)
              return -1;
          for (let i = 0; i < this.items.length; i++)
              if (this.items[i].diagnostic == selected.diagnostic)
                  return i;
          return -1;
      }
      update() {
          let { diagnostics, selected } = this.view.state.field(lintState);
          let i = 0, needsSync = false, newSelectedItem = null;
          let seen = new Set();
          diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
              for (let diagnostic of spec.diagnostics) {
                  if (seen.has(diagnostic))
                      continue;
                  seen.add(diagnostic);
                  let found = -1, item;
                  for (let j = i; j < this.items.length; j++)
                      if (this.items[j].diagnostic == diagnostic) {
                          found = j;
                          break;
                      }
                  if (found < 0) {
                      item = new PanelItem(this.view, diagnostic);
                      this.items.splice(i, 0, item);
                      needsSync = true;
                  }
                  else {
                      item = this.items[found];
                      if (found > i) {
                          this.items.splice(i, found - i);
                          needsSync = true;
                      }
                  }
                  if (selected && item.diagnostic == selected.diagnostic) {
                      if (!item.dom.hasAttribute("aria-selected")) {
                          item.dom.setAttribute("aria-selected", "true");
                          newSelectedItem = item;
                      }
                  }
                  else if (item.dom.hasAttribute("aria-selected")) {
                      item.dom.removeAttribute("aria-selected");
                  }
                  i++;
              }
          });
          while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
              needsSync = true;
              this.items.pop();
          }
          if (this.items.length == 0) {
              this.items.push(new PanelItem(this.view, {
                  from: -1, to: -1,
                  severity: "info",
                  message: this.view.state.phrase("No diagnostics")
              }));
              needsSync = true;
          }
          if (newSelectedItem) {
              this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
              this.view.requestMeasure({
                  key: this,
                  read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                  write: ({ sel, panel }) => {
                      let scaleY = panel.height / this.list.offsetHeight;
                      if (sel.top < panel.top)
                          this.list.scrollTop -= (panel.top - sel.top) / scaleY;
                      else if (sel.bottom > panel.bottom)
                          this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
                  }
              });
          }
          else if (this.selectedIndex < 0) {
              this.list.removeAttribute("aria-activedescendant");
          }
          if (needsSync)
              this.sync();
      }
      sync() {
          let domPos = this.list.firstChild;
          function rm() {
              let prev = domPos;
              domPos = prev.nextSibling;
              prev.remove();
          }
          for (let item of this.items) {
              if (item.dom.parentNode == this.list) {
                  while (domPos != item.dom)
                      rm();
                  domPos = item.dom.nextSibling;
              }
              else {
                  this.list.insertBefore(item.dom, domPos);
              }
          }
          while (domPos)
              rm();
      }
      moveSelection(selectedIndex) {
          if (this.selectedIndex < 0)
              return;
          let field = this.view.state.field(lintState);
          let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
          if (!selection)
              return;
          this.view.dispatch({
              selection: { anchor: selection.from, head: selection.to },
              scrollIntoView: true,
              effects: movePanelSelection.of(selection)
          });
      }
      static open(view) { return new LintPanel(view); }
  }
  function svg(content, attrs = `viewBox="0 0 40 40"`) {
      return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
  }
  function underline(color) {
      return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-diagnostic": {
          padding: "3px 6px 3px 8px",
          marginLeft: "-1px",
          display: "block",
          whiteSpace: "pre-wrap"
      },
      ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
      ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
      ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
      ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
      ".cm-diagnosticAction": {
          font: "inherit",
          border: "none",
          padding: "2px 4px",
          backgroundColor: "#444",
          color: "white",
          borderRadius: "3px",
          marginLeft: "8px",
          cursor: "pointer"
      },
      ".cm-diagnosticSource": {
          fontSize: "70%",
          opacity: .7
      },
      ".cm-lintRange": {
          backgroundPosition: "left bottom",
          backgroundRepeat: "repeat-x",
          paddingBottom: "0.7px",
      },
      ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
      ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
      ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
      ".cm-lintRange-hint": { backgroundImage: /*@__PURE__*/underline("#66d") },
      ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
      ".cm-tooltip-lint": {
          padding: 0,
          margin: 0
      },
      ".cm-lintPoint": {
          position: "relative",
          "&:after": {
              content: '""',
              position: "absolute",
              bottom: 0,
              left: "-2px",
              borderLeft: "3px solid transparent",
              borderRight: "3px solid transparent",
              borderBottom: "4px solid #d11"
          }
      },
      ".cm-lintPoint-warning": {
          "&:after": { borderBottomColor: "orange" }
      },
      ".cm-lintPoint-info": {
          "&:after": { borderBottomColor: "#999" }
      },
      ".cm-lintPoint-hint": {
          "&:after": { borderBottomColor: "#66d" }
      },
      ".cm-panel.cm-panel-lint": {
          position: "relative",
          "& ul": {
              maxHeight: "100px",
              overflowY: "auto",
              "& [aria-selected]": {
                  backgroundColor: "#ddd",
                  "& u": { textDecoration: "underline" }
              },
              "&:focus [aria-selected]": {
                  background_fallback: "#bdf",
                  backgroundColor: "Highlight",
                  color_fallback: "white",
                  color: "HighlightText"
              },
              "& u": { textDecoration: "none" },
              padding: 0,
              margin: 0
          },
          "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "2px",
              background: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0
          }
      }
  });
  function severityWeight(sev) {
      return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
  }
  function maxSeverity(diagnostics) {
      let sev = "hint", weight = 1;
      for (let d of diagnostics) {
          let w = severityWeight(d.severity);
          if (w > weight) {
              weight = w;
              sev = d.severity;
          }
      }
      return sev;
  }
  const lintExtensions = [
      lintState,
      /*@__PURE__*/EditorView.decorations.compute([lintState], state => {
          let { selected, panel } = state.field(lintState);
          return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
              activeMark.range(selected.from, selected.to)
          ]);
      }),
      /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
      baseTheme$2
  ];

  /**
   * Full featured cm6 extension for json, including `@codemirror/lang-json`
   * @group Bundled Codemirror Extensions
   */
  function jsonSchema(schema) {
      return [
          json(),
          linter(jsonParseLinter()),
          linter(jsonSchemaLinter(), {
              needsRefresh: handleRefresh,
          }),
          jsonLanguage.data.of({
              autocomplete: jsonCompletion(),
          }),
          hoverTooltip(jsonSchemaHover()),
          stateExtensions(schema),
      ];
  }

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  const toggleComment = target => {
      let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
      return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let tr = f(option, state);
          if (!tr)
              return false;
          dispatch(state.update(tr));
          return true;
      };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
  function getConfig(state, pos) {
      let data = state.languageDataAt("commentTokens", pos, 1);
      return data.length ? data[0] : {};
  }
  const SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, { open, close }, from, to) {
      let textBefore = state.sliceDoc(from - SearchMargin, from);
      let textAfter = state.sliceDoc(to, to + SearchMargin);
      let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
      let beforeOff = textBefore.length - spaceBefore;
      if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
          textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
          return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
              close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
      }
      let startText, endText;
      if (to - from <= 2 * SearchMargin) {
          startText = endText = state.sliceDoc(from, to);
      }
      else {
          startText = state.sliceDoc(from, from + SearchMargin);
          endText = state.sliceDoc(to - SearchMargin, to);
      }
      let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
      let endOff = endText.length - endSpace - close.length;
      if (startText.slice(startSpace, startSpace + open.length) == open &&
          endText.slice(endOff, endOff + close.length) == close) {
          return { open: { pos: from + startSpace + open.length,
                  margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
              close: { pos: to - endSpace - close.length,
                  margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
      }
      return null;
  }
  function selectedLineRanges(state) {
      let ranges = [];
      for (let r of state.selection.ranges) {
          let fromLine = state.doc.lineAt(r.from);
          let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
          if (toLine.from > fromLine.from && toLine.from == r.to)
              toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
          let last = ranges.length - 1;
          if (last >= 0 && ranges[last].to > fromLine.from)
              ranges[last].to = toLine.to;
          else
              ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
      }
      return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
      let tokens = ranges.map(r => getConfig(state, r.from).block);
      if (!tokens.every(c => c))
          return null;
      let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
      if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
          return { changes: state.changes(ranges.map((range, i) => {
                  if (comments[i])
                      return [];
                  return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
              })) };
      }
      else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
          let changes = [];
          for (let i = 0, comment; i < comments.length; i++)
              if (comment = comments[i]) {
                  let token = tokens[i], { open, close } = comment;
                  changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
              }
          return { changes };
      }
      return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state, ranges = state.selection.ranges) {
      let lines = [];
      let prevLine = -1;
      for (let { from, to } of ranges) {
          let startI = lines.length, minIndent = 1e9;
          let token = getConfig(state, from).line;
          if (!token)
              continue;
          for (let pos = from; pos <= to;) {
              let line = state.doc.lineAt(pos);
              if (line.from > prevLine && (from == to || to > line.from)) {
                  prevLine = line.from;
                  let indent = /^\s*/.exec(line.text)[0].length;
                  let empty = indent == line.length;
                  let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                  if (indent < line.text.length && indent < minIndent)
                      minIndent = indent;
                  lines.push({ line, comment, token, indent, empty, single: false });
              }
              pos = line.to + 1;
          }
          if (minIndent < 1e9)
              for (let i = startI; i < lines.length; i++)
                  if (lines[i].indent < lines[i].line.text.length)
                      lines[i].indent = minIndent;
          if (lines.length == startI + 1)
              lines[startI].single = true;
      }
      if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
          let changes = [];
          for (let { line, token, indent, empty, single } of lines)
              if (single || !empty)
                  changes.push({ from: line.from + indent, insert: token + " " });
          let changeSet = state.changes(changes);
          return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
      }
      else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
          let changes = [];
          for (let { line, comment, token } of lines)
              if (comment >= 0) {
                  let from = line.from + comment, to = from + token.length;
                  if (line.text[to - line.from] == " ")
                      to++;
                  changes.push({ from, to });
              }
          return { changes };
      }
      return null;
  }

  const fromHistory = /*@__PURE__*/Annotation.define();
  /**
  Transaction annotation that will prevent that transaction from
  being combined with other transactions in the undo history. Given
  `"before"`, it'll prevent merging with previous transactions. With
  `"after"`, subsequent transactions won't be combined with this
  one. With `"full"`, the transaction is isolated on both sides.
  */
  const isolateHistory = /*@__PURE__*/Annotation.define();
  /**
  This facet provides a way to register functions that, given a
  transaction, provide a set of effects that the history should
  store when inverting the transaction. This can be used to
  integrate some kinds of effects in the history, so that they can
  be undone (and redone again).
  */
  const invertedEffects = /*@__PURE__*/Facet.define();
  const historyConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              minDepth: 100,
              newGroupDelay: 500,
              joinToEvent: (_t, isAdjacent) => isAdjacent,
          }, {
              minDepth: Math.max,
              newGroupDelay: Math.min,
              joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
          });
      }
  });
  const historyField_ = /*@__PURE__*/StateField.define({
      create() {
          return HistoryState.empty;
      },
      update(state, tr) {
          let config = tr.state.facet(historyConfig);
          let fromHist = tr.annotation(fromHistory);
          if (fromHist) {
              let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
              let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
              if (item)
                  other = updateBranch(other, other.length, config.minDepth, item);
              else
                  other = addSelection(other, tr.startState.selection);
              return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
          }
          let isolate = tr.annotation(isolateHistory);
          if (isolate == "full" || isolate == "before")
              state = state.isolate();
          if (tr.annotation(Transaction.addToHistory) === false)
              return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
          let event = HistEvent.fromTransaction(tr);
          let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
          if (event)
              state = state.addChanges(event, time, userEvent, config, tr);
          else if (tr.selection)
              state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
          if (isolate == "full" || isolate == "after")
              state = state.isolate();
          return state;
      },
      toJSON(value) {
          return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
      },
      fromJSON(json) {
          return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
      }
  });
  /**
  Create a history extension with the given configuration.
  */
  function history(config = {}) {
      return [
          historyField_,
          historyConfig.of(config),
          EditorView.domEventHandlers({
              beforeinput(e, view) {
                  let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                  if (!command)
                      return false;
                  e.preventDefault();
                  return command(view);
              }
          })
      ];
  }
  function cmd(side, selection) {
      return function ({ state, dispatch }) {
          if (!selection && state.readOnly)
              return false;
          let historyState = state.field(historyField_, false);
          if (!historyState)
              return false;
          let tr = historyState.pop(side, state, selection);
          if (!tr)
              return false;
          dispatch(tr);
          return true;
      };
  }
  /**
  Undo a single group of history events. Returns false if no group
  was available.
  */
  const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
  /**
  Redo a group of history events. Returns false if no group was
  available.
  */
  const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
  /**
  Undo a change or selection change.
  */
  const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
  /**
  Redo a change or selection change.
  */
  const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
  // History events store groups of changes or effects that need to be
  // undone/redone together.
  class HistEvent {
      constructor(
      // The changes in this event. Normal events hold at least one
      // change or effect. But it may be necessary to store selection
      // events before the first change, in which case a special type of
      // instance is created which doesn't hold any changes, with
      // changes == startSelection == undefined
      changes, 
      // The effects associated with this event
      effects, 
      // Accumulated mapping (from addToHistory==false) that should be
      // applied to events below this one.
      mapped, 
      // The selection before this event
      startSelection, 
      // Stores selection changes after this event, to be used for
      // selection undo/redo.
      selectionsAfter) {
          this.changes = changes;
          this.effects = effects;
          this.mapped = mapped;
          this.startSelection = startSelection;
          this.selectionsAfter = selectionsAfter;
      }
      setSelAfter(after) {
          return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
      toJSON() {
          var _a, _b, _c;
          return {
              changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
              mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
              startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
              selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
          };
      }
      static fromJSON(json) {
          return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
      static fromTransaction(tr, selection) {
          let effects = none;
          for (let invert of tr.startState.facet(invertedEffects)) {
              let result = invert(tr);
              if (result.length)
                  effects = effects.concat(result);
          }
          if (!effects.length && tr.changes.empty)
              return null;
          return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
      }
      static selection(selections) {
          return new HistEvent(undefined, none, undefined, undefined, selections);
      }
  }
  function updateBranch(branch, to, maxLen, newEvent) {
      let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
      let newBranch = branch.slice(start, to);
      newBranch.push(newEvent);
      return newBranch;
  }
  function isAdjacent(a, b) {
      let ranges = [], isAdjacent = false;
      a.iterChangedRanges((f, t) => ranges.push(f, t));
      b.iterChangedRanges((_f, _t, f, t) => {
          for (let i = 0; i < ranges.length;) {
              let from = ranges[i++], to = ranges[i++];
              if (t >= from && f <= to)
                  isAdjacent = true;
          }
      });
      return isAdjacent;
  }
  function eqSelectionShape(a, b) {
      return a.ranges.length == b.ranges.length &&
          a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
  }
  function conc(a, b) {
      return !a.length ? b : !b.length ? a : a.concat(b);
  }
  const none = [];
  const MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
      if (!branch.length) {
          return [HistEvent.selection([selection])];
      }
      else {
          let lastEvent = branch[branch.length - 1];
          let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
          if (sels.length && sels[sels.length - 1].eq(selection))
              return branch;
          sels.push(selection);
          return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
      }
  }
  // Assumes the top item has one or more selectionAfter values
  function popSelection(branch) {
      let last = branch[branch.length - 1];
      let newBranch = branch.slice();
      newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
      return newBranch;
  }
  // Add a mapping to the top event in the given branch. If this maps
  // away all the changes and effects in that item, drop it and
  // propagate the mapping to the next item.
  function addMappingToBranch(branch, mapping) {
      if (!branch.length)
          return branch;
      let length = branch.length, selections = none;
      while (length) {
          let event = mapEvent(branch[length - 1], mapping, selections);
          if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
              let result = branch.slice(0, length);
              result[length - 1] = event;
              return result;
          }
          else { // Drop this event, since there's no changes or effects left
              mapping = event.mapped;
              length--;
              selections = event.selectionsAfter;
          }
      }
      return selections.length ? [HistEvent.selection(selections)] : none;
  }
  function mapEvent(event, mapping, extraSelections) {
      let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
      // Change-less events don't store mappings (they are always the last event in a branch)
      if (!event.changes)
          return HistEvent.selection(selections);
      let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
      let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
      return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  const joinableUserEvent = /^(input\.type|delete)($|\.)/;
  class HistoryState {
      constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
          this.done = done;
          this.undone = undone;
          this.prevTime = prevTime;
          this.prevUserEvent = prevUserEvent;
      }
      isolate() {
          return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
      addChanges(event, time, userEvent, config, tr) {
          let done = this.done, lastEvent = done[done.length - 1];
          if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
              (!userEvent || joinableUserEvent.test(userEvent)) &&
              ((!lastEvent.selectionsAfter.length &&
                  time - this.prevTime < config.newGroupDelay &&
                  config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
                  // For compose (but not compose.start) events, always join with previous event
                  userEvent == "input.type.compose")) {
              done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
          }
          else {
              done = updateBranch(done, done.length, config.minDepth, event);
          }
          return new HistoryState(done, none, time, userEvent);
      }
      addSelection(selection, time, userEvent, newGroupDelay) {
          let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
          if (last.length > 0 &&
              time - this.prevTime < newGroupDelay &&
              userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
              eqSelectionShape(last[last.length - 1], selection))
              return this;
          return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
      }
      addMapping(mapping) {
          return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
      pop(side, state, onlySelection) {
          let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
          if (branch.length == 0)
              return null;
          let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
          if (onlySelection && event.selectionsAfter.length) {
              return state.update({
                  selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                  annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
                  userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                  scrollIntoView: true
              });
          }
          else if (!event.changes) {
              return null;
          }
          else {
              let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
              if (event.mapped)
                  rest = addMappingToBranch(rest, event.mapped);
              return state.update({
                  changes: event.changes,
                  selection: event.startSelection,
                  effects: event.effects,
                  annotations: fromHistory.of({ side, rest, selection }),
                  filter: false,
                  userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                  scrollIntoView: true
              });
          }
      }
  }
  HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
  /**
  Default key bindings for the undo history.

  - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
  - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
  - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
  - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
  */
  const historyKeymap = [
      { key: "Mod-z", run: undo, preventDefault: true },
      { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
      { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
      { key: "Mod-u", run: undoSelection, preventDefault: true },
      { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];

  function updateSel(sel, by) {
      return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
      return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
      let selection = updateSel(state.selection, how);
      if (selection.eq(state.selection, true))
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  function rangeEnd(range, forward) {
      return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
      return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
  /**
  Move the selection one character to the right.
  */
  const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection one group to the right.
  */
  const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
  function interestingNode(state, node, bracketProp) {
      if (node.type.prop(bracketProp))
          return true;
      let len = node.to - node.from;
      return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
      let pos = syntaxTree(state).resolveInner(start.head);
      let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
      // Scan forward through child nodes to see if there's an interesting
      // node ahead.
      for (let at = start.head;;) {
          let next = forward ? pos.childAfter(at) : pos.childBefore(at);
          if (!next)
              break;
          if (interestingNode(state, next, bracketProp))
              pos = next;
          else
              at = forward ? next.to : next.from;
      }
      let bracket = pos.type.prop(bracketProp), match, newPos;
      if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
          newPos = forward ? match.end.to : match.end.from;
      else
          newPos = forward ? pos.to : pos.from;
      return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the cursor over the next syntactic element to the right.
  */
  const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
      return moveSel(view, range => {
          if (!range.empty)
              return rangeEnd(range, forward);
          let moved = view.moveVertically(range, forward);
          return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
      });
  }
  /**
  Move the selection one line up.
  */
  const cursorLineUp = view => cursorByLine(view, false);
  /**
  Move the selection one line down.
  */
  const cursorLineDown = view => cursorByLine(view, true);
  function pageInfo(view) {
      let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
      let marginTop = 0, marginBottom = 0, height;
      if (selfScroll) {
          for (let source of view.state.facet(EditorView.scrollMargins)) {
              let margins = source(view);
              if (margins === null || margins === void 0 ? void 0 : margins.top)
                  marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
              if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                  marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
          }
          height = view.scrollDOM.clientHeight - marginTop - marginBottom;
      }
      else {
          height = (view.dom.ownerDocument.defaultView || window).innerHeight;
      }
      return { marginTop, marginBottom, selfScroll,
          height: Math.max(view.defaultLineHeight, height - 5) };
  }
  function cursorByPage(view, forward) {
      let page = pageInfo(view);
      let { state } = view, selection = updateSel(state.selection, range => {
          return range.empty ? view.moveVertically(range, forward, page.height)
              : rangeEnd(range, forward);
      });
      if (selection.eq(state.selection))
          return false;
      let effect;
      if (page.selfScroll) {
          let startPos = view.coordsAtPos(state.selection.main.head);
          let scrollRect = view.scrollDOM.getBoundingClientRect();
          let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
          if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
              effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
      }
      view.dispatch(setSel(state, selection), { effects: effect });
      return true;
  }
  /**
  Move the selection one page up.
  */
  const cursorPageUp = view => cursorByPage(view, false);
  /**
  Move the selection one page down.
  */
  const cursorPageDown = view => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
      let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
      if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
          moved = view.moveToLineBoundary(start, forward, false);
      if (!forward && moved.head == line.from && line.length) {
          let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space)
              moved = EditorSelection.cursor(line.from + space);
      }
      return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection one line wrap point to the left.
  */
  const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection one line wrap point to the right.
  */
  const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection to the start of the line.
  */
  const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  /**
  Move the selection to the end of the line.
  */
  const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend) {
      let found = false, selection = updateSel(state.selection, range => {
          let matching = matchBrackets(state, range.head, -1)
              || matchBrackets(state, range.head, 1)
              || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
              || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
          if (!matching || !matching.end)
              return range;
          found = true;
          let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
          return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
      });
      if (!found)
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
  function extendSel(target, how) {
      let selection = updateSel(target.state.selection, range => {
          let head = how(range);
          return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
      });
      if (selection.eq(target.state.selection))
          return false;
      target.dispatch(setSel(target.state, selection));
      return true;
  }
  function selectByChar(view, forward) {
      return extendSel(view, range => view.moveByChar(range, forward));
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
  /**
  Move the selection head one character to the right.
  */
  const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
      return extendSel(view, range => view.moveByGroup(range, forward));
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection head one group to the right.
  */
  const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
  /**
  Move the selection head over the next syntactic element to the left.
  */
  const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the selection head over the next syntactic element to the right.
  */
  const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward));
  }
  /**
  Move the selection head one line up.
  */
  const selectLineUp = view => selectByLine(view, false);
  /**
  Move the selection head one line down.
  */
  const selectLineDown = view => selectByLine(view, true);
  function selectByPage(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
  }
  /**
  Move the selection head one page up.
  */
  const selectPageUp = view => selectByPage(view, false);
  /**
  Move the selection head one page down.
  */
  const selectPageDown = view => selectByPage(view, true);
  /**
  Move the selection head to the next line boundary.
  */
  const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection head to the previous line boundary.
  */
  const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection head one line boundary to the left.
  */
  const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection head one line boundary to the right.
  */
  const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection head to the start of the line.
  */
  const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  /**
  Move the selection head to the end of the line.
  */
  const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  /**
  Move the selection to the start of the document.
  */
  const cursorDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: 0 }));
      return true;
  };
  /**
  Move the selection to the end of the document.
  */
  const cursorDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.doc.length }));
      return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  const selectDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
      return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  const selectDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
      return true;
  };
  /**
  Select the entire document.
  */
  const selectAll = ({ state, dispatch }) => {
      dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
      return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  const selectLine = ({ state, dispatch }) => {
      let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
      dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
      return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  const selectParentSyntax = ({ state, dispatch }) => {
      let selection = updateSel(state.selection, range => {
          let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
          if (range.empty) {
              let stackBefore = tree.resolveStack(range.from, -1);
              if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
                  stack = stackBefore;
          }
          for (let cur = stack; cur; cur = cur.next) {
              let { node } = cur;
              if (((node.from < range.from && node.to >= range.to) ||
                  (node.to > range.to && node.from <= range.from)) &&
                  cur.next)
                  return EditorSelection.range(node.to, node.from);
          }
          return range;
      });
      if (selection.eq(state.selection))
          return false;
      dispatch(setSel(state, selection));
      return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  const simplifySelection = ({ state, dispatch }) => {
      let cur = state.selection, selection = null;
      if (cur.ranges.length > 1)
          selection = EditorSelection.create([cur.main]);
      else if (!cur.main.empty)
          selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
      if (!selection)
          return false;
      dispatch(setSel(state, selection));
      return true;
  };
  function deleteBy(target, by) {
      if (target.state.readOnly)
          return false;
      let event = "delete.selection", { state } = target;
      let changes = state.changeByRange(range => {
          let { from, to } = range;
          if (from == to) {
              let towards = by(range);
              if (towards < from) {
                  event = "delete.backward";
                  towards = skipAtomic(target, towards, false);
              }
              else if (towards > from) {
                  event = "delete.forward";
                  towards = skipAtomic(target, towards, true);
              }
              from = Math.min(from, towards);
              to = Math.max(to, towards);
          }
          else {
              from = skipAtomic(target, from, false);
              to = skipAtomic(target, to, true);
          }
          return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
      });
      if (changes.changes.empty)
          return false;
      target.dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: event,
          effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
      }));
      return true;
  }
  function skipAtomic(target, pos, forward) {
      if (target instanceof EditorView)
          for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
              ranges.between(pos, pos, (from, to) => {
                  if (from < pos && to > pos)
                      pos = forward ? to : from;
              });
      return pos;
  }
  const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {
      let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
      if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&
          !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
          if (before[before.length - 1] == "\t")
              return pos - 1;
          let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
          for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
              pos--;
          targetPos = pos;
      }
      else {
          targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
          if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
              targetPos += forward ? 1 : -1;
          else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
              targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
      }
      return targetPos;
  });
  /**
  Delete the selection, or, for cursor selections, the character or
  indentation unit before the cursor.
  */
  const deleteCharBackward = view => deleteByChar(view, false, true);
  /**
  Delete the selection or the character after the cursor.
  */
  const deleteCharForward = view => deleteByChar(view, true, false);
  const deleteByGroup = (target, forward) => deleteBy(target, range => {
      let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
      let categorize = state.charCategorizer(pos);
      for (let cat = null;;) {
          if (pos == (forward ? line.to : line.from)) {
              if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
                  pos += forward ? 1 : -1;
              break;
          }
          let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
          let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
          let nextCat = categorize(nextChar);
          if (cat != null && nextCat != cat)
              break;
          if (nextChar != " " || pos != range.head)
              cat = nextCat;
          pos = next;
      }
      return pos;
  });
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  const deleteGroupBackward = target => deleteByGroup(target, false);
  /**
  Delete the selection or forward until the end of the next group.
  */
  const deleteGroupForward = target => deleteByGroup(target, true);
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  const deleteToLineEnd = view => deleteBy(view, range => {
      let lineEnd = view.lineBlockAt(range.head).to;
      return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line or the next line wrap before the cursor.
  */
  const deleteLineBoundaryBackward = view => deleteBy(view, range => {
      let lineStart = view.moveToLineBoundary(range, false).head;
      return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line or the next line wrap after the cursor.
  */
  const deleteLineBoundaryForward = view => deleteBy(view, range => {
      let lineStart = view.moveToLineBoundary(range, true).head;
      return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
  });
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  const splitLine = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
              range: EditorSelection.cursor(range.from) };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  const transposeChars = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          if (!range.empty || range.from == 0 || range.from == state.doc.length)
              return { range };
          let pos = range.from, line = state.doc.lineAt(pos);
          let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
          let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
          return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
              range: EditorSelection.cursor(to) };
      });
      if (changes.changes.empty)
          return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
      return true;
  };
  function selectedLineBlocks(state) {
      let blocks = [], upto = -1;
      for (let range of state.selection.ranges) {
          let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
          if (!range.empty && range.to == endLine.from)
              endLine = state.doc.lineAt(range.to - 1);
          if (upto >= startLine.number) {
              let prev = blocks[blocks.length - 1];
              prev.to = endLine.to;
              prev.ranges.push(range);
          }
          else {
              blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
          }
          upto = endLine.number + 1;
      }
      return blocks;
  }
  function moveLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [], ranges = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward ? block.to == state.doc.length : block.from == 0)
              continue;
          let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
          let size = nextLine.length + 1;
          if (forward) {
              changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
          else {
              changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
          }
      }
      if (!changes.length)
          return false;
      dispatch(state.update({
          changes,
          scrollIntoView: true,
          selection: EditorSelection.create(ranges, state.selection.mainIndex),
          userEvent: "move.line"
      }));
      return true;
  }
  /**
  Move the selected lines up one line.
  */
  const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
  /**
  Move the selected lines down one line.
  */
  const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward)
              changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
          else
              changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
      }
      dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
      return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
  /**
  Delete selected lines.
  */
  const deleteLine = view => {
      if (view.state.readOnly)
          return false;
      let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
          if (from > 0)
              from--;
          else if (to < state.doc.length)
              to++;
          return { from, to };
      }));
      let selection = updateSel(state.selection, range => {
          let dist = undefined;
          if (view.lineWrapping) {
              let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
              if (pos)
                  dist = (block.bottom + view.documentTop) - pos.bottom + view.defaultLineHeight / 2;
          }
          return view.moveVertically(range, true, dist);
      }).map(changes);
      view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
      return true;
  };
  function isBetweenBrackets(state, pos) {
      if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
          return { from: pos, to: pos };
      let context = syntaxTree(state).resolveInner(pos);
      let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
      if (before && after && before.to <= pos && after.from >= pos &&
          (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
          state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
          !/\S/.test(state.sliceDoc(before.to, after.from)))
          return { from: before.to, to: after.from };
      return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let changes = state.changeByRange(range => {
              let { from, to } = range, line = state.doc.lineAt(from);
              let explode = !atEof && from == to && isBetweenBrackets(state, from);
              if (atEof)
                  from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
              let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
              let indent = getIndentation(cx, from);
              if (indent == null)
                  indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
              while (to < line.to && /\s/.test(line.text[to - line.from]))
                  to++;
              if (explode)
                  ({ from, to } = explode);
              else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                  from = line.from;
              let insert = ["", indentString(state, indent)];
              if (explode)
                  insert.push(indentString(state, cx.lineIndent(line.from, -1)));
              return { changes: { from, to, insert: Text.of(insert) },
                  range: EditorSelection.cursor(from + 1 + insert[1].length) };
          });
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
          return true;
      };
  }
  function changeBySelectedLine(state, f) {
      let atLine = -1;
      return state.changeByRange(range => {
          let changes = [];
          for (let pos = range.from; pos <= range.to;) {
              let line = state.doc.lineAt(pos);
              if (line.number > atLine && (range.empty || range.to > line.from)) {
                  f(line, changes, range);
                  atLine = line.number;
              }
              pos = line.to + 1;
          }
          let changeSet = state.changes(changes);
          return { changes,
              range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
      });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  const indentSelection = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let updated = Object.create(null);
      let context = new IndentContext(state, { overrideIndentation: start => {
              let found = updated[start];
              return found == null ? -1 : found;
          } });
      let changes = changeBySelectedLine(state, (line, changes, range) => {
          let indent = getIndentation(context, line.from);
          if (indent == null)
              return;
          if (!/\S/.test(line.text))
              indent = 0;
          let cur = /^\s*/.exec(line.text)[0];
          let norm = indentString(state, indent);
          if (cur != norm || range.from < line.from + cur.length) {
              updated[line.from] = indent;
              changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
      });
      if (!changes.changes.empty)
          dispatch(state.update(changes, { userEvent: "indent" }));
      return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  const indentMore = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          changes.push({ from: line.from, insert: state.facet(indentUnit) });
      }), { userEvent: "input.indent" }));
      return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  const indentLess = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          let space = /^\s*/.exec(line.text)[0];
          if (!space)
              return;
          let col = countColumn(space, state.tabSize), keep = 0;
          let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
          while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
              keep++;
          changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
      }), { userEvent: "delete.dedent" }));
      return true;
  };
  /**
  Enables or disables
  [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
  prevents the editor's key bindings from capturing Tab or
  Shift-Tab, making it possible for the user to move focus out of
  the editor with the keyboard.
  */
  const toggleTabFocusMode = view => {
      view.setTabFocusMode();
      return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.

   - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  const emacsStyleKeymap = [
      { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
      { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
      { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
      { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
      { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
      { key: "Ctrl-d", run: deleteCharForward },
      { key: "Ctrl-h", run: deleteCharBackward },
      { key: "Ctrl-k", run: deleteToLineEnd },
      { key: "Ctrl-Alt-h", run: deleteGroupBackward },
      { key: "Ctrl-o", run: splitLine },
      { key: "Ctrl-t", run: transposeChars },
      { key: "Ctrl-v", run: cursorPageDown },
  ];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)

   - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
   - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
  */
  const standardKeymap = /*@__PURE__*/[
      { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
      { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
      { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
      { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
      { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
      { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
      { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
      { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
      { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
      { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
      { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
      { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
      { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
      { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
      { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
      { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
      { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
      { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
      { key: "Mod-a", run: selectAll },
      { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
      { key: "Delete", run: deleteCharForward },
      { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
      { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
      { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
      { mac: "Mod-Delete", run: deleteLineBoundaryForward }
  ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
  */
  const defaultKeymap = /*@__PURE__*/[
      { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
      { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
      { key: "Alt-ArrowUp", run: moveLineUp },
      { key: "Shift-Alt-ArrowUp", run: copyLineUp },
      { key: "Alt-ArrowDown", run: moveLineDown },
      { key: "Shift-Alt-ArrowDown", run: copyLineDown },
      { key: "Escape", run: simplifySelection },
      { key: "Mod-Enter", run: insertBlankLine },
      { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
      { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
      { key: "Mod-[", run: indentLess },
      { key: "Mod-]", run: indentMore },
      { key: "Mod-Alt-\\", run: indentSelection },
      { key: "Shift-Mod-k", run: deleteLine },
      { key: "Shift-Mod-\\", run: cursorMatchingBracket },
      { key: "Mod-/", run: toggleComment },
      { key: "Alt-A", run: toggleBlockComment },
      { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode },
  ].concat(standardKeymap);

  const basicNormalize = typeof String.prototype.normalize == "function"
      ? x => x.normalize("NFKD") : x => x;
  /**
  A search cursor provides an iterator over text matches in a
  document.
  */
  class SearchCursor {
      /**
      Create a text cursor. The query is the search string, `from` to
      `to` provides the region to search.
      
      When `normalize` is given, it will be called, on both the query
      string and the content it is matched against, before comparing.
      You can, for example, create a case-insensitive search by
      passing `s => s.toLowerCase()`.
      
      Text is always normalized with
      [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
      (when supported).
      */
      constructor(text, query, from = 0, to = text.length, normalize, test) {
          this.test = test;
          /**
          The current match (only holds a meaningful value after
          [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
          `done` is false).
          */
          this.value = { from: 0, to: 0 };
          /**
          Whether the end of the iterated region has been reached.
          */
          this.done = false;
          this.matches = [];
          this.buffer = "";
          this.bufferPos = 0;
          this.iter = text.iterRange(from, to);
          this.bufferStart = from;
          this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
          this.query = this.normalize(query);
      }
      peek() {
          if (this.bufferPos == this.buffer.length) {
              this.bufferStart += this.buffer.length;
              this.iter.next();
              if (this.iter.done)
                  return -1;
              this.bufferPos = 0;
              this.buffer = this.iter.value;
          }
          return codePointAt(this.buffer, this.bufferPos);
      }
      /**
      Look for the next match. Updates the iterator's
      [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
      [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
      at least once before using the cursor.
      */
      next() {
          while (this.matches.length)
              this.matches.pop();
          return this.nextOverlapping();
      }
      /**
      The `next` method will ignore matches that partially overlap a
      previous match. This method behaves like `next`, but includes
      such matches.
      */
      nextOverlapping() {
          for (;;) {
              let next = this.peek();
              if (next < 0) {
                  this.done = true;
                  return this;
              }
              let str = fromCodePoint$2(next), start = this.bufferStart + this.bufferPos;
              this.bufferPos += codePointSize(next);
              let norm = this.normalize(str);
              if (norm.length)
                  for (let i = 0, pos = start;; i++) {
                      let code = norm.charCodeAt(i);
                      let match = this.match(code, pos, this.bufferPos + this.bufferStart);
                      if (i == norm.length - 1) {
                          if (match) {
                              this.value = match;
                              return this;
                          }
                          break;
                      }
                      if (pos == start && i < str.length && str.charCodeAt(i) == code)
                          pos++;
                  }
          }
      }
      match(code, pos, end) {
          let match = null;
          for (let i = 0; i < this.matches.length; i += 2) {
              let index = this.matches[i], keep = false;
              if (this.query.charCodeAt(index) == code) {
                  if (index == this.query.length - 1) {
                      match = { from: this.matches[i + 1], to: end };
                  }
                  else {
                      this.matches[i]++;
                      keep = true;
                  }
              }
              if (!keep) {
                  this.matches.splice(i, 2);
                  i -= 2;
              }
          }
          if (this.query.charCodeAt(0) == code) {
              if (this.query.length == 1)
                  match = { from: pos, to: end };
              else
                  this.matches.push(1, pos);
          }
          if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
              match = null;
          return match;
      }
  }
  if (typeof Symbol != "undefined")
      SearchCursor.prototype[Symbol.iterator] = function () { return this; };

  const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
  const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  /**
  This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
  but searches for a regular expression pattern instead of a plain
  string.
  */
  class RegExpCursor {
      /**
      Create a cursor that will search the given range in the given
      document. `query` should be the raw pattern (as you'd pass it to
      `new RegExp`).
      */
      constructor(text, query, options, from = 0, to = text.length) {
          this.text = text;
          this.to = to;
          this.curLine = "";
          /**
          Set to `true` when the cursor has reached the end of the search
          range.
          */
          this.done = false;
          /**
          Will contain an object with the extent of the match and the
          match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
          sucessfully finds a match.
          */
          this.value = empty;
          if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
              return new MultilineRegExpCursor(text, query, options, from, to);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.test = options === null || options === void 0 ? void 0 : options.test;
          this.iter = text.iter();
          let startLine = text.lineAt(from);
          this.curLineStart = startLine.from;
          this.matchPos = toCharEnd(text, from);
          this.getLine(this.curLineStart);
      }
      getLine(skip) {
          this.iter.next(skip);
          if (this.iter.lineBreak) {
              this.curLine = "";
          }
          else {
              this.curLine = this.iter.value;
              if (this.curLineStart + this.curLine.length > this.to)
                  this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
              this.iter.next();
          }
      }
      nextLine() {
          this.curLineStart = this.curLineStart + this.curLine.length + 1;
          if (this.curLineStart > this.to)
              this.curLine = "";
          else
              this.getLine(0);
      }
      /**
      Move to the next match, if there is one.
      */
      next() {
          for (let off = this.matchPos - this.curLineStart;;) {
              this.re.lastIndex = off;
              let match = this.matchPos <= this.to && this.re.exec(this.curLine);
              if (match) {
                  let from = this.curLineStart + match.index, to = from + match[0].length;
                  this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                  if (from == this.curLineStart + this.curLine.length)
                      this.nextLine();
                  if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
                      this.value = { from, to, match };
                      return this;
                  }
                  off = this.matchPos - this.curLineStart;
              }
              else if (this.curLineStart + this.curLine.length < this.to) {
                  this.nextLine();
                  off = 0;
              }
              else {
                  this.done = true;
                  return this;
              }
          }
      }
  }
  const flattened = /*@__PURE__*/new WeakMap();
  // Reusable (partially) flattened document strings
  class FlattenedDoc {
      constructor(from, text) {
          this.from = from;
          this.text = text;
      }
      get to() { return this.from + this.text.length; }
      static get(doc, from, to) {
          let cached = flattened.get(doc);
          if (!cached || cached.from >= to || cached.to <= from) {
              let flat = new FlattenedDoc(from, doc.sliceString(from, to));
              flattened.set(doc, flat);
              return flat;
          }
          if (cached.from == from && cached.to == to)
              return cached;
          let { text, from: cachedFrom } = cached;
          if (cachedFrom > from) {
              text = doc.sliceString(from, cachedFrom) + text;
              cachedFrom = from;
          }
          if (cached.to < to)
              text += doc.sliceString(cached.to, to);
          flattened.set(doc, new FlattenedDoc(cachedFrom, text));
          return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
      }
  }
  class MultilineRegExpCursor {
      constructor(text, query, options, from, to) {
          this.text = text;
          this.to = to;
          this.done = false;
          this.value = empty;
          this.matchPos = toCharEnd(text, from);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.test = options === null || options === void 0 ? void 0 : options.test;
          this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
      }
      chunkEnd(pos) {
          return pos >= this.to ? this.to : this.text.lineAt(pos).to;
      }
      next() {
          for (;;) {
              let off = this.re.lastIndex = this.matchPos - this.flat.from;
              let match = this.re.exec(this.flat.text);
              // Skip empty matches directly after the last match
              if (match && !match[0] && match.index == off) {
                  this.re.lastIndex = off + 1;
                  match = this.re.exec(this.flat.text);
              }
              if (match) {
                  let from = this.flat.from + match.index, to = from + match[0].length;
                  // If a match goes almost to the end of a noncomplete chunk, try
                  // again, since it'll likely be able to match more
                  if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
                      (!this.test || this.test(from, to, match))) {
                      this.value = { from, to, match };
                      this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                      return this;
                  }
              }
              if (this.flat.to == this.to) {
                  this.done = true;
                  return this;
              }
              // Grow the flattened doc
              this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
          }
      }
  }
  if (typeof Symbol != "undefined") {
      RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
          function () { return this; };
  }
  function validRegExp(source) {
      try {
          new RegExp(source, baseFlags);
          return true;
      }
      catch (_a) {
          return false;
      }
  }
  function toCharEnd(text, pos) {
      if (pos >= text.length)
          return pos;
      let line = text.lineAt(pos), next;
      while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
          pos++;
      return pos;
  }

  function createLineDialog(view) {
      let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
      let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
      let dom = crelt("form", {
          class: "cm-gotoLine",
          onkeydown: (event) => {
              if (event.keyCode == 27) { // Escape
                  event.preventDefault();
                  view.dispatch({ effects: dialogEffect.of(false) });
                  view.focus();
              }
              else if (event.keyCode == 13) { // Enter
                  event.preventDefault();
                  go();
              }
          },
          onsubmit: (event) => {
              event.preventDefault();
              go();
          }
      }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")), crelt("button", {
          name: "close",
          onclick: () => {
              view.dispatch({ effects: dialogEffect.of(false) });
              view.focus();
          },
          "aria-label": view.state.phrase("close"),
          type: "button"
      }, ["×"]));
      function go() {
          let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
          if (!match)
              return;
          let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
          let [, sign, ln, cl, percent] = match;
          let col = cl ? +cl.slice(1) : 0;
          let line = ln ? +ln : startLine.number;
          if (ln && percent) {
              let pc = line / 100;
              if (sign)
                  pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
              line = Math.round(state.doc.lines * pc);
          }
          else if (ln && sign) {
              line = line * (sign == "-" ? -1 : 1) + startLine.number;
          }
          let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
          let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
          view.dispatch({
              effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],
              selection,
          });
          view.focus();
      }
      return { dom };
  }
  const dialogEffect = /*@__PURE__*/StateEffect.define();
  const dialogField = /*@__PURE__*/StateField.define({
      create() { return true; },
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(dialogEffect))
                  value = e.value;
          return value;
      },
      provide: f => showPanel.from(f, val => val ? createLineDialog : null)
  });
  /**
  Command that shows a dialog asking the user for a line number, and
  when a valid position is provided, moves the cursor to that line.

  Supports line numbers, relative line offsets prefixed with `+` or
  `-`, document percentages suffixed with `%`, and an optional
  column position by adding `:` and a second number after the line
  number.
  */
  const gotoLine = view => {
      let panel = getPanel(view, createLineDialog);
      if (!panel) {
          let effects = [dialogEffect.of(true)];
          if (view.state.field(dialogField, false) == null)
              effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
          view.dispatch({ effects });
          panel = getPanel(view, createLineDialog);
      }
      if (panel)
          panel.dom.querySelector("input").select();
      return true;
  };
  const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-panel.cm-gotoLine": {
          padding: "2px 6px 4px",
          position: "relative",
          "& label": { fontSize: "80%" },
          "& [name=close]": {
              position: "absolute",
              top: "0", bottom: "0",
              right: "4px",
              backgroundColor: "inherit",
              border: "none",
              font: "inherit",
              padding: "0"
          }
      }
  });

  const defaultHighlightOptions = {
      highlightWordAroundCursor: false,
      minSelectionLength: 1,
      maxMatches: 100,
      wholeWords: false
  };
  const highlightConfig = /*@__PURE__*/Facet.define({
      combine(options) {
          return combineConfig(options, defaultHighlightOptions, {
              highlightWordAroundCursor: (a, b) => a || b,
              minSelectionLength: Math.min,
              maxMatches: Math.min
          });
      }
  });
  /**
  This extension highlights text that matches the selection. It uses
  the `"cm-selectionMatch"` class for the highlighting. When
  `highlightWordAroundCursor` is enabled, the word at the cursor
  itself will be highlighted with `"cm-selectionMatch-main"`.
  */
  function highlightSelectionMatches(options) {
      let ext = [defaultTheme, matchHighlighter];
      if (options)
          ext.push(highlightConfig.of(options));
      return ext;
  }
  const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
  const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
  // Whether the characters directly outside the given positions are non-word characters
  function insideWordBoundaries(check, state, from, to) {
      return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
          (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  // Whether the characters directly at the given positions are word characters
  function insideWord(check, state, from, to) {
      return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
          && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.decorations = this.getDeco(view);
      }
      update(update) {
          if (update.selectionSet || update.docChanged || update.viewportChanged)
              this.decorations = this.getDeco(update.view);
      }
      getDeco(view) {
          let conf = view.state.facet(highlightConfig);
          let { state } = view, sel = state.selection;
          if (sel.ranges.length > 1)
              return Decoration.none;
          let range = sel.main, query, check = null;
          if (range.empty) {
              if (!conf.highlightWordAroundCursor)
                  return Decoration.none;
              let word = state.wordAt(range.head);
              if (!word)
                  return Decoration.none;
              check = state.charCategorizer(range.head);
              query = state.sliceDoc(word.from, word.to);
          }
          else {
              let len = range.to - range.from;
              if (len < conf.minSelectionLength || len > 200)
                  return Decoration.none;
              if (conf.wholeWords) {
                  query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                  check = state.charCategorizer(range.head);
                  if (!(insideWordBoundaries(check, state, range.from, range.to) &&
                      insideWord(check, state, range.from, range.to)))
                      return Decoration.none;
              }
              else {
                  query = state.sliceDoc(range.from, range.to);
                  if (!query)
                      return Decoration.none;
              }
          }
          let deco = [];
          for (let part of view.visibleRanges) {
              let cursor = new SearchCursor(state.doc, query, part.from, part.to);
              while (!cursor.next().done) {
                  let { from, to } = cursor.value;
                  if (!check || insideWordBoundaries(check, state, from, to)) {
                      if (range.empty && from <= range.from && to >= range.to)
                          deco.push(mainMatchDeco.range(from, to));
                      else if (from >= range.to || to <= range.from)
                          deco.push(matchDeco.range(from, to));
                      if (deco.length > conf.maxMatches)
                          return Decoration.none;
                  }
              }
          }
          return Decoration.set(deco);
      }
  }, {
      decorations: v => v.decorations
  });
  const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
      ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
      ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
  });
  // Select the words around the cursors.
  const selectWord = ({ state, dispatch }) => {
      let { selection } = state;
      let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
      if (newSel.eq(selection))
          return false;
      dispatch(state.update({ selection: newSel }));
      return true;
  };
  // Find next occurrence of query relative to last cursor. Wrap around
  // the document if there are no more matches.
  function findNextOccurrence(state, query) {
      let { main, ranges } = state.selection;
      let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
      for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
          cursor.next();
          if (cursor.done) {
              if (cycled)
                  return null;
              cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
              cycled = true;
          }
          else {
              if (cycled && ranges.some(r => r.from == cursor.value.from))
                  continue;
              if (fullWord) {
                  let word = state.wordAt(cursor.value.from);
                  if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                      continue;
              }
              return cursor.value;
          }
      }
  }
  /**
  Select next occurrence of the current selection. Expand selection
  to the surrounding word when the selection is empty.
  */
  const selectNextOccurrence = ({ state, dispatch }) => {
      let { ranges } = state.selection;
      if (ranges.some(sel => sel.from === sel.to))
          return selectWord({ state, dispatch });
      let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
      if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
          return false;
      let range = findNextOccurrence(state, searchedText);
      if (!range)
          return false;
      dispatch(state.update({
          selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
          effects: EditorView.scrollIntoView(range.to)
      }));
      return true;
  };

  const searchConfigFacet = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              top: false,
              caseSensitive: false,
              literal: false,
              regexp: false,
              wholeWord: false,
              createPanel: view => new SearchPanel(view),
              scrollToMatch: range => EditorView.scrollIntoView(range)
          });
      }
  });
  /**
  A search query. Part of the editor's search state.
  */
  class SearchQuery {
      /**
      Create a query object.
      */
      constructor(config) {
          this.search = config.search;
          this.caseSensitive = !!config.caseSensitive;
          this.literal = !!config.literal;
          this.regexp = !!config.regexp;
          this.replace = config.replace || "";
          this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
          this.unquoted = this.unquote(this.search);
          this.wholeWord = !!config.wholeWord;
      }
      /**
      @internal
      */
      unquote(text) {
          return this.literal ? text :
              text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
      }
      /**
      Compare this query to another query.
      */
      eq(other) {
          return this.search == other.search && this.replace == other.replace &&
              this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
              this.wholeWord == other.wholeWord;
      }
      /**
      @internal
      */
      create() {
          return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
      }
      /**
      Get a search cursor for this query, searching through the given
      range in the given state.
      */
      getCursor(state, from = 0, to) {
          let st = state.doc ? state : EditorState.create({ doc: state });
          if (to == null)
              to = st.doc.length;
          return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
      }
  }
  class QueryType {
      constructor(spec) {
          this.spec = spec;
      }
  }
  function stringCursor(spec, state, from, to) {
      return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
  }
  function stringWordTest(doc, categorizer) {
      return (from, to, buf, bufPos) => {
          if (bufPos > from || bufPos + buf.length < to) {
              bufPos = Math.max(0, from - 2);
              buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
          }
          return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||
              categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&
              (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||
                  categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
      };
  }
  class StringQuery extends QueryType {
      constructor(spec) {
          super(spec);
      }
      nextMatch(state, curFrom, curTo) {
          let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
          if (cursor.done) {
              let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
              cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
          }
          return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
      }
      // Searching in reverse is, rather than implementing an inverted search
      // cursor, done by scanning chunk after chunk forward.
      prevMatchInRange(state, from, to) {
          for (let pos = to;;) {
              let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
              let cursor = stringCursor(this.spec, state, start, pos), range = null;
              while (!cursor.nextOverlapping().done)
                  range = cursor.value;
              if (range)
                  return range;
              if (start == from)
                  return null;
              pos -= 10000 /* FindPrev.ChunkSize */;
          }
      }
      prevMatch(state, curFrom, curTo) {
          let found = this.prevMatchInRange(state, 0, curFrom);
          if (!found)
              found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
          return found && (found.from != curFrom || found.to != curTo) ? found : null;
      }
      getReplacement(_result) { return this.spec.unquote(this.spec.replace); }
      matchAll(state, limit) {
          let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
          while (!cursor.next().done) {
              if (ranges.length >= limit)
                  return null;
              ranges.push(cursor.value);
          }
          return ranges;
      }
      highlight(state, from, to, add) {
          let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
          while (!cursor.next().done)
              add(cursor.value.from, cursor.value.to);
      }
  }
  function regexpCursor(spec, state, from, to) {
      return new RegExpCursor(state.doc, spec.search, {
          ignoreCase: !spec.caseSensitive,
          test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
      }, from, to);
  }
  function charBefore(str, index) {
      return str.slice(findClusterBreak(str, index, false), index);
  }
  function charAfter(str, index) {
      return str.slice(index, findClusterBreak(str, index));
  }
  function regexpWordTest(categorizer) {
      return (_from, _to, match) => !match[0].length ||
          (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||
              categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&
              (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||
                  categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  }
  class RegExpQuery extends QueryType {
      nextMatch(state, curFrom, curTo) {
          let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
          if (cursor.done)
              cursor = regexpCursor(this.spec, state, 0, curFrom).next();
          return cursor.done ? null : cursor.value;
      }
      prevMatchInRange(state, from, to) {
          for (let size = 1;; size++) {
              let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
              let cursor = regexpCursor(this.spec, state, start, to), range = null;
              while (!cursor.next().done)
                  range = cursor.value;
              if (range && (start == from || range.from > start + 10))
                  return range;
              if (start == from)
                  return null;
          }
      }
      prevMatch(state, curFrom, curTo) {
          return this.prevMatchInRange(state, 0, curFrom) ||
              this.prevMatchInRange(state, curTo, state.doc.length);
      }
      getReplacement(result) {
          return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (m, i) => {
              if (i == "&")
                  return result.match[0];
              if (i == "$")
                  return "$";
              for (let l = i.length; l > 0; l--) {
                  let n = +i.slice(0, l);
                  if (n > 0 && n < result.match.length)
                      return result.match[n] + i.slice(l);
              }
              return m;
          });
      }
      matchAll(state, limit) {
          let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
          while (!cursor.next().done) {
              if (ranges.length >= limit)
                  return null;
              ranges.push(cursor.value);
          }
          return ranges;
      }
      highlight(state, from, to, add) {
          let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
          while (!cursor.next().done)
              add(cursor.value.from, cursor.value.to);
      }
  }
  /**
  A state effect that updates the current search query. Note that
  this only has an effect if the search state has been initialized
  (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
  by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
  once).
  */
  const setSearchQuery = /*@__PURE__*/StateEffect.define();
  const togglePanel = /*@__PURE__*/StateEffect.define();
  const searchState = /*@__PURE__*/StateField.define({
      create(state) {
          return new SearchState(defaultQuery(state).create(), null);
      },
      update(value, tr) {
          for (let effect of tr.effects) {
              if (effect.is(setSearchQuery))
                  value = new SearchState(effect.value.create(), value.panel);
              else if (effect.is(togglePanel))
                  value = new SearchState(value.query, effect.value ? createSearchPanel : null);
          }
          return value;
      },
      provide: f => showPanel.from(f, val => val.panel)
  });
  class SearchState {
      constructor(query, panel) {
          this.query = query;
          this.panel = panel;
      }
  }
  const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
  const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.decorations = this.highlight(view.state.field(searchState));
      }
      update(update) {
          let state = update.state.field(searchState);
          if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
              this.decorations = this.highlight(state);
      }
      highlight({ query, panel }) {
          if (!panel || !query.spec.valid)
              return Decoration.none;
          let { view } = this;
          let builder = new RangeSetBuilder();
          for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
              let { from, to } = ranges[i];
              while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
                  to = ranges[++i].to;
              query.highlight(view.state, from, to, (from, to) => {
                  let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                  builder.add(from, to, selected ? selectedMatchMark : matchMark);
              });
          }
          return builder.finish();
      }
  }, {
      decorations: v => v.decorations
  });
  function searchCommand(f) {
      return view => {
          let state = view.state.field(searchState, false);
          return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
      };
  }
  /**
  Open the search panel if it isn't already open, and move the
  selection to the first match after the current main selection.
  Will wrap around to the start of the document when it reaches the
  end.
  */
  const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
      let { to } = view.state.selection.main;
      let next = query.nextMatch(view.state, to, to);
      if (!next)
          return false;
      let selection = EditorSelection.single(next.from, next.to);
      let config = view.state.facet(searchConfigFacet);
      view.dispatch({
          selection,
          effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
          userEvent: "select.search"
      });
      selectSearchInput(view);
      return true;
  });
  /**
  Move the selection to the previous instance of the search query,
  before the current main selection. Will wrap past the start
  of the document to start searching at the end again.
  */
  const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
      let { state } = view, { from } = state.selection.main;
      let prev = query.prevMatch(state, from, from);
      if (!prev)
          return false;
      let selection = EditorSelection.single(prev.from, prev.to);
      let config = view.state.facet(searchConfigFacet);
      view.dispatch({
          selection,
          effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
          userEvent: "select.search"
      });
      selectSearchInput(view);
      return true;
  });
  /**
  Select all instances of the search query.
  */
  const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
      let ranges = query.matchAll(view.state, 1000);
      if (!ranges || !ranges.length)
          return false;
      view.dispatch({
          selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
          userEvent: "select.search.matches"
      });
      return true;
  });
  /**
  Select all instances of the currently selected text.
  */
  const selectSelectionMatches = ({ state, dispatch }) => {
      let sel = state.selection;
      if (sel.ranges.length > 1 || sel.main.empty)
          return false;
      let { from, to } = sel.main;
      let ranges = [], main = 0;
      for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
          if (ranges.length > 1000)
              return false;
          if (cur.value.from == from)
              main = ranges.length;
          ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
      }
      dispatch(state.update({
          selection: EditorSelection.create(ranges, main),
          userEvent: "select.search.matches"
      }));
      return true;
  };
  /**
  Replace the current match of the search query.
  */
  const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
      let { state } = view, { from, to } = state.selection.main;
      if (state.readOnly)
          return false;
      let match = query.nextMatch(state, from, from);
      if (!match)
          return false;
      let next = match;
      let changes = [], selection, replacement;
      let effects = [];
      if (next.from == from && next.to == to) {
          replacement = state.toText(query.getReplacement(next));
          changes.push({ from: next.from, to: next.to, insert: replacement });
          next = query.nextMatch(state, next.from, next.to);
          effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
      }
      let changeSet = view.state.changes(changes);
      if (next) {
          selection = EditorSelection.single(next.from, next.to).map(changeSet);
          effects.push(announceMatch(view, next));
          effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
      }
      view.dispatch({
          changes: changeSet,
          selection,
          effects,
          userEvent: "input.replace"
      });
      return true;
  });
  /**
  Replace all instances of the search query with the given
  replacement.
  */
  const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
      if (view.state.readOnly)
          return false;
      let changes = query.matchAll(view.state, 1e9).map(match => {
          let { from, to } = match;
          return { from, to, insert: query.getReplacement(match) };
      });
      if (!changes.length)
          return false;
      let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
      view.dispatch({
          changes,
          effects: EditorView.announce.of(announceText),
          userEvent: "input.replace.all"
      });
      return true;
  });
  function createSearchPanel(view) {
      return view.state.facet(searchConfigFacet).createPanel(view);
  }
  function defaultQuery(state, fallback) {
      var _a, _b, _c, _d, _e;
      let sel = state.selection.main;
      let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
      if (fallback && !selText)
          return fallback;
      let config = state.facet(searchConfigFacet);
      return new SearchQuery({
          search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
          caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
          literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
          regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
          wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
      });
  }
  function getSearchInput(view) {
      let panel = getPanel(view, createSearchPanel);
      return panel && panel.dom.querySelector("[main-field]");
  }
  function selectSearchInput(view) {
      let input = getSearchInput(view);
      if (input && input == view.root.activeElement)
          input.select();
  }
  /**
  Make sure the search panel is open and focused.
  */
  const openSearchPanel = view => {
      let state = view.state.field(searchState, false);
      if (state && state.panel) {
          let searchInput = getSearchInput(view);
          if (searchInput && searchInput != view.root.activeElement) {
              let query = defaultQuery(view.state, state.query.spec);
              if (query.valid)
                  view.dispatch({ effects: setSearchQuery.of(query) });
              searchInput.focus();
              searchInput.select();
          }
      }
      else {
          view.dispatch({ effects: [
                  togglePanel.of(true),
                  state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
              ] });
      }
      return true;
  };
  /**
  Close the search panel.
  */
  const closeSearchPanel = view => {
      let state = view.state.field(searchState, false);
      if (!state || !state.panel)
          return false;
      let panel = getPanel(view, createSearchPanel);
      if (panel && panel.dom.contains(view.root.activeElement))
          view.focus();
      view.dispatch({ effects: togglePanel.of(false) });
      return true;
  };
  /**
  Default search-related key bindings.

   - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
   - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
   - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
   - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
   - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
  */
  const searchKeymap = [
      { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
      { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
      { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
      { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
      { key: "Mod-Shift-l", run: selectSelectionMatches },
      { key: "Mod-Alt-g", run: gotoLine },
      { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
  ];
  class SearchPanel {
      constructor(view) {
          this.view = view;
          let query = this.query = view.state.field(searchState).query.spec;
          this.commit = this.commit.bind(this);
          this.searchField = crelt("input", {
              value: query.search,
              placeholder: phrase(view, "Find"),
              "aria-label": phrase(view, "Find"),
              class: "cm-textfield",
              name: "search",
              form: "",
              "main-field": "true",
              onchange: this.commit,
              onkeyup: this.commit
          });
          this.replaceField = crelt("input", {
              value: query.replace,
              placeholder: phrase(view, "Replace"),
              "aria-label": phrase(view, "Replace"),
              class: "cm-textfield",
              name: "replace",
              form: "",
              onchange: this.commit,
              onkeyup: this.commit
          });
          this.caseField = crelt("input", {
              type: "checkbox",
              name: "case",
              form: "",
              checked: query.caseSensitive,
              onchange: this.commit
          });
          this.reField = crelt("input", {
              type: "checkbox",
              name: "re",
              form: "",
              checked: query.regexp,
              onchange: this.commit
          });
          this.wordField = crelt("input", {
              type: "checkbox",
              name: "word",
              form: "",
              checked: query.wholeWord,
              onchange: this.commit
          });
          function button(name, onclick, content) {
              return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
          }
          this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
              this.searchField,
              button("next", () => findNext(view), [phrase(view, "next")]),
              button("prev", () => findPrevious(view), [phrase(view, "previous")]),
              button("select", () => selectMatches(view), [phrase(view, "all")]),
              crelt("label", null, [this.caseField, phrase(view, "match case")]),
              crelt("label", null, [this.reField, phrase(view, "regexp")]),
              crelt("label", null, [this.wordField, phrase(view, "by word")]),
              ...view.state.readOnly ? [] : [
                  crelt("br"),
                  this.replaceField,
                  button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                  button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
              ],
              crelt("button", {
                  name: "close",
                  onclick: () => closeSearchPanel(view),
                  "aria-label": phrase(view, "close"),
                  type: "button"
              }, ["×"])
          ]);
      }
      commit() {
          let query = new SearchQuery({
              search: this.searchField.value,
              caseSensitive: this.caseField.checked,
              regexp: this.reField.checked,
              wholeWord: this.wordField.checked,
              replace: this.replaceField.value,
          });
          if (!query.eq(this.query)) {
              this.query = query;
              this.view.dispatch({ effects: setSearchQuery.of(query) });
          }
      }
      keydown(e) {
          if (runScopeHandlers(this.view, e, "search-panel")) {
              e.preventDefault();
          }
          else if (e.keyCode == 13 && e.target == this.searchField) {
              e.preventDefault();
              (e.shiftKey ? findPrevious : findNext)(this.view);
          }
          else if (e.keyCode == 13 && e.target == this.replaceField) {
              e.preventDefault();
              replaceNext(this.view);
          }
      }
      update(update) {
          for (let tr of update.transactions)
              for (let effect of tr.effects) {
                  if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                      this.setQuery(effect.value);
              }
      }
      setQuery(query) {
          this.query = query;
          this.searchField.value = query.search;
          this.replaceField.value = query.replace;
          this.caseField.checked = query.caseSensitive;
          this.reField.checked = query.regexp;
          this.wordField.checked = query.wholeWord;
      }
      mount() {
          this.searchField.select();
      }
      get pos() { return 80; }
      get top() { return this.view.state.facet(searchConfigFacet).top; }
  }
  function phrase(view, phrase) { return view.state.phrase(phrase); }
  const AnnounceMargin = 30;
  const Break = /[\s\.,:;?!]/;
  function announceMatch(view, { from, to }) {
      let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
      let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
      let text = view.state.sliceDoc(start, end);
      if (start != line.from) {
          for (let i = 0; i < AnnounceMargin; i++)
              if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                  text = text.slice(i);
                  break;
              }
      }
      if (end != lineEnd) {
          for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
              if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                  text = text.slice(0, i);
                  break;
              }
      }
      return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
  }
  const baseTheme = /*@__PURE__*/EditorView.baseTheme({
      ".cm-panel.cm-search": {
          padding: "2px 6px 4px",
          position: "relative",
          "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "4px",
              backgroundColor: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0
          },
          "& input, & button, & label": {
              margin: ".2em .6em .2em 0"
          },
          "& input[type=checkbox]": {
              marginRight: ".2em"
          },
          "& label": {
              fontSize: "80%",
              whiteSpace: "pre"
          }
      },
      "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
      "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
      "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
      "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
  });
  const searchExtensions = [
      searchState,
      /*@__PURE__*/Prec.low(searchHighlighter),
      baseTheme
  ];

  // (The superfluous function calls around the list of extensions work
  // around current limitations in tree-shaking software.)
  /**
  This is an extension value that just pulls together a number of
  extensions that you might want in a basic editor. It is meant as a
  convenient helper to quickly set up CodeMirror without installing
  and importing a lot of separate packages.

  Specifically, it includes...

   - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
   - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
   - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
   - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
   - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
   - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
   - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
   - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
   - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
   - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
   - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
   - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
   - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
   - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
   - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
   - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
   - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
   - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
   - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

  (You'll probably want to add some language package to your setup
  too.)

  This extension does not allow customization. The idea is that,
  once you decide you want to configure your editor more precisely,
  you take this package's source (which is just a bunch of imports
  and an array literal), copy it into your own code, and adjust it
  as desired.
  */
  const basicSetup = /*@__PURE__*/(() => [
      lineNumbers(),
      highlightActiveLineGutter(),
      highlightSpecialChars(),
      history(),
      foldGutter(),
      drawSelection(),
      dropCursor(),
      EditorState.allowMultipleSelections.of(true),
      indentOnInput(),
      syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
      bracketMatching(),
      closeBrackets(),
      autocompletion(),
      rectangularSelection(),
      crosshairCursor(),
      highlightActiveLine(),
      highlightSelectionMatches(),
      keymap.of([
          ...closeBracketsKeymap,
          ...defaultKeymap,
          ...searchKeymap,
          ...historyKeymap,
          ...foldKeymap,
          ...completionKeymap,
          ...lintKeymap
      ])
  ])();

  const schema = {
    type: "object",
    properties: {
      example: {
        type: "boolean",
      },
    },
  };

  function createEditorState(initialContents, onchange = null) {
      let extensions = [
          basicSetup,
          json(),
          jsonSchema(schema)
      ];

      if(onchange){
          extensions.push(
              EditorView.updateListener.of(function(e) {
                  if (e.docChanged) {
                      onchange(e);
                  } 
              })
          );
      }

      return EditorState.create({
          doc: initialContents,
          extensions
      });
  }

  function createEditorView(state, parent) {
      return new EditorView({ state, parent });
  }

  /* Theme: vitesse-light */
  var vitesseLight$1 = Object.freeze(JSON.parse("{\"colors\":{\"activityBar.activeBorder\":\"#1c6b48\",\"activityBar.background\":\"#ffffff\",\"activityBar.border\":\"#f0f0f0\",\"activityBar.foreground\":\"#393a34\",\"activityBar.inactiveForeground\":\"#393a3450\",\"activityBarBadge.background\":\"#4e4f47\",\"activityBarBadge.foreground\":\"#ffffff\",\"badge.background\":\"#393a3490\",\"badge.foreground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#22222218\",\"breadcrumb.background\":\"#f7f7f7\",\"breadcrumb.focusForeground\":\"#393a34\",\"breadcrumb.foreground\":\"#6a737d\",\"breadcrumbPicker.background\":\"#ffffff\",\"button.background\":\"#1c6b48\",\"button.foreground\":\"#ffffff\",\"button.hoverBackground\":\"#1c6b48\",\"checkbox.background\":\"#f7f7f7\",\"checkbox.border\":\"#d1d5da\",\"debugToolBar.background\":\"#ffffff\",\"descriptionForeground\":\"#393a3490\",\"diffEditor.insertedTextBackground\":\"#1c6b4830\",\"diffEditor.removedTextBackground\":\"#ab595940\",\"dropdown.background\":\"#ffffff\",\"dropdown.border\":\"#f0f0f0\",\"dropdown.foreground\":\"#393a34\",\"dropdown.listBackground\":\"#f7f7f7\",\"editor.background\":\"#ffffff\",\"editor.findMatchBackground\":\"#e6cc7744\",\"editor.findMatchHighlightBackground\":\"#e6cc7766\",\"editor.focusedStackFrameHighlightBackground\":\"#fff5b1\",\"editor.foldBackground\":\"#22222210\",\"editor.foreground\":\"#393a34\",\"editor.inactiveSelectionBackground\":\"#22222210\",\"editor.lineHighlightBackground\":\"#f7f7f7\",\"editor.selectionBackground\":\"#22222218\",\"editor.selectionHighlightBackground\":\"#22222210\",\"editor.stackFrameHighlightBackground\":\"#fffbdd\",\"editor.wordHighlightBackground\":\"#1c6b4805\",\"editor.wordHighlightStrongBackground\":\"#1c6b4810\",\"editorBracketHighlight.foreground1\":\"#2993a3\",\"editorBracketHighlight.foreground2\":\"#1e754f\",\"editorBracketHighlight.foreground3\":\"#a65e2b\",\"editorBracketHighlight.foreground4\":\"#a13865\",\"editorBracketHighlight.foreground5\":\"#bda437\",\"editorBracketHighlight.foreground6\":\"#296aa3\",\"editorBracketMatch.background\":\"#1c6b4820\",\"editorError.foreground\":\"#ab5959\",\"editorGroup.border\":\"#f0f0f0\",\"editorGroupHeader.tabsBackground\":\"#ffffff\",\"editorGroupHeader.tabsBorder\":\"#f0f0f0\",\"editorGutter.addedBackground\":\"#1e754f\",\"editorGutter.commentRangeForeground\":\"#393a3450\",\"editorGutter.deletedBackground\":\"#ab5959\",\"editorGutter.foldingControlForeground\":\"#393a3490\",\"editorGutter.modifiedBackground\":\"#296aa3\",\"editorHint.foreground\":\"#1e754f\",\"editorIndentGuide.activeBackground\":\"#00000030\",\"editorIndentGuide.background\":\"#00000015\",\"editorInfo.foreground\":\"#296aa3\",\"editorInlayHint.background\":\"#f7f7f7\",\"editorInlayHint.foreground\":\"#999999\",\"editorLineNumber.activeForeground\":\"#4e4f47\",\"editorLineNumber.foreground\":\"#393a3450\",\"editorOverviewRuler.border\":\"#fff\",\"editorStickyScroll.background\":\"#f7f7f7\",\"editorStickyScrollHover.background\":\"#f7f7f7\",\"editorWarning.foreground\":\"#a65e2b\",\"editorWhitespace.foreground\":\"#00000015\",\"editorWidget.background\":\"#ffffff\",\"errorForeground\":\"#ab5959\",\"focusBorder\":\"#00000000\",\"foreground\":\"#393a34\",\"gitDecoration.addedResourceForeground\":\"#1e754f\",\"gitDecoration.conflictingResourceForeground\":\"#a65e2b\",\"gitDecoration.deletedResourceForeground\":\"#ab5959\",\"gitDecoration.ignoredResourceForeground\":\"#393a3450\",\"gitDecoration.modifiedResourceForeground\":\"#296aa3\",\"gitDecoration.submoduleResourceForeground\":\"#393a3490\",\"gitDecoration.untrackedResourceForeground\":\"#2993a3\",\"input.background\":\"#f7f7f7\",\"input.border\":\"#f0f0f0\",\"input.foreground\":\"#393a34\",\"input.placeholderForeground\":\"#393a3490\",\"inputOption.activeBackground\":\"#393a3450\",\"list.activeSelectionBackground\":\"#f7f7f7\",\"list.activeSelectionForeground\":\"#393a34\",\"list.focusBackground\":\"#f7f7f7\",\"list.highlightForeground\":\"#1c6b48\",\"list.hoverBackground\":\"#f7f7f7\",\"list.hoverForeground\":\"#393a34\",\"list.inactiveFocusBackground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#f7f7f7\",\"list.inactiveSelectionForeground\":\"#393a34\",\"menu.separatorBackground\":\"#f0f0f0\",\"notificationCenterHeader.background\":\"#ffffff\",\"notificationCenterHeader.foreground\":\"#6a737d\",\"notifications.background\":\"#ffffff\",\"notifications.border\":\"#f0f0f0\",\"notifications.foreground\":\"#393a34\",\"notificationsErrorIcon.foreground\":\"#ab5959\",\"notificationsInfoIcon.foreground\":\"#296aa3\",\"notificationsWarningIcon.foreground\":\"#a65e2b\",\"panel.background\":\"#ffffff\",\"panel.border\":\"#f0f0f0\",\"panelInput.border\":\"#e1e4e8\",\"panelTitle.activeBorder\":\"#1c6b48\",\"panelTitle.activeForeground\":\"#393a34\",\"panelTitle.inactiveForeground\":\"#6a737d\",\"peekViewEditor.background\":\"#ffffff\",\"peekViewResult.background\":\"#ffffff\",\"pickerGroup.border\":\"#f0f0f0\",\"pickerGroup.foreground\":\"#393a34\",\"problemsErrorIcon.foreground\":\"#ab5959\",\"problemsInfoIcon.foreground\":\"#296aa3\",\"problemsWarningIcon.foreground\":\"#a65e2b\",\"progressBar.background\":\"#1c6b48\",\"quickInput.background\":\"#ffffff\",\"quickInput.foreground\":\"#393a34\",\"quickInputList.focusBackground\":\"#f7f7f7\",\"scrollbar.shadow\":\"#6a737d33\",\"scrollbarSlider.activeBackground\":\"#393a3450\",\"scrollbarSlider.background\":\"#393a3410\",\"scrollbarSlider.hoverBackground\":\"#393a3450\",\"settings.headerForeground\":\"#393a34\",\"settings.modifiedItemIndicator\":\"#1c6b48\",\"sideBar.background\":\"#ffffff\",\"sideBar.border\":\"#f0f0f0\",\"sideBar.foreground\":\"#4e4f47\",\"sideBarSectionHeader.background\":\"#ffffff\",\"sideBarSectionHeader.border\":\"#f0f0f0\",\"sideBarSectionHeader.foreground\":\"#393a34\",\"sideBarTitle.foreground\":\"#393a34\",\"statusBar.background\":\"#ffffff\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f7f7f7\",\"statusBar.debuggingForeground\":\"#4e4f47\",\"statusBar.foreground\":\"#4e4f47\",\"statusBar.noFolderBackground\":\"#ffffff\",\"statusBarItem.prominentBackground\":\"#f7f7f7\",\"tab.activeBackground\":\"#ffffff\",\"tab.activeBorder\":\"#f0f0f0\",\"tab.activeBorderTop\":\"#393a3490\",\"tab.activeForeground\":\"#393a34\",\"tab.border\":\"#f0f0f0\",\"tab.hoverBackground\":\"#f7f7f7\",\"tab.inactiveBackground\":\"#ffffff\",\"tab.inactiveForeground\":\"#6a737d\",\"tab.unfocusedActiveBorder\":\"#f0f0f0\",\"tab.unfocusedActiveBorderTop\":\"#f0f0f0\",\"tab.unfocusedHoverBackground\":\"#ffffff\",\"terminal.ansiBlack\":\"#121212\",\"terminal.ansiBlue\":\"#296aa3\",\"terminal.ansiBrightBlack\":\"#aaaaaa\",\"terminal.ansiBrightBlue\":\"#296aa3\",\"terminal.ansiBrightCyan\":\"#2993a3\",\"terminal.ansiBrightGreen\":\"#1e754f\",\"terminal.ansiBrightMagenta\":\"#a13865\",\"terminal.ansiBrightRed\":\"#ab5959\",\"terminal.ansiBrightWhite\":\"#dddddd\",\"terminal.ansiBrightYellow\":\"#bda437\",\"terminal.ansiCyan\":\"#2993a3\",\"terminal.ansiGreen\":\"#1e754f\",\"terminal.ansiMagenta\":\"#a13865\",\"terminal.ansiRed\":\"#ab5959\",\"terminal.ansiWhite\":\"#dbd7ca\",\"terminal.ansiYellow\":\"#bda437\",\"terminal.foreground\":\"#393a34\",\"terminal.selectionBackground\":\"#22222218\",\"textBlockQuote.background\":\"#ffffff\",\"textBlockQuote.border\":\"#f0f0f0\",\"textCodeBlock.background\":\"#ffffff\",\"textLink.activeForeground\":\"#1c6b48\",\"textLink.foreground\":\"#1c6b48\",\"textPreformat.foreground\":\"#586069\",\"textSeparator.foreground\":\"#d1d5da\",\"titleBar.activeBackground\":\"#ffffff\",\"titleBar.activeForeground\":\"#4e4f47\",\"titleBar.border\":\"#f7f7f7\",\"titleBar.inactiveBackground\":\"#ffffff\",\"titleBar.inactiveForeground\":\"#6a737d\",\"tree.indentGuidesStroke\":\"#e1e4e8\",\"welcomePage.buttonBackground\":\"#f6f8fa\",\"welcomePage.buttonHoverBackground\":\"#e1e4e8\"},\"displayName\":\"Vitesse Light\",\"name\":\"vitesse-light\",\"semanticHighlighting\":true,\"semanticTokenColors\":{\"class\":\"#5a6aa6\",\"interface\":\"#2e808f\",\"namespace\":\"#b05a78\",\"property\":\"#998418\",\"type\":\"#2e808f\"},\"tokenColors\":[{\"scope\":[\"comment\",\"punctuation.definition.comment\",\"string.comment\"],\"settings\":{\"foreground\":\"#a0ada0\"}},{\"scope\":[\"delimiter.bracket\",\"delimiter\",\"invalid.illegal.character-not-allowed-here.html\",\"keyword.operator.rest\",\"keyword.operator.spread\",\"keyword.operator.type.annotation\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.type\",\"meta.brace\",\"meta.tag.block.any.html\",\"meta.tag.inline.any.html\",\"meta.tag.structure.input.void.html\",\"meta.type.annotation\",\"meta.embedded.block.github-actions-expression\",\"storage.type.function.arrow\",\"meta.objectliteral.ts\",\"punctuation\",\"punctuation.definition.string.begin.html.vue\",\"punctuation.definition.string.end.html.vue\"],\"settings\":{\"foreground\":\"#999999\"}},{\"scope\":[\"constant\",\"entity.name.constant\",\"variable.language\",\"meta.definition.variable\"],\"settings\":{\"foreground\":\"#a65e2b\"}},{\"scope\":[\"entity\",\"entity.name\"],\"settings\":{\"foreground\":\"#59873a\"}},{\"scope\":\"variable.parameter.function\",\"settings\":{\"foreground\":\"#393a34\"}},{\"scope\":[\"entity.name.tag\",\"tag.html\"],\"settings\":{\"foreground\":\"#1e754f\"}},{\"scope\":\"entity.name.function\",\"settings\":{\"foreground\":\"#59873a\"}},{\"scope\":[\"keyword\",\"storage.type.class.jsdoc\",\"punctuation.definition.template-expression\"],\"settings\":{\"foreground\":\"#1e754f\"}},{\"scope\":[\"storage\",\"storage.type\",\"support.type.builtin\",\"constant.language.undefined\",\"constant.language.null\",\"constant.language.import-export-all.ts\"],\"settings\":{\"foreground\":\"#ab5959\"}},{\"scope\":[\"text.html.derivative\",\"storage.modifier.package\",\"storage.modifier.import\",\"storage.type.java\"],\"settings\":{\"foreground\":\"#393a34\"}},{\"scope\":[\"string\",\"string punctuation.section.embedded source\",\"attribute.value\"],\"settings\":{\"foreground\":\"#b56959\"}},{\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#b5695977\"}},{\"scope\":[\"punctuation.support.type.property-name\"],\"settings\":{\"foreground\":\"#99841877\"}},{\"scope\":\"support\",\"settings\":{\"foreground\":\"#998418\"}},{\"scope\":[\"property\",\"meta.property-name\",\"meta.object-literal.key\",\"entity.name.tag.yaml\",\"attribute.name\"],\"settings\":{\"foreground\":\"#998418\"}},{\"scope\":[\"entity.other.attribute-name\",\"invalid.deprecated.entity.other.attribute-name.html\"],\"settings\":{\"foreground\":\"#b07d48\"}},{\"scope\":[\"variable\",\"identifier\"],\"settings\":{\"foreground\":\"#b07d48\"}},{\"scope\":[\"support.type.primitive\",\"entity.name.type\"],\"settings\":{\"foreground\":\"#2e8f82\"}},{\"scope\":\"namespace\",\"settings\":{\"foreground\":\"#b05a78\"}},{\"scope\":[\"keyword.operator\",\"keyword.operator.assignment.compound\",\"meta.var.expr.ts\"],\"settings\":{\"foreground\":\"#ab5959\"}},{\"scope\":\"invalid.broken\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#b31d28\"}},{\"scope\":\"invalid.deprecated\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#b31d28\"}},{\"scope\":\"invalid.illegal\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#b31d28\"}},{\"scope\":\"invalid.unimplemented\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#b31d28\"}},{\"scope\":\"carriage-return\",\"settings\":{\"background\":\"#d73a49\",\"content\":\"^M\",\"fontStyle\":\"italic underline\",\"foreground\":\"#fafbfc\"}},{\"scope\":\"message.error\",\"settings\":{\"foreground\":\"#b31d28\"}},{\"scope\":\"string variable\",\"settings\":{\"foreground\":\"#b56959\"}},{\"scope\":[\"source.regexp\",\"string.regexp\"],\"settings\":{\"foreground\":\"#ab5e3f\"}},{\"scope\":[\"string.regexp.character-class\",\"string.regexp constant.character.escape\",\"string.regexp source.ruby.embedded\",\"string.regexp string.regexp.arbitrary-repitition\"],\"settings\":{\"foreground\":\"#b56959\"}},{\"scope\":\"string.regexp constant.character.escape\",\"settings\":{\"foreground\":\"#bda437\"}},{\"scope\":[\"support.constant\"],\"settings\":{\"foreground\":\"#a65e2b\"}},{\"scope\":[\"keyword.operator.quantifier.regexp\",\"constant.numeric\",\"number\"],\"settings\":{\"foreground\":\"#2f798a\"}},{\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ab5959\"}},{\"scope\":[\"constant.language.boolean\",\"constant.language\"],\"settings\":{\"foreground\":\"#1e754f\"}},{\"scope\":\"meta.module-reference\",\"settings\":{\"foreground\":\"#1c6b48\"}},{\"scope\":\"punctuation.definition.list.begin.markdown\",\"settings\":{\"foreground\":\"#a65e2b\"}},{\"scope\":[\"markup.heading\",\"markup.heading entity.name\"],\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#1c6b48\"}},{\"scope\":\"markup.quote\",\"settings\":{\"foreground\":\"#2e808f\"}},{\"scope\":\"markup.italic\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#393a34\"}},{\"scope\":\"markup.bold\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#393a34\"}},{\"scope\":\"markup.raw\",\"settings\":{\"foreground\":\"#1c6b48\"}},{\"scope\":[\"markup.deleted\",\"meta.diff.header.from-file\",\"punctuation.definition.deleted\"],\"settings\":{\"background\":\"#ffeef0\",\"foreground\":\"#b31d28\"}},{\"scope\":[\"markup.inserted\",\"meta.diff.header.to-file\",\"punctuation.definition.inserted\"],\"settings\":{\"background\":\"#f0fff4\",\"foreground\":\"#22863a\"}},{\"scope\":[\"markup.changed\",\"punctuation.definition.changed\"],\"settings\":{\"background\":\"#ffebda\",\"foreground\":\"#e36209\"}},{\"scope\":[\"markup.ignored\",\"markup.untracked\"],\"settings\":{\"background\":\"#005cc5\",\"foreground\":\"#f6f8fa\"}},{\"scope\":\"meta.diff.range\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#6f42c1\"}},{\"scope\":\"meta.diff.header\",\"settings\":{\"foreground\":\"#005cc5\"}},{\"scope\":\"meta.separator\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#005cc5\"}},{\"scope\":\"meta.output\",\"settings\":{\"foreground\":\"#005cc5\"}},{\"scope\":[\"brackethighlighter.tag\",\"brackethighlighter.curly\",\"brackethighlighter.round\",\"brackethighlighter.square\",\"brackethighlighter.angle\",\"brackethighlighter.quote\"],\"settings\":{\"foreground\":\"#586069\"}},{\"scope\":\"brackethighlighter.unmatched\",\"settings\":{\"foreground\":\"#b31d28\"}},{\"scope\":[\"constant.other.reference.link\",\"string.other.link\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\"],\"settings\":{\"foreground\":\"#b56959\"}},{\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"fontStyle\":\"underline\",\"foreground\":\"#393a3490\"}},{\"scope\":[\"type.identifier\",\"constant.other.character-class.regexp\"],\"settings\":{\"foreground\":\"#5a6aa6\"}},{\"scope\":[\"entity.other.attribute-name.html.vue\"],\"settings\":{\"foreground\":\"#59873a\"}},{\"scope\":[\"invalid.illegal.unrecognized-tag.html\"],\"settings\":{\"fontStyle\":\"normal\"}}],\"type\":\"light\"}"));

  var vitesseLight = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: vitesseLight$1
  });

  /* Theme: vitesse-dark */
  var vitesseDark$1 = Object.freeze(JSON.parse("{\"colors\":{\"activityBar.activeBorder\":\"#4d9375\",\"activityBar.background\":\"#121212\",\"activityBar.border\":\"#191919\",\"activityBar.foreground\":\"#dbd7caee\",\"activityBar.inactiveForeground\":\"#dedcd550\",\"activityBarBadge.background\":\"#bfbaaa\",\"activityBarBadge.foreground\":\"#121212\",\"badge.background\":\"#dedcd590\",\"badge.foreground\":\"#121212\",\"breadcrumb.activeSelectionForeground\":\"#eeeeee18\",\"breadcrumb.background\":\"#181818\",\"breadcrumb.focusForeground\":\"#dbd7caee\",\"breadcrumb.foreground\":\"#959da5\",\"breadcrumbPicker.background\":\"#121212\",\"button.background\":\"#4d9375\",\"button.foreground\":\"#121212\",\"button.hoverBackground\":\"#4d9375\",\"checkbox.background\":\"#181818\",\"checkbox.border\":\"#2f363d\",\"debugToolBar.background\":\"#121212\",\"descriptionForeground\":\"#dedcd590\",\"diffEditor.insertedTextBackground\":\"#4d937550\",\"diffEditor.removedTextBackground\":\"#ab595950\",\"dropdown.background\":\"#121212\",\"dropdown.border\":\"#191919\",\"dropdown.foreground\":\"#dbd7caee\",\"dropdown.listBackground\":\"#181818\",\"editor.background\":\"#121212\",\"editor.findMatchBackground\":\"#e6cc7722\",\"editor.findMatchHighlightBackground\":\"#e6cc7744\",\"editor.focusedStackFrameHighlightBackground\":\"#b808\",\"editor.foldBackground\":\"#eeeeee10\",\"editor.foreground\":\"#dbd7caee\",\"editor.inactiveSelectionBackground\":\"#eeeeee10\",\"editor.lineHighlightBackground\":\"#181818\",\"editor.selectionBackground\":\"#eeeeee18\",\"editor.selectionHighlightBackground\":\"#eeeeee10\",\"editor.stackFrameHighlightBackground\":\"#a707\",\"editor.wordHighlightBackground\":\"#1c6b4805\",\"editor.wordHighlightStrongBackground\":\"#1c6b4810\",\"editorBracketHighlight.foreground1\":\"#5eaab5\",\"editorBracketHighlight.foreground2\":\"#4d9375\",\"editorBracketHighlight.foreground3\":\"#d4976c\",\"editorBracketHighlight.foreground4\":\"#d9739f\",\"editorBracketHighlight.foreground5\":\"#e6cc77\",\"editorBracketHighlight.foreground6\":\"#6394bf\",\"editorBracketMatch.background\":\"#4d937520\",\"editorError.foreground\":\"#cb7676\",\"editorGroup.border\":\"#191919\",\"editorGroupHeader.tabsBackground\":\"#121212\",\"editorGroupHeader.tabsBorder\":\"#191919\",\"editorGutter.addedBackground\":\"#4d9375\",\"editorGutter.commentRangeForeground\":\"#dedcd550\",\"editorGutter.deletedBackground\":\"#cb7676\",\"editorGutter.foldingControlForeground\":\"#dedcd590\",\"editorGutter.modifiedBackground\":\"#6394bf\",\"editorHint.foreground\":\"#4d9375\",\"editorIndentGuide.activeBackground\":\"#ffffff30\",\"editorIndentGuide.background\":\"#ffffff15\",\"editorInfo.foreground\":\"#6394bf\",\"editorInlayHint.background\":\"#181818\",\"editorInlayHint.foreground\":\"#666666\",\"editorLineNumber.activeForeground\":\"#bfbaaa\",\"editorLineNumber.foreground\":\"#dedcd550\",\"editorOverviewRuler.border\":\"#111\",\"editorStickyScroll.background\":\"#181818\",\"editorStickyScrollHover.background\":\"#181818\",\"editorWarning.foreground\":\"#d4976c\",\"editorWhitespace.foreground\":\"#ffffff15\",\"editorWidget.background\":\"#121212\",\"errorForeground\":\"#cb7676\",\"focusBorder\":\"#00000000\",\"foreground\":\"#dbd7caee\",\"gitDecoration.addedResourceForeground\":\"#4d9375\",\"gitDecoration.conflictingResourceForeground\":\"#d4976c\",\"gitDecoration.deletedResourceForeground\":\"#cb7676\",\"gitDecoration.ignoredResourceForeground\":\"#dedcd550\",\"gitDecoration.modifiedResourceForeground\":\"#6394bf\",\"gitDecoration.submoduleResourceForeground\":\"#dedcd590\",\"gitDecoration.untrackedResourceForeground\":\"#5eaab5\",\"input.background\":\"#181818\",\"input.border\":\"#191919\",\"input.foreground\":\"#dbd7caee\",\"input.placeholderForeground\":\"#dedcd590\",\"inputOption.activeBackground\":\"#dedcd550\",\"list.activeSelectionBackground\":\"#181818\",\"list.activeSelectionForeground\":\"#dbd7caee\",\"list.focusBackground\":\"#181818\",\"list.highlightForeground\":\"#4d9375\",\"list.hoverBackground\":\"#181818\",\"list.hoverForeground\":\"#dbd7caee\",\"list.inactiveFocusBackground\":\"#121212\",\"list.inactiveSelectionBackground\":\"#181818\",\"list.inactiveSelectionForeground\":\"#dbd7caee\",\"menu.separatorBackground\":\"#191919\",\"notificationCenterHeader.background\":\"#121212\",\"notificationCenterHeader.foreground\":\"#959da5\",\"notifications.background\":\"#121212\",\"notifications.border\":\"#191919\",\"notifications.foreground\":\"#dbd7caee\",\"notificationsErrorIcon.foreground\":\"#cb7676\",\"notificationsInfoIcon.foreground\":\"#6394bf\",\"notificationsWarningIcon.foreground\":\"#d4976c\",\"panel.background\":\"#121212\",\"panel.border\":\"#191919\",\"panelInput.border\":\"#2f363d\",\"panelTitle.activeBorder\":\"#4d9375\",\"panelTitle.activeForeground\":\"#dbd7caee\",\"panelTitle.inactiveForeground\":\"#959da5\",\"peekViewEditor.background\":\"#121212\",\"peekViewEditor.matchHighlightBackground\":\"#ffd33d33\",\"peekViewResult.background\":\"#121212\",\"peekViewResult.matchHighlightBackground\":\"#ffd33d33\",\"pickerGroup.border\":\"#191919\",\"pickerGroup.foreground\":\"#dbd7caee\",\"problemsErrorIcon.foreground\":\"#cb7676\",\"problemsInfoIcon.foreground\":\"#6394bf\",\"problemsWarningIcon.foreground\":\"#d4976c\",\"progressBar.background\":\"#4d9375\",\"quickInput.background\":\"#121212\",\"quickInput.foreground\":\"#dbd7caee\",\"quickInputList.focusBackground\":\"#181818\",\"scrollbar.shadow\":\"#0000\",\"scrollbarSlider.activeBackground\":\"#dedcd550\",\"scrollbarSlider.background\":\"#dedcd510\",\"scrollbarSlider.hoverBackground\":\"#dedcd550\",\"settings.headerForeground\":\"#dbd7caee\",\"settings.modifiedItemIndicator\":\"#4d9375\",\"sideBar.background\":\"#121212\",\"sideBar.border\":\"#191919\",\"sideBar.foreground\":\"#bfbaaa\",\"sideBarSectionHeader.background\":\"#121212\",\"sideBarSectionHeader.border\":\"#191919\",\"sideBarSectionHeader.foreground\":\"#dbd7caee\",\"sideBarTitle.foreground\":\"#dbd7caee\",\"statusBar.background\":\"#121212\",\"statusBar.border\":\"#191919\",\"statusBar.debuggingBackground\":\"#181818\",\"statusBar.debuggingForeground\":\"#bfbaaa\",\"statusBar.foreground\":\"#bfbaaa\",\"statusBar.noFolderBackground\":\"#121212\",\"statusBarItem.prominentBackground\":\"#181818\",\"tab.activeBackground\":\"#121212\",\"tab.activeBorder\":\"#191919\",\"tab.activeBorderTop\":\"#dedcd590\",\"tab.activeForeground\":\"#dbd7caee\",\"tab.border\":\"#191919\",\"tab.hoverBackground\":\"#181818\",\"tab.inactiveBackground\":\"#121212\",\"tab.inactiveForeground\":\"#959da5\",\"tab.unfocusedActiveBorder\":\"#191919\",\"tab.unfocusedActiveBorderTop\":\"#191919\",\"tab.unfocusedHoverBackground\":\"#121212\",\"terminal.ansiBlack\":\"#393a34\",\"terminal.ansiBlue\":\"#6394bf\",\"terminal.ansiBrightBlack\":\"#777777\",\"terminal.ansiBrightBlue\":\"#6394bf\",\"terminal.ansiBrightCyan\":\"#5eaab5\",\"terminal.ansiBrightGreen\":\"#4d9375\",\"terminal.ansiBrightMagenta\":\"#d9739f\",\"terminal.ansiBrightRed\":\"#cb7676\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"terminal.ansiBrightYellow\":\"#e6cc77\",\"terminal.ansiCyan\":\"#5eaab5\",\"terminal.ansiGreen\":\"#4d9375\",\"terminal.ansiMagenta\":\"#d9739f\",\"terminal.ansiRed\":\"#cb7676\",\"terminal.ansiWhite\":\"#dbd7ca\",\"terminal.ansiYellow\":\"#e6cc77\",\"terminal.foreground\":\"#dbd7caee\",\"terminal.selectionBackground\":\"#eeeeee18\",\"textBlockQuote.background\":\"#121212\",\"textBlockQuote.border\":\"#191919\",\"textCodeBlock.background\":\"#121212\",\"textLink.activeForeground\":\"#4d9375\",\"textLink.foreground\":\"#4d9375\",\"textPreformat.foreground\":\"#d1d5da\",\"textSeparator.foreground\":\"#586069\",\"titleBar.activeBackground\":\"#121212\",\"titleBar.activeForeground\":\"#bfbaaa\",\"titleBar.border\":\"#181818\",\"titleBar.inactiveBackground\":\"#121212\",\"titleBar.inactiveForeground\":\"#959da5\",\"tree.indentGuidesStroke\":\"#2f363d\",\"welcomePage.buttonBackground\":\"#2f363d\",\"welcomePage.buttonHoverBackground\":\"#444d56\"},\"displayName\":\"Vitesse Dark\",\"name\":\"vitesse-dark\",\"semanticHighlighting\":true,\"semanticTokenColors\":{\"class\":\"#6872ab\",\"interface\":\"#5d99a9\",\"namespace\":\"#db889a\",\"property\":\"#b8a965\",\"type\":\"#5d99a9\"},\"tokenColors\":[{\"scope\":[\"comment\",\"punctuation.definition.comment\",\"string.comment\"],\"settings\":{\"foreground\":\"#758575dd\"}},{\"scope\":[\"delimiter.bracket\",\"delimiter\",\"invalid.illegal.character-not-allowed-here.html\",\"keyword.operator.rest\",\"keyword.operator.spread\",\"keyword.operator.type.annotation\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.type\",\"meta.brace\",\"meta.tag.block.any.html\",\"meta.tag.inline.any.html\",\"meta.tag.structure.input.void.html\",\"meta.type.annotation\",\"meta.embedded.block.github-actions-expression\",\"storage.type.function.arrow\",\"meta.objectliteral.ts\",\"punctuation\",\"punctuation.definition.string.begin.html.vue\",\"punctuation.definition.string.end.html.vue\"],\"settings\":{\"foreground\":\"#666666\"}},{\"scope\":[\"constant\",\"entity.name.constant\",\"variable.language\",\"meta.definition.variable\"],\"settings\":{\"foreground\":\"#c99076\"}},{\"scope\":[\"entity\",\"entity.name\"],\"settings\":{\"foreground\":\"#80a665\"}},{\"scope\":\"variable.parameter.function\",\"settings\":{\"foreground\":\"#dbd7caee\"}},{\"scope\":[\"entity.name.tag\",\"tag.html\"],\"settings\":{\"foreground\":\"#4d9375\"}},{\"scope\":\"entity.name.function\",\"settings\":{\"foreground\":\"#80a665\"}},{\"scope\":[\"keyword\",\"storage.type.class.jsdoc\",\"punctuation.definition.template-expression\"],\"settings\":{\"foreground\":\"#4d9375\"}},{\"scope\":[\"storage\",\"storage.type\",\"support.type.builtin\",\"constant.language.undefined\",\"constant.language.null\",\"constant.language.import-export-all.ts\"],\"settings\":{\"foreground\":\"#cb7676\"}},{\"scope\":[\"text.html.derivative\",\"storage.modifier.package\",\"storage.modifier.import\",\"storage.type.java\"],\"settings\":{\"foreground\":\"#dbd7caee\"}},{\"scope\":[\"string\",\"string punctuation.section.embedded source\",\"attribute.value\"],\"settings\":{\"foreground\":\"#c98a7d\"}},{\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c98a7d77\"}},{\"scope\":[\"punctuation.support.type.property-name\"],\"settings\":{\"foreground\":\"#b8a96577\"}},{\"scope\":\"support\",\"settings\":{\"foreground\":\"#b8a965\"}},{\"scope\":[\"property\",\"meta.property-name\",\"meta.object-literal.key\",\"entity.name.tag.yaml\",\"attribute.name\"],\"settings\":{\"foreground\":\"#b8a965\"}},{\"scope\":[\"entity.other.attribute-name\",\"invalid.deprecated.entity.other.attribute-name.html\"],\"settings\":{\"foreground\":\"#bd976a\"}},{\"scope\":[\"variable\",\"identifier\"],\"settings\":{\"foreground\":\"#bd976a\"}},{\"scope\":[\"support.type.primitive\",\"entity.name.type\"],\"settings\":{\"foreground\":\"#5DA994\"}},{\"scope\":\"namespace\",\"settings\":{\"foreground\":\"#db889a\"}},{\"scope\":[\"keyword.operator\",\"keyword.operator.assignment.compound\",\"meta.var.expr.ts\"],\"settings\":{\"foreground\":\"#cb7676\"}},{\"scope\":\"invalid.broken\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.deprecated\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.illegal\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.unimplemented\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"carriage-return\",\"settings\":{\"background\":\"#f97583\",\"content\":\"^M\",\"fontStyle\":\"italic underline\",\"foreground\":\"#24292e\"}},{\"scope\":\"message.error\",\"settings\":{\"foreground\":\"#fdaeb7\"}},{\"scope\":\"string variable\",\"settings\":{\"foreground\":\"#c98a7d\"}},{\"scope\":[\"source.regexp\",\"string.regexp\"],\"settings\":{\"foreground\":\"#c4704f\"}},{\"scope\":[\"string.regexp.character-class\",\"string.regexp constant.character.escape\",\"string.regexp source.ruby.embedded\",\"string.regexp string.regexp.arbitrary-repitition\"],\"settings\":{\"foreground\":\"#c98a7d\"}},{\"scope\":\"string.regexp constant.character.escape\",\"settings\":{\"foreground\":\"#e6cc77\"}},{\"scope\":[\"support.constant\"],\"settings\":{\"foreground\":\"#c99076\"}},{\"scope\":[\"keyword.operator.quantifier.regexp\",\"constant.numeric\",\"number\"],\"settings\":{\"foreground\":\"#4C9A91\"}},{\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#cb7676\"}},{\"scope\":[\"constant.language.boolean\",\"constant.language\"],\"settings\":{\"foreground\":\"#4d9375\"}},{\"scope\":\"meta.module-reference\",\"settings\":{\"foreground\":\"#4d9375\"}},{\"scope\":\"punctuation.definition.list.begin.markdown\",\"settings\":{\"foreground\":\"#d4976c\"}},{\"scope\":[\"markup.heading\",\"markup.heading entity.name\"],\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#4d9375\"}},{\"scope\":\"markup.quote\",\"settings\":{\"foreground\":\"#5d99a9\"}},{\"scope\":\"markup.italic\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#dbd7caee\"}},{\"scope\":\"markup.bold\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#dbd7caee\"}},{\"scope\":\"markup.raw\",\"settings\":{\"foreground\":\"#4d9375\"}},{\"scope\":[\"markup.deleted\",\"meta.diff.header.from-file\",\"punctuation.definition.deleted\"],\"settings\":{\"background\":\"#86181d\",\"foreground\":\"#fdaeb7\"}},{\"scope\":[\"markup.inserted\",\"meta.diff.header.to-file\",\"punctuation.definition.inserted\"],\"settings\":{\"background\":\"#144620\",\"foreground\":\"#85e89d\"}},{\"scope\":[\"markup.changed\",\"punctuation.definition.changed\"],\"settings\":{\"background\":\"#c24e00\",\"foreground\":\"#ffab70\"}},{\"scope\":[\"markup.ignored\",\"markup.untracked\"],\"settings\":{\"background\":\"#79b8ff\",\"foreground\":\"#2f363d\"}},{\"scope\":\"meta.diff.range\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#b392f0\"}},{\"scope\":\"meta.diff.header\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.separator\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.output\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":[\"brackethighlighter.tag\",\"brackethighlighter.curly\",\"brackethighlighter.round\",\"brackethighlighter.square\",\"brackethighlighter.angle\",\"brackethighlighter.quote\"],\"settings\":{\"foreground\":\"#d1d5da\"}},{\"scope\":\"brackethighlighter.unmatched\",\"settings\":{\"foreground\":\"#fdaeb7\"}},{\"scope\":[\"constant.other.reference.link\",\"string.other.link\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\"],\"settings\":{\"foreground\":\"#c98a7d\"}},{\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"fontStyle\":\"underline\",\"foreground\":\"#dedcd590\"}},{\"scope\":[\"type.identifier\",\"constant.other.character-class.regexp\"],\"settings\":{\"foreground\":\"#6872ab\"}},{\"scope\":[\"entity.other.attribute-name.html.vue\"],\"settings\":{\"foreground\":\"#80a665\"}},{\"scope\":[\"invalid.illegal.unrecognized-tag.html\"],\"settings\":{\"fontStyle\":\"normal\"}}],\"type\":\"dark\"}"));

  var vitesseDark = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: vitesseDark$1
  });

  const lang = Object.freeze(JSON.parse("{\"displayName\":\"JavaScript\",\"name\":\"javascript\",\"patterns\":[{\"include\":\"#directives\"},{\"include\":\"#statements\"},{\"include\":\"#shebang\"}],\"repository\":{\"access-modifier\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"storage.modifier.js\"},\"after-operator-block-as-object-literal\":{\"begin\":\"(?<!\\\\+\\\\+|--)(?<=[:=(,\\\\[?+!>]|^await|[^\\\\._$[:alnum:]]await|^return|[^\\\\._$[:alnum:]]return|^yield|[^\\\\._$[:alnum:]]yield|^throw|[^\\\\._$[:alnum:]]throw|^in|[^\\\\._$[:alnum:]]in|^of|[^\\\\._$[:alnum:]]of|^typeof|[^\\\\._$[:alnum:]]typeof|&&|\\\\|\\\\||\\\\*)\\\\s*(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"meta.objectliteral.js\",\"patterns\":[{\"include\":\"#object-member\"}]},\"array-binding-pattern\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\[)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"patterns\":[{\"include\":\"#binding-element\"},{\"include\":\"#punctuation-comma\"}]},\"array-binding-pattern-const\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\[)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"patterns\":[{\"include\":\"#binding-element-const\"},{\"include\":\"#punctuation-comma\"}]},\"array-literal\":{\"begin\":\"\\\\s*(\\\\[)\",\"beginCaptures\":{\"1\":{\"name\":\"meta.brace.square.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.square.js\"}},\"name\":\"meta.array.literal.js\",\"patterns\":[{\"include\":\"#expression\"},{\"include\":\"#punctuation-comma\"}]},\"arrow-function\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"storage.modifier.async.js\"},\"2\":{\"name\":\"variable.parameter.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(\\\\basync)\\\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?==>)\",\"name\":\"meta.arrow.js\"},{\"begin\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(\\\\basync))?((?<![})!\\\\]])\\\\s*(?=((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"}},\"end\":\"(?==>|\\\\{|(^\\\\s*(export|function|class|interface|let|var|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|const|import|enum|namespace|module|type|abstract|declare)\\\\s+))\",\"name\":\"meta.arrow.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-parameters\"},{\"include\":\"#function-parameters\"},{\"include\":\"#arrow-return-type\"},{\"include\":\"#possibly-arrow-return-type\"}]},{\"begin\":\"=>\",\"beginCaptures\":{\"0\":{\"name\":\"storage.type.function.arrow.js\"}},\"end\":\"((?<=\\\\}|\\\\S)(?<!=>)|((?!\\\\{)(?=\\\\S)))(?!\\\\/[\\\\/\\\\*])\",\"name\":\"meta.arrow.js\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#decl-block\"},{\"include\":\"#expression\"}]}]},\"arrow-return-type\":{\"begin\":\"(?<=\\\\))\\\\s*(:)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?==>|\\\\{|(^\\\\s*(export|function|class|interface|let|var|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|const|import|enum|namespace|module|type|abstract|declare)\\\\s+))\",\"name\":\"meta.return.type.arrow.js\",\"patterns\":[{\"include\":\"#arrow-return-type-body\"}]},\"arrow-return-type-body\":{\"patterns\":[{\"begin\":\"(?<=[:])(?=\\\\s*\\\\{)\",\"end\":\"(?<=\\\\})\",\"patterns\":[{\"include\":\"#type-object\"}]},{\"include\":\"#type-predicate-operator\"},{\"include\":\"#type\"}]},\"async-modifier\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(async)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"storage.modifier.async.js\"},\"binding-element\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#numeric-literal\"},{\"include\":\"#regex\"},{\"include\":\"#object-binding-pattern\"},{\"include\":\"#array-binding-pattern\"},{\"include\":\"#destructuring-variable-rest\"},{\"include\":\"#variable-initializer\"}]},\"binding-element-const\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#numeric-literal\"},{\"include\":\"#regex\"},{\"include\":\"#object-binding-pattern-const\"},{\"include\":\"#array-binding-pattern-const\"},{\"include\":\"#destructuring-variable-rest-const\"},{\"include\":\"#variable-initializer\"}]},\"boolean-literal\":{\"patterns\":[{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))true(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.boolean.true.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))false(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.boolean.false.js\"}]},\"brackets\":{\"patterns\":[{\"begin\":\"{\",\"end\":\"}|(?=\\\\*/)\",\"patterns\":[{\"include\":\"#brackets\"}]},{\"begin\":\"\\\\[\",\"end\":\"\\\\]|(?=\\\\*/)\",\"patterns\":[{\"include\":\"#brackets\"}]}]},\"cast\":{\"patterns\":[{\"include\":\"#jsx\"}]},\"class-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(?:(abstract)\\\\s+)?\\\\b(class)\\\\b(?=\\\\s+|/[/*])\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.type.class.js\"}},\"end\":\"(?<=\\\\})\",\"name\":\"meta.class.js\",\"patterns\":[{\"include\":\"#class-declaration-or-expression-patterns\"}]},\"class-declaration-or-expression-patterns\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#class-or-interface-heritage\"},{\"captures\":{\"0\":{\"name\":\"entity.name.type.class.js\"}},\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\"},{\"include\":\"#type-parameters\"},{\"include\":\"#class-or-interface-body\"}]},\"class-expression\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(abstract)\\\\s+)?(class)\\\\b(?=\\\\s+|[<{]|\\\\/[\\\\/*])\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"storage.type.class.js\"}},\"end\":\"(?<=\\\\})\",\"name\":\"meta.class.js\",\"patterns\":[{\"include\":\"#class-declaration-or-expression-patterns\"}]},\"class-or-interface-body\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#decorator\"},{\"begin\":\"(?<=:)\\\\s*\",\"end\":\"(?=\\\\s|[;),}\\\\]:\\\\-\\\\+]|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"patterns\":[{\"include\":\"#expression\"}]},{\"include\":\"#method-declaration\"},{\"include\":\"#indexer-declaration\"},{\"include\":\"#field-declaration\"},{\"include\":\"#string\"},{\"include\":\"#type-annotation\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#access-modifier\"},{\"include\":\"#property-accessor\"},{\"include\":\"#async-modifier\"},{\"include\":\"#after-operator-block-as-object-literal\"},{\"include\":\"#decl-block\"},{\"include\":\"#expression\"},{\"include\":\"#punctuation-comma\"},{\"include\":\"#punctuation-semicolon\"}]},\"class-or-interface-heritage\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(extends|implements)\\\\b)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"end\":\"(?=\\\\{)\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#class-or-interface-heritage\"},{\"include\":\"#type-parameters\"},{\"include\":\"#expressionWithoutIdentifiers\"},{\"captures\":{\"1\":{\"name\":\"entity.name.type.module.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))(?=\\\\s*[_$[:alpha:]][_$[:alnum:]]*(\\\\s*\\\\??\\\\.\\\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\\\s*)\"},{\"captures\":{\"1\":{\"name\":\"entity.other.inherited-class.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\"},{\"include\":\"#expressionPunctuations\"}]},\"comment\":{\"patterns\":[{\"begin\":\"/\\\\*\\\\*(?!/)\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.comment.js\"}},\"end\":\"\\\\*/\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.comment.js\"}},\"name\":\"comment.block.documentation.js\",\"patterns\":[{\"include\":\"#docblock\"}]},{\"begin\":\"(/\\\\*)(?:\\\\s*((@)internal)(?=\\\\s|(\\\\*/)))?\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.comment.js\"},\"2\":{\"name\":\"storage.type.internaldeclaration.js\"},\"3\":{\"name\":\"punctuation.decorator.internaldeclaration.js\"}},\"end\":\"\\\\*/\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.comment.js\"}},\"name\":\"comment.block.js\"},{\"begin\":\"(^[ \\\\t]+)?((//)(?:\\\\s*((@)internal)(?=\\\\s|$))?)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.whitespace.comment.leading.js\"},\"2\":{\"name\":\"comment.line.double-slash.js\"},\"3\":{\"name\":\"punctuation.definition.comment.js\"},\"4\":{\"name\":\"storage.type.internaldeclaration.js\"},\"5\":{\"name\":\"punctuation.decorator.internaldeclaration.js\"}},\"contentName\":\"comment.line.double-slash.js\",\"end\":\"(?=$)\"}]},\"control-statement\":{\"patterns\":[{\"include\":\"#switch-statement\"},{\"include\":\"#for-loop\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.trycatch.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.loop.js\"},\"2\":{\"name\":\"entity.name.label.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(break|continue|goto)\\\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.loop.js\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(return)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.control.flow.js\"}},\"end\":\"(?=[;}]|$|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"patterns\":[{\"include\":\"#expression\"}]},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.switch.js\"},{\"include\":\"#if-statement\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.conditional.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(with)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.with.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(package)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.other.debugger.js\"}]},\"decl-block\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"meta.block.js\",\"patterns\":[{\"include\":\"#statements\"}]},\"declaration\":{\"patterns\":[{\"include\":\"#decorator\"},{\"include\":\"#var-expr\"},{\"include\":\"#function-declaration\"},{\"include\":\"#class-declaration\"},{\"include\":\"#interface-declaration\"},{\"include\":\"#enum-declaration\"},{\"include\":\"#namespace-declaration\"},{\"include\":\"#type-alias-declaration\"},{\"include\":\"#import-equals-declaration\"},{\"include\":\"#import-declaration\"},{\"include\":\"#export-declaration\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"storage.modifier.js\"}]},\"decorator\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))\\\\@\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.decorator.js\"}},\"end\":\"(?=\\\\s)\",\"name\":\"meta.decorator.js\",\"patterns\":[{\"include\":\"#expression\"}]},\"destructuring-const\":{\"patterns\":[{\"begin\":\"(?<!=|:|^of|[^\\\\._$[:alnum:]]of|^in|[^\\\\._$[:alnum:]]in)\\\\s*(?=\\\\{)\",\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))\",\"name\":\"meta.object-binding-pattern-variable.js\",\"patterns\":[{\"include\":\"#object-binding-pattern-const\"},{\"include\":\"#type-annotation\"},{\"include\":\"#comment\"}]},{\"begin\":\"(?<!=|:|^of|[^\\\\._$[:alnum:]]of|^in|[^\\\\._$[:alnum:]]in)\\\\s*(?=\\\\[)\",\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))\",\"name\":\"meta.array-binding-pattern-variable.js\",\"patterns\":[{\"include\":\"#array-binding-pattern-const\"},{\"include\":\"#type-annotation\"},{\"include\":\"#comment\"}]}]},\"destructuring-parameter\":{\"patterns\":[{\"begin\":\"(?<!=|:)\\\\s*(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"name\":\"meta.parameter.object-binding-pattern.js\",\"patterns\":[{\"include\":\"#parameter-object-binding-element\"}]},{\"begin\":\"(?<!=|:)\\\\s*(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\[)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"name\":\"meta.paramter.array-binding-pattern.js\",\"patterns\":[{\"include\":\"#parameter-binding-element\"},{\"include\":\"#punctuation-comma\"}]}]},\"destructuring-parameter-rest\":{\"captures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"variable.parameter.js\"}},\"match\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\"},\"destructuring-variable\":{\"patterns\":[{\"begin\":\"(?<!=|:|^of|[^\\\\._$[:alnum:]]of|^in|[^\\\\._$[:alnum:]]in)\\\\s*(?=\\\\{)\",\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))\",\"name\":\"meta.object-binding-pattern-variable.js\",\"patterns\":[{\"include\":\"#object-binding-pattern\"},{\"include\":\"#type-annotation\"},{\"include\":\"#comment\"}]},{\"begin\":\"(?<!=|:|^of|[^\\\\._$[:alnum:]]of|^in|[^\\\\._$[:alnum:]]in)\\\\s*(?=\\\\[)\",\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))\",\"name\":\"meta.array-binding-pattern-variable.js\",\"patterns\":[{\"include\":\"#array-binding-pattern\"},{\"include\":\"#type-annotation\"},{\"include\":\"#comment\"}]}]},\"destructuring-variable-rest\":{\"captures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"meta.definition.variable.js variable.other.readwrite.js\"}},\"match\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\"},\"destructuring-variable-rest-const\":{\"captures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"meta.definition.variable.js variable.other.constant.js\"}},\"match\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\"},\"directives\":{\"begin\":\"^(///)\\\\s*(?=<(reference|amd-dependency|amd-module)(\\\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\\\s*=\\\\s*((\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)))+\\\\s*/>\\\\s*$)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.comment.js\"}},\"end\":\"(?=$)\",\"name\":\"comment.line.triple-slash.directive.js\",\"patterns\":[{\"begin\":\"(<)(reference|amd-dependency|amd-module)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.directive.js\"},\"2\":{\"name\":\"entity.name.tag.directive.js\"}},\"end\":\"/>\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.tag.directive.js\"}},\"name\":\"meta.tag.js\",\"patterns\":[{\"match\":\"path|types|no-default-lib|lib|name|resolution-mode\",\"name\":\"entity.other.attribute-name.directive.js\"},{\"match\":\"=\",\"name\":\"keyword.operator.assignment.js\"},{\"include\":\"#string\"}]}]},\"docblock\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"constant.language.access-type.jsdoc\"}},\"match\":\"((@)(?:access|api))\\\\s+(private|protected|public)\\\\b\"},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"entity.name.type.instance.jsdoc\"},\"4\":{\"name\":\"punctuation.definition.bracket.angle.begin.jsdoc\"},\"5\":{\"name\":\"constant.other.email.link.underline.jsdoc\"},\"6\":{\"name\":\"punctuation.definition.bracket.angle.end.jsdoc\"}},\"match\":\"((@)author)\\\\s+([^@\\\\s<>*/](?:[^@<>*/]|\\\\*[^/])*)(?:\\\\s*(<)([^>\\\\s]+)(>))?\"},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"entity.name.type.instance.jsdoc\"},\"4\":{\"name\":\"keyword.operator.control.jsdoc\"},\"5\":{\"name\":\"entity.name.type.instance.jsdoc\"}},\"match\":\"((@)borrows)\\\\s+((?:[^@\\\\s*/]|\\\\*[^/])+)\\\\s+(as)\\\\s+((?:[^@\\\\s*/]|\\\\*[^/])+)\"},{\"begin\":\"((@)example)\\\\s+\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"end\":\"(?=@|\\\\*/)\",\"name\":\"meta.example.jsdoc\",\"patterns\":[{\"match\":\"^\\\\s\\\\*\\\\s+\"},{\"begin\":\"\\\\G(<)caption(>)\",\"beginCaptures\":{\"0\":{\"name\":\"entity.name.tag.inline.jsdoc\"},\"1\":{\"name\":\"punctuation.definition.bracket.angle.begin.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.bracket.angle.end.jsdoc\"}},\"contentName\":\"constant.other.description.jsdoc\",\"end\":\"(</)caption(>)|(?=\\\\*/)\",\"endCaptures\":{\"0\":{\"name\":\"entity.name.tag.inline.jsdoc\"},\"1\":{\"name\":\"punctuation.definition.bracket.angle.begin.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.bracket.angle.end.jsdoc\"}}},{\"captures\":{\"0\":{\"name\":\"source.embedded.js\"}},\"match\":\"[^\\\\s@*](?:[^*]|\\\\*[^/])*\"}]},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"constant.language.symbol-type.jsdoc\"}},\"match\":\"((@)kind)\\\\s+(class|constant|event|external|file|function|member|mixin|module|namespace|typedef)\\\\b\"},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"variable.other.link.underline.jsdoc\"},\"4\":{\"name\":\"entity.name.type.instance.jsdoc\"}},\"match\":\"((@)see)\\\\s+(?:((?=https?://)(?:[^\\\\s*]|\\\\*[^/])+)|((?!https?://|(?:\\\\[[^\\\\[\\\\]]*\\\\])?{@(?:link|linkcode|linkplain|tutorial)\\\\b)(?:[^@\\\\s*/]|\\\\*[^/])+))\"},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"variable.other.jsdoc\"}},\"match\":\"((@)template)\\\\s+([A-Za-z_$][\\\\w$.\\\\[\\\\]]*(?:\\\\s*,\\\\s*[A-Za-z_$][\\\\w$.\\\\[\\\\]]*)*)\"},{\"begin\":\"((@)template)\\\\s+(?={)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"end\":\"(?=\\\\s|\\\\*/|[^{}\\\\[\\\\]A-Za-z_$])\",\"patterns\":[{\"include\":\"#jsdoctype\"},{\"match\":\"([A-Za-z_$][\\\\w$.\\\\[\\\\]]*)\",\"name\":\"variable.other.jsdoc\"}]},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"variable.other.jsdoc\"}},\"match\":\"((@)(?:arg|argument|const|constant|member|namespace|param|var))\\\\s+([A-Za-z_$][\\\\w$.\\\\[\\\\]]*)\"},{\"begin\":\"((@)typedef)\\\\s+(?={)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"end\":\"(?=\\\\s|\\\\*/|[^{}\\\\[\\\\]A-Za-z_$])\",\"patterns\":[{\"include\":\"#jsdoctype\"},{\"match\":\"(?:[^@\\\\s*/]|\\\\*[^/])+\",\"name\":\"entity.name.type.instance.jsdoc\"}]},{\"begin\":\"((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\\\s+(?={)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"end\":\"(?=\\\\s|\\\\*/|[^{}\\\\[\\\\]A-Za-z_$])\",\"patterns\":[{\"include\":\"#jsdoctype\"},{\"match\":\"([A-Za-z_$][\\\\w$.\\\\[\\\\]]*)\",\"name\":\"variable.other.jsdoc\"},{\"captures\":{\"1\":{\"name\":\"punctuation.definition.optional-value.begin.bracket.square.jsdoc\"},\"2\":{\"name\":\"keyword.operator.assignment.jsdoc\"},\"3\":{\"name\":\"source.embedded.js\"},\"4\":{\"name\":\"punctuation.definition.optional-value.end.bracket.square.jsdoc\"},\"5\":{\"name\":\"invalid.illegal.syntax.jsdoc\"}},\"match\":\"(\\\\[)\\\\s*[\\\\w$]+(?:(?:\\\\[\\\\])?\\\\.[\\\\w$]+)*(?:\\\\s*(=)\\\\s*((?>\\\"(?:(?:\\\\*(?!/))|(?:\\\\\\\\(?!\\\"))|[^*\\\\\\\\])*?\\\"|'(?:(?:\\\\*(?!/))|(?:\\\\\\\\(?!'))|[^*\\\\\\\\])*?'|\\\\[(?:(?:\\\\*(?!/))|[^*])*?\\\\]|(?:(?:\\\\*(?!/))|\\\\s(?!\\\\s*\\\\])|\\\\[.*?(?:\\\\]|(?=\\\\*/))|[^*\\\\s\\\\[\\\\]])*)*))?\\\\s*(?:(\\\\])((?:[^*\\\\s]|\\\\*[^\\\\s/])+)?|(?=\\\\*/))\",\"name\":\"variable.other.jsdoc\"}]},{\"begin\":\"((@)(?:define|enum|exception|export|extends|lends|implements|modifies|namespace|private|protected|returns?|satisfies|suppress|this|throws|type|yields?))\\\\s+(?={)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"end\":\"(?=\\\\s|\\\\*/|[^{}\\\\[\\\\]A-Za-z_$])\",\"patterns\":[{\"include\":\"#jsdoctype\"}]},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"entity.name.type.instance.jsdoc\"}},\"match\":\"((@)(?:alias|augments|callback|constructs|emits|event|fires|exports?|extends|external|function|func|host|lends|listens|interface|memberof!?|method|module|mixes|mixin|name|requires|see|this|typedef|uses))\\\\s+((?:[^{}@\\\\s*]|\\\\*[^/])+)\"},{\"begin\":\"((@)(?:default(?:value)?|license|version))\\\\s+(([''\\\"]))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"variable.other.jsdoc\"},\"4\":{\"name\":\"punctuation.definition.string.begin.jsdoc\"}},\"contentName\":\"variable.other.jsdoc\",\"end\":\"(\\\\3)|(?=$|\\\\*/)\",\"endCaptures\":{\"0\":{\"name\":\"variable.other.jsdoc\"},\"1\":{\"name\":\"punctuation.definition.string.end.jsdoc\"}}},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"},\"3\":{\"name\":\"variable.other.jsdoc\"}},\"match\":\"((@)(?:default(?:value)?|license|tutorial|variation|version))\\\\s+([^\\\\s*]+)\"},{\"captures\":{\"1\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"match\":\"(@)(?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception|exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func|function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc|inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method|mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects|override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce|yields?)\\\\b\",\"name\":\"storage.type.class.jsdoc\"},{\"include\":\"#inline-tags\"},{\"captures\":{\"1\":{\"name\":\"storage.type.class.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.block.tag.jsdoc\"}},\"match\":\"((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\\\s+)\"}]},\"enum-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?(?:\\\\b(const)\\\\s+)?\\\\b(enum)\\\\s+([_$[:alpha:]][_$[:alnum:]]*)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.type.enum.js\"},\"5\":{\"name\":\"entity.name.type.enum.js\"}},\"end\":\"(?<=\\\\})\",\"name\":\"meta.enum.declaration.js\",\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"beginCaptures\":{\"0\":{\"name\":\"variable.other.enummember.js\"}},\"end\":\"(?=,|\\\\}|$)\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#variable-initializer\"}]},{\"begin\":\"(?=((\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\])))\",\"end\":\"(?=,|\\\\}|$)\",\"patterns\":[{\"include\":\"#string\"},{\"include\":\"#array-literal\"},{\"include\":\"#comment\"},{\"include\":\"#variable-initializer\"}]},{\"include\":\"#punctuation-comma\"}]}]},\"export-declaration\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"keyword.control.as.js\"},\"3\":{\"name\":\"storage.type.namespace.js\"},\"4\":{\"name\":\"entity.name.type.module.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(export)\\\\s+(as)\\\\s+(namespace)\\\\s+([_$[:alpha:]][_$[:alnum:]]*)\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(export)(?:\\\\s+(type))?(?:(?:\\\\s*(=))|(?:\\\\s+(default)(?=\\\\s+)))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"keyword.control.type.js\"},\"3\":{\"name\":\"keyword.operator.assignment.js\"},\"4\":{\"name\":\"keyword.control.default.js\"}},\"end\":\"(?=$|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"name\":\"meta.export.default.js\",\"patterns\":[{\"include\":\"#interface-declaration\"},{\"include\":\"#expression\"}]},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(export)(?:\\\\s+(type))?\\\\b(?!(\\\\$)|(\\\\s*:))((?=\\\\s*[\\\\{*])|((?=\\\\s*[_$[:alpha:]][_$[:alnum:]]*(\\\\s|,))(?!\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"keyword.control.type.js\"}},\"end\":\"(?=$|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"name\":\"meta.export.js\",\"patterns\":[{\"include\":\"#import-export-declaration\"}]}]},\"expression\":{\"patterns\":[{\"include\":\"#expressionWithoutIdentifiers\"},{\"include\":\"#identifiers\"},{\"include\":\"#expressionPunctuations\"}]},\"expression-inside-possibly-arrow-parens\":{\"patterns\":[{\"include\":\"#expressionWithoutIdentifiers\"},{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#decorator\"},{\"include\":\"#destructuring-parameter\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|protected|private|readonly)\\\\s+(?=(override|public|protected|private|readonly)\\\\s+)\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"entity.name.function.js variable.language.this.js\"},\"4\":{\"name\":\"entity.name.function.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*(\\\\??)(?=\\\\s*(=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))|(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))))|(:\\\\s*(=>|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(<[^<>]*>)|[^<>(),=])+=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"variable.parameter.js variable.language.this.js\"},\"4\":{\"name\":\"variable.parameter.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*(\\\\??)(?=\\\\s*[:,]|$)\"},{\"include\":\"#type-annotation\"},{\"include\":\"#variable-initializer\"},{\"match\":\",\",\"name\":\"punctuation.separator.parameter.js\"},{\"include\":\"#identifiers\"},{\"include\":\"#expressionPunctuations\"}]},\"expression-operators\":{\"patterns\":[{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(await)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.control.flow.js\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(yield)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))(?=\\\\s*\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*\\\\*)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.flow.js\"}},\"end\":\"\\\\*\",\"endCaptures\":{\"0\":{\"name\":\"keyword.generator.asterisk.js\"}},\"patterns\":[{\"include\":\"#comment\"}]},{\"captures\":{\"1\":{\"name\":\"keyword.control.flow.js\"},\"2\":{\"name\":\"keyword.generator.asterisk.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(yield)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))(?:\\\\s*(\\\\*))?\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))delete(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.expression.delete.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))in(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))(?!\\\\()\",\"name\":\"keyword.operator.expression.in.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))of(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))(?!\\\\()\",\"name\":\"keyword.operator.expression.of.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))instanceof(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.expression.instanceof.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))new(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.new.js\"},{\"include\":\"#typeof-operator\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))void(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.expression.void.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.as.js\"},\"2\":{\"name\":\"storage.modifier.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(as)\\\\s+(const)(?=\\\\s*($|[;,:})\\\\]]))\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(as)|(satisfies))\\\\s+\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.as.js\"},\"2\":{\"name\":\"keyword.control.satisfies.js\"}},\"end\":\"(?=^|[;),}\\\\]:?\\\\-\\\\+\\\\>]|\\\\|\\\\||\\\\&\\\\&|\\\\!\\\\=\\\\=|$|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(as|satisfies)\\\\s+)|(\\\\s+\\\\<))\",\"patterns\":[{\"include\":\"#type\"}]},{\"match\":\"\\\\.\\\\.\\\\.\",\"name\":\"keyword.operator.spread.js\"},{\"match\":\"\\\\*=|(?<!\\\\()/=|%=|\\\\+=|\\\\-=\",\"name\":\"keyword.operator.assignment.compound.js\"},{\"match\":\"\\\\&=|\\\\^=|<<=|>>=|>>>=|\\\\|=\",\"name\":\"keyword.operator.assignment.compound.bitwise.js\"},{\"match\":\"<<|>>>|>>\",\"name\":\"keyword.operator.bitwise.shift.js\"},{\"match\":\"===|!==|==|!=\",\"name\":\"keyword.operator.comparison.js\"},{\"match\":\"<=|>=|<>|<|>\",\"name\":\"keyword.operator.relational.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.operator.logical.js\"},\"2\":{\"name\":\"keyword.operator.assignment.compound.js\"},\"3\":{\"name\":\"keyword.operator.arithmetic.js\"}},\"match\":\"(?<=[_$[:alnum:]])(\\\\!)\\\\s*(?:(/=)|(?:(/)(?![/*])))\"},{\"match\":\"\\\\!|&&|\\\\|\\\\||\\\\?\\\\?\",\"name\":\"keyword.operator.logical.js\"},{\"match\":\"\\\\&|~|\\\\^|\\\\|\",\"name\":\"keyword.operator.bitwise.js\"},{\"match\":\"\\\\=\",\"name\":\"keyword.operator.assignment.js\"},{\"match\":\"--\",\"name\":\"keyword.operator.decrement.js\"},{\"match\":\"\\\\+\\\\+\",\"name\":\"keyword.operator.increment.js\"},{\"match\":\"%|\\\\*|/|-|\\\\+\",\"name\":\"keyword.operator.arithmetic.js\"},{\"begin\":\"(?<=[_$[:alnum:])\\\\]])\\\\s*(?=(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)+(?:(/=)|(?:(/)(?![/*]))))\",\"end\":\"(?:(/=)|(?:(/)(?!\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/)))\",\"endCaptures\":{\"1\":{\"name\":\"keyword.operator.assignment.compound.js\"},\"2\":{\"name\":\"keyword.operator.arithmetic.js\"}},\"patterns\":[{\"include\":\"#comment\"}]},{\"captures\":{\"1\":{\"name\":\"keyword.operator.assignment.compound.js\"},\"2\":{\"name\":\"keyword.operator.arithmetic.js\"}},\"match\":\"(?<=[_$[:alnum:])\\\\]])\\\\s*(?:(/=)|(?:(/)(?![/*])))\"}]},\"expressionPunctuations\":{\"patterns\":[{\"include\":\"#punctuation-comma\"},{\"include\":\"#punctuation-accessor\"}]},\"expressionWithoutIdentifiers\":{\"patterns\":[{\"include\":\"#jsx\"},{\"include\":\"#string\"},{\"include\":\"#regex\"},{\"include\":\"#comment\"},{\"include\":\"#function-expression\"},{\"include\":\"#class-expression\"},{\"include\":\"#arrow-function\"},{\"include\":\"#paren-expression-possibly-arrow\"},{\"include\":\"#cast\"},{\"include\":\"#ternary-expression\"},{\"include\":\"#new-expr\"},{\"include\":\"#instanceof-expr\"},{\"include\":\"#object-literal\"},{\"include\":\"#expression-operators\"},{\"include\":\"#function-call\"},{\"include\":\"#literal\"},{\"include\":\"#support-objects\"},{\"include\":\"#paren-expression\"}]},\"field-declaration\":{\"begin\":\"(?<!\\\\()(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(readonly)\\\\s+)?(?=\\\\s*((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|(\\\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(?:(?:(\\\\?)|(\\\\!))\\\\s*)?(=|:|;|,|\\\\}|$))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"end\":\"(?=\\\\}|;|,|$|(^(?!\\\\s*((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|(\\\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(?:(?:(\\\\?)|(\\\\!))\\\\s*)?(=|:|;|,|$))))|(?<=\\\\})\",\"name\":\"meta.field.declaration.js\",\"patterns\":[{\"include\":\"#variable-initializer\"},{\"include\":\"#type-annotation\"},{\"include\":\"#string\"},{\"include\":\"#array-literal\"},{\"include\":\"#numeric-literal\"},{\"include\":\"#comment\"},{\"captures\":{\"1\":{\"name\":\"meta.definition.property.js entity.name.function.js\"},\"2\":{\"name\":\"keyword.operator.optional.js\"},\"3\":{\"name\":\"keyword.operator.definiteassignment.js\"}},\"match\":\"(\\\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\\\?)|(\\\\!))?(?=\\\\s*\\\\s*(=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))|(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))))|(:\\\\s*(=>|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(<[^<>]*>)|[^<>(),=])+=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\"},{\"match\":\"\\\\#?[_$[:alpha:]][_$[:alnum:]]*\",\"name\":\"meta.definition.property.js variable.object.property.js\"},{\"match\":\"\\\\?\",\"name\":\"keyword.operator.optional.js\"},{\"match\":\"\\\\!\",\"name\":\"keyword.operator.definiteassignment.js\"}]},\"for-loop\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))for(?=((\\\\s+|(\\\\s*\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*))await)?\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)?(\\\\())\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.control.loop.js\"}},\"end\":\"(?<=\\\\))\",\"patterns\":[{\"include\":\"#comment\"},{\"match\":\"await\",\"name\":\"keyword.control.loop.js\"},{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#var-expr\"},{\"include\":\"#expression\"},{\"include\":\"#punctuation-semicolon\"}]}]},\"function-body\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-parameters\"},{\"include\":\"#function-parameters\"},{\"include\":\"#return-type\"},{\"include\":\"#type-function-return-type\"},{\"include\":\"#decl-block\"},{\"match\":\"\\\\*\",\"name\":\"keyword.generator.asterisk.js\"}]},\"function-call\":{\"patterns\":[{\"begin\":\"(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\\\)]))\\\\s*(?:(\\\\?\\\\.\\\\s*)|(\\\\!))?((<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)?\\\\())\",\"end\":\"(?<=\\\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\\\)]))\\\\s*(?:(\\\\?\\\\.\\\\s*)|(\\\\!))?((<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)?\\\\())\",\"patterns\":[{\"begin\":\"(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))\",\"end\":\"(?=\\\\s*(?:(\\\\?\\\\.\\\\s*)|(\\\\!))?((<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)?\\\\())\",\"name\":\"meta.function-call.js\",\"patterns\":[{\"include\":\"#function-call-target\"}]},{\"include\":\"#comment\"},{\"include\":\"#function-call-optionals\"},{\"include\":\"#type-arguments\"},{\"include\":\"#paren-expression\"}]},{\"begin\":\"(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\\\)]))(<\\\\s*[\\\\{\\\\[\\\\(]\\\\s*$))\",\"end\":\"(?<=\\\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\\\)]))(<\\\\s*[\\\\{\\\\[\\\\(]\\\\s*$))\",\"patterns\":[{\"begin\":\"(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\\\s*\\\\??\\\\.\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*))\",\"end\":\"(?=(<\\\\s*[\\\\{\\\\[\\\\(]\\\\s*$))\",\"name\":\"meta.function-call.js\",\"patterns\":[{\"include\":\"#function-call-target\"}]},{\"include\":\"#comment\"},{\"include\":\"#function-call-optionals\"},{\"include\":\"#type-arguments\"}]}]},\"function-call-optionals\":{\"patterns\":[{\"match\":\"\\\\?\\\\.\",\"name\":\"meta.function-call.js punctuation.accessor.optional.js\"},{\"match\":\"\\\\!\",\"name\":\"meta.function-call.js keyword.operator.definiteassignment.js\"}]},\"function-call-target\":{\"patterns\":[{\"include\":\"#support-function-call-identifiers\"},{\"match\":\"(\\\\#?[_$[:alpha:]][_$[:alnum:]]*)\",\"name\":\"entity.name.function.js\"}]},\"function-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?(?:(async)\\\\s+)?(function\\\\b)(?:\\\\s*(\\\\*))?(?:(?:\\\\s+|(?<=\\\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.async.js\"},\"4\":{\"name\":\"storage.type.function.js\"},\"5\":{\"name\":\"keyword.generator.asterisk.js\"},\"6\":{\"name\":\"meta.definition.function.js entity.name.function.js\"}},\"end\":\"(?=;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))|(?<=\\\\})\",\"name\":\"meta.function.js\",\"patterns\":[{\"include\":\"#function-name\"},{\"include\":\"#function-body\"}]},\"function-expression\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(async)\\\\s+)?(function\\\\b)(?:\\\\s*(\\\\*))?(?:(?:\\\\s+|(?<=\\\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"},\"2\":{\"name\":\"storage.type.function.js\"},\"3\":{\"name\":\"keyword.generator.asterisk.js\"},\"4\":{\"name\":\"meta.definition.function.js entity.name.function.js\"}},\"end\":\"(?=;)|(?<=\\\\})\",\"name\":\"meta.function.expression.js\",\"patterns\":[{\"include\":\"#function-name\"},{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#function-body\"}]},\"function-name\":{\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\",\"name\":\"meta.definition.function.js entity.name.function.js\"},\"function-parameters\":{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.parameters.begin.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.parameters.end.js\"}},\"name\":\"meta.parameters.js\",\"patterns\":[{\"include\":\"#function-parameters-body\"}]},\"function-parameters-body\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#decorator\"},{\"include\":\"#destructuring-parameter\"},{\"include\":\"#parameter-name\"},{\"include\":\"#parameter-type-annotation\"},{\"include\":\"#variable-initializer\"},{\"match\":\",\",\"name\":\"punctuation.separator.parameter.js\"}]},\"identifiers\":{\"patterns\":[{\"include\":\"#object-identifiers\"},{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"},\"3\":{\"name\":\"entity.name.function.js\"}},\"match\":\"(?:(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\\\s*=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))\"},{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"},\"3\":{\"name\":\"variable.other.constant.property.js\"}},\"match\":\"(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(\\\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])\"},{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"},\"3\":{\"name\":\"variable.other.property.js\"}},\"match\":\"(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(\\\\#?[_$[:alpha:]][_$[:alnum:]]*)\"},{\"match\":\"([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])\",\"name\":\"variable.other.constant.js\"},{\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\",\"name\":\"variable.other.readwrite.js\"}]},\"if-statement\":{\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?=\\\\bif\\\\s*(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))\\\\s*(?!\\\\{))\",\"end\":\"(?=;|$|\\\\})\",\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(if)\\\\s*(\\\\()\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.conditional.js\"},\"2\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression\"}]},{\"begin\":\"(?<=\\\\))\\\\s*\\\\/(?![\\\\/*])(?=(?:[^\\\\/\\\\\\\\\\\\[]|\\\\\\\\.|\\\\[([^\\\\]\\\\\\\\]|\\\\\\\\.)*\\\\])+\\\\/([dgimsuvy]+|(?![\\\\/\\\\*])|(?=\\\\/\\\\*))(?!\\\\s*[a-zA-Z0-9_$]))\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"(/)([dgimsuvy]*)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.end.js\"},\"2\":{\"name\":\"keyword.other.js\"}},\"name\":\"string.regexp.js\",\"patterns\":[{\"include\":\"#regexp\"}]},{\"include\":\"#statements\"}]}]},\"import-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(import)(?:\\\\s+(type)(?!\\\\s+from))?(?!\\\\s*[:\\\\(])(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"keyword.control.import.js\"},\"4\":{\"name\":\"keyword.control.type.js\"}},\"end\":\"(?<!^import|[^\\\\._$[:alnum:]]import)(?=;|$|^)\",\"name\":\"meta.import.js\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"begin\":\"(?<=^import|[^\\\\._$[:alnum:]]import)(?!\\\\s*[\\\"'])\",\"end\":\"\\\\bfrom\\\\b\",\"endCaptures\":{\"0\":{\"name\":\"keyword.control.from.js\"}},\"patterns\":[{\"include\":\"#import-export-declaration\"}]},{\"include\":\"#import-export-declaration\"}]},\"import-equals-declaration\":{\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(import)(?:\\\\s+(type))?\\\\s+([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(=)\\\\s*(require)\\\\s*(\\\\()\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"keyword.control.import.js\"},\"4\":{\"name\":\"keyword.control.type.js\"},\"5\":{\"name\":\"variable.other.readwrite.alias.js\"},\"6\":{\"name\":\"keyword.operator.assignment.js\"},\"7\":{\"name\":\"keyword.control.require.js\"},\"8\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"name\":\"meta.import-equals.external.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"}]},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(import)(?:\\\\s+(type))?\\\\s+([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(=)\\\\s*(?!require\\\\b)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"keyword.control.import.js\"},\"4\":{\"name\":\"keyword.control.type.js\"},\"5\":{\"name\":\"variable.other.readwrite.alias.js\"},\"6\":{\"name\":\"keyword.operator.assignment.js\"}},\"end\":\"(?=;|$|^)\",\"name\":\"meta.import-equals.internal.js\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#comment\"},{\"captures\":{\"1\":{\"name\":\"entity.name.type.module.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\"},{\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"name\":\"variable.other.readwrite.js\"}]}]},\"import-export-assert-clause\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(with)|(assert))\\\\s*(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.with.js\"},\"2\":{\"name\":\"keyword.control.assert.js\"},\"3\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"match\":\"(?:[_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?=(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*:)\",\"name\":\"meta.object-literal.key.js\"},{\"match\":\":\",\"name\":\"punctuation.separator.key-value.js\"}]},\"import-export-block\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"meta.block.js\",\"patterns\":[{\"include\":\"#import-export-clause\"}]},\"import-export-clause\":{\"patterns\":[{\"include\":\"#comment\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.type.js\"},\"2\":{\"name\":\"keyword.control.default.js\"},\"3\":{\"name\":\"constant.language.import-export-all.js\"},\"4\":{\"name\":\"variable.other.readwrite.js\"},\"5\":{\"name\":\"string.quoted.alias.js\"},\"12\":{\"name\":\"keyword.control.as.js\"},\"13\":{\"name\":\"keyword.control.default.js\"},\"14\":{\"name\":\"variable.other.readwrite.alias.js\"},\"15\":{\"name\":\"string.quoted.alias.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(?:(\\\\btype)\\\\s+)?(?:(\\\\bdefault)|(\\\\*)|(\\\\b[_$[:alpha:]][_$[:alnum:]]*)|((\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))))\\\\s+(as)\\\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|([_$[:alpha:]][_$[:alnum:]]*)|((\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)))\"},{\"include\":\"#punctuation-comma\"},{\"match\":\"\\\\*\",\"name\":\"constant.language.import-export-all.js\"},{\"match\":\"\\\\b(default)\\\\b\",\"name\":\"keyword.control.default.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.type.js\"},\"2\":{\"name\":\"variable.other.readwrite.alias.js\"},\"3\":{\"name\":\"string.quoted.alias.js\"}},\"match\":\"(?:(\\\\btype)\\\\s+)?(?:([_$[:alpha:]][_$[:alnum:]]*)|((\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)))\"}]},\"import-export-declaration\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#import-export-block\"},{\"match\":\"\\\\bfrom\\\\b\",\"name\":\"keyword.control.from.js\"},{\"include\":\"#import-export-assert-clause\"},{\"include\":\"#import-export-clause\"}]},\"indexer-declaration\":{\"begin\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(readonly)\\\\s*)?\\\\s*(\\\\[)\\\\s*([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?=:)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"meta.brace.square.js\"},\"3\":{\"name\":\"variable.parameter.js\"}},\"end\":\"(\\\\])\\\\s*(\\\\?\\\\s*)?|$\",\"endCaptures\":{\"1\":{\"name\":\"meta.brace.square.js\"},\"2\":{\"name\":\"keyword.operator.optional.js\"}},\"name\":\"meta.indexer.declaration.js\",\"patterns\":[{\"include\":\"#type-annotation\"}]},\"indexer-mapped-type-declaration\":{\"begin\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))([+-])?(readonly)\\\\s*)?\\\\s*(\\\\[)\\\\s*([_$[:alpha:]][_$[:alnum:]]*)\\\\s+(in)\\\\s+\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.modifier.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"meta.brace.square.js\"},\"4\":{\"name\":\"entity.name.type.js\"},\"5\":{\"name\":\"keyword.operator.expression.in.js\"}},\"end\":\"(\\\\])([+-])?\\\\s*(\\\\?\\\\s*)?|$\",\"endCaptures\":{\"1\":{\"name\":\"meta.brace.square.js\"},\"2\":{\"name\":\"keyword.operator.type.modifier.js\"},\"3\":{\"name\":\"keyword.operator.optional.js\"}},\"name\":\"meta.indexer.mappedtype.declaration.js\",\"patterns\":[{\"captures\":{\"1\":{\"name\":\"keyword.control.as.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(as)\\\\s+\"},{\"include\":\"#type\"}]},\"inline-tags\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"punctuation.definition.bracket.square.begin.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.bracket.square.end.jsdoc\"}},\"match\":\"(\\\\[)[^\\\\]]+(\\\\])(?={@(?:link|linkcode|linkplain|tutorial))\",\"name\":\"constant.other.description.jsdoc\"},{\"begin\":\"({)((@)(?:link(?:code|plain)?|tutorial))\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.bracket.curly.begin.jsdoc\"},\"2\":{\"name\":\"storage.type.class.jsdoc\"},\"3\":{\"name\":\"punctuation.definition.inline.tag.jsdoc\"}},\"end\":\"}|(?=\\\\*/)\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.bracket.curly.end.jsdoc\"}},\"name\":\"entity.name.type.instance.jsdoc\",\"patterns\":[{\"captures\":{\"1\":{\"name\":\"variable.other.link.underline.jsdoc\"},\"2\":{\"name\":\"punctuation.separator.pipe.jsdoc\"}},\"match\":\"\\\\G((?=https?://)(?:[^|}\\\\s*]|\\\\*[/])+)(\\\\|)?\"},{\"captures\":{\"1\":{\"name\":\"variable.other.description.jsdoc\"},\"2\":{\"name\":\"punctuation.separator.pipe.jsdoc\"}},\"match\":\"\\\\G((?:[^{}@\\\\s|*]|\\\\*[^/])+)(\\\\|)?\"}]}]},\"instanceof-expr\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.expression.instanceof.js\"}},\"end\":\"(?<=\\\\))|(?=[;),}\\\\]:?\\\\-\\\\+\\\\>]|\\\\|\\\\||\\\\&\\\\&|\\\\!\\\\=\\\\=|$|(===|!==|==|!=)|(([\\\\&\\\\~\\\\^\\\\|]\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s+instanceof(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))function((\\\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\\\s*[\\\\(]))))\",\"patterns\":[{\"include\":\"#type\"}]},\"interface-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(?:(abstract)\\\\s+)?\\\\b(interface)\\\\b(?=\\\\s+|/[/*])\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.type.interface.js\"}},\"end\":\"(?<=\\\\})\",\"name\":\"meta.interface.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#class-or-interface-heritage\"},{\"captures\":{\"0\":{\"name\":\"entity.name.type.interface.js\"}},\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\"},{\"include\":\"#type-parameters\"},{\"include\":\"#class-or-interface-body\"}]},\"jsdoctype\":{\"patterns\":[{\"begin\":\"\\\\G({)\",\"beginCaptures\":{\"0\":{\"name\":\"entity.name.type.instance.jsdoc\"},\"1\":{\"name\":\"punctuation.definition.bracket.curly.begin.jsdoc\"}},\"contentName\":\"entity.name.type.instance.jsdoc\",\"end\":\"((}))\\\\s*|(?=\\\\*/)\",\"endCaptures\":{\"1\":{\"name\":\"entity.name.type.instance.jsdoc\"},\"2\":{\"name\":\"punctuation.definition.bracket.curly.end.jsdoc\"}},\"patterns\":[{\"include\":\"#brackets\"}]}]},\"jsx\":{\"patterns\":[{\"include\":\"#jsx-tag-without-attributes-in-expression\"},{\"include\":\"#jsx-tag-in-expression\"}]},\"jsx-children\":{\"patterns\":[{\"include\":\"#jsx-tag-without-attributes\"},{\"include\":\"#jsx-tag\"},{\"include\":\"#jsx-evaluated-code\"},{\"include\":\"#jsx-entities\"}]},\"jsx-entities\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"punctuation.definition.entity.js\"},\"3\":{\"name\":\"punctuation.definition.entity.js\"}},\"match\":\"(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)\",\"name\":\"constant.character.entity.js\"}]},\"jsx-evaluated-code\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.section.embedded.begin.js\"}},\"contentName\":\"meta.embedded.expression.js\",\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.section.embedded.end.js\"}},\"patterns\":[{\"include\":\"#expression\"}]},\"jsx-string-double-quoted\":{\"begin\":\"\\\"\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"\\\"\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.end.js\"}},\"name\":\"string.quoted.double.js\",\"patterns\":[{\"include\":\"#jsx-entities\"}]},\"jsx-string-single-quoted\":{\"begin\":\"'\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"'\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.end.js\"}},\"name\":\"string.quoted.single.js\",\"patterns\":[{\"include\":\"#jsx-entities\"}]},\"jsx-tag\":{\"begin\":\"(?=(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))(?=((<\\\\s*)|(\\\\s+))(?!\\\\?)|\\\\/?>))\",\"end\":\"(/>)|(?:(</)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))?\\\\s*(>))\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.end.js\"},\"2\":{\"name\":\"punctuation.definition.tag.begin.js\"},\"3\":{\"name\":\"entity.name.tag.namespace.js\"},\"4\":{\"name\":\"punctuation.separator.namespace.js\"},\"5\":{\"name\":\"entity.name.tag.js\"},\"6\":{\"name\":\"support.class.component.js\"},\"7\":{\"name\":\"punctuation.definition.tag.end.js\"}},\"name\":\"meta.tag.js\",\"patterns\":[{\"begin\":\"(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))(?=((<\\\\s*)|(\\\\s+))(?!\\\\?)|\\\\/?>)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.begin.js\"},\"2\":{\"name\":\"entity.name.tag.namespace.js\"},\"3\":{\"name\":\"punctuation.separator.namespace.js\"},\"4\":{\"name\":\"entity.name.tag.js\"},\"5\":{\"name\":\"support.class.component.js\"}},\"end\":\"(?=[/]?>)\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-arguments\"},{\"include\":\"#jsx-tag-attributes\"}]},{\"begin\":\"(>)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.end.js\"}},\"contentName\":\"meta.jsx.children.js\",\"end\":\"(?=</)\",\"patterns\":[{\"include\":\"#jsx-children\"}]}]},\"jsx-tag-attribute-assignment\":{\"match\":\"=(?=\\\\s*(?:'|\\\"|{|/\\\\*|//|\\\\n))\",\"name\":\"keyword.operator.assignment.js\"},\"jsx-tag-attribute-name\":{\"captures\":{\"1\":{\"name\":\"entity.other.attribute-name.namespace.js\"},\"2\":{\"name\":\"punctuation.separator.namespace.js\"},\"3\":{\"name\":\"entity.other.attribute-name.js\"}},\"match\":\"\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?([_$[:alpha:]][-_$[:alnum:]]*)(?=\\\\s|=|/?>|/\\\\*|//)\"},\"jsx-tag-attributes\":{\"begin\":\"\\\\s+\",\"end\":\"(?=[/]?>)\",\"name\":\"meta.tag.attributes.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#jsx-tag-attribute-name\"},{\"include\":\"#jsx-tag-attribute-assignment\"},{\"include\":\"#jsx-string-double-quoted\"},{\"include\":\"#jsx-string-single-quoted\"},{\"include\":\"#jsx-evaluated-code\"},{\"include\":\"#jsx-tag-attributes-illegal\"}]},\"jsx-tag-attributes-illegal\":{\"match\":\"\\\\S+\",\"name\":\"invalid.illegal.attribute.js\"},\"jsx-tag-in-expression\":{\"begin\":\"(?<!\\\\+\\\\+|--)(?<=[({\\\\[,?=>:*]|&&|\\\\|\\\\||\\\\?|\\\\*\\\\/|^await|[^\\\\._$[:alnum:]]await|^return|[^\\\\._$[:alnum:]]return|^default|[^\\\\._$[:alnum:]]default|^yield|[^\\\\._$[:alnum:]]yield|^)\\\\s*(?!<\\\\s*[_$[:alpha:]][_$[:alnum:]]*((\\\\s+extends\\\\s+[^=>])|,))(?=(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))(?=((<\\\\s*)|(\\\\s+))(?!\\\\?)|\\\\/?>))\",\"end\":\"(?!(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))(?=((<\\\\s*)|(\\\\s+))(?!\\\\?)|\\\\/?>))\",\"patterns\":[{\"include\":\"#jsx-tag\"}]},\"jsx-tag-without-attributes\":{\"begin\":\"(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))?\\\\s*(>)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.begin.js\"},\"2\":{\"name\":\"entity.name.tag.namespace.js\"},\"3\":{\"name\":\"punctuation.separator.namespace.js\"},\"4\":{\"name\":\"entity.name.tag.js\"},\"5\":{\"name\":\"support.class.component.js\"},\"6\":{\"name\":\"punctuation.definition.tag.end.js\"}},\"contentName\":\"meta.jsx.children.js\",\"end\":\"(</)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))?\\\\s*(>)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.tag.begin.js\"},\"2\":{\"name\":\"entity.name.tag.namespace.js\"},\"3\":{\"name\":\"punctuation.separator.namespace.js\"},\"4\":{\"name\":\"entity.name.tag.js\"},\"5\":{\"name\":\"support.class.component.js\"},\"6\":{\"name\":\"punctuation.definition.tag.end.js\"}},\"name\":\"meta.tag.without-attributes.js\",\"patterns\":[{\"include\":\"#jsx-children\"}]},\"jsx-tag-without-attributes-in-expression\":{\"begin\":\"(?<!\\\\+\\\\+|--)(?<=[({\\\\[,?=>:*]|&&|\\\\|\\\\||\\\\?|\\\\*\\\\/|^await|[^\\\\._$[:alnum:]]await|^return|[^\\\\._$[:alnum:]]return|^default|[^\\\\._$[:alnum:]]default|^yield|[^\\\\._$[:alnum:]]yield|^)\\\\s*(?=(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))?\\\\s*(>))\",\"end\":\"(?!(<)\\\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\\\.|-))?\\\\s*(>))\",\"patterns\":[{\"include\":\"#jsx-tag-without-attributes\"}]},\"label\":{\"patterns\":[{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(:)(?=\\\\s*\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"entity.name.label.js\"},\"2\":{\"name\":\"punctuation.separator.label.js\"}},\"end\":\"(?<=\\\\})\",\"patterns\":[{\"include\":\"#decl-block\"}]},{\"captures\":{\"1\":{\"name\":\"entity.name.label.js\"},\"2\":{\"name\":\"punctuation.separator.label.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(:)\"}]},\"literal\":{\"patterns\":[{\"include\":\"#numeric-literal\"},{\"include\":\"#boolean-literal\"},{\"include\":\"#null-literal\"},{\"include\":\"#undefined-literal\"},{\"include\":\"#numericConstant-literal\"},{\"include\":\"#array-literal\"},{\"include\":\"#this-literal\"},{\"include\":\"#super-literal\"}]},\"method-declaration\":{\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(override)\\\\s+)?(?:\\\\b(public|private|protected)\\\\s+)?(?:\\\\b(abstract)\\\\s+)?(?:\\\\b(async)\\\\s+)?\\\\s*\\\\b(constructor)\\\\b(?!:)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.modifier.async.js\"},\"5\":{\"name\":\"storage.type.js\"}},\"end\":\"(?=\\\\}|;|,|$)|(?<=\\\\})\",\"name\":\"meta.method.declaration.js\",\"patterns\":[{\"include\":\"#method-declaration-name\"},{\"include\":\"#function-body\"}]},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(override)\\\\s+)?(?:\\\\b(public|private|protected)\\\\s+)?(?:\\\\b(abstract)\\\\s+)?(?:\\\\b(async)\\\\s+)?(?:(?:\\\\s*\\\\b(new)\\\\b(?!:)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(?:(\\\\*)\\\\s*)?)(?=\\\\s*((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?[\\\\(])\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.modifier.async.js\"},\"5\":{\"name\":\"keyword.operator.new.js\"},\"6\":{\"name\":\"keyword.generator.asterisk.js\"}},\"end\":\"(?=\\\\}|;|,|$)|(?<=\\\\})\",\"name\":\"meta.method.declaration.js\",\"patterns\":[{\"include\":\"#method-declaration-name\"},{\"include\":\"#function-body\"}]},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(override)\\\\s+)?(?:\\\\b(public|private|protected)\\\\s+)?(?:\\\\b(abstract)\\\\s+)?(?:\\\\b(async)\\\\s+)?(?:\\\\b(get|set)\\\\s+)?(?:(\\\\*)\\\\s*)?(?=\\\\s*(((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(\\\\??))\\\\s*((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?[\\\\(])\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.modifier.js\"},\"4\":{\"name\":\"storage.modifier.async.js\"},\"5\":{\"name\":\"storage.type.property.js\"},\"6\":{\"name\":\"keyword.generator.asterisk.js\"}},\"end\":\"(?=\\\\}|;|,|$)|(?<=\\\\})\",\"name\":\"meta.method.declaration.js\",\"patterns\":[{\"include\":\"#method-declaration-name\"},{\"include\":\"#function-body\"}]}]},\"method-declaration-name\":{\"begin\":\"(?=((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(\\\\??)\\\\s*[\\\\(\\\\<])\",\"end\":\"(?=\\\\(|\\\\<)\",\"patterns\":[{\"include\":\"#string\"},{\"include\":\"#array-literal\"},{\"include\":\"#numeric-literal\"},{\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\",\"name\":\"meta.definition.method.js entity.name.function.js\"},{\"match\":\"\\\\?\",\"name\":\"keyword.operator.optional.js\"}]},\"namespace-declaration\":{\"begin\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(namespace|module)\\\\s+(?=[_$[:alpha:]\\\"'`]))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.namespace.js\"}},\"end\":\"(?<=\\\\})|(?=;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"name\":\"meta.namespace.declaration.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"name\":\"entity.name.type.module.js\"},{\"include\":\"#punctuation-accessor\"},{\"include\":\"#decl-block\"}]},\"new-expr\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(new)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.new.js\"}},\"end\":\"(?<=\\\\))|(?=[;),}\\\\]:?\\\\-\\\\+\\\\>]|\\\\|\\\\||\\\\&\\\\&|\\\\!\\\\=\\\\=|$|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))new(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))function((\\\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\\\s*[\\\\(]))))\",\"name\":\"new.expr.js\",\"patterns\":[{\"include\":\"#expression\"}]},\"null-literal\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))null(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.null.js\"},\"numeric-literal\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"storage.type.numeric.bigint.js\"}},\"match\":\"\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$)\",\"name\":\"constant.numeric.hex.js\"},{\"captures\":{\"1\":{\"name\":\"storage.type.numeric.bigint.js\"}},\"match\":\"\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$)\",\"name\":\"constant.numeric.binary.js\"},{\"captures\":{\"1\":{\"name\":\"storage.type.numeric.bigint.js\"}},\"match\":\"\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$)\",\"name\":\"constant.numeric.octal.js\"},{\"captures\":{\"0\":{\"name\":\"constant.numeric.decimal.js\"},\"1\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"2\":{\"name\":\"storage.type.numeric.bigint.js\"},\"3\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"4\":{\"name\":\"storage.type.numeric.bigint.js\"},\"5\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"6\":{\"name\":\"storage.type.numeric.bigint.js\"},\"7\":{\"name\":\"storage.type.numeric.bigint.js\"},\"8\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"9\":{\"name\":\"storage.type.numeric.bigint.js\"},\"10\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"11\":{\"name\":\"storage.type.numeric.bigint.js\"},\"12\":{\"name\":\"meta.delimiter.decimal.period.js\"},\"13\":{\"name\":\"storage.type.numeric.bigint.js\"},\"14\":{\"name\":\"storage.type.numeric.bigint.js\"}},\"match\":\"(?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$)\"}]},\"numericConstant-literal\":{\"patterns\":[{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))NaN(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.nan.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Infinity(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.infinity.js\"}]},\"object-binding-element\":{\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?=((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(:))\",\"end\":\"(?=,|\\\\})\",\"patterns\":[{\"include\":\"#object-binding-element-propertyName\"},{\"include\":\"#binding-element\"}]},{\"include\":\"#object-binding-pattern\"},{\"include\":\"#destructuring-variable-rest\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#punctuation-comma\"}]},\"object-binding-element-const\":{\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?=((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(:))\",\"end\":\"(?=,|\\\\})\",\"patterns\":[{\"include\":\"#object-binding-element-propertyName\"},{\"include\":\"#binding-element-const\"}]},{\"include\":\"#object-binding-pattern-const\"},{\"include\":\"#destructuring-variable-rest-const\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#punctuation-comma\"}]},\"object-binding-element-propertyName\":{\"begin\":\"(?=((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(:))\",\"end\":\"(:)\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.destructuring.js\"}},\"patterns\":[{\"include\":\"#string\"},{\"include\":\"#array-literal\"},{\"include\":\"#numeric-literal\"},{\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"name\":\"variable.object.property.js\"}]},\"object-binding-pattern\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"patterns\":[{\"include\":\"#object-binding-element\"}]},\"object-binding-pattern-const\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"patterns\":[{\"include\":\"#object-binding-element-const\"}]},\"object-identifiers\":{\"patterns\":[{\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)(?=\\\\s*\\\\??\\\\.\\\\s*prototype\\\\b(?!\\\\$))\",\"name\":\"support.class.js\"},{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"},\"3\":{\"name\":\"variable.other.constant.object.property.js\"},\"4\":{\"name\":\"variable.other.object.property.js\"}},\"match\":\"(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(?:(\\\\#?[[:upper:]][_$[:digit:][:upper:]]*)|(\\\\#?[_$[:alpha:]][_$[:alnum:]]*))(?=\\\\s*\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*)\"},{\"captures\":{\"1\":{\"name\":\"variable.other.constant.object.js\"},\"2\":{\"name\":\"variable.other.object.js\"}},\"match\":\"(?:([[:upper:]][_$[:digit:][:upper:]]*)|([_$[:alpha:]][_$[:alnum:]]*))(?=\\\\s*\\\\??\\\\.\\\\s*\\\\#?[_$[:alpha:]][_$[:alnum:]]*)\"}]},\"object-literal\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"meta.objectliteral.js\",\"patterns\":[{\"include\":\"#object-member\"}]},\"object-literal-method-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(async)\\\\s+)?(?:\\\\b(get|set)\\\\s+)?(?:(\\\\*)\\\\s*)?(?=\\\\s*(((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(\\\\??))\\\\s*((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?[\\\\(])\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"},\"2\":{\"name\":\"storage.type.property.js\"},\"3\":{\"name\":\"keyword.generator.asterisk.js\"}},\"end\":\"(?=\\\\}|;|,)|(?<=\\\\})\",\"name\":\"meta.method.declaration.js\",\"patterns\":[{\"include\":\"#method-declaration-name\"},{\"include\":\"#function-body\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:\\\\b(async)\\\\s+)?(?:\\\\b(get|set)\\\\s+)?(?:(\\\\*)\\\\s*)?(?=\\\\s*(((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(\\\\??))\\\\s*((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?[\\\\(])\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"},\"2\":{\"name\":\"storage.type.property.js\"},\"3\":{\"name\":\"keyword.generator.asterisk.js\"}},\"end\":\"(?=\\\\(|\\\\<)\",\"patterns\":[{\"include\":\"#method-declaration-name\"}]}]},\"object-member\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#object-literal-method-declaration\"},{\"begin\":\"(?=\\\\[)\",\"end\":\"(?=:)|((?<=[\\\\]])(?=\\\\s*[\\\\(\\\\<]))\",\"name\":\"meta.object.member.js meta.object-literal.key.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#array-literal\"}]},{\"begin\":\"(?=[\\\\'\\\\\\\"\\\\`])\",\"end\":\"(?=:)|((?<=[\\\\'\\\\\\\"\\\\`])(?=((\\\\s*[\\\\(\\\\<,}])|(\\\\s+(as|satisifies)\\\\s+))))\",\"name\":\"meta.object.member.js meta.object-literal.key.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"}]},{\"begin\":\"(?=(\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$)))\",\"end\":\"(?=:)|(?=\\\\s*([\\\\(\\\\<,}])|(\\\\s+as|satisifies\\\\s+))\",\"name\":\"meta.object.member.js meta.object-literal.key.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#numeric-literal\"}]},{\"begin\":\"(?<=[\\\\]\\\\'\\\\\\\"\\\\`])(?=\\\\s*[\\\\(\\\\<])\",\"end\":\"(?=\\\\}|;|,)|(?<=\\\\})\",\"name\":\"meta.method.declaration.js\",\"patterns\":[{\"include\":\"#function-body\"}]},{\"captures\":{\"0\":{\"name\":\"meta.object-literal.key.js\"},\"1\":{\"name\":\"constant.numeric.decimal.js\"}},\"match\":\"(?![_$[:alpha:]])([[:digit:]]+)\\\\s*(?=(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*:)\",\"name\":\"meta.object.member.js\"},{\"captures\":{\"0\":{\"name\":\"meta.object-literal.key.js\"},\"1\":{\"name\":\"entity.name.function.js\"}},\"match\":\"(?:([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?=(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*:(\\\\s*\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/)*\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\",\"name\":\"meta.object.member.js\"},{\"captures\":{\"0\":{\"name\":\"meta.object-literal.key.js\"}},\"match\":\"(?:[_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?=(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*:)\",\"name\":\"meta.object.member.js\"},{\"begin\":\"\\\\.\\\\.\\\\.\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.spread.js\"}},\"end\":\"(?=,|\\\\})\",\"name\":\"meta.object.member.js\",\"patterns\":[{\"include\":\"#expression\"}]},{\"captures\":{\"1\":{\"name\":\"variable.other.readwrite.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?=,|\\\\}|$|\\\\/\\\\/|\\\\/\\\\*)\",\"name\":\"meta.object.member.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.as.js\"},\"2\":{\"name\":\"storage.modifier.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(as)\\\\s+(const)(?=\\\\s*([,}]|$))\",\"name\":\"meta.object.member.js\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(as)|(satisfies))\\\\s+\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.as.js\"},\"2\":{\"name\":\"keyword.control.satisfies.js\"}},\"end\":\"(?=[;),}\\\\]:?\\\\-\\\\+\\\\>]|\\\\|\\\\||\\\\&\\\\&|\\\\!\\\\=\\\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(as|satisifies)\\\\s+))\",\"name\":\"meta.object.member.js\",\"patterns\":[{\"include\":\"#type\"}]},{\"begin\":\"(?=[_$[:alpha:]][_$[:alnum:]]*\\\\s*=)\",\"end\":\"(?=,|\\\\}|$|\\\\/\\\\/|\\\\/\\\\*)\",\"name\":\"meta.object.member.js\",\"patterns\":[{\"include\":\"#expression\"}]},{\"begin\":\":\",\"beginCaptures\":{\"0\":{\"name\":\"meta.object-literal.key.js punctuation.separator.key-value.js\"}},\"end\":\"(?=,|\\\\})\",\"name\":\"meta.object.member.js\",\"patterns\":[{\"begin\":\"(?<=:)\\\\s*(async)?(?=\\\\s*(<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)\\\\(\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"}},\"end\":\"(?<=\\\\))\",\"patterns\":[{\"include\":\"#type-parameters\"},{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression-inside-possibly-arrow-parens\"}]}]},{\"begin\":\"(?<=:)\\\\s*(async)?\\\\s*(\\\\()(?=\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"},\"2\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression-inside-possibly-arrow-parens\"}]},{\"begin\":\"(?<=:)\\\\s*(async)?\\\\s*(?=\\\\<\\\\s*$)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"}},\"end\":\"(?<=\\\\>)\",\"patterns\":[{\"include\":\"#type-parameters\"}]},{\"begin\":\"(?<=\\\\>)\\\\s*(\\\\()(?=\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))\",\"beginCaptures\":{\"1\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression-inside-possibly-arrow-parens\"}]},{\"include\":\"#possibly-arrow-return-type\"},{\"include\":\"#expression\"}]},{\"include\":\"#punctuation-comma\"},{\"include\":\"#decl-block\"}]},\"parameter-array-binding-pattern\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\[)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.array.js\"}},\"patterns\":[{\"include\":\"#parameter-binding-element\"},{\"include\":\"#punctuation-comma\"}]},\"parameter-binding-element\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#string\"},{\"include\":\"#numeric-literal\"},{\"include\":\"#regex\"},{\"include\":\"#parameter-object-binding-pattern\"},{\"include\":\"#parameter-array-binding-pattern\"},{\"include\":\"#destructuring-parameter-rest\"},{\"include\":\"#variable-initializer\"}]},\"parameter-name\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|protected|private|readonly)\\\\s+(?=(override|public|protected|private|readonly)\\\\s+)\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"entity.name.function.js variable.language.this.js\"},\"4\":{\"name\":\"entity.name.function.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*(\\\\??)(?=\\\\s*(=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))|(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))))|(:\\\\s*(=>|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(<[^<>]*>)|[^<>(),=])+=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"variable.parameter.js variable.language.this.js\"},\"4\":{\"name\":\"variable.parameter.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(override|public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*(\\\\??)\"}]},\"parameter-object-binding-element\":{\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?=((\\\\b(?<!\\\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:b|B)[01][01_]*(n)?\\\\b(?!\\\\$))|(\\\\b(?<!\\\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\\\b(?!\\\\$))|((?<!\\\\$)(?:(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\B(\\\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(\\\\.)(n)?\\\\B)|(?:\\\\B(\\\\.)[0-9][0-9_]*(n)?\\\\b)|(?:\\\\b[0-9][0-9_]*(n)?\\\\b(?!\\\\.)))(?!\\\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`)|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])+\\\\]))\\\\s*(:))\",\"end\":\"(?=,|\\\\})\",\"patterns\":[{\"include\":\"#object-binding-element-propertyName\"},{\"include\":\"#parameter-binding-element\"},{\"include\":\"#paren-expression\"}]},{\"include\":\"#parameter-object-binding-pattern\"},{\"include\":\"#destructuring-parameter-rest\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#punctuation-comma\"}]},\"parameter-object-binding-pattern\":{\"begin\":\"(?:(\\\\.\\\\.\\\\.)\\\\s*)?(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.rest.js\"},\"2\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.binding-pattern.object.js\"}},\"patterns\":[{\"include\":\"#parameter-object-binding-element\"}]},\"parameter-type-annotation\":{\"patterns\":[{\"begin\":\"(:)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?=[,)])|(?==[^>])\",\"name\":\"meta.type.annotation.js\",\"patterns\":[{\"include\":\"#type\"}]}]},\"paren-expression\":{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression\"}]},\"paren-expression-possibly-arrow\":{\"patterns\":[{\"begin\":\"(?<=[(=,])\\\\s*(async)?(?=\\\\s*((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?\\\\(\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"}},\"end\":\"(?<=\\\\))\",\"patterns\":[{\"include\":\"#paren-expression-possibly-arrow-with-typeparameters\"}]},{\"begin\":\"(?<=[(=,]|=>|^return|[^\\\\._$[:alnum:]]return)\\\\s*(async)?(?=\\\\s*((((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*))?\\\\()|(<)|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)))\\\\s*$)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.async.js\"}},\"end\":\"(?<=\\\\))\",\"patterns\":[{\"include\":\"#paren-expression-possibly-arrow-with-typeparameters\"}]},{\"include\":\"#possibly-arrow-return-type\"}]},\"paren-expression-possibly-arrow-with-typeparameters\":{\"patterns\":[{\"include\":\"#type-parameters\"},{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"patterns\":[{\"include\":\"#expression-inside-possibly-arrow-parens\"}]}]},\"possibly-arrow-return-type\":{\"begin\":\"(?<=\\\\)|^)\\\\s*(:)(?=\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*=>)\",\"beginCaptures\":{\"1\":{\"name\":\"meta.arrow.js meta.return.type.arrow.js keyword.operator.type.annotation.js\"}},\"contentName\":\"meta.arrow.js meta.return.type.arrow.js\",\"end\":\"(?==>|\\\\{|(^\\\\s*(export|function|class|interface|let|var|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|const|import|enum|namespace|module|type|abstract|declare)\\\\s+))\",\"patterns\":[{\"include\":\"#arrow-return-type-body\"}]},\"property-accessor\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"storage.type.property.js\"},\"punctuation-accessor\":{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"}},\"match\":\"(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\"},\"punctuation-comma\":{\"match\":\",\",\"name\":\"punctuation.separator.comma.js\"},\"punctuation-semicolon\":{\"match\":\";\",\"name\":\"punctuation.terminator.statement.js\"},\"qstring-double\":{\"begin\":\"\\\"\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"(\\\")|((?:[^\\\\\\\\\\\\n])$)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.end.js\"},\"2\":{\"name\":\"invalid.illegal.newline.js\"}},\"name\":\"string.quoted.double.js\",\"patterns\":[{\"include\":\"#string-character-escape\"}]},\"qstring-single\":{\"begin\":\"'\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"(\\\\')|((?:[^\\\\\\\\\\\\n])$)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.end.js\"},\"2\":{\"name\":\"invalid.illegal.newline.js\"}},\"name\":\"string.quoted.single.js\",\"patterns\":[{\"include\":\"#string-character-escape\"}]},\"regex\":{\"patterns\":[{\"begin\":\"(?<!\\\\+\\\\+|--|})(?<=[=(:,\\\\[?+!]|^return|[^\\\\._$[:alnum:]]return|^case|[^\\\\._$[:alnum:]]case|=>|&&|\\\\|\\\\||\\\\*\\\\/)\\\\s*(\\\\/)(?![\\\\/*])(?=(?:[^\\\\/\\\\\\\\\\\\[\\\\()]|\\\\\\\\.|\\\\[([^\\\\]\\\\\\\\]|\\\\\\\\.)+\\\\]|\\\\(([^\\\\)\\\\\\\\]|\\\\\\\\.)+\\\\))+\\\\/([dgimsuvy]+|(?![\\\\/\\\\*])|(?=\\\\/\\\\*))(?!\\\\s*[a-zA-Z0-9_$]))\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"(/)([dgimsuvy]*)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.end.js\"},\"2\":{\"name\":\"keyword.other.js\"}},\"name\":\"string.regexp.js\",\"patterns\":[{\"include\":\"#regexp\"}]},{\"begin\":\"((?<![_$[:alnum:])\\\\]]|\\\\+\\\\+|--|}|\\\\*\\\\/)|((?<=^return|[^\\\\._$[:alnum:]]return|^case|[^\\\\._$[:alnum:]]case))\\\\s*)\\\\/(?![\\\\/*])(?=(?:[^\\\\/\\\\\\\\\\\\[]|\\\\\\\\.|\\\\[([^\\\\]\\\\\\\\]|\\\\\\\\.)*\\\\])+\\\\/([dgimsuvy]+|(?![\\\\/\\\\*])|(?=\\\\/\\\\*))(?!\\\\s*[a-zA-Z0-9_$]))\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.string.begin.js\"}},\"end\":\"(/)([dgimsuvy]*)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.string.end.js\"},\"2\":{\"name\":\"keyword.other.js\"}},\"name\":\"string.regexp.js\",\"patterns\":[{\"include\":\"#regexp\"}]}]},\"regex-character-class\":{\"patterns\":[{\"match\":\"\\\\\\\\[wWsSdDtrnvf]|\\\\.\",\"name\":\"constant.other.character-class.regexp\"},{\"match\":\"\\\\\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})\",\"name\":\"constant.character.numeric.regexp\"},{\"match\":\"\\\\\\\\c[A-Z]\",\"name\":\"constant.character.control.regexp\"},{\"match\":\"\\\\\\\\.\",\"name\":\"constant.character.escape.backslash.regexp\"}]},\"regexp\":{\"patterns\":[{\"match\":\"\\\\\\\\[bB]|\\\\^|\\\\$\",\"name\":\"keyword.control.anchor.regexp\"},{\"captures\":{\"0\":{\"name\":\"keyword.other.back-reference.regexp\"},\"1\":{\"name\":\"variable.other.regexp\"}},\"match\":\"\\\\\\\\[1-9]\\\\d*|\\\\\\\\k<([a-zA-Z_$][\\\\w$]*)>\"},{\"match\":\"[?+*]|\\\\{(\\\\d+,\\\\d+|\\\\d+,|,\\\\d+|\\\\d+)\\\\}\\\\??\",\"name\":\"keyword.operator.quantifier.regexp\"},{\"match\":\"\\\\|\",\"name\":\"keyword.operator.or.regexp\"},{\"begin\":\"(\\\\()((\\\\?=)|(\\\\?!)|(\\\\?<=)|(\\\\?<!))\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.group.regexp\"},\"2\":{\"name\":\"punctuation.definition.group.assertion.regexp\"},\"3\":{\"name\":\"meta.assertion.look-ahead.regexp\"},\"4\":{\"name\":\"meta.assertion.negative-look-ahead.regexp\"},\"5\":{\"name\":\"meta.assertion.look-behind.regexp\"},\"6\":{\"name\":\"meta.assertion.negative-look-behind.regexp\"}},\"end\":\"(\\\\))\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.group.regexp\"}},\"name\":\"meta.group.assertion.regexp\",\"patterns\":[{\"include\":\"#regexp\"}]},{\"begin\":\"\\\\((?:(\\\\?:)|(?:\\\\?<([a-zA-Z_$][\\\\w$]*)>))?\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.group.regexp\"},\"1\":{\"name\":\"punctuation.definition.group.no-capture.regexp\"},\"2\":{\"name\":\"variable.other.regexp\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.group.regexp\"}},\"name\":\"meta.group.regexp\",\"patterns\":[{\"include\":\"#regexp\"}]},{\"begin\":\"(\\\\[)(\\\\^)?\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.character-class.regexp\"},\"2\":{\"name\":\"keyword.operator.negation.regexp\"}},\"end\":\"(\\\\])\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.character-class.regexp\"}},\"name\":\"constant.other.character-class.set.regexp\",\"patterns\":[{\"captures\":{\"1\":{\"name\":\"constant.character.numeric.regexp\"},\"2\":{\"name\":\"constant.character.control.regexp\"},\"3\":{\"name\":\"constant.character.escape.backslash.regexp\"},\"4\":{\"name\":\"constant.character.numeric.regexp\"},\"5\":{\"name\":\"constant.character.control.regexp\"},\"6\":{\"name\":\"constant.character.escape.backslash.regexp\"}},\"match\":\"(?:.|(\\\\\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\\\\\c[A-Z])|(\\\\\\\\.))\\\\-(?:[^\\\\]\\\\\\\\]|(\\\\\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\\\\\c[A-Z])|(\\\\\\\\.))\",\"name\":\"constant.other.character-class.range.regexp\"},{\"include\":\"#regex-character-class\"}]},{\"include\":\"#regex-character-class\"}]},\"return-type\":{\"patterns\":[{\"begin\":\"(?<=\\\\))\\\\s*(:)(?=\\\\s*\\\\S)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?<![:|&])(?=$|^|[{};,]|//)\",\"name\":\"meta.return.type.js\",\"patterns\":[{\"include\":\"#return-type-core\"}]},{\"begin\":\"(?<=\\\\))\\\\s*(:)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?<![:|&])((?=[{};,]|//|^\\\\s*$)|((?<=\\\\S)(?=\\\\s*$)))\",\"name\":\"meta.return.type.js\",\"patterns\":[{\"include\":\"#return-type-core\"}]}]},\"return-type-core\":{\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?<=[:|&])(?=\\\\s*\\\\{)\",\"end\":\"(?<=\\\\})\",\"patterns\":[{\"include\":\"#type-object\"}]},{\"include\":\"#type-predicate-operator\"},{\"include\":\"#type\"}]},\"shebang\":{\"captures\":{\"1\":{\"name\":\"punctuation.definition.comment.js\"}},\"match\":\"\\\\A(#!).*(?=$)\",\"name\":\"comment.line.shebang.js\"},\"single-line-comment-consuming-line-ending\":{\"begin\":\"(^[ \\\\t]+)?((//)(?:\\\\s*((@)internal)(?=\\\\s|$))?)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.whitespace.comment.leading.js\"},\"2\":{\"name\":\"comment.line.double-slash.js\"},\"3\":{\"name\":\"punctuation.definition.comment.js\"},\"4\":{\"name\":\"storage.type.internaldeclaration.js\"},\"5\":{\"name\":\"punctuation.decorator.internaldeclaration.js\"}},\"contentName\":\"comment.line.double-slash.js\",\"end\":\"(?=^)\"},\"statements\":{\"patterns\":[{\"include\":\"#declaration\"},{\"include\":\"#control-statement\"},{\"include\":\"#after-operator-block-as-object-literal\"},{\"include\":\"#decl-block\"},{\"include\":\"#label\"},{\"include\":\"#expression\"},{\"include\":\"#punctuation-semicolon\"},{\"include\":\"#string\"},{\"include\":\"#comment\"}]},\"string\":{\"patterns\":[{\"include\":\"#qstring-single\"},{\"include\":\"#qstring-double\"},{\"include\":\"#template\"}]},\"string-character-escape\":{\"match\":\"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\\\{[0-9A-Fa-f]+\\\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)\",\"name\":\"constant.character.escape.js\"},\"super-literal\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))super\\\\b(?!\\\\$)\",\"name\":\"variable.language.super.js\"},\"support-function-call-identifiers\":{\"patterns\":[{\"include\":\"#literal\"},{\"include\":\"#support-objects\"},{\"include\":\"#object-identifiers\"},{\"include\":\"#punctuation-accessor\"},{\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))import(?=\\\\s*[\\\\(]\\\\s*[\\\\\\\"\\\\'\\\\`]))\",\"name\":\"keyword.operator.expression.import.js\"}]},\"support-objects\":{\"patterns\":[{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(arguments)\\\\b(?!\\\\$)\",\"name\":\"variable.language.arguments.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(Promise)\\\\b(?!\\\\$)\",\"name\":\"support.class.promise.js\"},{\"captures\":{\"1\":{\"name\":\"keyword.control.import.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"},\"4\":{\"name\":\"support.variable.property.importmeta.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(import)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(meta)\\\\b(?!\\\\$)\"},{\"captures\":{\"1\":{\"name\":\"keyword.operator.new.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"},\"4\":{\"name\":\"support.variable.property.target.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(new)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(target)\\\\b(?!\\\\$)\"},{\"captures\":{\"1\":{\"name\":\"punctuation.accessor.js\"},\"2\":{\"name\":\"punctuation.accessor.optional.js\"},\"3\":{\"name\":\"support.variable.property.js\"},\"4\":{\"name\":\"support.constant.js\"}},\"match\":\"(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(?:(?:(constructor|length|prototype|__proto__)\\\\b(?!\\\\$|\\\\s*(<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\())|(?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\\\b(?!\\\\$)))\"},{\"captures\":{\"1\":{\"name\":\"support.type.object.module.js\"},\"2\":{\"name\":\"support.type.object.module.js\"},\"3\":{\"name\":\"punctuation.accessor.js\"},\"4\":{\"name\":\"punctuation.accessor.optional.js\"},\"5\":{\"name\":\"support.type.object.module.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(exports)|(module)(?:(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\\\b(?!\\\\$)\"}]},\"switch-statement\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?=\\\\bswitch\\\\s*\\\\()\",\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"switch-statement.expr.js\",\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(switch)\\\\s*(\\\\()\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.switch.js\"},\"2\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"name\":\"switch-expression.expr.js\",\"patterns\":[{\"include\":\"#expression\"}]},{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"(?=\\\\})\",\"name\":\"switch-block.expr.js\",\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.switch.js\"}},\"end\":\"(?=:)\",\"name\":\"case-clause.expr.js\",\"patterns\":[{\"include\":\"#expression\"}]},{\"begin\":\"(:)\\\\s*(\\\\{)\",\"beginCaptures\":{\"1\":{\"name\":\"case-clause.expr.js punctuation.definition.section.case-statement.js\"},\"2\":{\"name\":\"meta.block.js punctuation.definition.block.js\"}},\"contentName\":\"meta.block.js\",\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"meta.block.js punctuation.definition.block.js\"}},\"patterns\":[{\"include\":\"#statements\"}]},{\"captures\":{\"0\":{\"name\":\"case-clause.expr.js punctuation.definition.section.case-statement.js\"}},\"match\":\"(:)\"},{\"include\":\"#statements\"}]}]},\"template\":{\"patterns\":[{\"include\":\"#template-call\"},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)?(`)\",\"beginCaptures\":{\"1\":{\"name\":\"entity.name.function.tagged-template.js\"},\"2\":{\"name\":\"string.template.js punctuation.definition.string.template.begin.js\"}},\"contentName\":\"string.template.js\",\"end\":\"`\",\"endCaptures\":{\"0\":{\"name\":\"string.template.js punctuation.definition.string.template.end.js\"}},\"patterns\":[{\"include\":\"#template-substitution-element\"},{\"include\":\"#string-character-escape\"}]}]},\"template-call\":{\"patterns\":[{\"begin\":\"(?=(([_$[:alpha:]][_$[:alnum:]]*\\\\s*\\\\??\\\\.\\\\s*)*|(\\\\??\\\\.\\\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)?`)\",\"end\":\"(?=`)\",\"patterns\":[{\"begin\":\"(?=(([_$[:alpha:]][_$[:alnum:]]*\\\\s*\\\\??\\\\.\\\\s*)*|(\\\\??\\\\.\\\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))\",\"end\":\"(?=(<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)?`)\",\"patterns\":[{\"include\":\"#support-function-call-identifiers\"},{\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"name\":\"entity.name.function.tagged-template.js\"}]},{\"include\":\"#type-arguments\"}]},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)?\\\\s*(?=(<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))(([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>|\\\\<\\\\s*(((keyof|infer|typeof|readonly)\\\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))(?=\\\\s*([\\\\<\\\\>\\\\,\\\\.\\\\[]|=>|&(?!&)|\\\\|(?!\\\\|)))))([^<>\\\\(]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(?<==)\\\\>)*(?<!=)\\\\>))*(?<!=)\\\\>)*(?<!=)>\\\\s*)`)\",\"beginCaptures\":{\"1\":{\"name\":\"entity.name.function.tagged-template.js\"}},\"end\":\"(?=`)\",\"patterns\":[{\"include\":\"#type-arguments\"}]}]},\"template-substitution-element\":{\"begin\":\"\\\\$\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.template-expression.begin.js\"}},\"contentName\":\"meta.embedded.line.js\",\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.template-expression.end.js\"}},\"name\":\"meta.template.expression.js\",\"patterns\":[{\"include\":\"#expression\"}]},\"template-type\":{\"patterns\":[{\"include\":\"#template-call\"},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)?(`)\",\"beginCaptures\":{\"1\":{\"name\":\"entity.name.function.tagged-template.js\"},\"2\":{\"name\":\"string.template.js punctuation.definition.string.template.begin.js\"}},\"contentName\":\"string.template.js\",\"end\":\"`\",\"endCaptures\":{\"0\":{\"name\":\"string.template.js punctuation.definition.string.template.end.js\"}},\"patterns\":[{\"include\":\"#template-type-substitution-element\"},{\"include\":\"#string-character-escape\"}]}]},\"template-type-substitution-element\":{\"begin\":\"\\\\$\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.template-expression.begin.js\"}},\"contentName\":\"meta.embedded.line.js\",\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.template-expression.end.js\"}},\"name\":\"meta.template.expression.js\",\"patterns\":[{\"include\":\"#type\"}]},\"ternary-expression\":{\"begin\":\"(?!\\\\?\\\\.\\\\s*[^[:digit:]])(\\\\?)(?!\\\\?)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.ternary.js\"}},\"end\":\"\\\\s*(:)\",\"endCaptures\":{\"1\":{\"name\":\"keyword.operator.ternary.js\"}},\"patterns\":[{\"include\":\"#expression\"}]},\"this-literal\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))this\\\\b(?!\\\\$)\",\"name\":\"variable.language.this.js\"},\"type\":{\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-string\"},{\"include\":\"#numeric-literal\"},{\"include\":\"#type-primitive\"},{\"include\":\"#type-builtin-literals\"},{\"include\":\"#type-parameters\"},{\"include\":\"#type-tuple\"},{\"include\":\"#type-object\"},{\"include\":\"#type-operators\"},{\"include\":\"#type-conditional\"},{\"include\":\"#type-fn-type-parameters\"},{\"include\":\"#type-paren-or-function-parameters\"},{\"include\":\"#type-function-return-type\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*\"},{\"include\":\"#type-name\"}]},\"type-alias-declaration\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(type)\\\\b\\\\s+([_$[:alpha:]][_$[:alnum:]]*)\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.type.js\"},\"4\":{\"name\":\"entity.name.type.alias.js\"}},\"end\":\"(?=\\\\}|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"name\":\"meta.type.declaration.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-parameters\"},{\"begin\":\"(=)\\\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.assignment.js\"},\"2\":{\"name\":\"keyword.control.intrinsic.js\"}},\"end\":\"(?=\\\\}|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"patterns\":[{\"include\":\"#type\"}]},{\"begin\":\"(=)\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.assignment.js\"}},\"end\":\"(?=\\\\}|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"patterns\":[{\"include\":\"#type\"}]}]},\"type-annotation\":{\"patterns\":[{\"begin\":\"(:)(?=\\\\s*\\\\S)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?<![:|&])(?!\\\\s*[|&]\\\\s+)((?=^|[,);\\\\}\\\\]]|//)|(?==[^>])|((?<=[\\\\}>\\\\]\\\\)]|[_$[:alpha:]])\\\\s*(?=\\\\{)))\",\"name\":\"meta.type.annotation.js\",\"patterns\":[{\"include\":\"#type\"}]},{\"begin\":\"(:)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.type.annotation.js\"}},\"end\":\"(?<![:|&])((?=[,);\\\\}\\\\]]|\\\\/\\\\/)|(?==[^>])|(?=^\\\\s*$)|((?<=[\\\\}>\\\\]\\\\)]|[_$[:alpha:]])\\\\s*(?=\\\\{)))\",\"name\":\"meta.type.annotation.js\",\"patterns\":[{\"include\":\"#type\"}]}]},\"type-arguments\":{\"begin\":\"\\\\<\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.typeparameters.begin.js\"}},\"end\":\"\\\\>\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.typeparameters.end.js\"}},\"name\":\"meta.type.parameters.js\",\"patterns\":[{\"include\":\"#type-arguments-body\"}]},\"type-arguments-body\":{\"patterns\":[{\"captures\":{\"0\":{\"name\":\"keyword.operator.type.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(_)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\"},{\"include\":\"#type\"},{\"include\":\"#punctuation-comma\"}]},\"type-builtin-literals\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"support.type.builtin.js\"},\"type-conditional\":{\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(extends)\\\\s+\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"}},\"end\":\"(?<=:)\",\"patterns\":[{\"begin\":\"\\\\?\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.ternary.js\"}},\"end\":\":\",\"endCaptures\":{\"0\":{\"name\":\"keyword.operator.ternary.js\"}},\"patterns\":[{\"include\":\"#type\"}]},{\"include\":\"#type\"}]}]},\"type-fn-type-parameters\":{\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(abstract)\\\\s+)?(new)\\\\b(?=\\\\s*\\\\<)\",\"beginCaptures\":{\"1\":{\"name\":\"meta.type.constructor.js storage.modifier.js\"},\"2\":{\"name\":\"meta.type.constructor.js keyword.control.new.js\"}},\"end\":\"(?<=>)\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#type-parameters\"}]},{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(abstract)\\\\s+)?(new)\\\\b\\\\s*(?=\\\\()\",\"beginCaptures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.control.new.js\"}},\"end\":\"(?<=\\\\))\",\"name\":\"meta.type.constructor.js\",\"patterns\":[{\"include\":\"#function-parameters\"}]},{\"begin\":\"((?=[(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>))))))\",\"end\":\"(?<=\\\\))\",\"name\":\"meta.type.function.js\",\"patterns\":[{\"include\":\"#function-parameters\"}]}]},\"type-function-return-type\":{\"patterns\":[{\"begin\":\"(=>)(?=\\\\s*\\\\S)\",\"beginCaptures\":{\"1\":{\"name\":\"storage.type.function.arrow.js\"}},\"end\":\"(?<!=>)(?<![|&])(?=[,\\\\]\\\\)\\\\{\\\\}=;>:\\\\?]|//|$)\",\"name\":\"meta.type.function.return.js\",\"patterns\":[{\"include\":\"#type-function-return-type-core\"}]},{\"begin\":\"=>\",\"beginCaptures\":{\"0\":{\"name\":\"storage.type.function.arrow.js\"}},\"end\":\"(?<!=>)(?<![|&])((?=[,\\\\]\\\\)\\\\{\\\\}=;:\\\\?>]|//|^\\\\s*$)|((?<=\\\\S)(?=\\\\s*$)))\",\"name\":\"meta.type.function.return.js\",\"patterns\":[{\"include\":\"#type-function-return-type-core\"}]}]},\"type-function-return-type-core\":{\"patterns\":[{\"include\":\"#comment\"},{\"begin\":\"(?<==>)(?=\\\\s*\\\\{)\",\"end\":\"(?<=\\\\})\",\"patterns\":[{\"include\":\"#type-object\"}]},{\"include\":\"#type-predicate-operator\"},{\"include\":\"#type\"}]},\"type-infer\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"keyword.operator.expression.infer.js\"},\"2\":{\"name\":\"entity.name.type.js\"},\"3\":{\"name\":\"keyword.operator.expression.extends.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(infer)\\\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))(?:\\\\s+(extends)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))?\",\"name\":\"meta.type.infer.js\"}]},\"type-name\":{\"patterns\":[{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\\\\s*(<)\",\"captures\":{\"1\":{\"name\":\"entity.name.type.module.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"},\"4\":{\"name\":\"meta.type.parameters.js punctuation.definition.typeparameters.begin.js\"}},\"contentName\":\"meta.type.parameters.js\",\"end\":\"(>)\",\"endCaptures\":{\"1\":{\"name\":\"meta.type.parameters.js punctuation.definition.typeparameters.end.js\"}},\"patterns\":[{\"include\":\"#type-arguments-body\"}]},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(<)\",\"beginCaptures\":{\"1\":{\"name\":\"entity.name.type.js\"},\"2\":{\"name\":\"meta.type.parameters.js punctuation.definition.typeparameters.begin.js\"}},\"contentName\":\"meta.type.parameters.js\",\"end\":\"(>)\",\"endCaptures\":{\"1\":{\"name\":\"meta.type.parameters.js punctuation.definition.typeparameters.end.js\"}},\"patterns\":[{\"include\":\"#type-arguments-body\"}]},{\"captures\":{\"1\":{\"name\":\"entity.name.type.module.js\"},\"2\":{\"name\":\"punctuation.accessor.js\"},\"3\":{\"name\":\"punctuation.accessor.optional.js\"}},\"match\":\"([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(?:(\\\\.)|(\\\\?\\\\.(?!\\\\s*[[:digit:]])))\"},{\"match\":\"[_$[:alpha:]][_$[:alnum:]]*\",\"name\":\"entity.name.type.js\"}]},\"type-object\":{\"begin\":\"\\\\{\",\"beginCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"end\":\"\\\\}\",\"endCaptures\":{\"0\":{\"name\":\"punctuation.definition.block.js\"}},\"name\":\"meta.object.type.js\",\"patterns\":[{\"include\":\"#comment\"},{\"include\":\"#method-declaration\"},{\"include\":\"#indexer-declaration\"},{\"include\":\"#indexer-mapped-type-declaration\"},{\"include\":\"#field-declaration\"},{\"include\":\"#type-annotation\"},{\"begin\":\"\\\\.\\\\.\\\\.\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.spread.js\"}},\"end\":\"(?=\\\\}|;|,|$)|(?<=\\\\})\",\"patterns\":[{\"include\":\"#type\"}]},{\"include\":\"#punctuation-comma\"},{\"include\":\"#punctuation-semicolon\"},{\"include\":\"#type\"}]},\"type-operators\":{\"patterns\":[{\"include\":\"#typeof-operator\"},{\"include\":\"#type-infer\"},{\"begin\":\"([&|])(?=\\\\s*\\\\{)\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.type.js\"}},\"end\":\"(?<=\\\\})\",\"patterns\":[{\"include\":\"#type-object\"}]},{\"begin\":\"[&|]\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.type.js\"}},\"end\":\"(?=\\\\S)\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))keyof(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.expression.keyof.js\"},{\"match\":\"(\\\\?|\\\\:)\",\"name\":\"keyword.operator.ternary.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))import(?=\\\\s*\\\\()\",\"name\":\"keyword.operator.expression.import.js\"}]},\"type-parameters\":{\"begin\":\"(<)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.definition.typeparameters.begin.js\"}},\"end\":\"(>)\",\"endCaptures\":{\"1\":{\"name\":\"punctuation.definition.typeparameters.end.js\"}},\"name\":\"meta.type.parameters.js\",\"patterns\":[{\"include\":\"#comment\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"storage.modifier.js\"},{\"include\":\"#type\"},{\"include\":\"#punctuation-comma\"},{\"match\":\"(=)(?!>)\",\"name\":\"keyword.operator.assignment.js\"}]},\"type-paren-or-function-parameters\":{\"begin\":\"\\\\(\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"end\":\"\\\\)\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.round.js\"}},\"name\":\"meta.type.paren.cover.js\",\"patterns\":[{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"entity.name.function.js variable.language.this.js\"},\"4\":{\"name\":\"entity.name.function.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\\\s*(\\\\??)(?=\\\\s*(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))))\"},{\"captures\":{\"1\":{\"name\":\"storage.modifier.js\"},\"2\":{\"name\":\"keyword.operator.rest.js\"},\"3\":{\"name\":\"variable.parameter.js variable.language.this.js\"},\"4\":{\"name\":\"variable.parameter.js\"},\"5\":{\"name\":\"keyword.operator.optional.js\"}},\"match\":\"(?:(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(public|private|protected|readonly)\\\\s+)?(?:(\\\\.\\\\.\\\\.)\\\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\\\s*(\\\\??)(?=:)\"},{\"include\":\"#type-annotation\"},{\"match\":\",\",\"name\":\"punctuation.separator.parameter.js\"},{\"include\":\"#type\"}]},\"type-predicate-operator\":{\"patterns\":[{\"captures\":{\"1\":{\"name\":\"keyword.operator.type.asserts.js\"},\"2\":{\"name\":\"variable.parameter.js variable.language.this.js\"},\"3\":{\"name\":\"variable.parameter.js\"},\"4\":{\"name\":\"keyword.operator.expression.is.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(asserts)\\\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\\\s(is)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\"},{\"captures\":{\"1\":{\"name\":\"keyword.operator.type.asserts.js\"},\"2\":{\"name\":\"variable.parameter.js variable.language.this.js\"},\"3\":{\"name\":\"variable.parameter.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(asserts)\\\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))asserts(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.type.asserts.js\"},{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))is(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"keyword.operator.expression.is.js\"}]},\"type-primitive\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"support.type.primitive.js\"},\"type-string\":{\"patterns\":[{\"include\":\"#qstring-single\"},{\"include\":\"#qstring-double\"},{\"include\":\"#template-type\"}]},\"type-tuple\":{\"begin\":\"\\\\[\",\"beginCaptures\":{\"0\":{\"name\":\"meta.brace.square.js\"}},\"end\":\"\\\\]\",\"endCaptures\":{\"0\":{\"name\":\"meta.brace.square.js\"}},\"name\":\"meta.type.tuple.js\",\"patterns\":[{\"match\":\"\\\\.\\\\.\\\\.\",\"name\":\"keyword.operator.rest.js\"},{\"captures\":{\"1\":{\"name\":\"entity.name.label.js\"},\"2\":{\"name\":\"keyword.operator.optional.js\"},\"3\":{\"name\":\"punctuation.separator.label.js\"}},\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))([_$[:alpha:]][_$[:alnum:]]*)\\\\s*(\\\\?)?\\\\s*(:)\"},{\"include\":\"#type\"},{\"include\":\"#punctuation-comma\"}]},\"typeof-operator\":{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))typeof(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"beginCaptures\":{\"0\":{\"name\":\"keyword.operator.expression.typeof.js\"}},\"end\":\"(?=[,);}\\\\]=>:&|{\\\\?]|(extends\\\\s+)|$|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))\",\"patterns\":[{\"include\":\"#type-arguments\"},{\"include\":\"#expression\"}]},\"undefined-literal\":{\"match\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))undefined(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\",\"name\":\"constant.language.undefined.js\"},\"var-expr\":{\"patterns\":[{\"begin\":\"(?=(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(var|let)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))\",\"end\":\"(?!(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(var|let)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))|((?<!^let|[^\\\\._$[:alnum:]]let|^var|[^\\\\._$[:alnum:]]var)(?=\\\\s*$)))\",\"name\":\"meta.var.expr.js\",\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(var|let)(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.js\"}},\"end\":\"(?=\\\\S)\"},{\"include\":\"#destructuring-variable\"},{\"include\":\"#var-single-variable\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#comment\"},{\"begin\":\"(,)\\\\s*(?=$|\\\\/\\\\/)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.separator.comma.js\"}},\"end\":\"(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|^\\\\s*$))|((?<=\\\\S)(?=\\\\s*$)))\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#comment\"},{\"include\":\"#destructuring-variable\"},{\"include\":\"#var-single-variable\"},{\"include\":\"#punctuation-comma\"}]},{\"include\":\"#punctuation-comma\"}]},{\"begin\":\"(?=(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(const(?!\\\\s+enum\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.js\"}},\"end\":\"(?!(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(const(?!\\\\s+enum\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))|((?<!^const|[^\\\\._$[:alnum:]]const)(?=\\\\s*$)))\",\"name\":\"meta.var.expr.js\",\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b(const(?!\\\\s+enum\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.js\"}},\"end\":\"(?=\\\\S)\"},{\"include\":\"#destructuring-const\"},{\"include\":\"#var-single-const\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#comment\"},{\"begin\":\"(,)\\\\s*(?=$|\\\\/\\\\/)\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.separator.comma.js\"}},\"end\":\"(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|^\\\\s*$))|((?<=\\\\S)(?=\\\\s*$)))\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#comment\"},{\"include\":\"#destructuring-const\"},{\"include\":\"#var-single-const\"},{\"include\":\"#punctuation-comma\"}]},{\"include\":\"#punctuation-comma\"}]},{\"begin\":\"(?=(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b((?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.js\"}},\"end\":\"(?!(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b((?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b))|((?<!^using|[^\\\\._$[:alnum:]]using|^await\\\\s+using|[^\\\\._$[:alnum:]]await\\\\s+using)(?=\\\\s*$)))\",\"name\":\"meta.var.expr.js\",\"patterns\":[{\"begin\":\"(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(?:(\\\\bexport)\\\\s+)?(?:(\\\\bdeclare)\\\\s+)?\\\\b((?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b))(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.))\\\\s*\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.control.export.js\"},\"2\":{\"name\":\"storage.modifier.js\"},\"3\":{\"name\":\"storage.type.js\"}},\"end\":\"(?=\\\\S)\"},{\"include\":\"#var-single-const\"},{\"include\":\"#variable-initializer\"},{\"include\":\"#comment\"},{\"begin\":\"(,)\\\\s*((?!\\\\S)|(?=\\\\/\\\\/))\",\"beginCaptures\":{\"1\":{\"name\":\"punctuation.separator.comma.js\"}},\"end\":\"(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|^\\\\s*$))|((?<=\\\\S)(?=\\\\s*$)))\",\"patterns\":[{\"include\":\"#single-line-comment-consuming-line-ending\"},{\"include\":\"#comment\"},{\"include\":\"#var-single-const\"},{\"include\":\"#punctuation-comma\"}]},{\"include\":\"#punctuation-comma\"}]}]},\"var-single-const\":{\"patterns\":[{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)(?=\\\\s*(=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))|(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))))|(:\\\\s*(=>|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(<[^<>]*>)|[^<>(),=])+=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\",\"beginCaptures\":{\"1\":{\"name\":\"meta.definition.variable.js variable.other.constant.js entity.name.function.js\"}},\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|(;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"name\":\"meta.var-single-variable.expr.js\",\"patterns\":[{\"include\":\"#var-single-variable-type-annotation\"}]},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)\",\"beginCaptures\":{\"1\":{\"name\":\"meta.definition.variable.js variable.other.constant.js\"}},\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|(;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"name\":\"meta.var-single-variable.expr.js\",\"patterns\":[{\"include\":\"#var-single-variable-type-annotation\"}]}]},\"var-single-variable\":{\"patterns\":[{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)(\\\\!)?(?=\\\\s*(=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>)))))|(:\\\\s*((<)|([(]\\\\s*(([)])|(\\\\.\\\\.\\\\.)|([_$[:alnum:]]+\\\\s*(([:,?=])|([)]\\\\s*=>)))))))|(:\\\\s*(?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))Function(?![_$[:alnum:]])(?:(?=\\\\.\\\\.\\\\.)|(?!\\\\.)))|(:\\\\s*((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))))))|(:\\\\s*(=>|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(<[^<>]*>)|[^<>(),=])+=\\\\s*(((async\\\\s+)?((function\\\\s*[(<*])|(function\\\\s+)|([_$[:alpha:]][_$[:alnum:]]*\\\\s*=>)))|((async\\\\s*)?(((<\\\\s*$)|([\\\\(]\\\\s*((([\\\\{\\\\[]\\\\s*)?$)|((\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})\\\\s*((:\\\\s*\\\\{?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*)))|((\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])\\\\s*((:\\\\s*\\\\[?$)|((\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+\\\\s*)?=\\\\s*))))))|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?[(]\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([)]\\\\s*:)|((\\\\.\\\\.\\\\.\\\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\\\s*:)))|([<]\\\\s*[_$[:alpha:]][_$[:alnum:]]*\\\\s+extends\\\\s*[^=>])|((<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<]|\\\\<\\\\s*(((const\\\\s+)?[_$[:alpha:]])|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\]))([^=<>]|=[^<])*\\\\>)*\\\\>)*>\\\\s*)?\\\\(\\\\s*(\\\\/\\\\*([^\\\\*]|(\\\\*[^\\\\/]))*\\\\*\\\\/\\\\s*)*(([_$[:alpha:]]|(\\\\{([^\\\\{\\\\}]|(\\\\{([^\\\\{\\\\}]|\\\\{[^\\\\{\\\\}]*\\\\})*\\\\}))*\\\\})|(\\\\[([^\\\\[\\\\]]|(\\\\[([^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\]))*\\\\])|(\\\\.\\\\.\\\\.\\\\s*[_$[:alpha:]]))([^()\\\\'\\\\\\\"\\\\`]|(\\\\(([^\\\\(\\\\)]|(\\\\(([^\\\\(\\\\)]|\\\\([^\\\\(\\\\)]*\\\\))*\\\\)))*\\\\))|(\\\\'([^\\\\'\\\\\\\\]|\\\\\\\\.)*\\\\')|(\\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\")|(\\\\`([^\\\\`\\\\\\\\]|\\\\\\\\.)*\\\\`))*)?\\\\)(\\\\s*:\\\\s*([^<>\\\\(\\\\)\\\\{\\\\}]|\\\\<([^<>]|\\\\<([^<>]|\\\\<[^<>]+\\\\>)+\\\\>)+\\\\>|\\\\([^\\\\(\\\\)]+\\\\)|\\\\{[^\\\\{\\\\}]+\\\\})+)?\\\\s*=>))))))\",\"beginCaptures\":{\"1\":{\"name\":\"meta.definition.variable.js entity.name.function.js\"},\"2\":{\"name\":\"keyword.operator.definiteassignment.js\"}},\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|(;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"name\":\"meta.var-single-variable.expr.js\",\"patterns\":[{\"include\":\"#var-single-variable-type-annotation\"}]},{\"begin\":\"([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\\\!)?\",\"beginCaptures\":{\"1\":{\"name\":\"meta.definition.variable.js variable.other.constant.js\"},\"2\":{\"name\":\"keyword.operator.definiteassignment.js\"}},\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|(;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"name\":\"meta.var-single-variable.expr.js\",\"patterns\":[{\"include\":\"#var-single-variable-type-annotation\"}]},{\"begin\":\"([_$[:alpha:]][_$[:alnum:]]*)(\\\\!)?\",\"beginCaptures\":{\"1\":{\"name\":\"meta.definition.variable.js variable.other.readwrite.js\"},\"2\":{\"name\":\"keyword.operator.definiteassignment.js\"}},\"end\":\"(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+)|(;|^\\\\s*$|(?:^\\\\s*(?:abstract|async|(?:\\\\bawait\\\\s+(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)\\\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\\\busing(?=\\\\s+(?!in\\\\b|of\\\\b(?!\\\\s*(?:of\\\\b|=)))[_$[:alpha:]])\\\\b)|var|while)\\\\b)))\",\"name\":\"meta.var-single-variable.expr.js\",\"patterns\":[{\"include\":\"#var-single-variable-type-annotation\"}]}]},\"var-single-variable-type-annotation\":{\"patterns\":[{\"include\":\"#type-annotation\"},{\"include\":\"#string\"},{\"include\":\"#comment\"}]},\"variable-initializer\":{\"patterns\":[{\"begin\":\"(?<!=|!)(=)(?!=)(?=\\\\s*\\\\S)(?!\\\\s*.*=>\\\\s*$)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.assignment.js\"}},\"end\":\"(?=$|^|[,);}\\\\]]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))\",\"patterns\":[{\"include\":\"#expression\"}]},{\"begin\":\"(?<!=|!)(=)(?!=)\",\"beginCaptures\":{\"1\":{\"name\":\"keyword.operator.assignment.js\"}},\"end\":\"(?=[,);}\\\\]]|((?<![_$[:alnum:]])(?:(?<=\\\\.\\\\.\\\\.)|(?<!\\\\.))(of|in)\\\\s+))|(?=^\\\\s*$)|(?<![\\\\|\\\\&\\\\+\\\\-\\\\*\\\\/])(?<=\\\\S)(?<!=)(?=\\\\s*$)\",\"patterns\":[{\"include\":\"#expression\"}]}]}},\"scopeName\":\"source.js\",\"aliases\":[\"js\"]}"));

  var javascript$1 = [
  lang
  ];

  var javascript = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: javascript$1
  });

  exports.createEditorState = createEditorState;
  exports.createEditorView = createEditorView;

  return exports;

})({});
