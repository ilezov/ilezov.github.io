{
  "!name": "component",
  "!define": {
    "Radio": {
      "name": "string",
      "value": "?",
      "isChecked": "bool",
      "render": { "!type": "fn() -> undefined" }
    },
    "Rect": {
      "top": "number",
      "left": "number",
      "width": "number",
      "height": "number"
    },
    "TimerConfig": {
      "autostart": "string",
      "interval": "number",
      "delay": "number"
    },
    "EffectOptions": {
      "visible": "bool",
      "repeat": "string",
      "speed": "string",
      "clone": "string",
      "level": "number",
      "style": "Object"
    },
    "Timer": {
      
      "isStarted": { "!type": "fn() -> bool" },
      "start": { "!type": "fn(withDelay?: bool) -> undefined" },
      "stop": { "!type": "fn() -> undefined" }
    },
    "Control": {
      "!doc": "Base class for UI controls rendered inside an Instance.",
        "instance": "?",
        "path": "string",
        "nicePath": "string",
        "pathArray": "[string]",
        "parentControl": "?",
        "childrenControls": "Object.<string, +Control>",
        "el": "?",
        "parentElement": "?",  
        "options": "Object",
        "isChecked": "bool",
        "text": "?",
        "url": "string",
        "readOnly": "bool",
        "disabled": "bool",
        "visible": "bool",
        "viewMode": "string",
        "blur": "bool",
        "masked": "bool",
        "name": "string",
        "greyscale": "bool",
        "draggable": "bool",
        "draggableGrip": "bool",
        
        "isLayoutMode": "bool",
        "isDesignMode": "bool",
        "suspend": "bool",
        "designMode": "bool",
        "value": "?",
        "anchor": "?",
        "effect": "EffectOptions",
        "effectVisible": "bool",
        "effectLevel": "number",
        "args": "Object",
        "tooltip": "+Control",
        "frameStyle": "Object.<string, string>",
        "applyStyle": {
          "!type": "fn() -> undefined"
        },
        "clearStyle": {
          "!type": "fn() -> undefined"
        },
        "addClass": {
          "!type": "fn(className: string) -> undefined"
        },
        "getStyle": {
          "!type": "fn(prop: string) -> string|number|undefined"
        },
        "setStyle": {
          "!type": "fn(prop: string, val: string|number|undefined) -> undefined"
        },
        "getOption": {
          "!type": "fn(path: string|[string], defaultValue?: ?) -> ?"
        },
        "setOption": {
          "!type": "fn(path: string|[string], value: ?) -> ?"
        },
        "whenToInit": {
          "!type": "fn() -> undefined"
        },
        "reset": {
          "!type": "fn() -> undefined"
        },
        "show": {
          "!type": "fn() -> undefined"
        },
        "hide": {
          "!type": "fn() -> undefined"
        },
        "enable": {
          "!type": "fn() -> undefined"
        },
        "disable": {
          "!type": "fn() -> undefined"
        },
        "onReady": {
          "!type": "fn() -> undefined"
        },
        "onDragStart": {
          "!type": "fn(e: ?) -> undefined"
        },
        "onDragEnd": {
          "!type": "fn(e: ?) -> undefined"
        },
        "onDragMove": {
          "!type": "fn(e: ?) -> undefined"
        },
        "onDragCancel": {
          "!type": "fn(e: ?) -> undefined"
        },
        "onContextMenu": {
          "!type": "fn(e: ?) -> undefined"
        },
        "onContextMenuClose": {
          "!type": "fn(e: ?) -> undefined"
        },
        "updateEffect": {
          "!type": "fn(effect?: EffectOptions, reset?: bool) -> undefined"
        },
        "showEffect": {
          "!type": "fn(effect?: EffectOptions) -> undefined"
        },
        "hideEffect": {
          "!type": "fn() -> undefined"
        },
        "setDataSourceParameterValue": {
          "!type": "fn(name: string, value?: ?) -> Object"
        },
        "updateDataSourceParameter": {
          "!type": "fn(force?: bool) -> Object|undefined"
        },
        "refresh": {
          "!type": "fn() -> ?"
        },
        "render": {
          "!type": "fn() -> ?"
        },
        "on": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "once": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "off": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "addTrigger": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "addOneTimeTrigger": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "removeTrigger": {
          "!type": "fn(event: string, handler: fn()) -> undefined"
        },
        "fire": {
          "!type": "fn(event?: string, ...args: [?]) -> undefined"
        },
        "raiseEvent": {
          "!type": "fn(event: string, ...args: [?]) -> undefined"
        },
        "getEventPosition": {
          "!type": "fn(ev: ?) -> Rect"
        },
        "getAbsoluteRect": {
          "!type": "fn() -> Rect"
        },
        "applyGenericOptions": {
          "!type": "fn() -> undefined"
        },
        "doResetReload": {
          "!type": "fn() -> undefined"
        },
        "addApi": {
          "!type": "fn(host: +Control, name: string, getDefault: fn() -> ?, options?: Object) -> undefined"
        },
        "isDestroyed": "bool",
        "destroy": {
          "!type": "fn() -> undefined"
        }
    },
    "Component": {
      "!doc": "Runtime instance API for a chart/control wrapper.",
      "frozenOptions": "[?]",
      "radioGroups": "Object.<string, [Radio]>",
      "calloutGroups": "Object",
      "innerEl": "?",
      "destroyed": "bool",
      "args": "?",
      "log": { "!type": "fn(...args: [?]) -> undefined" },
      "name": "string",
      "originalOptions": "?",
      "datasources": "?",
      "bindings": "?",
      "hasExtBinding": "bool",
      "links": "?",
      "events": "?",
      "publicEvents": "[string]",
      "chart": "EChartsInstance",
      "suspended": "bool",
      "extData": "Object.<string, Object.<string, ?>>",
      "pollDataTimers": "Object",
      "app": "?",
      "timer": "Timer",

      "getGroupSelectedValue": { "!type": "fn(group: string) -> ?" },
      "getGroupSelectedName":  { "!type": "fn(group: string) -> string" },

      "setGroupSelectedValue": { "!type": "fn(group: string, value: ?, render?: bool) -> undefined" },
      "setGroupSelectedName":  { "!type": "fn(group: string, name: string, render?: bool) -> undefined" },

      "getRect": { "!type": "fn() -> {width: number, height: number}" },

      "getOption": { "!type": "fn(path: string|[string], defaultValue?: ?) -> ?" },
      "hasOption": { "!type": "fn(path: string|[string]) -> bool" },
      "setOption": { "!type": "fn(path: string|[string], value: ?) -> undefined" },
      "setOptions": { "!type": "fn(value: ?) -> undefined" },
      "resetOptions": { "!type": "fn() -> undefined" },

      "resetControls": { "!type": "fn(controlNames?: [string]) -> undefined" },

      "getVariable": { "!type": "fn(path: string, defaultValue?: ?) -> ?" },
      "setVariable": { "!type": "fn(path: string, value: ?) -> undefined" },
      "setVariables": { "!type": "fn(value: Object) -> undefined" },
      "resetVariables": { "!type": "fn() -> undefined" },
      "patchOptions": "?",
      "controls": "[?]",
      "getControl": {
        "!type": "fn(name: string) -> Control",
        "prototype": {
          "instance": "?",
          "path": "string",
          "nicePath": "string",
          "pathArray": "[string]",
          "parentControl": "?",
          "childrenControls": "Object.<string, +Control>",
          "el": "?",
          "parentElement": "?",
          "options": "Object",
          "isChecked": "bool",
          "text": "?",
          "url": "string",
          "readOnly": "bool",
          "disabled": "bool",
          "visible": "bool",
          "viewMode": "string",
          "blur": "bool",
          "masked": "bool",
          "name": "string",
          "greyscale": "bool",
          "draggable": "bool",
          "draggableGrip": "bool",
          
          "isLayoutMode": "bool",
          "isDesignMode": "bool",
          "suspend": "bool",
          "designMode": "bool",
          "value": "?",
          "anchor": "?",
          "effect": "EffectOptions",
          "effectVisible": "bool",
          "effectLevel": "number",
          "args": "Object",
          "tooltip": "+Control",
          "frameStyle": "Object.<string, string>",
          "applyStyle": {
            "!type": "fn() -> undefined"
          },
          "clearStyle": {
            "!type": "fn() -> undefined"
          },
          "addClass": {
            "!type": "fn(className: string) -> undefined"
          },
          "getStyle": {
            "!type": "fn(prop: string) -> string|number|undefined"
          },
          "setStyle": {
            "!type": "fn(prop: string, val: string|number|undefined) -> undefined"
          },
          "getOption": {
            "!type": "fn(path: string|[string], defaultValue?: ?) -> ?"
          },
          "setOption": {
            "!type": "fn(path: string|[string], value: ?) -> ?"
          },
          "whenToInit": {
            "!type": "fn() -> undefined"
          },
          "reset": {
            "!type": "fn() -> undefined"
          },
          "show": {
            "!type": "fn() -> undefined"
          },
          "hide": {
            "!type": "fn() -> undefined"
          },
          "enable": {
            "!type": "fn() -> undefined"
          },
          "disable": {
            "!type": "fn() -> undefined"
          },
         
          "updateEffect": {
            "!type": "fn(effect?: EffectOptions, reset?: bool) -> undefined"
          },
          "showEffect": {
            "!type": "fn(effect?: EffectOptions) -> undefined"
          },
          "hideEffect": {
            "!type": "fn() -> undefined"
          },
          "setDataSourceParameterValue": {
            "!type": "fn(name: string, value?: ?) -> Object"
          },
          "updateDataSourceParameter": {
            "!type": "fn(force?: bool) -> Object|undefined"
          },
          "refresh": {
            "!type": "fn() -> ?"
          },
          "render": {
            "!type": "fn() -> ?"
          },
          "on": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "once": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "off": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "addTrigger": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "addOneTimeTrigger": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "removeTrigger": {
            "!type": "fn(event: string, handler: fn()) -> undefined"
          },
          "fire": {
            "!type": "fn(event?: string, ...args: [?]) -> undefined"
          },
          "raiseEvent": {
            "!type": "fn(event: string, ...args: [?]) -> undefined"
          },
          "getEventPosition": {
            "!type": "fn(ev: ?) -> Rect"
          },
          "getAbsoluteRect": {
            "!type": "fn() -> Rect"
          },
          "applyGenericOptions": {
            "!type": "fn() -> undefined"
          },
          "doResetReload": {
            "!type": "fn() -> undefined"
          },
          
          "isDestroyed": "bool",
          "destroy": {
            "!type": "fn() -> undefined"
          }
        }
      },
      "getIcon": { "!type": "fn(name: string) -> string" },

      "datasourceParameters": "Object.<string, ?>",
      "updateDatasourceParameters": { "!type": "fn() -> undefined" },

      
      "destroy": { "!type": "fn() -> +Promise" },
      "recreateInstance": { "!type": "fn() -> +Promise" },

      

      "reload": { "!type": "fn(datasourceParameters?: ?) -> +Promise" },
      "startPollingData": { "!type": "fn(datasourceParameters?: ?, callback: fn(?), period?: number, max?: number) -> ?" },
      "stopPollingData": { "!type": "fn(timer: ?) -> undefined" },
      "fetchData": { "!type": "fn(datasourceParameters?: ?) -> +Promise" },

      "refresh": { "!type": "fn() -> +Promise" },
      "render":  { "!type": "fn() -> undefined" },

      "isDataOffline": { "!type": "fn(nameOrIndex?: string|number) -> bool" },
      "resetData": { "!type": "fn(nameOrIndex?: string|number) -> undefined" },
      "setData": { "!type": "fn(data: ?, nameOrIndex?: string|number) -> undefined" },
      "getData": { "!type": "fn(nameOrIndex?: string|number) -> ?" },

      "resize": { "!type": "fn() -> undefined" },
      "suspend": { "!type": "fn() -> undefined" },
      "resume": { "!type": "fn() -> +Promise|undefined" },

      "disable": { "!type": "fn(options?: ?) -> ?" },
      "enable":  { "!type": "fn() -> ?" },

      "blurCanvas":      { "!type": "fn(blur: bool) -> undefined" },
      "greyscaleCanvas": { "!type": "fn(greyscale: bool) -> undefined" },
      "maskCanvas":      { "!type": "fn(masked: bool) -> undefined" },
      

      "id": "string",

      "setExtData": { "!type": "fn(type: string, name: string, data: ?) -> undefined" },

      "dropBoxUpload":    { "!type": "fn(path: string, file: ?, onProgress?: fn(?)) -> +Promise" },
      "dropBoxMput":      { "!type": "fn(path: string, file: ?, codec: ?, partId: ?, close: bool, onProgress?: fn(?)) -> +Promise" },
      "dropBoxDownload":  { "!type": "fn(opts: {path: string, name: string}) -> +Promise" },
      "dropBoxGetFileUrl":{ "!type": "fn(opts: {path: string, name: string}) -> +Promise|string" },
      "dropBoxDelete":    { "!type": "fn(opts: {path: string, name: string}) -> +Promise" },
      "dropBoxList":      { "!type": "fn(path: ?) -> +Promise" }
    },
    "Cell": {
      "type": {
        "!type": "string",
        "!doc": "Type of the cell (e.g., calloutData, labelData, iconData, buttonData)."
      },
      "defaultValue": {
        "!type": "string",
        "!doc": "Default value for the cell."
      },
      "url": {
        "!type": "string",
        "!doc": "Optional URL (used for icon or button cells)."
      },
      "generated": {
        "!type": "bool",
        "!doc": "Indicates if the value was generated automatically."
      },
      "value": {
        "!type": "string",
        "!doc": "Current value of the cell."
      },
      "text": {
        "!type": "string",
        "!doc": "Display text of the cell."
      },
      "readOnly": {
        "!type": "bool",
        "!doc": "Whether the cell is read-only."
      },
      "disabled": {
        "!type": "bool",
        "!doc": "Whether the cell is disabled."
      },
      "visible": {
        "!type": "bool",
        "!doc": "Whether the cell is visible."
      }
    },
    "Row": {
      "cells": {
        "!type": "[Cell]",
        "!doc": "Array of cell objects."
      },
      "index": {
        "!type": "number",
        "!doc": "Current index."
      }
    },
    "PointerEvent": {
      "pointerId": {
        "!type": "number",
        "!doc": "A unique identifier for the pointer causing the event."
      },
      "width": {
        "!type": "number",
        "!doc": "The width (magnitude on the X axis) of the contact geometry of the pointer."
      },
      "height": {
        "!type": "number",
        "!doc": "The height (magnitude on the Y axis) of the contact geometry of the pointer."
      },
      "pressure": {
        "!type": "number",
        "!doc": "The normalized pressure of the pointer input in the range 0 to 1."
      },
      "tiltX": {
        "!type": "number",
        "!doc": "The plane angle (in degrees) between the Y-Z plane and the plane containing both the transducer axis and the Y axis."
      },
      "tiltY": {
        "!type": "number",
        "!doc": "The plane angle (in degrees) between the X-Z plane and the plane containing both the transducer axis and the X axis."
      },
      "tangentialPressure": {
        "!type": "number",
        "!doc": "The normalized tangential pressure in the range -1 to 1."
      },
      "twist": {
        "!type": "number",
        "!doc": "The clockwise rotation (in degrees) of the pointer around its major axis."
      },
      "pointerType": {
        "!type": "string",
        "!doc": "Indicates the device type that caused the event ('mouse', 'pen', 'touch')."
      },
      "isPrimary": {
        "!type": "bool",
        "!doc": "Indicates whether the pointer represents the primary pointer of this pointer type."
      },
      "getCoalescedEvents": {
        "!type": "fn() -> [+PointerEvent]",
        "!doc": "Returns a sequence of all PointerEvent objects that were coalesced into this event."
      },
      "getPredictedEvents": {
        "!type": "fn() -> [+PointerEvent]",
        "!doc": "Returns a sequence of predicted PointerEvent objects based on the current event."
      }
    },
    "Grid": {
      "data":                  { "!type": "[Row]", "!doc": "Computed data (getter returns a copy)." },
      "value":                 { "!type": "[string]", "!doc": "Selection payload (ids or indices)." },
      "selectionHash":         { "!type": "string", "!doc": "Hash of current selection." },
      "addRow":                { "!type": "fn(row: Row, inder: number) -> bool", "!doc": "Append a row if its id is unique; updates pk index and persistence." },
      "insertRow":             { "!type": "fn(row: Row, index?: number) -> bool", "!doc": "Insert a row at index if id is unique; updates pk index and persistence." },
      "removeRow":             { "!type": "fn(id: string) -> void", "!doc": "Remove a row by id; updates pk index and persistence." },
      "removeRows":            { "!type": "fn(column: string|number, value: any) -> void", "!doc": "Remove all rows where cells[column] equals value; updates pk index and persistence." },
      "removeRowAt":           { "!type": "fn(index?: number) -> void", "!doc": "Remove a row at the given index; updates pk index and persistence." },
      "clearRows":             { "!type": "fn() -> void", "!doc": "Clear all rows and rebuild uniqueness; persists empty array." },
      "resetData":             { "!type": "fn() -> void", "!doc": "Drop cached data and pk index; clear persisted data." },
      "getRow":                { "!type": "fn(id: string) -> Row|void", "!doc": "Get a row by id (uses pk index if available)." },
      "findRow":               { "!type": "fn(column: string|number, value: any) -> Row|void", "!doc": "Find first row where cells[column] equals value." },
      "findRows":              { "!type": "fn(column: string|number, value: any) -> [Row]", "!doc": "Find all rows where cells[column] equals value." },
      "getSelectedRows":       { "!type": "fn() -> [Row]", "!doc": "Return selected rows based on selectionMode and value." },
      "setSelectedRows":       { "!type": "fn(rows: [Row]) -> void", "!doc": "Set selection from rows (ids or indices depending on idForceUnique)." },
      "renderElement":         { "!type": "fn() -> HTMLElement", "!doc": "Render/update DOM; returns root element." }
    },
    "AbstractDataEvent": {
      "getAcknowledgementData": {
        "!type": "fn() -> string",
        "!doc": "Returns data used to create an event acknowledgement."
      },
      "getCorrelationId": {
        "!type": "fn() -> string",
        "!doc": "Returns the correlation identifier as a string."
      },
      "getDurable": {
        "!type": "fn() -> bool",
        "!doc": "Returns whether this event is durable."
      },
      "getEventGroupId": {
        "!type": "fn() -> string",
        "!doc": "Returns optional group id for grouping similar or sequenced events."
      },
      "getEventId": {
        "!type": "fn() -> string",
        "!doc": "Returns this event's identifier."
      },
      "getEventKey": {
        "!type": "fn() -> string",
        "!doc": "Returns an optional key uniquely identifying this event instance."
      },
      "getEventProperty": {
        "!type": "fn(name: string) -> any",
        "!doc": "Returns the value of an event property by name."
      },
      "getEventSource": {
        "!type": "fn() -> string",
        "!doc": "Returns the event source address."
      },
      "getForwardTo": {
        "!type": "fn() -> string",
        "!doc": "Returns the Event ID to use when forwarding a shallow-cloned instance."
      },
      "getReplyTo": {
        "!type": "fn() -> string",
        "!doc": "Returns the Event ID to which replies/acknowledgements should be sent."
      },
      "getSecurityAssertionToken": {
        "!type": "fn() -> string",
        "!doc": "Returns the security assertion token."
      },
      "getTimestamp": {
        "!type": "fn() -> number",
        "!doc": "Returns the creation timestamp assigned by the dispatcher."
      },
      "isProtected": {
        "!type": "fn() -> bool",
        "!doc": "Returns true if the data contains protected elements."
      },

      "protect": {
        "!type": "fn(principal: any, credential: any, acl: any) -> void",
        "!doc": "Protects the payload using the provided principal/credential/ACL."
      },
      "unprotect": {
        "!type": "fn(principal: any, credential: any) -> void",
        "!doc": "Removes protection set by protect()."
      },
      "resetReplyTo": {
        "!type": "fn() -> void",
        "!doc": "Sets the replyTo identifier to null."
      },

      "setCorrelationId": {
        "!type": "fn(id: string) -> void",
        "!doc": "Sets the optional correlation identifier."
      },
      "setDurable": {
        "!type": "fn(durable: bool) -> void",
        "!doc": "Sets the durability flag."
      },
      "setEventGroupId": {
        "!type": "fn(id: string) -> void",
        "!doc": "Sets the optional grouping identifier."
      },
      "setEventKey": {
        "!type": "fn(key: string) -> void",
        "!doc": "Sets the optional key that uniquely identifies this event instance."
      },
      "setEventProperty": {
        "!type": "fn(name: string, value: any) -> void",
        "!doc": "Sets a named event property."
      },
      "setForwardTo": {
        "!type": "fn(eventId: string) -> void",
        "!doc": "Sets the Event ID for forwarding a shallow-cloned instance."
      },
      "setReplyTo": {
        "!type": "fn(eventId: string) -> void",
        "!doc": "Sets the Event ID for replies/acknowledgements."
      },
      "setSecurityAssertionToken": {
        "!type": "fn(token: string) -> void",
        "!doc": "Sets the security assertion token."
      }
    },
    "Console": {
      "log":       { "!type": "fn(...args: any) -> void", "!doc": "Outputs a standard log message." },
      "info":      { "!type": "fn(...args: any) -> void", "!doc": "Outputs an informational message." },
      "warn":      { "!type": "fn(...args: any) -> void", "!doc": "Outputs a warning message." },
      "error":     { "!type": "fn(...args: any) -> void", "!doc": "Outputs an error message." },
      "debug":     { "!type": "fn(...args: any) -> void", "!doc": "Outputs a debug message." },
      "trace":     { "!type": "fn(...args: any) -> void", "!doc": "Prints a stack trace." },
      "assert":    { "!type": "fn(condition: bool, ...args: any) -> void", "!doc": "Logs a message if the condition is false." },

      "dir":       { "!type": "fn(obj: any, options?: object) -> void", "!doc": "Displays an interactive list of the properties of the specified object." },
      "dirxml":    { "!type": "fn(obj: any) -> void", "!doc": "Displays an XML/HTML representation of the specified element." },
      "table":     { "!type": "fn(data: any, columns?: [string]) -> void", "!doc": "Displays tabular data as a table." },

      "group":           { "!type": "fn(...label: any) -> void", "!doc": "Starts a new inline group of log messages." },
      "groupCollapsed":  { "!type": "fn(...label: any) -> void", "!doc": "Creates a collapsed group of log messages." },
      "groupEnd":        { "!type": "fn() -> void", "!doc": "Closes the most recently opened group." },

      "time":     { "!type": "fn(label?: string) -> void", "!doc": "Starts a new timer with an optional label." },
      "timeLog":  { "!type": "fn(label?: string, ...args: any) -> void", "!doc": "Logs the current value of a timer." },
      "timeEnd":  { "!type": "fn(label?: string) -> void", "!doc": "Stops a timer and logs the elapsed time." },
      "timeStamp":{ "!type": "fn(label?: string) -> void", "!doc": "Adds a timestamp marker to the performance profile." },

      "count":        { "!type": "fn(label?: string) -> void", "!doc": "Logs the number of times count() has been called with the given label." },
      "countReset":   { "!type": "fn(label?: string) -> void", "!doc": "Resets the counter for the given label." },

      "clear":    { "!type": "fn() -> void", "!doc": "Clears the console output." },
      "profile":  { "!type": "fn(label?: string) -> void", "!doc": "Starts a JavaScript CPU profile (engine-specific)." },
      "profileEnd": { "!type": "fn(label?: string) -> void", "!doc": "Stops the current JavaScript CPU profile." }
    },
    "EChartsInstance": {
      "!doc": "Instance created through echarts.init. Provides comprehensive chart manipulation API.",
      "group": { "!type": "string|number", "!doc": "Group name to be used in chart connection." },
      "id": { "!type": "string", "!doc": "Instance id (if assigned)." },
      "setOption": {
        "!type": "fn(option: object, opts?: {notMerge?: bool, replaceMerge?: string|[string], lazyUpdate?: bool, silent?: bool}) -> void",
        "!doc": "Configuration item, data, universal interface. All parameters and data can all be modified through setOption. ECharts will merge new parameters and data, and then refresh chart."
      },
      "getOption": { "!type": "fn() -> object", "!doc": "Gets option object maintained in current instance, which contains configuration item and data merged from previous setOption operations by users." },
      "setTheme": {
        "!type": "fn(theme: string|object, opts?: {silent?: bool}) -> void",
        "!doc": "Sets the theme for the chart instance. Theme can be a registered theme name or an anonymous theme object."
      },
      "getWidth": { "!type": "fn() -> number", "!doc": "Gets width of ECharts instance container." },
      "getHeight": { "!type": "fn() -> number", "!doc": "Gets height of ECharts instance container." },
      "getDom": { "!type": "fn() -> HTMLCanvasElement|HTMLDivElement", "!doc": "Gets DOM element of ECharts instance container." },
      "resize": {
        "!type": "fn(opts?: {width?: number|string, height?: number|string, silent?: bool, animation?: {duration?: number, easing?: string}}) -> +EChartsInstance",
        "!doc": "Resizes chart, which should be called manually when container size changes."
      },
      "renderToSVGString": {
        "!type": "fn(opts?: {useViewBox?: bool}) -> string",
        "!doc": "Render to a SVG string. Available when setting renderer: 'svg' to use SVG rendering mode."
      },
      "clear": { "!type": "fn() -> void", "!doc": "Clears current instance; removes all components and series in current instance." },
      "dispatchAction": {
        "!type": "fn(payload: object) -> void",
        "!doc": "Triggers chart action, like chart switch legendToggleSelect, zoom data area dataZoom, show tooltip showTip and so on."
      },
      "on": {
        "!type": "fn(eventName: string, query?: string|object, handler: fn(event?: object) -> void, context?: object) -> void",
        "!doc": "Binds event-handling function. There are two kinds of events: mouse events and action events. Query parameter can filter events to specific components."
      },
      "off": {
        "!type": "fn(eventName?: string, handler?: fn(event?: object) -> void) -> void",
        "!doc": "Unbind event-handler function. If no eventName provided, all listeners will be unbound."
      },
      "convertToPixel": {
        "!type": "fn(finder: object, coord: [number, number]|number, opt?: object) -> [number, number]|number",
        "!doc": "Convert the coord on coordinate system or axis or series to pixel on canvas."
      },
      "convertToLayout": {
        "!type": "fn(finder: object, coord: [number, number]|number, opt?: object) -> {rect?: object, contentRect?: object, matrixXYLocatorRange?: [[number, number], [number, number]]}",
        "!doc": "Convert the coord on coordinate system to layout info."
      },
      "convertFromPixel": {
        "!type": "fn(finder: object, value: [number, number]|number, opt?: object) -> [number, number]|number",
        "!doc": "Convert a point from pixel coordinate to logical coordinate. This method is the inverse operation of convertToPixel."
      },
      "containPixel": {
        "!type": "fn(finder: object, value: [number, number]) -> bool",
        "!doc": "Determine whether the given point is in the given coordinate systems or series."
      },
      "showLoading": {
        "!type": "fn(type?: string, opts?: object) -> void",
        "!doc": "Shows loading animation. You can call this interface manually before data is loaded."
      },
      "hideLoading": { "!type": "fn() -> void", "!doc": "Hides animation loading effect." },
      "getDataURL": {
        "!type": "fn(opts?: {type?: string, pixelRatio?: number, backgroundColor?: string, excludeComponents?: [string]}) -> string",
        "!doc": "Exports chart image; returns a base64 URL; can be set to src of Image."
      },
      "getConnectedDataURL": {
        "!type": "fn(opts?: {type?: string, pixelRatio?: number, backgroundColor?: string, excludeComponents?: [string]}) -> string",
        "!doc": "Exports connected chart image; returns a base64 url. Position of charts in exported image are related to that of the container."
      },
      "appendData": {
        "!type": "fn(opts: {seriesIndex?: number, data?: [?]|?}) -> void",
        "!doc": "The method is used in rendering millions of data. In these scenarios, chunked load data and rendering is required."
      },
      "dispose": { "!type": "fn() -> void", "!doc": "Disposes instance. Once disposed, the instance can not be used again." },
      "isDisposed": { "!type": "fn() -> bool", "!doc": "Returns whether current instance has been disposed." },
      "getZr": { "!type": "fn() -> object", "!doc": "Get underlying ZRender instance." }
    },
    "ECharts": {
    "init": {
      "!type": "fn(dom: +Element, theme?: string, opts?: ?) -> +EChartsInstance",
      "!doc": "Creates an ECharts instance and returns an EChartsInstance. You shall not initialize multiple ECharts instances on a single container."
    },
    "connect": {
      "!type": "fn(group: [+EChartsInstance]) -> +EChartsInstance",
      "!doc": "Connects interaction between multiple chart series."
    },
    "disconnect": {
      "!type": "fn(group: string) -> +EChartsInstance",
      "!doc": "Disconnects interaction between multiple chart series."
    },
    "dispose": {
      "!type": "fn(target: +EChartsInstance) -> +EChartsInstance",
      "!doc": "Disposes of target instance."
    },
    "getInstanceByDom": {
      "!type": "fn(target: +Element) -> +EChartsInstance",
      "!doc": "Returns chart instance of dom container."
    },
    "use": {
      "!type": "fn(exts: [?]) -> +EChartsInstance",
      "!doc": "Use components."
    },
    "registerMap": {
      "!type": "fn(mapName: string, geoJson: ?, specialAreas?: ?) -> +EChartsInstance",
      "!doc": "Registers available maps. This can only be used after including geo component or chart series of map."
    },
    "getMap": {
      "!type": "fn(mapName: string) -> ?",
      "!doc": "Gets map which has been registered."
    },
    "registerTheme": {
      "!type": "fn(themeName: string, theme: ?) -> +EChartsInstance",
      "!doc": "Registers a theme, should be called before initialize the chart."
    }
    }
  },
  
  "componentObj": "Component",
  "control": "Control", 
  "row": "Row",
  "grid": "Grid",
  "event": "AbstractDataEvent",
  "console": "Console",
  "$ENV": "ECharts"
}
