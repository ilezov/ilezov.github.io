{
  "!name": "lodash.core-4.17.15",
  "!doc": "Lodash (core build) 4.17.15 â€” simplified definitions for autocomplete and hints.",
  "!url": "https://raw.githubusercontent.com/lodash/lodash/4.17.15-npm/core.js",
  "!define": {
    "_Chain": {
      "!doc": "_.chain wrapper / return type for chainable methods (simplified).",
      "value": { "!type": "fn() -> ?" },
      "toJSON": { "!type": "fn() -> ?" },
      "valueOf": { "!type": "fn() -> ?" }
    },
    "?": {
      "!doc": "Lodash-style iterator",
      "!type": "fn(value: ?, index?: number|string, collection?: ?) -> ?"
    }
  },

  "_": {
    "!doc": "lodash.core 4.17.15 (subset)",
    "!url": "https://lodash.com/",

    "chain": { "!type": "fn(value: ?) -> _Chain", "!doc": "Start a chain." },
    "tap":   { "!type": "fn(value: ?, interceptor: fn(?) -> ?) -> ?", "!doc": "Insert a side effect." },
    "thru":  { "!type": "fn(value: ?, interceptor: fn(?) -> ?) -> ?", "!doc": "Transform a value." },
    "toArray": { "!type": "fn(value: ?) -> [?]" },
    "value": { "!type": "fn() -> ?" },

    "after":   { "!type": "fn(n: number, func: fn(?) -> ?) -> fn(?) -> ?" },
    "ary":     { "!type": "fn(func: fn(?) -> ?, n?: number) -> fn(?) -> ?" },
    "before":  { "!type": "fn(n: number, func: fn(?) -> ?) -> fn(?) -> ?" },
    "bind":    { "!type": "fn(func: fn(?) -> ?, thisArg: ?, partials: [?]) -> fn(?) -> ?" },
    "bindAll": { "!type": "fn(object: ?, methodNames: [string]) -> ?" },
    "bindKey": { "!type": "fn(object: ?, key: string, partials: [?]) -> fn(?) -> ?" },
    "curry":   { "!type": "fn(func: fn(?) -> ?, arity?: number) -> fn(?) -> ?" },
    "debounce":{ "!type": "fn(func: fn(?) -> ?, wait?: number, options?: ?) -> fn(?) -> ?" },
    "defer":   { "!type": "fn(func: fn(?) -> ?, args: [?]) -> number" },
    "delay":   { "!type": "fn(func: fn(?) -> ?, wait: number, args: [?]) -> number" },
    "flip":    { "!type": "fn(func: fn(?) -> ?) -> fn(?) -> ?" },
    "memoize": { "!type": "fn(func: fn(?) -> ?, resolver?: fn(?) -> ?) -> fn(?) -> ?" },
    "negate":  { "!type": "fn(predicate: ?) -> ?" },
    "once":    { "!type": "fn(func: fn(?) -> ?) -> fn(?) -> ?" },
    "over":    { "!type": "fn([?]) -> fn(?) -> ?" },
    "overArgs":{ "!type": "fn(func: fn(?) -> ?, funcs: [?]) -> fn(?) -> ?" },
    "overEvery":{ "!type": "fn([?]) -> fn(?) -> bool" },
    "overSome": { "!type": "fn([?]) -> fn(?) -> bool" },
    "partial": { "!type": "fn(func: fn(?) -> ?, partials: [?]) -> fn(?) -> ?" },
    "partialRight": { "!type": "fn(func: fn(?) -> ?, partials: [?]) -> fn(?) -> ?" },
    "rearg":   { "!type": "fn(func: fn(?) -> ?, indexes: [number]) -> fn(?) -> ?" },
    "rest":    { "!type": "fn(func: fn(?) -> ?, start?: number) -> fn(?) -> ?" },
    "spread":  { "!type": "fn(func: fn(?) -> ?, start?: number) -> fn([?]) -> ?" },
    "throttle":{ "!type": "fn(func: fn(?) -> ?, wait?: number, options?: ?) -> fn(?) -> ?" },
    "unary":   { "!type": "fn(func: fn(?) -> ?) -> fn(?) -> ?" },
    "wrap":    { "!type": "fn(value: ?, wrapper: fn(?, ?) -> ?) -> fn(?) -> ?" },

    "chunk":    { "!type": "fn(array: [?], size?: number) -> [[?]]" },
    "compact":  { "!type": "fn(array: [?]) -> [[?]]" },
    "concat":   { "!type": "fn(array: [?], values: [?]) -> [[?]]" },
    "difference":   { "!type": "fn(array: [?], values: [[?]]) -> [[?]]" },
    "differenceBy": { "!type": "fn(array: [?], values: [[?]], iteratee?: ?|string) -> [[?]]" },
    "differenceWith": { "!type": "fn(array: [?], values: [[?]], comparator: fn(?, ?) -> bool) -> [[?]]" },
    "drop":     { "!type": "fn(array: [?], n?: number) -> [[?]]" },
    "dropRight":{ "!type": "fn(array: [?], n?: number) -> [[?]]" },
    "dropRightWhile": { "!type": "fn(array: [?], predicate?: ?) -> [[?]]" },
    "dropWhile":{ "!type": "fn(array: [?], predicate?: ?) -> [[?]]" },
    "fill":     { "!type": "fn(array: [?], value: ?, start?: number, end?: number) -> [[?]]" },
    "findIndex":{ "!type": "fn(array: [?], predicate?: ?, fromIndex?: number) -> number" },
    "findLastIndex": { "!type": "fn(array: [?], predicate?: ?, fromIndex?: number) -> number" },
    "first":    { "!type": "fn(array: [?]) -> ?" },
    "flatten":  { "!type": "fn(array: [?]) -> [[?]]" },
    "flattenDeep": { "!type": "fn(array: [?]) -> [[?]]" },
    "flattenDepth": { "!type": "fn(array: [?], depth?: number) -> [[?]]" },
    "fromPairs":{ "!type": "fn(pairs: [[string, ?]]) -> ?" },
    "head":     { "!type": "fn(array: [?]) -> ?" },
    "initial":  { "!type": "fn(array: [?]) -> [[?]]" },
    "intersection":   { "!type": "fn(arrays: [[?]]) -> [[?]]" },
    "intersectionBy": { "!type": "fn(arrays: [[?]], iteratee?: ?|string) -> [[?]]" },
    "intersectionWith": { "!type": "fn(arrays: [[?]], comparator: fn(?, ?) -> bool) -> [[?]]" },
    "join":     { "!type": "fn(array: [?], separator?: string) -> string" },
    "last":     { "!type": "fn(array: [?]) -> ?" },
    "lastIndexOf": { "!type": "fn(array: [?], value: ?, fromIndex?: number) -> number" },
    "map":      { "!type": "fn(collection: ?, iteratee?: ?) -> [[?]]" },
    "nth":      { "!type": "fn(array: [?], n?: number) -> ?" },
    "pull":     { "!type": "fn(array: [?], values: [?]) -> [[?]]" },
    "pullAll":  { "!type": "fn(array: [?], values: [[?]]) -> [[?]]" },
    "pullAllBy":{ "!type": "fn(array: [?], values: [[?]], iteratee?: ?|string) -> [[?]]" },
    "pullAllWith": { "!type": "fn(array: [?], values: [[?]], comparator: fn(?, ?) -> bool) -> [[?]]" },
    "pullAt":   { "!type": "fn(array: [?], indexes: [number]) -> [[?]]" },
    "reverse":  { "!type": "fn(array: [?]) -> [[?]]" },
    "slice":    { "!type": "fn(array: [?], start?: number, end?: number) -> [[?]]" },
    "sortedIndex":    { "!type": "fn(array: [?], value: ?) -> number" },
    "sortedIndexBy":  { "!type": "fn(array: [?], value: ?, iteratee?: ?|string) -> number" },
    "sortedLastIndex":{ "!type": "fn(array: [?], value: ?) -> number" },
    "sortedLastIndexBy": { "!type": "fn(array: [?], value: ?, iteratee?: ?|string) -> number" },
    "tail":     { "!type": "fn(array: [?]) -> [[?]]" },
    "take":     { "!type": "fn(array: [?], n?: number) -> [[?]]" },
    "takeRight":{ "!type": "fn(array: [?], n?: number) -> [[?]]" },
    "takeRightWhile": { "!type": "fn(array: [?], predicate?: ?) -> [[?]]" },
    "takeWhile":{ "!type": "fn(array: [?], predicate?: ?) -> [[?]]" },
    "union":    { "!type": "fn(arrays: [[?]]) -> [[?]]" },
    "unionBy":  { "!type": "fn(arrays: [[?]], iteratee?: ?|string) -> [[?]]" },
    "unionWith":{ "!type": "fn(arrays: [[?]], comparator: fn(?, ?) -> bool) -> [[?]]" },
    "uniq":     { "!type": "fn(array: [?]) -> [[?]]" },
    "uniqBy":   { "!type": "fn(array: [?], iteratee?: ?|string) -> [[?]]" },
    "uniqWith": { "!type": "fn(array: [?], comparator: fn(?, ?) -> bool) -> [[?]]" },
    "unzip":    { "!type": "fn(array: [[?]]) -> [[?]]" },
    "unzipWith":{ "!type": "fn(array: [[?]], iteratee?: fn(?, ?) -> ?) -> [[?]]" },
    "without":  { "!type": "fn(array: [?], values: [?]) -> [[?]]" },
    "zip":      { "!type": "fn(arrays: [[?]]) -> [[?]]" },
    "zipObject":     { "!type": "fn(props: [string], values: [?]) -> Object" },
    "zipObjectDeep": { "!type": "fn(props: [string], values: [?]) -> Object" },
    "zipWith":  { "!type": "fn(arrays: [[?]], iteratee?: ?) -> [[?]]" },

    "countBy":   { "!type": "fn(collection: ?, iteratee?: ?) -> Object.<string, number>" },
    "every":     { "!type": "fn(collection: ?, predicate?: ?) -> bool" },
    "filter":    { "!type": "fn(collection: ?, predicate?: ?) -> [[?]]" },
    "find":      { "!type": "fn(collection: ?, predicate?: ?, fromIndex?: number) -> ?" },
    "findLast":  { "!type": "fn(collection: ?, predicate?: ?, fromIndex?: number) -> ?" },
    "flatMap":   { "!type": "fn(collection: ?, iteratee?: ?) -> [[?]]" },
    "flatMapDeep": { "!type": "fn(collection: ?, iteratee?: ?) -> [[?]]" },
    "flatMapDepth":{ "!type": "fn(collection: ?, iteratee?: ?, depth?: number) -> [[?]]" },
    "forEach":   { "!type": "fn(collection: ?, iteratee?: ?) -> ?" },
    "forEachRight": { "!type": "fn(collection: ?, iteratee?: ?) -> ?" },
    "groupBy":   { "!type": "fn(collection: ?, iteratee?: ?) -> Object.<string, [[?]]>" },
    "includes":  { "!type": "fn(collection: ?, value: ?, fromIndex?: number) -> bool" },
    "invokeMap": { "!type": "fn(collection: ?, path: string|fn, args: [?]) -> [[?]]" },
    "keyBy":     { "!type": "fn(collection: ?, iteratee?: ?) -> Object" },
    "mapKeys":   { "!type": "fn(object: Object, iteratee?: ?) -> Object" },
    "mapValues": { "!type": "fn(object: Object, iteratee?: ?) -> Object" },
    "partition": { "!type": "fn(collection: ?, predicate?: ?) -> [[?]]" },
    "reduce":    { "!type": "fn(collection: ?, iteratee: fn(?, ?, ?, ?) -> ?, accumulator?: ?) -> ?" },
    "reduceRight": { "!type": "fn(collection: ?, iteratee: fn(?, ?, ?, ?) -> ?, accumulator?: ?) -> ?" },
    "reject":    { "!type": "fn(collection: ?, predicate?: ?) -> [[?]]" },
    "sample":    { "!type": "fn(collection: ?) -> ?" },
    "sampleSize":{ "!type": "fn(collection: ?, n?: number) -> [[?]]" },
    "shuffle":   { "!type": "fn(collection: ?) -> [[?]]" },
    "size":      { "!type": "fn(collection: ?) -> number" },
    "some":      { "!type": "fn(collection: ?, predicate?: ?) -> bool" },
    "sortBy":    { "!type": "fn(collection: ?, iteratees?: [?]) -> [[?]]" },
    "toPairs":   { "!type": "fn(object: Object) -> [[string, ?]]" },
    "toPairsIn": { "!type": "fn(object: Object) -> [[string, ?]]" },
    "values":    { "!type": "fn(object: Object) -> [[?]]" },
    "valuesIn":  { "!type": "fn(object: Object) -> [[?]]" },

    "assign":      { "!type": "fn(object: ?, sources: [?]) -> Object" },
    "assignIn":    { "!type": "fn(object: ?, sources: [?]) -> Object" },
    "assignInWith":{ "!type": "fn(object: ?, sources: [?], customizer?: fn(?, ?, string, ?, ?) -> ?) -> Object" },
    "assignWith":  { "!type": "fn(object: ?, sources: [?], customizer?: fn(?, ?, string, ?, ?) -> ?) -> Object" },
    "create":      { "!type": "fn(prototype: ?, properties?: Object) -> Object" },
    "defaults":    { "!type": "fn(object: ?, sources: [?]) -> Object" },
    "defaultsDeep":{ "!type": "fn(object: ?, sources: [?]) -> Object" },
    "extend":      "assignIn",
    "extendWith":  "assignInWith",
    "functions":   { "!type": "fn(object: Object) -> [string]" },
    "functionsIn": { "!type": "fn(object: Object) -> [string]" },
    "get":         { "!type": "fn(object: ?, path: ?, defaultValue?: ?) -> ?" },
    "has":         { "!type": "fn(object: ?, path: ?) -> bool" },
    "hasIn":       { "!type": "fn(object: ?, path: ?) -> bool" },
    "invert":      { "!type": "fn(object: Object) -> Object.<string,string>" },
    "invertBy":    { "!type": "fn(object: Object, iteratee?: ?) -> Object" },
    "keys":        { "!type": "fn(object: ?) -> [string]" },
    "keysIn":      { "!type": "fn(object: ?) -> [string]" },
    "mapKeys":     { "!type": "fn(object: Object, iteratee?: ?) -> Object" },
    "mapValues":   { "!type": "fn(object: Object, iteratee?: ?) -> Object" },
    "merge":       { "!type": "fn(object: ?, sources: [?]) -> Object" },
    "mergeWith":   { "!type": "fn(object: ?, sources: [?], customizer?: fn(?, ?, string, ?, ?) -> ?) -> Object" },
    "omit":        { "!type": "fn(object: Object, paths: [string]) -> Object" },
    "omitBy":      { "!type": "fn(object: Object, predicate?: ?) -> Object" },
    "pick":        { "!type": "fn(object: Object, paths: [string]) -> Object" },
    "pickBy":      { "!type": "fn(object: Object, predicate?: ?) -> Object" },
    "property":    { "!type": "fn(path: ?) -> fn(object: ?) -> ?" },
    "propertyOf":  { "!type": "fn(object: ?) -> fn(path: ?) -> ?" },
    "result":      { "!type": "fn(object: ?, path: ?, defaultValue?: ?) -> ?" },
    "set":         { "!type": "fn(object: ?, path: ?, value: ?, customizer?: fn) -> Object" },
    "setWith":     { "!type": "fn(object: ?, path: ?, value: ?, customizer?: fn) -> Object" },
    "toPath":      { "!type": "fn(value: string) -> [string]" },
    "toPlainObject": { "!type": "fn(value: ?) -> Object" },
    "transform":   { "!type": "fn(object: ?, iteratee?: fn(?, ?, ?, ?) -> ?, accumulator?: ?) -> ?" },
    "unset":       { "!type": "fn(object: ?, path: ?) -> bool" },
    "update":      { "!type": "fn(object: ?, path: ?, updater: fn(?) -> ?) -> Object" },
    "updateWith":  { "!type": "fn(object: ?, path: ?, updater: fn(?) -> ?, customizer?: fn) -> Object" },

    "add":        { "!type": "fn(augend: number, addend: number) -> number" },
    "attempt":    { "!type": "fn(func: fn(?) -> ?, args: [?]) -> ?" },
    "camelCase":  { "!type": "fn(string: string) -> string" },
    "capitalize": { "!type": "fn(string: string) -> string" },
    "ceil":       { "!type": "fn(number: number, precision?: number) -> number" },
    "clamp":      { "!type": "fn(number: number, lower?: number, upper?: number) -> number" },
    "clone":      { "!type": "fn(value: ?) -> ?" },
    "cloneDeep":  { "!type": "fn(value: ?) -> ?" },
    "cloneDeepWith": { "!type": "fn(value: ?, customizer?: fn(?, string|number, ?, ?, ?) -> ?) -> ?" },
    "cloneWith":  { "!type": "fn(value: ?, customizer?: fn(?, string|number, ?, ?, ?) -> ?) -> ?" },
    "conforms":   { "!type": "fn(source: Object) -> fn(object: Object) -> bool" },
    "conformsTo": { "!type": "fn(object: ?, source: Object) -> bool" },
    "deburr":     { "!type": "fn(string: string) -> string" },
    "defaultTo":  { "!type": "fn(value: ?, defaultValue: ?) -> ?" },
    "divide":     { "!type": "fn(dividend: number, divisor: number) -> number" },
    "endsWith":   { "!type": "fn(string: string, target: string, position?: number) -> bool" },
    "eq":         { "!type": "fn(value: ?, other: ?) -> bool" },
    "escape":     { "!type": "fn(string: string) -> string" },
    "escapeRegExp": { "!type": "fn(string: string) -> string" },
    "gt":         { "!type": "fn(value: ?, other: ?) -> bool" },
    "gte":        { "!type": "fn(value: ?, other: ?) -> bool" },
    "identity":   { "!type": "fn(value: ?) -> ?" },
    "inRange":    { "!type": "fn(number: number, start?: number, end?: number) -> bool" },
    "kebabCase":  { "!type": "fn(string: string) -> string" },
    "lowerCase":  { "!type": "fn(string: string) -> string" },
    "lowerFirst": { "!type": "fn(string: string) -> string" },
    "lt":         { "!type": "fn(value: ?, other: ?) -> bool" },
    "lte":        { "!type": "fn(value: ?, other: ?) -> bool" },
    "max":        { "!type": "fn(array: [number]) -> number" },
    "maxBy":      { "!type": "fn(array: [?], iteratee?: ?|string) -> ?" },
    "mean":       { "!type": "fn(array: [number]) -> number" },
    "meanBy":     { "!type": "fn(array: [?], iteratee?: ?|string) -> number" },
    "min":        { "!type": "fn(array: [number]) -> number" },
    "minBy":      { "!type": "fn(array: [?], iteratee?: ?|string) -> ?" },
    "multiply":   { "!type": "fn(multiplier: number, multiplicand: number) -> number" },
    "noop":       { "!type": "fn() -> undefined" },
    "now":        { "!type": "fn() -> number" },
    "pad":        { "!type": "fn(string: string, length?: number, chars?: string) -> string" },
    "padEnd":     { "!type": "fn(string: string, length?: number, chars?: string) -> string" },
    "padStart":   { "!type": "fn(string: string, length?: number, chars?: string) -> string" },
    "parseInt":   { "!type": "fn(string: string, radix?: number) -> number" },
    "random":     { "!type": "fn(lower?: number, upper?: number, floating?: bool) -> number" },
    "repeat":     { "!type": "fn(string: string, n?: number) -> string" },
    "round":      { "!type": "fn(number: number, precision?: number) -> number" },
    "runInContext": { "!type": "fn(context?: ?) -> _" },
    "snakeCase":  { "!type": "fn(string: string) -> string" },
    "startCase":  { "!type": "fn(string: string) -> string" },
    "startsWith": { "!type": "fn(string: string, target: string, position?: number) -> bool" },
    "stubArray":  { "!type": "fn() -> [[?]]" },
    "stubFalse":  { "!type": "fn() -> bool" },
    "stubObject": { "!type": "fn() -> Object" },
    "stubString": { "!type": "fn() -> string" },
    "stubTrue":   { "!type": "fn() -> bool" },
    "subtract":   { "!type": "fn(minuend: number, subtrahend: number) -> number" },
    "sum":        { "!type": "fn(array: [number]) -> number" },
    "sumBy":      { "!type": "fn(array: [?], iteratee?: ?|string) -> number" },
    "template":   { "!type": "fn(string?: string, options?: ?) -> fn(Object) -> string" },
    "times":      { "!type": "fn(n: number, iteratee?: fn(number) -> ?) -> [[?]]" },
    "toFinite":   { "!type": "fn(value: ?) -> number" },
    "toInteger":  { "!type": "fn(value: ?) -> number" },
    "toLength":   { "!type": "fn(value: ?) -> number" },
    "toLower":    { "!type": "fn(string: string) -> string" },
    "toNumber":   { "!type": "fn(value: ?) -> number" },
    "toSafeInteger": { "!type": "fn(value: ?) -> number" },
    "toString":   { "!type": "fn(value: ?) -> string" },
    "toUpper":    { "!type": "fn(string: string) -> string" },
    "trim":       { "!type": "fn(string: string, chars?: string) -> string" },
    "trimEnd":    { "!type": "fn(string: string, chars?: string) -> string" },
    "trimStart":  { "!type": "fn(string: string, chars?: string) -> string" },
    "truncate":   { "!type": "fn(string: string, options?: {length?: number, omission?: string, separator?: string|RegExp}) -> string" },
    "unescape":   { "!type": "fn(string: string) -> string" },
    "uniqueId":   { "!type": "fn(prefix?: string) -> string" },
    "upperCase":  { "!type": "fn(string: string) -> string" },
    "upperFirst": { "!type": "fn(string: string) -> string" },
    "words":      { "!type": "fn(string: string, pattern?: RegExp|string) -> [string]" },

    "eq":         { "!type": "fn(value: ?, other: ?) -> bool" },
    "isArguments":{ "!type": "fn(value: ?) -> bool" },
    "isArray":    { "!type": "fn(value: ?) -> bool" },
    "isArrayBuffer": { "!type": "fn(value: ?) -> bool" },
    "isArrayLike":   { "!type": "fn(value: ?) -> bool" },
    "isArrayLikeObject": { "!type": "fn(value: ?) -> bool" },
    "isBoolean":  { "!type": "fn(value: ?) -> bool" },
    "isBuffer":   { "!type": "fn(value: ?) -> bool" },
    "isDate":     { "!type": "fn(value: ?) -> bool" },
    "isElement":  { "!type": "fn(value: ?) -> bool" },
    "isEmpty":    { "!type": "fn(value: ?) -> bool" },
    "isEqual":    { "!type": "fn(value: ?, other: ?) -> bool" },
    "isEqualWith":{ "!type": "fn(value: ?, other: ?, customizer?: fn(?, ?, string|number, ?, ?) -> ?) -> bool" },
    "isError":    { "!type": "fn(value: ?) -> bool" },
    "isFinite":   { "!type": "fn(value: ?) -> bool" },
    "isFunction": { "!type": "fn(value: ?) -> bool" },
    "isInteger":  { "!type": "fn(value: ?) -> bool" },
    "isLength":   { "!type": "fn(value: ?) -> bool" },
    "isMap":      { "!type": "fn(value: ?) -> bool" },
    "isMatch":    { "!type": "fn(object: ?, source: Object) -> bool" },
    "isMatchWith":{ "!type": "fn(object: ?, source: Object, customizer?: fn(?, ?, string|number, ?, ?) -> ?) -> bool" },
    "isNaN":      { "!type": "fn(value: ?) -> bool" },
    "isNative":   { "!type": "fn(value: ?) -> bool" },
    "isNil":      { "!type": "fn(value: ?) -> bool" },
    "isNull":     { "!type": "fn(value: ?) -> bool" },
    "isNumber":   { "!type": "fn(value: ?) -> bool" },
    "isObject":   { "!type": "fn(value: ?) -> bool" },
    "isObjectLike": { "!type": "fn(value: ?) -> bool" },
    "isPlainObject":{ "!type": "fn(value: ?) -> bool" },
    "isRegExp":   { "!type": "fn(value: ?) -> bool" },
    "isSafeInteger": { "!type": "fn(value: ?) -> bool" },
    "isSet":      { "!type": "fn(value: ?) -> bool" },
    "isString":   { "!type": "fn(value: ?) -> bool" },
    "isTypedArray": { "!type": "fn(value: ?) -> bool" },
    "isUndefined":{ "!type": "fn(value: ?) -> bool" },
    "isWeakMap":  { "!type": "fn(value: ?) -> bool" },
    "isWeakSet":  { "!type": "fn(value: ?) -> bool" },

    "mixin":    { "!type": "fn(object: Object, source?: Object, options?: {chain?: bool}) -> _" },
    "matches":  { "!type": "fn(source: Object) -> fn(object: Object) -> bool" },
    "matchesProperty": { "!type": "fn(path: ?, srcValue: ?) -> fn(object: Object) -> bool" },
    "method":   { "!type": "fn(path: ?, args: [?]) -> fn(object: Object) -> ?" },
    "methodOf": { "!type": "fn(object: Object, args: [?]) -> fn(path: ?) -> ?" },
    "noConflict": { "!type": "fn() -> _" },
    "runInContext": { "!type": "fn(context?: ?) -> _" },

    "each": "forEach",
    "extend": "assignIn",
    "first": "head"
  }
}
