"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var cm = function (exports) {
  'use strict';

  // These are filled with ranges (rangeFrom[i] up to but not including
  // rangeTo[i]) of code points that count as extending characters.
  var rangeFrom = [],
    rangeTo = [];
  (function () {
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    var numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(function (s) {
      return s ? parseInt(s, 36) : 1;
    });
    for (var _i = 0, n = 0; _i < numbers.length; _i++) (_i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[_i]);
  })();
  function isExtendingChar(code) {
    if (code < 768) return false;
    for (var from = 0, to = rangeFrom.length;;) {
      var mid = from + to >> 1;
      if (code < rangeFrom[mid]) to = mid;else if (code >= rangeTo[mid]) from = mid + 1;else return true;
      if (from == to) return false;
    }
  }
  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF;
  }
  var ZWJ = 0x200d;
  function findClusterBreak$1(str, pos) {
    var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos;
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
    var prev = codePointAt$1(str, pos);
    pos += codePointSize$1(prev);
    while (pos < str.length) {
      var next = codePointAt$1(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize$1(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        var countBefore = 0,
          _i2 = pos - 2;
        while (_i2 >= 0 && isRegionalIndicator(codePointAt$1(str, _i2))) {
          countBefore++;
          _i2 -= 2;
        }
        if (countBefore % 2 == 0) break;else pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      var found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found;
      pos--;
    }
    return 0;
  }
  function codePointAt$1(str, pos) {
    var code0 = str.charCodeAt(pos);
    if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0;
    var code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow$1(code1)) return code0;
    return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
  }
  function surrogateLow$1(ch) {
    return ch >= 0xDC00 && ch < 0xE000;
  }
  function surrogateHigh$1(ch) {
    return ch >= 0xD800 && ch < 0xDC00;
  }
  function codePointSize$1(code) {
    return code < 0x10000 ? 1 : 2;
  }

  /**
  The data structure for documents. @nonabstract
  */
  var Text = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Text() {
      _classCallCheck(this, Text);
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    return _createClass(Text, [{
      key: "lineAt",
      value:
      /**
      Get the line description around the given position.
      */
      function lineAt(pos) {
        if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
        return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
    }, {
      key: "line",
      value: function line(n) {
        if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
        return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        var _clip = clip(this, from, to);
        var _clip2 = _slicedToArray(_clip, 2);
        from = _clip2[0];
        to = _clip2[1];
        var parts = [];
        this.decompose(0, from, parts, 2 /* Open.To */);
        if (text.length) text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
        this.decompose(to, this.length, parts, 1 /* Open.From */);
        return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
    }, {
      key: "append",
      value: function append(other) {
        return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
    }, {
      key: "slice",
      value: function slice(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var _clip3 = clip(this, from, to);
        var _clip4 = _slicedToArray(_clip3, 2);
        from = _clip4[0];
        to = _clip4[1];
        var parts = [];
        this.decompose(from, to, parts, 0);
        return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        if (other == this) return true;
        if (other.length != this.length || other.lines != this.lines) return false;
        var start = this.scanIdentical(other, 1),
          end = this.length - this.scanIdentical(other, -1);
        var a = new RawTextCursor(this),
          b = new RawTextCursor(other);
        for (var skip = start, pos = start;;) {
          a.next(skip);
          b.next(skip);
          skip = 0;
          if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
          pos += a.value.length;
          if (a.done || pos >= end) return true;
        }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
    }, {
      key: "iter",
      value: function iter() {
        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        return new RawTextCursor(this, dir);
      }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
    }, {
      key: "iterRange",
      value: function iterRange(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        return new PartialTextCursor(this, from, to);
      }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
    }, {
      key: "iterLines",
      value: function iterLines(from, to) {
        var inner;
        if (from == null) {
          inner = this.iter();
        } else {
          if (to == null) to = this.lines + 1;
          var start = this.line(from).from;
          inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
        }
        return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
    }, {
      key: "toString",
      value: function toString() {
        return this.sliceString(0);
      }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        var lines = [];
        this.flatten(lines);
        return lines;
      }
    }], [{
      key: "of",
      value: function of(text) {
        if (text.length == 0) throw new RangeError("A document must have at least one line");
        if (text.length == 1 && !text[0]) return Text.empty;
        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
    }]);
  }(); // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  var TextLeaf = /*#__PURE__*/function (_Text) {
    function TextLeaf(text) {
      var _this;
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);
      _classCallCheck(this, TextLeaf);
      _this = _callSuper(this, TextLeaf);
      _this.text = text;
      _this.length = length;
      return _this;
    }
    _inherits(TextLeaf, _Text);
    return _createClass(TextLeaf, [{
      key: "lines",
      get: function get() {
        return this.text.length;
      }
    }, {
      key: "children",
      get: function get() {
        return null;
      }
    }, {
      key: "lineInner",
      value: function lineInner(target, isLine, line, offset) {
        for (var _i3 = 0;; _i3++) {
          var _string = this.text[_i3],
            end = offset + _string.length;
          if ((isLine ? line : end) >= target) return new Line(offset, end, line, _string);
          offset = end + 1;
          line++;
        }
      }
    }, {
      key: "decompose",
      value: function decompose(from, to, target, open) {
        var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
        if (open & 1 /* Open.From */) {
          var prev = target.pop();
          var joined = appendText(text.text, prev.text.slice(), 0, text.length);
          if (joined.length <= 32 /* Tree.Branch */) {
            target.push(new TextLeaf(joined, prev.length + text.length));
          } else {
            var mid = joined.length >> 1;
            target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
          }
        } else {
          target.push(text);
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        if (!(text instanceof TextLeaf)) return _superPropGet(TextLeaf, "replace", this, 3)([from, to, text]);
        var _clip5 = clip(this, from, to);
        var _clip6 = _slicedToArray(_clip5, 2);
        from = _clip6[0];
        to = _clip6[1];
        var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
        var newLen = this.length + text.length - (to - from);
        if (lines.length <= 32 /* Tree.Branch */) return new TextLeaf(lines, newLen);
        return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
    }, {
      key: "sliceString",
      value: function sliceString(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
        var _clip7 = clip(this, from, to);
        var _clip8 = _slicedToArray(_clip7, 2);
        from = _clip8[0];
        to = _clip8[1];
        var result = "";
        for (var pos = 0, _i4 = 0; pos <= to && _i4 < this.text.length; _i4++) {
          var line = this.text[_i4],
            end = pos + line.length;
          if (pos > from && _i4) result += lineSep;
          if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
          pos = end + 1;
        }
        return result;
      }
    }, {
      key: "flatten",
      value: function flatten(target) {
        var _iterator = _createForOfIteratorHelper(this.text),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var line = _step.value;
            target.push(line);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "scanIdentical",
      value: function scanIdentical() {
        return 0;
      }
    }], [{
      key: "split",
      value: function split(text, target) {
        var part = [],
          len = -1;
        var _iterator2 = _createForOfIteratorHelper(text),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var line = _step2.value;
            part.push(line);
            len += line.length + 1;
            if (part.length == 32 /* Tree.Branch */) {
              target.push(new TextLeaf(part, len));
              part = [];
              len = -1;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (len > -1) target.push(new TextLeaf(part, len));
        return target;
      }
    }]);
  }(Text); // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  var TextNode = /*#__PURE__*/function (_Text2) {
    function TextNode(children, length) {
      var _this2;
      _classCallCheck(this, TextNode);
      _this2 = _callSuper(this, TextNode);
      _this2.children = children;
      _this2.length = length;
      _this2.lines = 0;
      var _iterator3 = _createForOfIteratorHelper(children),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          _this2.lines += child.lines;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return _this2;
    }
    _inherits(TextNode, _Text2);
    return _createClass(TextNode, [{
      key: "lineInner",
      value: function lineInner(target, isLine, line, offset) {
        for (var _i5 = 0;; _i5++) {
          var child = this.children[_i5],
            end = offset + child.length,
            endLine = line + child.lines - 1;
          if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
          offset = end + 1;
          line = endLine + 1;
        }
      }
    }, {
      key: "decompose",
      value: function decompose(from, to, target, open) {
        for (var _i6 = 0, pos = 0; pos <= to && _i6 < this.children.length; _i6++) {
          var child = this.children[_i6],
            end = pos + child.length;
          if (from <= end && to >= pos) {
            var childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
            if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
          }
          pos = end + 1;
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, text) {
        var _clip9 = clip(this, from, to);
        var _clip0 = _slicedToArray(_clip9, 2);
        from = _clip0[0];
        to = _clip0[1];
        if (text.lines < this.lines) for (var _i7 = 0, pos = 0; _i7 < this.children.length; _i7++) {
          var child = this.children[_i7],
            end = pos + child.length;
          // Fast path: if the change only affects one child and the
          // child's size remains in the acceptable range, only update
          // that child
          if (from >= pos && to <= end) {
            var updated = child.replace(from - pos, to - pos, text);
            var totalLines = this.lines - child.lines + updated.lines;
            if (updated.lines < totalLines >> 5 /* Tree.BranchShift */ - 1 && updated.lines > totalLines >> 5 /* Tree.BranchShift */ + 1) {
              var copy = this.children.slice();
              copy[_i7] = updated;
              return new TextNode(copy, this.length - (to - from) + text.length);
            }
            return _superPropGet(TextNode, "replace", this, 3)([pos, end, updated]);
          }
          pos = end + 1;
        }
        return _superPropGet(TextNode, "replace", this, 3)([from, to, text]);
      }
    }, {
      key: "sliceString",
      value: function sliceString(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
        var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
        var _clip1 = clip(this, from, to);
        var _clip10 = _slicedToArray(_clip1, 2);
        from = _clip10[0];
        to = _clip10[1];
        var result = "";
        for (var _i8 = 0, pos = 0; _i8 < this.children.length && pos <= to; _i8++) {
          var child = this.children[_i8],
            end = pos + child.length;
          if (pos > from && _i8) result += lineSep;
          if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
          pos = end + 1;
        }
        return result;
      }
    }, {
      key: "flatten",
      value: function flatten(target) {
        var _iterator4 = _createForOfIteratorHelper(this.children),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;
            child.flatten(target);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "scanIdentical",
      value: function scanIdentical(other, dir) {
        if (!(other instanceof TextNode)) return 0;
        var length = 0;
        var _ref = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1],
          _ref2 = _slicedToArray(_ref, 4),
          iA = _ref2[0],
          iB = _ref2[1],
          eA = _ref2[2],
          eB = _ref2[3];
        for (;; iA += dir, iB += dir) {
          if (iA == eA || iB == eB) return length;
          var chA = this.children[iA],
            chB = other.children[iB];
          if (chA != chB) return length + chA.scanIdentical(chB, dir);
          length += chA.length + 1;
        }
      }
    }], [{
      key: "from",
      value: function from(children) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
          return l + ch.length + 1;
        }, -1);
        var lines = 0;
        var _iterator5 = _createForOfIteratorHelper(children),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _ch = _step5.value;
            lines += _ch.lines;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        if (lines < 32 /* Tree.Branch */) {
          var flat = [];
          var _iterator6 = _createForOfIteratorHelper(children),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var ch = _step6.value;
              ch.flatten(flat);
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          return new TextLeaf(flat, length);
        }
        var chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */),
          maxChunk = chunk << 1,
          minChunk = chunk >> 1;
        var chunked = [],
          currentLines = 0,
          currentLen = -1,
          currentChunk = [];
        function add(child) {
          var last;
          if (child.lines > maxChunk && child instanceof TextNode) {
            var _iterator7 = _createForOfIteratorHelper(child.children),
              _step7;
            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var node = _step7.value;
                add(node);
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
            flush();
            chunked.push(child);
          } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */) {
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
          } else {
            if (currentLines + child.lines > chunk) flush();
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk.push(child);
          }
        }
        function flush() {
          if (currentLines == 0) return;
          chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
          currentLen = -1;
          currentLines = currentChunk.length = 0;
        }
        var _iterator8 = _createForOfIteratorHelper(children),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var child = _step8.value;
            add(child);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        flush();
        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
    }]);
  }(Text);
  Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
    var length = -1;
    var _iterator9 = _createForOfIteratorHelper(text),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var line = _step9.value;
        length += line.length + 1;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return length;
  }
  function appendText(text, target) {
    var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;
    for (var pos = 0, _i9 = 0, first = true; _i9 < text.length && pos <= to; _i9++) {
      var line = text[_i9],
        end = pos + line.length;
      if (end >= from) {
        if (end > to) line = line.slice(0, to - pos);
        if (pos < from) line = line.slice(from - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  function sliceText(text, from, to) {
    return appendText(text, [""], from, to);
  }
  var RawTextCursor = /*#__PURE__*/function () {
    function RawTextCursor(text) {
      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      _classCallCheck(this, RawTextCursor);
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text];
      this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
    }
    return _createClass(RawTextCursor, [{
      key: "nextInner",
      value: function nextInner(skip, dir) {
        this.done = this.lineBreak = false;
        for (;;) {
          var last = this.nodes.length - 1;
          var _top = this.nodes[last],
            offsetValue = this.offsets[last],
            offset = offsetValue >> 1;
          var size = _top instanceof TextLeaf ? _top.text.length : _top.children.length;
          if (offset == (dir > 0 ? size : 0)) {
            if (last == 0) {
              this.done = true;
              this.value = "";
              return this;
            }
            if (dir > 0) this.offsets[last - 1]++;
            this.nodes.pop();
            this.offsets.pop();
          } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
            this.offsets[last] += dir;
            if (skip == 0) {
              this.lineBreak = true;
              this.value = "\n";
              return this;
            }
            skip--;
          } else if (_top instanceof TextLeaf) {
            // Move to the next string
            var next = _top.text[offset + (dir < 0 ? -1 : 0)];
            this.offsets[last] += dir;
            if (next.length > Math.max(0, skip)) {
              this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
              return this;
            }
            skip -= next.length;
          } else {
            var _next = _top.children[offset + (dir < 0 ? -1 : 0)];
            if (skip > _next.length) {
              skip -= _next.length;
              this.offsets[last] += dir;
            } else {
              if (dir < 0) this.offsets[last]--;
              this.nodes.push(_next);
              this.offsets.push(dir > 0 ? 1 : (_next instanceof TextLeaf ? _next.text.length : _next.children.length) << 1);
            }
          }
        }
      }
    }, {
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (skip < 0) {
          this.nextInner(-skip, -this.dir);
          skip = this.value.length;
        }
        return this.nextInner(skip, this.dir);
      }
    }]);
  }();
  var PartialTextCursor = /*#__PURE__*/function () {
    function PartialTextCursor(text, start, end) {
      _classCallCheck(this, PartialTextCursor);
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
      this.pos = start > end ? text.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    return _createClass(PartialTextCursor, [{
      key: "nextInner",
      value: function nextInner(skip, dir) {
        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
          this.value = "";
          this.done = true;
          return this;
        }
        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
        var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
        if (skip > limit) skip = limit;
        limit -= skip;
        var _this$cursor$next = this.cursor.next(skip),
          value = _this$cursor$next.value;
        this.pos += (value.length + skip) * dir;
        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
        this.done = !this.value;
        return this;
      }
    }, {
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
        return this.nextInner(skip, this.cursor.dir);
      }
    }, {
      key: "lineBreak",
      get: function get() {
        return this.cursor.lineBreak && this.value != "";
      }
    }]);
  }();
  var LineCursor = /*#__PURE__*/function () {
    function LineCursor(inner) {
      _classCallCheck(this, LineCursor);
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    return _createClass(LineCursor, [{
      key: "next",
      value: function next() {
        var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var _this$inner$next = this.inner.next(skip),
          done = _this$inner$next.done,
          lineBreak = _this$inner$next.lineBreak,
          value = _this$inner$next.value;
        if (done && this.afterBreak) {
          this.value = "";
          this.afterBreak = false;
        } else if (done) {
          this.done = true;
          this.value = "";
        } else if (lineBreak) {
          if (this.afterBreak) {
            this.value = "";
          } else {
            this.afterBreak = true;
            this.next();
          }
        } else {
          this.value = value;
          this.afterBreak = false;
        }
        return this;
      }
    }, {
      key: "lineBreak",
      get: function get() {
        return false;
      }
    }]);
  }();
  if (typeof Symbol != "undefined") {
    Text.prototype[Symbol.iterator] = function () {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
      return this;
    };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  var Line = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Line(
    /**
    The position of the start of the line.
    */
    from,
    /**
    The position at the end of the line (_before_ the line break,
    or at the end of document for the last line).
    */
    to,
    /**
    This line's line number (1-based).
    */
    number,
    /**
    The line's content.
    */
    text) {
      _classCallCheck(this, Line);
      this.from = from;
      this.to = to;
      this.number = number;
      this.text = text;
    }
    /**
    The length of the line (not including any line break after it).
    */
    return _createClass(Line, [{
      key: "length",
      get: function get() {
        return this.to - this.from;
      }
    }]);
  }();
  function clip(text, from, to) {
    from = Math.max(0, Math.min(text.length, from));
    return [from, Math.max(from, Math.min(text.length, to))];
  }

  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos) {
    var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var includeExtending = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    return findClusterBreak$1(str, pos, forward, includeExtending);
  }
  function surrogateLow(ch) {
    return ch >= 0xDC00 && ch < 0xE000;
  }
  function surrogateHigh(ch) {
    return ch >= 0xD800 && ch < 0xDC00;
  }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
    var code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
    var code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1)) return code0;
    return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint(code) {
    if (code <= 0xffff) return String.fromCharCode(code);
    code -= 0x10000;
    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up in a JavaScript string.
  */
  function codePointSize(code) {
    return code < 0x10000 ? 1 : 2;
  }
  var DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/function (MapMode) {
    /**
    Map a position to a valid new position, even when its context
    was deleted.
    */
    MapMode[MapMode["Simple"] = 0] = "Simple";
    /**
    Return null if deletion happens across the position.
    */
    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
    /**
    Return null if the character _before_ the position is deleted.
    */
    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
    /**
    Return null if the character _after_ the position is deleted.
    */
    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode;
  }(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  var ChangeDesc = /*#__PURE__*/function () {
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    function ChangeDesc(
    /**
    @internal
    */
    sections) {
      _classCallCheck(this, ChangeDesc);
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    return _createClass(ChangeDesc, [{
      key: "length",
      get: function get() {
        var result = 0;
        for (var _i0 = 0; _i0 < this.sections.length; _i0 += 2) result += this.sections[_i0];
        return result;
      }
      /**
      The length of the document after the change.
      */
    }, {
      key: "newLength",
      get: function get() {
        var result = 0;
        for (var _i1 = 0; _i1 < this.sections.length; _i1 += 2) {
          var ins = this.sections[_i1 + 1];
          result += ins < 0 ? this.sections[_i1] : ins;
        }
        return result;
      }
      /**
      False when there are actual changes in this set.
      */
    }, {
      key: "empty",
      get: function get() {
        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
      }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
    }, {
      key: "iterGaps",
      value: function iterGaps(f) {
        for (var _i10 = 0, posA = 0, posB = 0; _i10 < this.sections.length;) {
          var len = this.sections[_i10++],
            ins = this.sections[_i10++];
          if (ins < 0) {
            f(posA, posB, len);
            posB += len;
          } else {
            posB += ins;
          }
          posA += len;
        }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
    }, {
      key: "iterChangedRanges",
      value: function iterChangedRanges(f) {
        var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
    }, {
      key: "invertedDesc",
      get: function get() {
        var sections = [];
        for (var _i11 = 0; _i11 < this.sections.length;) {
          var len = this.sections[_i11++],
            ins = this.sections[_i11++];
          if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
        }
        return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
    }, {
      key: "composeDesc",
      value: function composeDesc(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other);
      }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
    }, {
      key: "mapDesc",
      value: function mapDesc(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return other.empty ? this : mapSet(this, other, before);
      }
    }, {
      key: "mapPos",
      value: function mapPos(pos) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
        var posA = 0,
          posB = 0;
        for (var _i12 = 0; _i12 < this.sections.length;) {
          var len = this.sections[_i12++],
            ins = this.sections[_i12++],
            endA = posA + len;
          if (ins < 0) {
            if (endA > pos) return posB + (pos - posA);
            posB += len;
          } else {
            if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
            if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
            posB += ins;
          }
          posA = endA;
        }
        if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
        return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
    }, {
      key: "touchesRange",
      value: function touchesRange(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        for (var _i13 = 0, pos = 0; _i13 < this.sections.length && pos <= to;) {
          var len = this.sections[_i13++],
            ins = this.sections[_i13++],
            end = pos + len;
          if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
          pos = end;
        }
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        var result = "";
        for (var _i14 = 0; _i14 < this.sections.length;) {
          var len = this.sections[_i14++],
            ins = this.sections[_i14++];
          result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
        }
        return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.sections;
      }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
          return typeof a != "number";
        })) throw new RangeError("Invalid JSON representation of ChangeDesc");
        return new ChangeDesc(json);
      }
      /**
      @internal
      */
    }, {
      key: "create",
      value: function create(sections) {
        return new ChangeDesc(sections);
      }
    }]);
  }();
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
    function ChangeSet(sections,
    /**
    @internal
    */
    inserted) {
      var _this3;
      _classCallCheck(this, ChangeSet);
      _this3 = _callSuper(this, ChangeSet, [sections]);
      _this3.inserted = inserted;
      return _this3;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    _inherits(ChangeSet, _ChangeDesc);
    return _createClass(ChangeSet, [{
      key: "apply",
      value: function apply(doc) {
        if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
        _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
          return doc = doc.replace(fromB, fromB + (toA - fromA), text);
        }, false);
        return doc;
      }
    }, {
      key: "mapDesc",
      value: function mapDesc(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return mapSet(this, other, before, true);
      }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
    }, {
      key: "invert",
      value: function invert(doc) {
        var sections = this.sections.slice(),
          inserted = [];
        for (var _i15 = 0, pos = 0; _i15 < sections.length; _i15 += 2) {
          var len = sections[_i15],
            ins = sections[_i15 + 1];
          if (ins >= 0) {
            sections[_i15] = ins;
            sections[_i15 + 1] = len;
            var index = _i15 >> 1;
            while (inserted.length < index) inserted.push(Text.empty);
            inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
          }
          pos += len;
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
    }, {
      key: "compose",
      value: function compose(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other, true);
      }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
    }, {
      key: "map",
      value: function map(other) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return other.empty ? this : mapSet(this, other, before, true);
      }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
    }, {
      key: "iterChanges",
      value: function iterChanges(f) {
        var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
    }, {
      key: "desc",
      get: function get() {
        return ChangeDesc.create(this.sections);
      }
      /**
      @internal
      */
    }, {
      key: "filter",
      value: function filter(ranges) {
        var resultSections = [],
          resultInserted = [],
          filteredSections = [];
        var iter = new SectionIter(this);
        done: for (var _i16 = 0, pos = 0;;) {
          var next = _i16 == ranges.length ? 1e9 : ranges[_i16++];
          while (pos < next || pos == next && iter.len == 0) {
            if (iter.done) break done;
            var len = Math.min(iter.len, next - pos);
            addSection(filteredSections, len, -1);
            var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
            addSection(resultSections, len, ins);
            if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
            iter.forward(len);
            pos += len;
          }
          var end = ranges[_i16++];
          while (pos < end) {
            if (iter.done) break done;
            var _len = Math.min(iter.len, end - pos);
            addSection(resultSections, _len, -1);
            addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
            iter.forward(_len);
            pos += _len;
          }
        }
        return {
          changes: new ChangeSet(resultSections, resultInserted),
          filtered: ChangeDesc.create(filteredSections)
        };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        var parts = [];
        for (var _i17 = 0; _i17 < this.sections.length; _i17 += 2) {
          var len = this.sections[_i17],
            ins = this.sections[_i17 + 1];
          if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[_i17 >> 1].toJSON()));
        }
        return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
    }], [{
      key: "of",
      value: function of(changes, length, lineSep) {
        var sections = [],
          inserted = [],
          pos = 0;
        var total = null;
        function flush() {
          var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          if (!force && !sections.length) return;
          if (pos < length) addSection(sections, length - pos, -1);
          var set = new ChangeSet(sections, inserted);
          total = total ? total.compose(set.map(total)) : set;
          sections = [];
          inserted = [];
          pos = 0;
        }
        function process(spec) {
          if (Array.isArray(spec)) {
            var _iterator0 = _createForOfIteratorHelper(spec),
              _step0;
            try {
              for (_iterator0.s(); !(_step0 = _iterator0.n()).done;) {
                var sub = _step0.value;
                process(sub);
              }
            } catch (err) {
              _iterator0.e(err);
            } finally {
              _iterator0.f();
            }
          } else if (spec instanceof ChangeSet) {
            if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
            flush();
            total = total ? total.compose(spec.map(total)) : spec;
          } else {
            var from = spec.from,
              _spec$to = spec.to,
              to = _spec$to === void 0 ? from : _spec$to,
              _insert = spec.insert;
            if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
            var insText = !_insert ? Text.empty : typeof _insert == "string" ? Text.of(_insert.split(lineSep || DefaultSplit)) : _insert;
            var insLen = insText.length;
            if (from == to && insLen == 0) return;
            if (from < pos) flush();
            if (from > pos) addSection(sections, from - pos, -1);
            addSection(sections, to - from, insLen);
            addInsert(inserted, sections, insText);
            pos = to;
          }
        }
        process(changes);
        flush(!total);
        return total;
      }
      /**
      Create an empty changeset of the given length.
      */
    }, {
      key: "empty",
      value: function empty(length) {
        return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
    }, {
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
        var sections = [],
          inserted = [];
        for (var _i18 = 0; _i18 < json.length; _i18++) {
          var part = json[_i18];
          if (typeof part == "number") {
            sections.push(part, -1);
          } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
            return i && typeof e != "string";
          })) {
            throw new RangeError("Invalid JSON representation of ChangeSet");
          } else if (part.length == 1) {
            sections.push(part[0], 0);
          } else {
            while (inserted.length < _i18) inserted.push(Text.empty);
            inserted[_i18] = Text.of(part.slice(1));
            sections.push(part[0], inserted[_i18].length);
          }
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
    }, {
      key: "createSet",
      value: function createSet(sections, inserted) {
        return new ChangeSet(sections, inserted);
      }
    }]);
  }(ChangeDesc);
  function addSection(sections, len, ins) {
    var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (len == 0 && ins <= 0) return;
    var last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (last >= 0 && len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
    if (value.length == 0) return;
    var index = sections.length - 2 >> 1;
    if (index < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index) values.push(Text.empty);
      values.push(value);
    }
  }
  function _iterChanges(desc, f, individual) {
    var inserted = desc.inserted;
    for (var posA = 0, posB = 0, _i19 = 0; _i19 < desc.sections.length;) {
      var len = desc.sections[_i19++],
        ins = desc.sections[_i19++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        var endA = posA,
          endB = posB,
          text = Text.empty;
        for (;;) {
          endA += len;
          endB += ins;
          if (ins && inserted) text = text.append(inserted[_i19 - 2 >> 1]);
          if (individual || _i19 == desc.sections.length || desc.sections[_i19 + 1] < 0) break;
          len = desc.sections[_i19++];
          ins = desc.sections[_i19++];
        }
        f(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before) {
    var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // Produce a copy of setA that applies to the document after setB
    // has been applied (assuming both start at the same document).
    var sections = [],
      insert = mkSet ? [] : null;
    var a = new SectionIter(setA),
      b = new SectionIter(setB);
    // Iterate over both sets in parallel. inserted tracks, for changes
    // in A that have to be processed piece-by-piece, whether their
    // content has been inserted already, and refers to the section
    // index.
    for (var inserted = -1;;) {
      if (a.done && b.len || b.done && a.len) {
        throw new Error("Mismatched change set lengths");
      } else if (a.ins == -1 && b.ins == -1) {
        // Move across ranges skipped by both sets.
        var len = Math.min(a.len, b.len);
        addSection(sections, len, -1);
        a.forward(len);
        b.forward(len);
      } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
        // If there's a change in B that comes before the next change in
        // A (ordered by start pos, then len, then before flag), skip
        // that (and process any changes in A it covers).
        var _len2 = b.len;
        addSection(sections, b.ins, -1);
        while (_len2) {
          var piece = Math.min(a.len, _len2);
          if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
            addSection(sections, 0, a.ins);
            if (insert) addInsert(insert, sections, a.text);
            inserted = a.i;
          }
          a.forward(piece);
          _len2 -= piece;
        }
        b.next();
      } else if (a.ins >= 0) {
        // Process the part of a change in A up to the start of the next
        // non-deletion change in B (if overlapping).
        var _len3 = 0,
          left = a.len;
        while (left) {
          if (b.ins == -1) {
            var _piece = Math.min(left, b.len);
            _len3 += _piece;
            left -= _piece;
            b.forward(_piece);
          } else if (b.ins == 0 && b.len < left) {
            left -= b.len;
            b.next();
          } else {
            break;
          }
        }
        addSection(sections, _len3, inserted < a.i ? a.ins : 0);
        if (insert && inserted < a.i) addInsert(insert, sections, a.text);
        inserted = a.i;
        a.forward(a.len - left);
      } else if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB) {
    var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var sections = [];
    var insert = mkSet ? [] : null;
    var a = new SectionIter(setA),
      b = new SectionIter(setB);
    for (var open = false;;) {
      if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else if (a.ins == 0) {
        // Deletion in A
        addSection(sections, a.len, 0, open);
        a.next();
      } else if (b.len == 0 && !b.done) {
        // Insertion in B
        addSection(sections, 0, b.ins, open);
        if (insert) addInsert(insert, sections, b.text);
        b.next();
      } else if (a.done || b.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        var len = Math.min(a.len2, b.len),
          sectionLen = sections.length;
        if (a.ins == -1) {
          var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
          addSection(sections, len, insB, open);
          if (insert && insB) addInsert(insert, sections, b.text);
        } else if (b.ins == -1) {
          addSection(sections, a.off ? 0 : a.len, len, open);
          if (insert) addInsert(insert, sections, a.textBit(len));
        } else {
          addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
          if (insert && !b.off) addInsert(insert, sections, b.text);
        }
        open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
        a.forward2(len);
        b.forward(len);
      }
    }
  }
  var SectionIter = /*#__PURE__*/function () {
    function SectionIter(set) {
      _classCallCheck(this, SectionIter);
      this.set = set;
      this.i = 0;
      this.next();
    }
    return _createClass(SectionIter, [{
      key: "next",
      value: function next() {
        var sections = this.set.sections;
        if (this.i < sections.length) {
          this.len = sections[this.i++];
          this.ins = sections[this.i++];
        } else {
          this.len = 0;
          this.ins = -2;
        }
        this.off = 0;
      }
    }, {
      key: "done",
      get: function get() {
        return this.ins == -2;
      }
    }, {
      key: "len2",
      get: function get() {
        return this.ins < 0 ? this.len : this.ins;
      }
    }, {
      key: "text",
      get: function get() {
        var inserted = this.set.inserted,
          index = this.i - 2 >> 1;
        return index >= inserted.length ? Text.empty : inserted[index];
      }
    }, {
      key: "textBit",
      value: function textBit(len) {
        var inserted = this.set.inserted,
          index = this.i - 2 >> 1;
        return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
    }, {
      key: "forward",
      value: function forward(len) {
        if (len == this.len) this.next();else {
          this.len -= len;
          this.off += len;
        }
      }
    }, {
      key: "forward2",
      value: function forward2(len) {
        if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
          this.ins -= len;
          this.off += len;
        }
      }
    }]);
  }();
  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  var SelectionRange = /*#__PURE__*/function () {
    function SelectionRange(
    /**
    The lower boundary of the range.
    */
    from,
    /**
    The upper boundary of the range.
    */
    to, flags) {
      _classCallCheck(this, SelectionRange);
      this.from = from;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    return _createClass(SelectionRange, [{
      key: "anchor",
      get: function get() {
        return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from;
      }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
    }, {
      key: "head",
      get: function get() {
        return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to;
      }
      /**
      True when `anchor` and `head` are at the same position.
      */
    }, {
      key: "empty",
      get: function get() {
        return this.from == this.to;
      }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
    }, {
      key: "assoc",
      get: function get() {
        return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0;
      }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
    }, {
      key: "bidiLevel",
      get: function get() {
        var level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
        return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
    }, {
      key: "goalColumn",
      get: function get() {
        var value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
        return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
    }, {
      key: "map",
      value: function map(change) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        var from, to;
        if (this.empty) {
          from = to = change.mapPos(this.from, assoc);
        } else {
          from = change.mapPos(this.from, 1);
          to = change.mapPos(this.to, -1);
        }
        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
    }, {
      key: "extend",
      value: function extend(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
        var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
        return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        var includeAssoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          anchor: this.anchor,
          head: this.head
        };
      }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
        return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
    }, {
      key: "create",
      value: function create(from, to, flags) {
        return new SelectionRange(from, to, flags);
      }
    }]);
  }();
  /**
  An editor selection holds one or more selection ranges.
  */
  var EditorSelection = /*#__PURE__*/function () {
    function EditorSelection(
    /**
    The ranges in the selection, sorted by position. Ranges cannot
    overlap (but they may touch, if they aren't empty).
    */
    ranges,
    /**
    The index of the _main_ range in the selection (which is
    usually the range that was added last).
    */
    mainIndex) {
      _classCallCheck(this, EditorSelection);
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    return _createClass(EditorSelection, [{
      key: "map",
      value: function map(change) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        if (change.empty) return this;
        return EditorSelection.create(this.ranges.map(function (r) {
          return r.map(change, assoc);
        }), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        var includeAssoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
        for (var _i20 = 0; _i20 < this.ranges.length; _i20++) if (!this.ranges[_i20].eq(other.ranges[_i20], includeAssoc)) return false;
        return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
    }, {
      key: "main",
      get: function get() {
        return this.ranges[this.mainIndex];
      }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
    }, {
      key: "asSingle",
      value: function asSingle() {
        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
    }, {
      key: "addRange",
      value: function addRange(range) {
        var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
    }, {
      key: "replaceRange",
      value: function replaceRange(range) {
        var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
        var ranges = this.ranges.slice();
        ranges[which] = range;
        return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          ranges: this.ranges.map(function (r) {
            return r.toJSON();
          }),
          main: this.mainIndex
        };
      }
      /**
      Create a selection from a JSON representation.
      */
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
        return new EditorSelection(json.ranges.map(function (r) {
          return SelectionRange.fromJSON(r);
        }), json.main);
      }
      /**
      Create a selection holding a single range.
      */
    }, {
      key: "single",
      value: function single(anchor) {
        var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
    }, {
      key: "create",
      value: function create(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
        for (var pos = 0, _i21 = 0; _i21 < ranges.length; _i21++) {
          var range = ranges[_i21];
          if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
          pos = range.to;
        }
        return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
    }, {
      key: "cursor",
      value: function cursor(pos) {
        var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
        var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */);
      }
      /**
      Create a selection range.
      */
    }, {
      key: "range",
      value: function range(anchor, head, goalColumn, bidiLevel) {
        var flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */ | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
        return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
      }
      /**
      @internal
      */
    }, {
      key: "normalized",
      value: function normalized(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var main = ranges[mainIndex];
        ranges.sort(function (a, b) {
          return a.from - b.from;
        });
        mainIndex = ranges.indexOf(main);
        for (var _i22 = 1; _i22 < ranges.length; _i22++) {
          var range = ranges[_i22],
            prev = ranges[_i22 - 1];
          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            var from = prev.from,
              to = Math.max(range.to, prev.to);
            if (_i22 <= mainIndex) mainIndex--;
            ranges.splice(--_i22, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }
        return new EditorSelection(ranges, mainIndex);
      }
    }]);
  }();
  function checkSelection(selection, docLength) {
    var _iterator1 = _createForOfIteratorHelper(selection.ranges),
      _step1;
    try {
      for (_iterator1.s(); !(_step1 = _iterator1.n()).done;) {
        var range = _step1.value;
        if (range.to > docLength) throw new RangeError("Selection points outside of document");
      }
    } catch (err) {
      _iterator1.e(err);
    } finally {
      _iterator1.f();
    }
  }
  var nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.
   Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
   Note that `Facet` instances can be used anywhere where
  [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
  */
  var Facet = /*#__PURE__*/function () {
    function Facet(
    /**
    @internal
    */
    combine,
    /**
    @internal
    */
    compareInput,
    /**
    @internal
    */
    compare, isStatic, enables) {
      _classCallCheck(this, Facet);
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare;
      this.isStatic = isStatic;
      /**
      @internal
      */
      this.id = nextID++;
      this["default"] = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Returns a facet reader for this facet, which can be used to
    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
    */
    return _createClass(Facet, [{
      key: "reader",
      get: function get() {
        return this;
      }
      /**
      Define a new facet.
      */
    }, {
      key: "of",
      value:
      /**
      Returns an extension that adds the given value to this facet.
      */
      function of(value) {
        return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
    }, {
      key: "compute",
      value: function compute(deps, get) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
    }, {
      key: "computeN",
      value: function computeN(deps, get) {
        if (this.isStatic) throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
    }, {
      key: "from",
      value: function from(field, get) {
        if (!get) get = function get(x) {
          return x;
        };
        return this.compute([field], function (state) {
          return get(state.field(field));
        });
      }
    }], [{
      key: "define",
      value: function define() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new Facet(config.combine || function (a) {
          return a;
        }, config.compareInput || function (a, b) {
          return a === b;
        }, config.compare || (!config.combine ? sameArray$1 : function (a, b) {
          return a === b;
        }), !!config["static"], config.enables);
      }
    }]);
  }();
  function sameArray$1(a, b) {
    return a == b || a.length == b.length && a.every(function (e, i) {
      return e === b[i];
    });
  }
  var FacetProvider = /*#__PURE__*/function () {
    function FacetProvider(dependencies, facet, type, value) {
      _classCallCheck(this, FacetProvider);
      this.dependencies = dependencies;
      this.facet = facet;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    return _createClass(FacetProvider, [{
      key: "dynamicSlot",
      value: function dynamicSlot(addresses) {
        var _this4 = this;
        var _a;
        var getter = this.value;
        var compare = this.facet.compareInput;
        var id = this.id,
          idx = addresses[id] >> 1,
          multi = this.type == 2 /* Provider.Multi */;
        var depDoc = false,
          depSel = false,
          depAddrs = [];
        var _iterator10 = _createForOfIteratorHelper(this.dependencies),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var dep = _step10.value;
            if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        return {
          create: function create(state) {
            state.values[idx] = getter(state);
            return 1 /* SlotStatus.Changed */;
          },
          update: function update(state, tr) {
            if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
              var newVal = getter(state);
              if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                state.values[idx] = newVal;
                return 1 /* SlotStatus.Changed */;
              }
            }
            return 0;
          },
          reconfigure: function reconfigure(state, oldState) {
            var newVal,
              oldAddr = oldState.config.address[id];
            if (oldAddr != null) {
              var oldVal = getAddr(oldState, oldAddr);
              if (_this4.dependencies.every(function (dep) {
                return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
              }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                state.values[idx] = oldVal;
                return 0;
              }
            } else {
              newVal = getter(state);
            }
            state.values[idx] = newVal;
            return 1 /* SlotStatus.Changed */;
          }
        };
      }
    }]);
  }();
  function compareArray(a, b, compare) {
    if (a.length != b.length) return false;
    for (var _i23 = 0; _i23 < a.length; _i23++) if (!compare(a[_i23], b[_i23])) return false;
    return true;
  }
  function ensureAll(state, addrs) {
    var changed = false;
    var _iterator11 = _createForOfIteratorHelper(addrs),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var addr = _step11.value;
        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */) changed = true;
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    var providerAddrs = providers.map(function (p) {
      return addresses[p.id];
    });
    var providerTypes = providers.map(function (p) {
      return p.type;
    });
    var dynamic = providerAddrs.filter(function (p) {
      return !(p & 1);
    });
    var idx = addresses[facet.id] >> 1;
    function get(state) {
      var values = [];
      for (var _i24 = 0; _i24 < providerAddrs.length; _i24++) {
        var value = getAddr(state, providerAddrs[_i24]);
        if (providerTypes[_i24] == 2 /* Provider.Multi */) {
          var _iterator12 = _createForOfIteratorHelper(value),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var val = _step12.value;
              values.push(val);
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        } else values.push(value);
      }
      return facet.combine(values);
    }
    return {
      create: function create(state) {
        var _iterator13 = _createForOfIteratorHelper(providerAddrs),
          _step13;
        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var addr = _step13.value;
            ensureAddr(state, addr);
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
        state.values[idx] = get(state);
        return 1 /* SlotStatus.Changed */;
      },
      update: function update(state, tr) {
        if (!ensureAll(state, dynamic)) return 0;
        var value = get(state);
        if (facet.compare(value, state.values[idx])) return 0;
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      },
      reconfigure: function reconfigure(state, oldState) {
        var depChanged = ensureAll(state, providerAddrs);
        var oldProviders = oldState.config.facets[facet.id],
          oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        var value = get(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      }
    };
  }
  var initField = /*@__PURE__*/Facet.define({
    "static": true
  });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  var StateField = /*#__PURE__*/function () {
    function StateField(
    /**
    @internal
    */
    id, createF, updateF, compareF,
    /**
    @internal
    */
    spec) {
      _classCallCheck(this, StateField);
      this.id = id;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      /**
      @internal
      */
      this.provides = undefined;
    }
    /**
    Define a state field.
    */
    return _createClass(StateField, [{
      key: "create",
      value: function create(state) {
        var _this5 = this;
        var init = state.facet(initField).find(function (i) {
          return i.field == _this5;
        });
        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
    }, {
      key: "slot",
      value: function slot(addresses) {
        var _this6 = this;
        var idx = addresses[this.id] >> 1;
        return {
          create: function create(state) {
            state.values[idx] = _this6.create(state);
            return 1 /* SlotStatus.Changed */;
          },
          update: function update(state, tr) {
            var oldVal = state.values[idx];
            var value = _this6.updateF(oldVal, tr);
            if (_this6.compareF(oldVal, value)) return 0;
            state.values[idx] = value;
            return 1 /* SlotStatus.Changed */;
          },
          reconfigure: function reconfigure(state, oldState) {
            var init = state.facet(initField),
              oldInit = oldState.facet(initField),
              reInit;
            if ((reInit = init.find(function (i) {
              return i.field == _this6;
            })) && reInit != oldInit.find(function (i) {
              return i.field == _this6;
            })) {
              state.values[idx] = reInit.create(state);
              return 1 /* SlotStatus.Changed */;
            }
            if (oldState.config.address[_this6.id] != null) {
              state.values[idx] = oldState.field(_this6);
              return 0;
            }
            state.values[idx] = _this6.create(state);
            return 1 /* SlotStatus.Changed */;
          }
        };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
    }, {
      key: "init",
      value: function init(create) {
        return [this, initField.of({
          field: this,
          create: create
        })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
    }, {
      key: "extension",
      get: function get() {
        return this;
      }
    }], [{
      key: "define",
      value: function define(config) {
        var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
          return a === b;
        }, config);
        if (config.provide) field.provides = config.provide(field);
        return field;
      }
    }]);
  }();
  var Prec_ = {
    lowest: 4,
    low: 3,
    "default": 2,
    high: 1,
    highest: 0
  };
  function prec(value) {
    return function (ext) {
      return new PrecExtension(ext, value);
    };
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  var Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /*@__PURE__*/prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /*@__PURE__*/prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    "default": /*@__PURE__*/prec(Prec_["default"]),
    /**
    A lower-than-default precedence.
    */
    low: /*@__PURE__*/prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
    _classCallCheck(this, PrecExtension);
    this.inner = inner;
    this.prec = prec;
  });
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  var Compartment = /*#__PURE__*/function () {
    function Compartment() {
      _classCallCheck(this, Compartment);
    }
    return _createClass(Compartment, [{
      key: "of",
      value:
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      function of(ext) {
        return new CompartmentInstance(this, ext);
      }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
    }, {
      key: "reconfigure",
      value: function reconfigure(content) {
        return Compartment.reconfigure.of({
          compartment: this,
          extension: content
        });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
    }, {
      key: "get",
      value: function get(state) {
        return state.config.compartments.get(this);
      }
    }]);
  }();
  var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
    _classCallCheck(this, CompartmentInstance);
    this.compartment = compartment;
    this.inner = inner;
  });
  var Configuration = /*#__PURE__*/function () {
    function Configuration(base, compartments, dynamicSlots, address, staticValues, facets) {
      _classCallCheck(this, Configuration);
      this.base = base;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
    }
    return _createClass(Configuration, [{
      key: "staticFacet",
      value: function staticFacet(facet) {
        var addr = this.address[facet.id];
        return addr == null ? facet["default"] : this.staticValues[addr >> 1];
      }
    }], [{
      key: "resolve",
      value: function resolve(base, compartments, oldState) {
        var fields = [];
        var facets = Object.create(null);
        var newCompartments = new Map();
        var _iterator14 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var ext = _step14.value;
            if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
        var address = Object.create(null);
        var staticValues = [];
        var dynamicSlots = [];
        var _loop = function _loop() {
          var field = _fields[_i25];
          address[field.id] = dynamicSlots.length << 1;
          dynamicSlots.push(function (a) {
            return field.slot(a);
          });
        };
        for (var _i25 = 0, _fields = fields; _i25 < _fields.length; _i25++) {
          _loop();
        }
        var oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
        var _loop2 = function _loop2() {
          var providers = facets[_id],
            facet = providers[0].facet;
          var oldProviders = oldFacets && oldFacets[_id] || [];
          if (providers.every(function (p) {
            return p.type == 0;
          } /* Provider.Static */)) {
            address[facet.id] = staticValues.length << 1 | 1;
            if (sameArray$1(oldProviders, providers)) {
              staticValues.push(oldState.facet(facet));
            } else {
              var value = facet.combine(providers.map(function (p) {
                return p.value;
              }));
              staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
            }
          } else {
            var _iterator15 = _createForOfIteratorHelper(providers),
              _step15;
            try {
              var _loop3 = function _loop3() {
                var p = _step15.value;
                if (p.type == 0 /* Provider.Static */) {
                  address[p.id] = staticValues.length << 1 | 1;
                  staticValues.push(p.value);
                } else {
                  address[p.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(function (a) {
                    return p.dynamicSlot(a);
                  });
                }
              };
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                _loop3();
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
            address[facet.id] = dynamicSlots.length << 1;
            dynamicSlots.push(function (a) {
              return dynamicFacetSlot(a, facet, providers);
            });
          }
        };
        for (var _id in facets) {
          _loop2();
        }
        var dynamic = dynamicSlots.map(function (f) {
          return f(address);
        });
        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
    }]);
  }();
  function flatten(extension, compartments, newCompartments) {
    var result = [[], [], [], [], []];
    var seen = new Map();
    function inner(ext, prec) {
      var known = seen.get(ext);
      if (known != null) {
        if (known <= prec) return;
        var found = result[known].indexOf(ext);
        if (found > -1) result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
      }
      seen.set(ext, prec);
      if (Array.isArray(ext)) {
        var _iterator16 = _createForOfIteratorHelper(ext),
          _step16;
        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var e = _step16.value;
            inner(e, prec);
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
        var _content2 = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, _content2);
        inner(_content2, prec);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec].push(ext);
        if (ext.provides) inner(ext.provides, prec);
      } else if (ext instanceof FacetProvider) {
        result[prec].push(ext);
        if (ext.facet.extensions) inner(ext.facet.extensions, Prec_["default"]);
      } else {
        var _content3 = ext.extension;
        if (!_content3) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
        inner(_content3, prec);
      }
    }
    inner(extension, Prec_["default"]);
    return result.reduce(function (a, b) {
      return a.concat(b);
    });
  }
  function ensureAddr(state, addr) {
    if (addr & 1) return 2 /* SlotStatus.Computed */;
    var idx = addr >> 1;
    var status = state.status[idx];
    if (status == 4 /* SlotStatus.Computing */) throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2 /* SlotStatus.Computed */) return status;
    state.status[idx] = 4 /* SlotStatus.Computing */;
    var changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  var languageData = /*@__PURE__*/Facet.define();
  var allowMultipleSelections = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (v) {
        return v;
      });
    },
    "static": true
  });
  var lineSeparator = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : undefined;
    },
    "static": true
  });
  var changeFilter = /*@__PURE__*/Facet.define();
  var transactionFilter = /*@__PURE__*/Facet.define();
  var transactionExtender = /*@__PURE__*/Facet.define();
  var readOnly = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : false;
    }
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  var Annotation = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Annotation(
    /**
    The annotation type.
    */
    type,
    /**
    The value of this annotation.
    */
    value) {
      _classCallCheck(this, Annotation);
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    return _createClass(Annotation, null, [{
      key: "define",
      value: function define() {
        return new AnnotationType();
      }
    }]);
  }();
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  var AnnotationType = /*#__PURE__*/function () {
    function AnnotationType() {
      _classCallCheck(this, AnnotationType);
    }
    return _createClass(AnnotationType, [{
      key: "of",
      value:
      /**
      Create an instance of this annotation.
      */
      function of(value) {
        return new Annotation(this, value);
      }
    }]);
  }();
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  var StateEffectType = /*#__PURE__*/function () {
    /**
    @internal
    */
    function StateEffectType(
    // The `any` types in these function types are there to work
    // around TypeScript issue #37631, where the type guard on
    // `StateEffect.is` mysteriously stops working when these properly
    // have type `Value`.
    /**
    @internal
    */
    map) {
      _classCallCheck(this, StateEffectType);
      this.map = map;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    return _createClass(StateEffectType, [{
      key: "of",
      value: function of(value) {
        return new StateEffect(this, value);
      }
    }]);
  }();
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  var StateEffect = /*#__PURE__*/function () {
    /**
    @internal
    */
    function StateEffect(
    /**
    @internal
    */
    type,
    /**
    The value of this effect.
    */
    value) {
      _classCallCheck(this, StateEffect);
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    return _createClass(StateEffect, [{
      key: "map",
      value: function map(mapping) {
        var mapped = this.type.map(this.value, mapping);
        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
    }, {
      key: "is",
      value: function is(type) {
        return this.type == type;
      }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
    }], [{
      key: "define",
      value: function define() {
        var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new StateEffectType(spec.map || function (v) {
          return v;
        });
      }
      /**
      Map an array of effects through a change set.
      */
    }, {
      key: "mapEffects",
      value: function mapEffects(effects, mapping) {
        if (!effects.length) return effects;
        var result = [];
        var _iterator17 = _createForOfIteratorHelper(effects),
          _step17;
        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var effect = _step17.value;
            var mapped = effect.map(mapping);
            if (mapped) result.push(mapped);
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }
        return result;
      }
    }]);
  }();
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  var Transaction = /*#__PURE__*/function () {
    function Transaction(
    /**
    The state from which the transaction starts.
    */
    startState,
    /**
    The document changes made by this transaction.
    */
    changes,
    /**
    The selection set by this transaction, or undefined if it
    doesn't explicitly set a selection.
    */
    selection,
    /**
    The effects added to the transaction.
    */
    effects,
    /**
    @internal
    */
    annotations,
    /**
    Whether the selection should be scrolled into view after this
    transaction is dispatched.
    */
    scrollIntoView) {
      _classCallCheck(this, Transaction);
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView;
      /**
      @internal
      */
      this._doc = null;
      /**
      @internal
      */
      this._state = null;
      if (selection) checkSelection(selection, changes.newLength);
      if (!annotations.some(function (a) {
        return a.type == Transaction.time;
      })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    return _createClass(Transaction, [{
      key: "newDoc",
      get:
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      function get() {
        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
    }, {
      key: "newSelection",
      get: function get() {
        return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
    }, {
      key: "state",
      get: function get() {
        if (!this._state) this.startState.applyTransaction(this);
        return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
    }, {
      key: "annotation",
      value: function annotation(type) {
        var _iterator18 = _createForOfIteratorHelper(this.annotations),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var ann = _step18.value;
            if (ann.type == type) return ann.value;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
    }, {
      key: "docChanged",
      get: function get() {
        return !this.changes.empty;
      }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
    }, {
      key: "reconfigured",
      get: function get() {
        return this.startState.config != this.state.config;
      }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
    }, {
      key: "isUserEvent",
      value: function isUserEvent(event) {
        var e = this.annotation(Transaction.userEvent);
        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
    }], [{
      key: "create",
      value: function create(startState, changes, selection, effects, annotations, scrollIntoView) {
        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
    }]);
  }();
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:
    - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions
   Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
    var result = [];
    for (var iA = 0, iB = 0;;) {
      var from = void 0,
        to = void 0;
      if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
        from = a[iA++];
        to = a[iA++];
      } else if (iB < b.length) {
        from = b[iB++];
        to = b[iB++];
      } else return result;
      if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a, b, sequential) {
    var _a;
    var mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b.changes;
      mapForB = ChangeSet.empty(b.changes.length);
      changes = a.changes.compose(b.changes);
    } else {
      mapForA = b.changes.map(a.changes);
      mapForB = a.changes.mapDesc(b.changes, true);
      changes = a.changes.compose(mapForA);
    }
    return {
      changes: changes,
      selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
      effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
      annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
      scrollIntoView: a.scrollIntoView || b.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    var sel = spec.selection,
      annotations = asArray$1(spec.annotations);
    if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray$1(spec.effects),
      annotations: annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false) filter = false;
    for (var _i26 = 1; _i26 < specs.length; _i26++) {
      if (specs[_i26].filter === false) filter = false;
      var seq = !!specs[_i26].sequential;
      s = mergeTransaction(s, resolveTransactionInner(state, specs[_i26], seq ? s.changes.newLength : state.doc.length), seq);
    }
    var tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
    var state = tr.startState;
    // Change filters
    var result = true;
    var _iterator19 = _createForOfIteratorHelper(state.facet(changeFilter)),
      _step19;
    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
        var filter = _step19.value;
        var value = filter(tr);
        if (value === false) {
          result = false;
          break;
        }
        if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }
    if (result !== true) {
      var changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        var filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    // Transaction filters
    var filters = state.facet(transactionFilter);
    for (var _i27 = filters.length - 1; _i27 >= 0; _i27--) {
      var _filtered = filters[_i27](tr);
      if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray$1(_filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    var state = tr.startState,
      extenders = state.facet(transactionExtender),
      spec = tr;
    for (var _i28 = extenders.length - 1; _i28 >= 0; _i28--) {
      var extension = extenders[_i28](tr);
      if (extension && Object.keys(extension).length) spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  var none$2 = [];
  function asArray$1(value) {
    return value == null ? none$2 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/function (CharCategory) {
    /**
    Word characters.
    */
    CharCategory[CharCategory["Word"] = 0] = "Word";
    /**
    Whitespace.
    */
    CharCategory[CharCategory["Space"] = 1] = "Space";
    /**
    Anything else.
    */
    CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory;
  }(CharCategory || (CharCategory = {}));
  var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  var wordChar;
  try {
    wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_) {}
  function hasWordChar(str) {
    if (wordChar) return wordChar.test(str);
    for (var _i29 = 0; _i29 < str.length; _i29++) {
      var ch = str[_i29];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return function (_char) {
      if (!/\S/.test(_char)) return CharCategory.Space;
      if (hasWordChar(_char)) return CharCategory.Word;
      for (var _i30 = 0; _i30 < wordChars.length; _i30++) if (_char.indexOf(wordChars[_i30]) > -1) return CharCategory.Word;
      return CharCategory.Other;
    };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.
   As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  var EditorState = /*#__PURE__*/function () {
    function EditorState(
    /**
    @internal
    */
    config,
    /**
    The current document.
    */
    doc,
    /**
    The current selection.
    */
    selection,
    /**
    @internal
    */
    values, computeSlot, tr) {
      _classCallCheck(this, EditorState);
      this.config = config;
      this.doc = doc;
      this.selection = selection;
      this.values = values;
      this.status = config.statusTemplate.slice();
      this.computeSlot = computeSlot;
      // Fill in the computed state immediately, so that further queries
      // for it made during the update return this state
      if (tr) tr._state = this;
      for (var _i31 = 0; _i31 < this.config.dynamicSlots.length; _i31++) ensureAddr(this, _i31 << 1);
      this.computeSlot = null;
    }
    return _createClass(EditorState, [{
      key: "field",
      value: function field(_field) {
        var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var addr = this.config.address[_field.id];
        if (addr == null) {
          if (require) throw new RangeError("Field is not present in this state");
          return undefined;
        }
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
    }, {
      key: "update",
      value: function update() {
        for (var _len4 = arguments.length, specs = new Array(_len4), _key = 0; _key < _len4; _key++) {
          specs[_key] = arguments[_key];
        }
        return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
    }, {
      key: "applyTransaction",
      value: function applyTransaction(tr) {
        var _this7 = this;
        var conf = this.config,
          _conf = conf,
          base = _conf.base,
          compartments = _conf.compartments;
        var _iterator20 = _createForOfIteratorHelper(tr.effects),
          _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var effect = _step20.value;
            if (effect.is(Compartment.reconfigure)) {
              if (conf) {
                compartments = new Map();
                conf.compartments.forEach(function (val, key) {
                  return compartments.set(key, val);
                });
                conf = null;
              }
              compartments.set(effect.value.compartment, effect.value.extension);
            } else if (effect.is(StateEffect.reconfigure)) {
              conf = null;
              base = effect.value;
            } else if (effect.is(StateEffect.appendConfig)) {
              conf = null;
              base = asArray$1(base).concat(effect.value);
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
        var startValues;
        if (!conf) {
          conf = Configuration.resolve(base, compartments, this);
          var intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(function () {
            return null;
          }), function (state, slot) {
            return slot.reconfigure(state, _this7);
          }, null);
          startValues = intermediateState.values;
        } else {
          startValues = tr.startState.values.slice();
        }
        var selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
        new EditorState(conf, tr.newDoc, selection, startValues, function (state, slot) {
          return slot.update(state, tr);
        }, tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
    }, {
      key: "replaceSelection",
      value: function replaceSelection(text) {
        if (typeof text == "string") text = this.toText(text);
        return this.changeByRange(function (range) {
          return {
            changes: {
              from: range.from,
              to: range.to,
              insert: text
            },
            range: EditorSelection.cursor(range.from + text.length)
          };
        });
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
    }, {
      key: "changeByRange",
      value: function changeByRange(f) {
        var sel = this.selection;
        var result1 = f(sel.ranges[0]);
        var changes = this.changes(result1.changes),
          ranges = [result1.range];
        var effects = asArray$1(result1.effects);
        for (var _i32 = 1; _i32 < sel.ranges.length; _i32++) {
          var result = f(sel.ranges[_i32]);
          var newChanges = this.changes(result.changes),
            newMapped = newChanges.map(changes);
          for (var j = 0; j < _i32; j++) ranges[j] = ranges[j].map(newMapped);
          var mapBy = changes.mapDesc(newChanges, true);
          ranges.push(result.range.map(mapBy));
          changes = changes.compose(newMapped);
          effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
        }
        return {
          changes: changes,
          selection: EditorSelection.create(ranges, sel.mainIndex),
          effects: effects
        };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
    }, {
      key: "changes",
      value: function changes() {
        var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        if (spec instanceof ChangeSet) return spec;
        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
    }, {
      key: "toText",
      value: function toText(string) {
        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
    }, {
      key: "sliceDoc",
      value: function sliceDoc() {
        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
        return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
    }, {
      key: "facet",
      value: function facet(_facet) {
        var addr = this.config.address[_facet.id];
        if (addr == null) return _facet["default"];
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
    }, {
      key: "toJSON",
      value: function toJSON(fields) {
        var result = {
          doc: this.sliceDoc(),
          selection: this.selection.toJSON()
        };
        if (fields) for (var prop in fields) {
          var value = fields[prop];
          if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
        }
        return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
    }, {
      key: "tabSize",
      get:
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      function get() {
        return this.facet(EditorState.tabSize);
      }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
    }, {
      key: "lineBreak",
      get: function get() {
        return this.facet(EditorState.lineSeparator) || "\n";
      }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
    }, {
      key: "readOnly",
      get: function get() {
        return this.facet(readOnly);
      }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
    }, {
      key: "phrase",
      value: function phrase(_phrase) {
        for (var _len5 = arguments.length, insert = new Array(_len5 > 1 ? _len5 - 1 : 0), _key2 = 1; _key2 < _len5; _key2++) {
          insert[_key2 - 1] = arguments[_key2];
        }
        var _iterator21 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
          _step21;
        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var map = _step21.value;
            if (Object.prototype.hasOwnProperty.call(map, _phrase)) {
              _phrase = map[_phrase];
              break;
            }
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }
        if (insert.length) _phrase = _phrase.replace(/\$(\$|\d*)/g, function (m, i) {
          if (i == "$") return "$";
          var n = +(i || 1);
          return !n || n > insert.length ? m : insert[n - 1];
        });
        return _phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
    }, {
      key: "languageDataAt",
      value: function languageDataAt(name, pos) {
        var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var values = [];
        var _iterator22 = _createForOfIteratorHelper(this.facet(languageData)),
          _step22;
        try {
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            var provider = _step22.value;
            var _iterator23 = _createForOfIteratorHelper(provider(this, pos, side)),
              _step23;
            try {
              for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                var result = _step23.value;
                if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
              }
            } catch (err) {
              _iterator23.e(err);
            } finally {
              _iterator23.f();
            }
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
        return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
    }, {
      key: "charCategorizer",
      value: function charCategorizer(at) {
        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
    }, {
      key: "wordAt",
      value: function wordAt(pos) {
        var _this$doc$lineAt = this.doc.lineAt(pos),
          text = _this$doc$lineAt.text,
          from = _this$doc$lineAt.from,
          length = _this$doc$lineAt.length;
        var cat = this.charCategorizer(pos);
        var start = pos - from,
          end = pos - from;
        while (start > 0) {
          var prev = findClusterBreak(text, start, false);
          if (cat(text.slice(prev, start)) != CharCategory.Word) break;
          start = prev;
        }
        while (end < length) {
          var next = findClusterBreak(text, end);
          if (cat(text.slice(end, next)) != CharCategory.Word) break;
          end = next;
        }
        return start == end ? null : EditorSelection.range(start + from, end + from);
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var fields = arguments.length > 2 ? arguments[2] : undefined;
        if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
        var fieldInit = [];
        if (fields) {
          var _loop4 = function _loop4() {
            if (Object.prototype.hasOwnProperty.call(json, prop)) {
              var field = fields[prop],
                value = json[prop];
              fieldInit.push(field.init(function (state) {
                return field.spec.fromJSON(value, state);
              }));
            }
          };
          for (var prop in fields) {
            _loop4();
          }
        }
        return EditorState.create({
          doc: json.doc,
          selection: EditorSelection.fromJSON(json.selection),
          extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
        });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
    }, {
      key: "create",
      value: function create() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var configuration = Configuration.resolve(config.extensions || [], new Map());
        var doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
        var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
        checkSelection(selection, doc.length);
        if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(function () {
          return null;
        }), function (state, slot) {
          return slot.create(state);
        }, null);
      }
    }]);
  }();
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : 4;
    }
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.
   When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.
   Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
    compare: function compare(a, b) {
      var kA = Object.keys(a),
        kB = Object.keys(b);
      return kA.length == kB.length && kA.every(function (k) {
        return a[k] == b[k];
      });
    }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.
   Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).
   When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.
   (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.
   Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.
   The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults) {
    var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var result = {};
    var _iterator24 = _createForOfIteratorHelper(configs),
      _step24;
    try {
      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
        var _config = _step24.value;
        for (var _i33 = 0, _Object$keys = Object.keys(_config); _i33 < _Object$keys.length; _i33++) {
          var _key3 = _Object$keys[_i33];
          var value = _config[_key3],
            current = result[_key3];
          if (current === undefined) result[_key3] = value;else if (current === value || value === undefined) ; // No conflict
          else if (Object.hasOwnProperty.call(combine, _key3)) result[_key3] = combine[_key3](current, value);else throw new Error("Config merge conflict for field " + _key3);
        }
      }
    } catch (err) {
      _iterator24.e(err);
    } finally {
      _iterator24.f();
    }
    for (var key in defaults) if (result[key] === undefined) result[key] = defaults[key];
    return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  var RangeValue = /*#__PURE__*/function () {
    function RangeValue() {
      _classCallCheck(this, RangeValue);
    }
    return _createClass(RangeValue, [{
      key: "eq",
      value:
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      function eq(other) {
        return this == other;
      }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        return Range$1.create(from, to, this);
      }
    }]);
  }();
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  var Range$1 = /*#__PURE__*/function () {
    function Range$1(
    /**
    The range's start position.
    */
    from,
    /**
    Its end position.
    */
    to,
    /**
    The value associated with this range.
    */
    value) {
      _classCallCheck(this, Range$1);
      this.from = from;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    return _createClass(Range$1, null, [{
      key: "create",
      value: function create(from, to, value) {
        return new Range$1(from, to, value);
      }
    }]);
  }();
  function cmpRange(a, b) {
    return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  var Chunk = /*#__PURE__*/function () {
    function Chunk(from, to, value,
    // Chunks are marked with the largest point that occurs
    // in them (or -1 for no points), so that scans that are
    // only interested in points (such as the
    // heightmap-related logic) can skip range-only chunks.
    maxPoint) {
      _classCallCheck(this, Chunk);
      this.from = from;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    return _createClass(Chunk, [{
      key: "length",
      get: function get() {
        return this.to[this.to.length - 1];
      }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
    }, {
      key: "findIndex",
      value: function findIndex(pos, side, end) {
        var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var arr = end ? this.to : this.from;
        for (var lo = startAt, hi = arr.length;;) {
          if (lo == hi) return lo;
          var mid = lo + hi >> 1;
          var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
          if (mid == lo) return diff >= 0 ? lo : hi;
          if (diff >= 0) hi = mid;else lo = mid + 1;
        }
      }
    }, {
      key: "between",
      value: function between(offset, from, to, f) {
        for (var _i34 = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, _i34); _i34 < e; _i34++) if (f(this.from[_i34] + offset, this.to[_i34] + offset, this.value[_i34]) === false) return false;
      }
    }, {
      key: "map",
      value: function map(offset, changes) {
        var value = [],
          from = [],
          to = [],
          newPos = -1,
          maxPoint = -1;
        for (var _i35 = 0; _i35 < this.value.length; _i35++) {
          var val = this.value[_i35],
            curFrom = this.from[_i35] + offset,
            curTo = this.to[_i35] + offset,
            newFrom = void 0,
            newTo = void 0;
          if (curFrom == curTo) {
            var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
            if (mapped == null) continue;
            newFrom = newTo = mapped;
            if (val.startSide != val.endSide) {
              newTo = changes.mapPos(curFrom, val.endSide);
              if (newTo < newFrom) continue;
            }
          } else {
            newFrom = changes.mapPos(curFrom, val.startSide);
            newTo = changes.mapPos(curTo, val.endSide);
            if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
          }
          if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
          if (newPos < 0) newPos = newFrom;
          if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
          value.push(val);
          from.push(newFrom - newPos);
          to.push(newTo - newPos);
        }
        return {
          mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
          pos: newPos
        };
      }
    }]);
  }();
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  var RangeSet = /*#__PURE__*/function () {
    function RangeSet(
    /**
    @internal
    */
    chunkPos,
    /**
    @internal
    */
    chunk,
    /**
    @internal
    */
    nextLayer,
    /**
    @internal
    */
    maxPoint) {
      _classCallCheck(this, RangeSet);
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    return _createClass(RangeSet, [{
      key: "length",
      get:
      /**
      @internal
      */
      function get() {
        var last = this.chunk.length - 1;
        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
    }, {
      key: "size",
      get: function get() {
        if (this.isEmpty) return 0;
        var size = this.nextLayer.size;
        var _iterator25 = _createForOfIteratorHelper(this.chunk),
          _step25;
        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var chunk = _step25.value;
            size += chunk.value.length;
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
        return size;
      }
      /**
      @internal
      */
    }, {
      key: "chunkEnd",
      value: function chunkEnd(index) {
        return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
    }, {
      key: "update",
      value: function update(updateSpec) {
        var _updateSpec$add = updateSpec.add,
          add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
          _updateSpec$sort = updateSpec.sort,
          sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
          _updateSpec$filterFro = updateSpec.filterFrom,
          filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
          _updateSpec$filterTo = updateSpec.filterTo,
          filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
        var filter = updateSpec.filter;
        if (add.length == 0 && !filter) return this;
        if (sort) add = add.slice().sort(cmpRange);
        if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
        var cur = new LayerCursor(this, null, -1)["goto"](0),
          i = 0,
          spill = [];
        var builder = new RangeSetBuilder();
        while (cur.value || i < add.length) {
          if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
            var range = add[i++];
            if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
          } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
            cur.nextChunk();
          } else {
            if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
              if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range$1.create(cur.from, cur.to, cur.value));
            }
            cur.next();
          }
        }
        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
          add: spill,
          filter: filter,
          filterFrom: filterFrom,
          filterTo: filterTo
        }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
    }, {
      key: "map",
      value: function map(changes) {
        if (changes.empty || this.isEmpty) return this;
        var chunks = [],
          chunkPos = [],
          maxPoint = -1;
        for (var _i36 = 0; _i36 < this.chunk.length; _i36++) {
          var start = this.chunkPos[_i36],
            chunk = this.chunk[_i36];
          var touch = changes.touchesRange(start, start + chunk.length);
          if (touch === false) {
            maxPoint = Math.max(maxPoint, chunk.maxPoint);
            chunks.push(chunk);
            chunkPos.push(changes.mapPos(start));
          } else if (touch === true) {
            var _chunk$map = chunk.map(start, changes),
              mapped = _chunk$map.mapped,
              pos = _chunk$map.pos;
            if (mapped) {
              maxPoint = Math.max(maxPoint, mapped.maxPoint);
              chunks.push(mapped);
              chunkPos.push(pos);
            }
          }
        }
        var next = this.nextLayer.map(changes);
        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
    }, {
      key: "between",
      value: function between(from, to, f) {
        if (this.isEmpty) return;
        for (var _i37 = 0; _i37 < this.chunk.length; _i37++) {
          var start = this.chunkPos[_i37],
            chunk = this.chunk[_i37];
          if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
        }
        this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
    }, {
      key: "iter",
      value: function iter() {
        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        return HeapCursor.from([this])["goto"](from);
      }
      /**
      @internal
      */
    }, {
      key: "isEmpty",
      get: function get() {
        return this.nextLayer == this;
      }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
    }], [{
      key: "create",
      value: function create(chunkPos, chunk, nextLayer, maxPoint) {
        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
    }, {
      key: "iter",
      value: function iter(sets) {
        var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return HeapCursor.from(sets)["goto"](from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
    }, {
      key: "compare",
      value: function compare(oldSets, newSets,
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration.
      */
      textDiff, comparator) {
        var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var a = oldSets.filter(function (set) {
          return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
        });
        var b = newSets.filter(function (set) {
          return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
        });
        var sharedChunks = findSharedChunks(a, b, textDiff);
        var sideA = new SpanCursor(a, sharedChunks, minPointSize);
        var sideB = new SpanCursor(b, sharedChunks, minPointSize);
        textDiff.iterGaps(function (fromA, fromB, length) {
          return _compare(sideA, fromA, sideB, fromB, length, comparator);
        });
        if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
    }, {
      key: "eq",
      value: function eq(oldSets, newSets) {
        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var to = arguments.length > 3 ? arguments[3] : undefined;
        if (to == null) to = 1000000000 /* C.Far */ - 1;
        var a = oldSets.filter(function (set) {
          return !set.isEmpty && newSets.indexOf(set) < 0;
        });
        var b = newSets.filter(function (set) {
          return !set.isEmpty && oldSets.indexOf(set) < 0;
        });
        if (a.length != b.length) return false;
        if (!a.length) return true;
        var sharedChunks = findSharedChunks(a, b);
        var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
          sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);
        for (;;) {
          if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
          if (sideA.to > to) return true;
          sideA.next();
          sideB.next();
        }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
    }, {
      key: "spans",
      value: function spans(sets, from, to, iterator) {
        var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var cursor = new SpanCursor(sets, null, minPointSize)["goto"](from),
          pos = from;
        var openRanges = cursor.openStart;
        for (;;) {
          var curTo = Math.min(cursor.to, to);
          if (cursor.point) {
            var active = cursor.activeForPoint(cursor.to);
            var openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
            iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
            openRanges = Math.min(cursor.openEnd(curTo), active.length);
          } else if (curTo > pos) {
            iterator.span(pos, curTo, cursor.active, openRanges);
            openRanges = cursor.openEnd(curTo);
          }
          if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
          pos = cursor.to;
          cursor.next();
        }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
    }, {
      key: "of",
      value: function of(ranges) {
        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var build = new RangeSetBuilder();
        var _iterator26 = _createForOfIteratorHelper(ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges),
          _step26;
        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var range = _step26.value;
            build.add(range.from, range.to, range.value);
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
        return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
    }, {
      key: "join",
      value: function join(sets) {
        if (!sets.length) return RangeSet.empty;
        var result = sets[sets.length - 1];
        for (var _i38 = sets.length - 2; _i38 >= 0; _i38--) {
          for (var _layer = sets[_i38]; _layer != RangeSet.empty; _layer = _layer.nextLayer) result = new RangeSet(_layer.chunkPos, _layer.chunk, result, Math.max(_layer.maxPoint, result.maxPoint));
        }
        return result;
      }
    }]);
  }();
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1) for (var prev = ranges[0], _i39 = 1; _i39 < ranges.length; _i39++) {
      var _cur = ranges[_i39];
      if (cmpRange(prev, _cur) > 0) return ranges.slice().sort(cmpRange);
      prev = _cur;
    }
    return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  var RangeSetBuilder = /*#__PURE__*/function () {
    /**
    Create an empty builder.
    */
    function RangeSetBuilder() {
      _classCallCheck(this, RangeSetBuilder);
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1000000000 /* C.Far */;
      this.lastTo = -1000000000 /* C.Far */;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    return _createClass(RangeSetBuilder, [{
      key: "finishChunk",
      value: function finishChunk(newArrays) {
        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
        this.chunkPos.push(this.chunkStart);
        this.chunkStart = -1;
        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
        this.maxPoint = -1;
        if (newArrays) {
          this.from = [];
          this.to = [];
          this.value = [];
        }
      }
    }, {
      key: "add",
      value: function add(from, to, value) {
        if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
      }
      /**
      @internal
      */
    }, {
      key: "addInner",
      value: function addInner(from, to, value) {
        var diff = from - this.lastTo || value.startSide - this.last.endSide;
        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
        if (diff < 0) return false;
        if (this.from.length == 250 /* C.ChunkSize */) this.finishChunk(true);
        if (this.chunkStart < 0) this.chunkStart = from;
        this.from.push(from - this.chunkStart);
        this.to.push(to - this.chunkStart);
        this.last = value;
        this.lastFrom = from;
        this.lastTo = to;
        this.value.push(value);
        if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
        return true;
      }
      /**
      @internal
      */
    }, {
      key: "addChunk",
      value: function addChunk(from, chunk) {
        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
        if (this.from.length) this.finishChunk(true);
        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
        this.chunks.push(chunk);
        this.chunkPos.push(from);
        var last = chunk.value.length - 1;
        this.last = chunk.value[last];
        this.lastFrom = chunk.from[last] + from;
        this.lastTo = chunk.to[last] + from;
        return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
    }, {
      key: "finish",
      value: function finish() {
        return this.finishInner(RangeSet.empty);
      }
      /**
      @internal
      */
    }, {
      key: "finishInner",
      value: function finishInner(next) {
        if (this.from.length) this.finishChunk(false);
        if (this.chunks.length == 0) return next;
        var result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
        this.from = null; // Make sure further `add` calls produce errors
        return result;
      }
    }]);
  }();
  function findSharedChunks(a, b, textDiff) {
    var inA = new Map();
    var _iterator27 = _createForOfIteratorHelper(a),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var set = _step27.value;
        for (var _i40 = 0; _i40 < set.chunk.length; _i40++) if (set.chunk[_i40].maxPoint <= 0) inA.set(set.chunk[_i40], set.chunkPos[_i40]);
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    var shared = new Set();
    var _iterator28 = _createForOfIteratorHelper(b),
      _step28;
    try {
      for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
        var _set = _step28.value;
        for (var _i41 = 0; _i41 < _set.chunk.length; _i41++) {
          var known = inA.get(_set.chunk[_i41]);
          if (known != null && (textDiff ? textDiff.mapPos(known) : known) == _set.chunkPos[_i41] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + _set.chunk[_i41].length))) shared.add(_set.chunk[_i41]);
        }
      }
    } catch (err) {
      _iterator28.e(err);
    } finally {
      _iterator28.f();
    }
    return shared;
  }
  var LayerCursor = /*#__PURE__*/function () {
    function LayerCursor(layer, skip, minPoint) {
      var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      _classCallCheck(this, LayerCursor);
      this.layer = layer;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    return _createClass(LayerCursor, [{
      key: "startSide",
      get: function get() {
        return this.value ? this.value.startSide : 0;
      }
    }, {
      key: "endSide",
      get: function get() {
        return this.value ? this.value.endSide : 0;
      }
    }, {
      key: "goto",
      value: function _goto(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
        this.chunkIndex = this.rangeIndex = 0;
        this.gotoInner(pos, side, false);
        return this;
      }
    }, {
      key: "gotoInner",
      value: function gotoInner(pos, side, forward) {
        while (this.chunkIndex < this.layer.chunk.length) {
          var next = this.layer.chunk[this.chunkIndex];
          if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
          this.chunkIndex++;
          forward = false;
        }
        if (this.chunkIndex < this.layer.chunk.length) {
          var rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
          if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
        }
        this.next();
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
      }
    }, {
      key: "next",
      value: function next() {
        for (;;) {
          if (this.chunkIndex == this.layer.chunk.length) {
            this.from = this.to = 1000000000 /* C.Far */;
            this.value = null;
            break;
          } else {
            var chunkPos = this.layer.chunkPos[this.chunkIndex],
              chunk = this.layer.chunk[this.chunkIndex];
            var from = chunkPos + chunk.from[this.rangeIndex];
            this.from = from;
            this.to = chunkPos + chunk.to[this.rangeIndex];
            this.value = chunk.value[this.rangeIndex];
            this.setRangeIndex(this.rangeIndex + 1);
            if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
          }
        }
      }
    }, {
      key: "setRangeIndex",
      value: function setRangeIndex(index) {
        if (index == this.layer.chunk[this.chunkIndex].value.length) {
          this.chunkIndex++;
          if (this.skip) {
            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
          }
          this.rangeIndex = 0;
        } else {
          this.rangeIndex = index;
        }
      }
    }, {
      key: "nextChunk",
      value: function nextChunk() {
        this.chunkIndex++;
        this.rangeIndex = 0;
        this.next();
      }
    }, {
      key: "compare",
      value: function compare(other) {
        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
      }
    }]);
  }();
  var HeapCursor = /*#__PURE__*/function () {
    function HeapCursor(heap) {
      _classCallCheck(this, HeapCursor);
      this.heap = heap;
    }
    return _createClass(HeapCursor, [{
      key: "startSide",
      get: function get() {
        return this.value ? this.value.startSide : 0;
      }
    }, {
      key: "goto",
      value: function _goto2(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
        var _iterator29 = _createForOfIteratorHelper(this.heap),
          _step29;
        try {
          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
            var _cur2 = _step29.value;
            _cur2["goto"](pos, side);
          }
        } catch (err) {
          _iterator29.e(err);
        } finally {
          _iterator29.f();
        }
        for (var _i42 = this.heap.length >> 1; _i42 >= 0; _i42--) heapBubble(this.heap, _i42);
        this.next();
        return this;
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        var _iterator30 = _createForOfIteratorHelper(this.heap),
          _step30;
        try {
          for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
            var _cur3 = _step30.value;
            _cur3.forward(pos, side);
          }
        } catch (err) {
          _iterator30.e(err);
        } finally {
          _iterator30.f();
        }
        for (var _i43 = this.heap.length >> 1; _i43 >= 0; _i43--) heapBubble(this.heap, _i43);
        if ((this.to - pos || this.value.endSide - side) < 0) this.next();
      }
    }, {
      key: "next",
      value: function next() {
        if (this.heap.length == 0) {
          this.from = this.to = 1000000000 /* C.Far */;
          this.value = null;
          this.rank = -1;
        } else {
          var _top2 = this.heap[0];
          this.from = _top2.from;
          this.to = _top2.to;
          this.value = _top2.value;
          this.rank = _top2.rank;
          if (_top2.value) _top2.next();
          heapBubble(this.heap, 0);
        }
      }
    }], [{
      key: "from",
      value: function from(sets) {
        var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var heap = [];
        for (var _i44 = 0; _i44 < sets.length; _i44++) {
          for (var _cur4 = sets[_i44]; !_cur4.isEmpty; _cur4 = _cur4.nextLayer) {
            if (_cur4.maxPoint >= minPoint) heap.push(new LayerCursor(_cur4, skip, minPoint, _i44));
          }
        }
        return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
    }]);
  }();
  function heapBubble(heap, index) {
    for (var _cur5 = heap[index];;) {
      var childIndex = (index << 1) + 1;
      if (childIndex >= heap.length) break;
      var child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (_cur5.compare(child) < 0) break;
      heap[childIndex] = _cur5;
      heap[index] = child;
      index = childIndex;
    }
  }
  var SpanCursor = /*#__PURE__*/function () {
    function SpanCursor(sets, skip, minPoint) {
      _classCallCheck(this, SpanCursor);
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      // A currently active point range, if any
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1000000000 /* C.Far */;
      this.endSide = 0;
      // The amount of open active ranges at the start of the iterator.
      // Not including points.
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    return _createClass(SpanCursor, [{
      key: "goto",
      value: function _goto3(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
        this.cursor["goto"](pos, side);
        this.active.length = this.activeTo.length = this.activeRank.length = 0;
        this.minActive = -1;
        this.to = pos;
        this.endSide = side;
        this.openStart = -1;
        this.next();
        return this;
      }
    }, {
      key: "forward",
      value: function forward(pos, side) {
        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);
        this.cursor.forward(pos, side);
      }
    }, {
      key: "removeActive",
      value: function removeActive(index) {
        remove(this.active, index);
        remove(this.activeTo, index);
        remove(this.activeRank, index);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
    }, {
      key: "addActive",
      value: function addActive(trackOpen) {
        var i = 0,
          _this$cursor = this.cursor,
          value = _this$cursor.value,
          to = _this$cursor.to,
          rank = _this$cursor.rank;
        // Organize active marks by rank first, then by size
        while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0) i++;
        insert(this.active, i, value);
        insert(this.activeTo, i, to);
        insert(this.activeRank, i, rank);
        if (trackOpen) insert(trackOpen, i, this.cursor.from);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
    }, {
      key: "next",
      value: function next() {
        var from = this.to,
          wasPoint = this.point;
        this.point = null;
        var trackOpen = this.openStart < 0 ? [] : null;
        for (;;) {
          var a = this.minActive;
          if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
            if (this.activeTo[a] > from) {
              this.to = this.activeTo[a];
              this.endSide = this.active[a].endSide;
              break;
            }
            this.removeActive(a);
            if (trackOpen) remove(trackOpen, a);
          } else if (!this.cursor.value) {
            this.to = this.endSide = 1000000000 /* C.Far */;
            break;
          } else if (this.cursor.from > from) {
            this.to = this.cursor.from;
            this.endSide = this.cursor.startSide;
            break;
          } else {
            var nextVal = this.cursor.value;
            if (!nextVal.point) {
              // Opening a range
              this.addActive(trackOpen);
              this.cursor.next();
            } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
              // Ignore any non-empty points that end precisely at the end of the prev point
              this.cursor.next();
            } else {
              // New point
              this.point = nextVal;
              this.pointFrom = this.cursor.from;
              this.pointRank = this.cursor.rank;
              this.to = this.cursor.to;
              this.endSide = nextVal.endSide;
              this.cursor.next();
              this.forward(this.to, this.endSide);
              break;
            }
          }
        }
        if (trackOpen) {
          this.openStart = 0;
          for (var _i45 = trackOpen.length - 1; _i45 >= 0 && trackOpen[_i45] < from; _i45--) this.openStart++;
        }
      }
    }, {
      key: "activeForPoint",
      value: function activeForPoint(to) {
        if (!this.active.length) return this.active;
        var active = [];
        for (var _i46 = this.active.length - 1; _i46 >= 0; _i46--) {
          if (this.activeRank[_i46] < this.pointRank) break;
          if (this.activeTo[_i46] > to || this.activeTo[_i46] == to && this.active[_i46].endSide >= this.point.endSide) active.push(this.active[_i46]);
        }
        return active.reverse();
      }
    }, {
      key: "openEnd",
      value: function openEnd(to) {
        var open = 0;
        for (var _i47 = this.activeTo.length - 1; _i47 >= 0 && this.activeTo[_i47] > to; _i47--) open++;
        return open;
      }
    }]);
  }();
  function _compare(a, startA, b, startB, length, comparator) {
    a["goto"](startA);
    b["goto"](startB);
    var endB = startB + length;
    var pos = startB,
      dPos = startB - startA;
    for (;;) {
      var dEnd = a.to + dPos - b.to,
        diff = dEnd || a.endSide - b.endSide;
      var end = diff < 0 ? a.to + dPos : b.to,
        clipEnd = Math.min(end, endB);
      if (a.point || b.point) {
        if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
      } else {
        if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
      }
      if (end > endB) break;
      if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange) comparator.boundChange(end);
      pos = end;
      if (diff <= 0) a.next();
      if (diff >= 0) b.next();
    }
  }
  function sameValues(a, b) {
    if (a.length != b.length) return false;
    for (var _i48 = 0; _i48 < a.length; _i48++) if (a[_i48] != b[_i48] && !a[_i48].eq(b[_i48])) return false;
    return true;
  }
  function remove(array, index) {
    for (var _i49 = index, e = array.length - 1; _i49 < e; _i49++) array[_i49] = array[_i49 + 1];
    array.pop();
  }
  function insert(array, index, value) {
    for (var _i50 = array.length - 1; _i50 >= index; _i50--) array[_i50 + 1] = array[_i50];
    array[index] = value;
  }
  function findMinIndex(value, array) {
    var found = -1,
      foundPos = 1000000000 /* C.Far */;
    for (var _i51 = 0; _i51 < array.length; _i51++) if ((array[_i51] - foundPos || value[_i51].endSide - value[found].endSide) < 0) {
      found = _i51;
      foundPos = array[_i51];
    }
    return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function _countColumn(string, tabSize) {
    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;
    var n = 0;
    for (var _i52 = 0; _i52 < to && _i52 < string.length;) {
      if (string.charCodeAt(_i52) == 9) {
        n += tabSize - n % tabSize;
        _i52++;
      } else {
        n++;
        _i52 = findClusterBreak(string, _i52);
      }
    }
    return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
    for (var _i53 = 0, n = 0;;) {
      if (n >= col) return _i53;
      if (_i53 == string.length) break;
      n += string.charCodeAt(_i53) == 9 ? tabSize - n % tabSize : 1;
      _i53 = findClusterBreak(string, _i53);
    }
    return strict === true ? -1 : string.length;
  }
  var C = "\u037C";
  var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol["for"](C);
  var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  var StyleModule = /*#__PURE__*/function () {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    function StyleModule(spec, options) {
      _classCallCheck(this, StyleModule);
      this.rules = [];
      var _ref3 = options || {},
        finish = _ref3.finish;
      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
      }
      function render(selectors, spec, target, isKeyframes) {
        var local = [],
          isAt = /^@(\w+)\b/.exec(selectors[0]),
          keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";");
        for (var prop in spec) {
          var value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(function (part) {
              return selectors.map(function (sel) {
                return part.replace(/&/, sel);
              });
            }).reduce(function (a, b) {
              return a.concat(b);
            }), value, target);
          } else if (value && _typeof(value) == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) {
              return "-" + l.toLowerCase();
            }) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
        }
      }
      for (var prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    return _createClass(StyleModule, [{
      key: "getRules",
      value: function getRules() {
        return this.rules.join("\n");
      }

      // :: () → string
      // Generate a new unique CSS class name.
    }], [{
      key: "newName",
      value: function newName() {
        var id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36);
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
    }, {
      key: "mount",
      value: function mount(root, modules, options) {
        var set = root[SET],
          nonce = options && options.nonce;
        if (!set) set = new StyleSet(root, nonce);else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules], root);
      }
    }]);
  }();
  var adoptedSet = new Map(); //<Document, StyleSet>
  var StyleSet = /*#__PURE__*/function () {
    function StyleSet(root, nonce) {
      _classCallCheck(this, StyleSet);
      var doc = root.ownerDocument || root,
        win = doc.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        var adopted = adoptedSet.get(doc);
        if (adopted) return root[SET] = adopted;
        this.sheet = new win.CSSStyleSheet();
        adoptedSet.set(doc, this);
      } else {
        this.styleTag = doc.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }
    return _createClass(StyleSet, [{
      key: "mount",
      value: function mount(modules, root) {
        var sheet = this.sheet;
        var pos = 0 /* Current rule offset */,
          j = 0; /* Index into this.modules */
        for (var _i54 = 0; _i54 < modules.length; _i54++) {
          var mod = modules[_i54],
            index = this.modules.indexOf(mod);
          if (index < j && index > -1) {
            // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (var k = 0; k < mod.rules.length; k++) sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }
        if (sheet) {
          if (root.adoptedStyleSheets.indexOf(this.sheet) < 0) root.adoptedStyleSheets = [this.sheet].concat(_toConsumableArray(root.adoptedStyleSheets));
        } else {
          var text = "";
          for (var _i55 = 0; _i55 < this.modules.length; _i55++) text += this.modules[_i55].getRules() + "\n";
          this.styleTag.textContent = text;
          var target = root.head || root;
          if (this.styleTag.parentNode != target) target.insertBefore(this.styleTag, target.firstChild);
        }
      }
    }, {
      key: "setNonce",
      value: function setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce) this.styleTag.setAttribute("nonce", nonce);
      }
    }]);
  }(); // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.
  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };
  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
  function keyName(event) {
    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
    // On IE, shift effect is never included in `.key`.
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie$1 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name;
  }
  function getSelection(root) {
    var target;
    // Browsers differ on whether shadow roots have a getSelection
    // method. If it exists, use that, otherwise, call it on the
    // document.
    if (root.nodeType == 11) {
      // Shadow root
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode) return false;
    try {
      // Firefox will raise 'permission denied' errors when accessing
      // properties of `sel.anchorNode` when it's in a generated CSS
      // element.
      return contains(dom, selection.anchorNode);
    } catch (_) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node) {
    for (var index = 0;; index++) {
      node = node.previousSibling;
      if (!node) return index;
    }
  }
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (;;) {
      if (node == targetNode && off == targetOff) return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV") return false;
        var parent = node.parentNode;
        if (!parent || parent.nodeType != 1) return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false") return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
    var x = left ? rect.left : rect.right;
    return {
      left: x,
      right: x,
      top: rect.top,
      bottom: rect.bottom
    };
  }
  function windowRect(win) {
    var vp = win.visualViewport;
    if (vp) return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function getScale(elt, rect) {
    var scaleX = rect.width / elt.offsetWidth;
    var scaleY = rect.height / elt.offsetHeight;
    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1) scaleX = 1;
    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1) scaleY = 1;
    return {
      scaleX: scaleX,
      scaleY: scaleY
    };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
    var doc = dom.ownerDocument,
      win = doc.defaultView || window;
    for (var _cur6 = dom, stop = false; _cur6 && !stop;) {
      if (_cur6.nodeType == 1) {
        // Element
        var bounding = void 0,
          _top3 = _cur6 == doc.body;
        var scaleX = 1,
          scaleY = 1;
        if (_top3) {
          bounding = windowRect(win);
        } else {
          if (/^(fixed|sticky)$/.test(getComputedStyle(_cur6).position)) stop = true;
          if (_cur6.scrollHeight <= _cur6.clientHeight && _cur6.scrollWidth <= _cur6.clientWidth) {
            _cur6 = _cur6.assignedSlot || _cur6.parentNode;
            continue;
          }
          var _rect = _cur6.getBoundingClientRect();
          // Make sure scrollbar width isn't included in the rectangle
          var _getScale = getScale(_cur6, _rect);
          scaleX = _getScale.scaleX;
          scaleY = _getScale.scaleY;
          bounding = {
            left: _rect.left,
            right: _rect.left + _cur6.clientWidth * scaleX,
            top: _rect.top,
            bottom: _rect.top + _cur6.clientHeight * scaleY
          };
        }
        var moveX = 0,
          moveY = 0;
        if (y == "nearest") {
          if (rect.top < bounding.top) {
            moveY = rect.top - (bounding.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top) moveY = rect.top - (bounding.top + yMargin);
          }
        } else {
          var rectHeight = rect.bottom - rect.top,
            boundingHeight = bounding.bottom - bounding.top;
          var targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x == "nearest") {
          if (rect.left < bounding.left) {
            moveX = rect.left - (bounding.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX) moveX = rect.left - (bounding.left + xMargin);
          }
        } else {
          var targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (_top3) {
            win.scrollBy(moveX, moveY);
          } else {
            var movedX = 0,
              movedY = 0;
            if (moveY) {
              var start = _cur6.scrollTop;
              _cur6.scrollTop += moveY / scaleY;
              movedY = (_cur6.scrollTop - start) * scaleY;
            }
            if (moveX) {
              var _start = _cur6.scrollLeft;
              _cur6.scrollLeft += moveX / scaleX;
              movedX = (_cur6.scrollLeft - _start) * scaleX;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1) x = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1) y = "nearest";
          }
        }
        if (_top3) break;
        if (rect.top < bounding.top || rect.bottom > bounding.bottom || rect.left < bounding.left || rect.right > bounding.right) rect = {
          left: Math.max(rect.left, bounding.left),
          right: Math.min(rect.right, bounding.right),
          top: Math.max(rect.top, bounding.top),
          bottom: Math.min(rect.bottom, bounding.bottom)
        };
        _cur6 = _cur6.assignedSlot || _cur6.parentNode;
      } else if (_cur6.nodeType == 11) {
        // A shadow root
        _cur6 = _cur6.host;
      } else {
        break;
      }
    }
  }
  function scrollableParents(dom) {
    var doc = dom.ownerDocument,
      x,
      y;
    for (var _cur7 = dom.parentNode; _cur7;) {
      if (_cur7 == doc.body || x && y) {
        break;
      } else if (_cur7.nodeType == 1) {
        if (!y && _cur7.scrollHeight > _cur7.clientHeight) y = _cur7;
        if (!x && _cur7.scrollWidth > _cur7.clientWidth) x = _cur7;
        _cur7 = _cur7.assignedSlot || _cur7.parentNode;
      } else if (_cur7.nodeType == 11) {
        _cur7 = _cur7.host;
      } else {
        break;
      }
    }
    return {
      x: x,
      y: y
    };
  }
  var DOMSelectionState = /*#__PURE__*/function () {
    function DOMSelectionState() {
      _classCallCheck(this, DOMSelectionState);
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    return _createClass(DOMSelectionState, [{
      key: "eq",
      value: function eq(domSel) {
        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
    }, {
      key: "setRange",
      value: function setRange(range) {
        var anchorNode = range.anchorNode,
          focusNode = range.focusNode;
        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
    }, {
      key: "set",
      value: function set(anchorNode, anchorOffset, focusNode, focusOffset) {
        this.anchorNode = anchorNode;
        this.anchorOffset = anchorOffset;
        this.focusNode = focusNode;
        this.focusOffset = focusOffset;
      }
    }]);
  }();
  var preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
    if (dom.setActive) return dom.setActive(); // in IE
    if (preventScrollSupported) return dom.focus(preventScrollSupported);
    var stack = [];
    for (var _cur8 = dom; _cur8; _cur8 = _cur8.parentNode) {
      stack.push(_cur8, _cur8.scrollTop, _cur8.scrollLeft);
      if (_cur8 == _cur8.ownerDocument) break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = {
          preventScroll: true
        };
        return true;
      }
    } : undefined);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (var _i56 = 0; _i56 < stack.length;) {
        var elt = stack[_i56++],
          _top4 = stack[_i56++],
          left = stack[_i56++];
        if (elt.scrollTop != _top4) elt.scrollTop = _top4;
        if (elt.scrollLeft != left) elt.scrollLeft = left;
      }
    }
  }
  var scratchRange;
  function textRange(node, from) {
    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
    var range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from);
    return range;
  }
  function dispatchKey(elt, name, code, mods) {
    var options = {
      key: name,
      code: name,
      keyCode: code,
      which: code,
      cancelable: true
    };
    if (mods) {
      options.altKey = mods.altKey;
      options.ctrlKey = mods.ctrlKey;
      options.shiftKey = mods.shiftKey;
      options.metaKey = mods.metaKey;
    }
    var down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    var up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  function clearAttributes(node) {
    while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
    var node = selection.focusNode,
      offset = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;
    // Safari can report bogus offsets (#1152)
    offset = Math.min(offset, maxOffset(node));
    for (;;) {
      if (offset) {
        if (node.nodeType != 1) return false;
        var prev = node.childNodes[offset - 1];
        if (prev.contentEditable == "false") offset--;else {
          node = prev;
          offset = maxOffset(node);
        }
      } else if (node == doc) {
        return true;
      } else {
        offset = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  function isScrolledToBottom(elt) {
    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
    for (var node = startNode, offset = startOffset;;) {
      if (node.nodeType == 3 && offset > 0) {
        return {
          node: node,
          offset: offset
        };
      } else if (node.nodeType == 1 && offset > 0) {
        if (node.contentEditable == "false") return null;
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node);
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  function textNodeAfter(startNode, startOffset) {
    for (var node = startNode, offset = startOffset;;) {
      if (node.nodeType == 3 && offset < node.nodeValue.length) {
        return {
          node: node,
          offset: offset
        };
      } else if (node.nodeType == 1 && offset < node.childNodes.length) {
        if (node.contentEditable == "false") return null;
        node = node.childNodes[offset];
        offset = 0;
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node) + 1;
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  var DOMPos = /*#__PURE__*/function () {
    function DOMPos(node, offset) {
      var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      _classCallCheck(this, DOMPos);
      this.node = node;
      this.offset = offset;
      this.precise = precise;
    }
    return _createClass(DOMPos, null, [{
      key: "before",
      value: function before(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom), precise);
      }
    }, {
      key: "after",
      value: function after(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
      }
    }]);
  }();
  var noChildren = [];
  var ContentView = /*#__PURE__*/function () {
    function ContentView() {
      _classCallCheck(this, ContentView);
      this.parent = null;
      this.dom = null;
      this.flags = 2 /* ViewFlag.NodeDirty */;
    }
    return _createClass(ContentView, [{
      key: "overrideDOMText",
      get: function get() {
        return null;
      }
    }, {
      key: "posAtStart",
      get: function get() {
        return this.parent ? this.parent.posBefore(this) : 0;
      }
    }, {
      key: "posAtEnd",
      get: function get() {
        return this.posAtStart + this.length;
      }
    }, {
      key: "posBefore",
      value: function posBefore(view) {
        var pos = this.posAtStart;
        var _iterator31 = _createForOfIteratorHelper(this.children),
          _step31;
        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var child = _step31.value;
            if (child == view) return pos;
            pos += child.length + child.breakAfter;
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }
        throw new RangeError("Invalid child in posBefore");
      }
    }, {
      key: "posAfter",
      value: function posAfter(view) {
        return this.posBefore(view) + view.length;
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (this.flags & 2 /* ViewFlag.NodeDirty */) {
          var parent = this.dom;
          var prev = null,
            next;
          var _iterator32 = _createForOfIteratorHelper(this.children),
            _step32;
          try {
            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
              var child = _step32.value;
              if (child.flags & 7 /* ViewFlag.Dirty */) {
                if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                  var contentView = ContentView.get(next);
                  if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);
                }
                child.sync(view, track);
                child.flags &= ~7 /* ViewFlag.Dirty */;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (track && !track.written && track.node == parent && next != child.dom) track.written = true;
              if (child.dom.parentNode == parent) {
                while (next && next != child.dom) next = rm$1(next);
              } else {
                parent.insertBefore(child.dom, next);
              }
              prev = child.dom;
            }
          } catch (err) {
            _iterator32.e(err);
          } finally {
            _iterator32.f();
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (next && track && track.node == parent) track.written = true;
          while (next) next = rm$1(next);
        } else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
          var _iterator33 = _createForOfIteratorHelper(this.children),
            _step33;
          try {
            for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
              var _child = _step33.value;
              if (_child.flags & 7 /* ViewFlag.Dirty */) {
                _child.sync(view, track);
                _child.flags &= ~7 /* ViewFlag.Dirty */;
              }
            }
          } catch (err) {
            _iterator33.e(err);
          } finally {
            _iterator33.f();
          }
        }
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(_dom) {}
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM(node, offset) {
        var after;
        if (node == this.dom) {
          after = this.dom.childNodes[offset];
        } else {
          var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
          for (;;) {
            var parent = node.parentNode;
            if (parent == this.dom) break;
            if (bias == 0 && parent.firstChild != parent.lastChild) {
              if (node == parent.firstChild) bias = -1;else bias = 1;
            }
            node = parent;
          }
          if (bias < 0) after = node;else after = node.nextSibling;
        }
        if (after == this.dom.firstChild) return 0;
        while (after && !ContentView.get(after)) after = after.nextSibling;
        if (!after) return this.length;
        for (var _i57 = 0, pos = 0;; _i57++) {
          var child = this.children[_i57];
          if (child.dom == after) return pos;
          pos += child.length + child.breakAfter;
        }
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround(from, to) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var fromI = -1,
          fromStart = -1,
          toI = -1,
          toEnd = -1;
        for (var _i58 = 0, pos = offset, prevEnd = offset; _i58 < this.children.length; _i58++) {
          var child = this.children[_i58],
            end = pos + child.length;
          if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
          if (end >= from && fromI == -1) {
            fromI = _i58;
            fromStart = pos;
          }
          if (pos > to && child.dom.parentNode == this.dom) {
            toI = _i58;
            toEnd = prevEnd;
            break;
          }
          prevEnd = end;
          pos = end + child.breakAfter;
        }
        return {
          from: fromStart,
          to: toEnd < 0 ? offset + this.length : toEnd,
          startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
          endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
        };
      }
    }, {
      key: "markDirty",
      value: function markDirty() {
        var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.flags |= 2 /* ViewFlag.NodeDirty */;
        this.markParentsDirty(andParent);
      }
    }, {
      key: "markParentsDirty",
      value: function markParentsDirty(childList) {
        for (var parent = this.parent; parent; parent = parent.parent) {
          if (childList) parent.flags |= 2 /* ViewFlag.NodeDirty */;
          if (parent.flags & 1 /* ViewFlag.ChildDirty */) return;
          parent.flags |= 1 /* ViewFlag.ChildDirty */;
          childList = false;
        }
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        if (this.parent != parent) {
          this.parent = parent;
          if (this.flags & 7 /* ViewFlag.Dirty */) this.markParentsDirty(true);
        }
      }
    }, {
      key: "setDOM",
      value: function setDOM(dom) {
        if (this.dom == dom) return;
        if (this.dom) this.dom.cmView = null;
        this.dom = dom;
        dom.cmView = this;
      }
    }, {
      key: "rootView",
      get: function get() {
        for (var v = this;;) {
          var parent = v.parent;
          if (!parent) return v;
          v = parent;
        }
      }
    }, {
      key: "replaceChildren",
      value: function replaceChildren(from, to) {
        var _this$children;
        var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noChildren;
        this.markDirty();
        for (var _i59 = from; _i59 < to; _i59++) {
          var child = this.children[_i59];
          if (child.parent == this && children.indexOf(child) < 0) child.destroy();
        }
        if (children.length < 250) (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));else this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
        for (var _i60 = 0; _i60 < children.length; _i60++) children[_i60].setParent(this);
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation(_rec) {
        return false;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(_event) {
        return false;
      }
    }, {
      key: "childCursor",
      value: function childCursor() {
        var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
        return new ChildCursor(this.children, pos, this.children.length);
      }
    }, {
      key: "childPos",
      value: function childPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        return this.childCursor().findPos(pos, bias);
      }
    }, {
      key: "toString",
      value: function toString() {
        var name = this.constructor.name.replace("View", "");
        return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
      }
    }, {
      key: "isEditable",
      get: function get() {
        return true;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return false;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return false;
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        return false;
      }
    }, {
      key: "become",
      value: function become(other) {
        return false;
      }
    }, {
      key: "canReuseDOM",
      value: function canReuseDOM(other) {
        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
    }, {
      key: "getSide",
      value: function getSide() {
        return 0;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator34 = _createForOfIteratorHelper(this.children),
          _step34;
        try {
          for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
            var child = _step34.value;
            if (child.parent == this) child.destroy();
          }
        } catch (err) {
          _iterator34.e(err);
        } finally {
          _iterator34.f();
        }
        this.parent = null;
      }
    }], [{
      key: "get",
      value: function get(node) {
        return node.cmView;
      }
    }]);
  }();
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
    var next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  var ChildCursor = /*#__PURE__*/function () {
    function ChildCursor(children, pos, i) {
      _classCallCheck(this, ChildCursor);
      this.children = children;
      this.pos = pos;
      this.i = i;
      this.off = 0;
    }
    return _createClass(ChildCursor, [{
      key: "findPos",
      value: function findPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        for (;;) {
          if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
            this.off = pos - this.pos;
            return this;
          }
          var next = this.children[--this.i];
          this.pos -= next.length + next.breakAfter;
        }
      }
    }]);
  }();
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
    var children = parent.children;
    var before = children.length ? children[fromI] : null;
    var last = insert.length ? insert[insert.length - 1] : null;
    var breakAtEnd = last ? last.breakAfter : breakAtStart;
    // Change within a single child
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;
    if (toI < children.length) {
      var after = children[toI];
      // Make sure the end of the child after the update is preserved in `after`
      if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
        // If we're splitting a child, separate part of it to avoid that
        // being mangled when updating the child before the update.
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        // If the element after the replacement should be merged with
        // the last replacing element, update `content`
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert[insert.length - 1] = after;
        } else {
          // Remove the start of the after element, if necessary, and
          // add it to `content`.
          if (toOff || after.children.length && !after.children[0].length) after.merge(0, toOff, null, false, 0, openEnd);
          insert.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        // The element at `toI` is entirely covered by this range.
        // Preserve its line break, if any.
        if (last) last.breakAfter = 1;else breakAtStart = 1;
      }
      // Since we've handled the next element from the current elements
      // now, make sure `toI` points after that.
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
          before.breakAfter = insert.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    // Try to merge widgets on the boundaries of the replacement
    while (fromI < toI && insert.length) {
      if (children[toI - 1].become(insert[insert.length - 1])) {
        toI--;
        insert.pop();
        openEnd = insert.length ? 0 : openStart;
      } else if (children[fromI].become(insert[0])) {
        fromI++;
        insert.shift();
        openStart = insert.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
    if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
    var cur = parent.childCursor();
    var _cur$findPos = cur.findPos(to, 1),
      toI = _cur$findPos.i,
      toOff = _cur$findPos.off;
    var _cur$findPos2 = cur.findPos(from, -1),
      fromI = _cur$findPos2.i,
      fromOff = _cur$findPos2.off;
    var dLen = from - to;
    var _iterator35 = _createForOfIteratorHelper(insert),
      _step35;
    try {
      for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
        var view = _step35.value;
        dLen += view.length;
      }
    } catch (err) {
      _iterator35.e(err);
    } finally {
      _iterator35.f();
    }
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }
  var nav = typeof navigator != "undefined" ? navigator : {
    userAgent: "",
    vendor: "",
    platform: ""
  };
  var doc = typeof document != "undefined" ? document : {
    documentElement: {
      style: {}
    }
  };
  var ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
  var ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
  var ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  var ie = !!(ie_upto10 || ie_11up || ie_edge);
  var gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
  var chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
  var webkit = "webkitFontSmoothing" in doc.documentElement.style;
  var safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
  var ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
    windows: /*@__PURE__*//Win/.test(nav.platform),
    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
    ie: ie,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko: gecko,
    gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios: ios,
    android: /*@__PURE__*//Android\b/.test(nav.userAgent),
    webkit: webkit,
    safari: safari,
    webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  var MaxJoinLen = 256;
  var TextView = /*#__PURE__*/function (_ContentView) {
    function TextView(text) {
      var _this8;
      _classCallCheck(this, TextView);
      _this8 = _callSuper(this, TextView);
      _this8.text = text;
      return _this8;
    }
    _inherits(TextView, _ContentView);
    return _createClass(TextView, [{
      key: "length",
      get: function get() {
        return this.text.length;
      }
    }, {
      key: "createDOM",
      value: function createDOM(textDOM) {
        this.setDOM(textDOM || document.createTextNode(this.text));
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (!this.dom) this.createDOM();
        if (this.dom.nodeValue != this.text) {
          if (track && track.node == this.dom) track.written = true;
          this.dom.nodeValue = this.text;
        }
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(dom) {
        if (dom.nodeType == 3) this.createDOM(dom);
      }
    }, {
      key: "merge",
      value: function merge(from, to, source) {
        if (this.flags & 8 /* ViewFlag.Composition */ || source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen || source.flags & 8 /* ViewFlag.Composition */)) return false;
        this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
        this.markDirty();
        return true;
      }
    }, {
      key: "split",
      value: function split(from) {
        var result = new TextView(this.text.slice(from));
        this.text = this.text.slice(0, from);
        this.markDirty();
        result.flags |= this.flags & 8 /* ViewFlag.Composition */;
        return result;
      }
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM(node, offset) {
        return node == this.dom ? offset : offset ? this.text.length : 0;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return new DOMPos(this.dom, pos);
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround(_from, _to, offset) {
        return {
          from: offset,
          to: offset + this.length,
          startDOM: this.dom,
          endDOM: this.dom.nextSibling
        };
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        return textCoords(this.dom, pos, side);
      }
    }]);
  }(ContentView);
  var MarkView = /*#__PURE__*/function (_ContentView2) {
    function MarkView(mark) {
      var _this9;
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      _classCallCheck(this, MarkView);
      _this9 = _callSuper(this, MarkView);
      _this9.mark = mark;
      _this9.children = children;
      _this9.length = length;
      var _iterator36 = _createForOfIteratorHelper(children),
        _step36;
      try {
        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
          var ch = _step36.value;
          ch.setParent(_this9);
        }
      } catch (err) {
        _iterator36.e(err);
      } finally {
        _iterator36.f();
      }
      return _this9;
    }
    _inherits(MarkView, _ContentView2);
    return _createClass(MarkView, [{
      key: "setAttrs",
      value: function setAttrs(dom) {
        clearAttributes(dom);
        if (this.mark["class"]) dom.className = this.mark["class"];
        if (this.mark.attrs) for (var _name in this.mark.attrs) dom.setAttribute(_name, this.mark.attrs[_name]);
        return dom;
      }
    }, {
      key: "canReuseDOM",
      value: function canReuseDOM(other) {
        return _superPropGet(MarkView, "canReuseDOM", this, 3)([other]) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(node) {
        if (node.nodeName == this.mark.tagName.toUpperCase()) {
          this.setDOM(node);
          this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
        }
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.flags & 4 /* ViewFlag.AttrsDirty */) this.setAttrs(this.dom);
        _superPropGet(MarkView, "sync", this, 3)([view, track]);
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, _hasStart, openStart, openEnd) {
        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
        this.markDirty();
        return true;
      }
    }, {
      key: "split",
      value: function split(from) {
        var result = [],
          off = 0,
          detachFrom = -1,
          i = 0;
        var _iterator37 = _createForOfIteratorHelper(this.children),
          _step37;
        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
            var elt = _step37.value;
            var end = off + elt.length;
            if (end > from) result.push(off < from ? elt.split(from - off) : elt);
            if (detachFrom < 0 && off >= from) detachFrom = i;
            off = end;
            i++;
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }
        var length = this.length - from;
        this.length = from;
        if (detachFrom > -1) {
          this.children.length = detachFrom;
          this.markDirty();
        }
        return new MarkView(this.mark, result, length);
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        return coordsInChildren(this, pos, side);
      }
    }]);
  }(ContentView);
  function textCoords(text, pos, side) {
    var length = text.nodeValue.length;
    if (pos > length) pos = length;
    var from = pos,
      to = pos,
      flatten = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        // These browsers reliably return valid rectangles for empty ranges
        if (pos) {
          from--;
          flatten = 1;
        } // FIXME this is wrong in RTL text
        else if (to < length) {
          to++;
          flatten = -1;
        }
      }
    } else {
      if (side < 0) from--;else if (to < length) to++;
    }
    var rects = textRange(text, from, to).getClientRects();
    if (!rects.length) return null;
    var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
      return r.width;
    }) || rect;
    return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  var WidgetView = /*#__PURE__*/function (_ContentView3) {
    function WidgetView(widget, length, side) {
      var _this0;
      _classCallCheck(this, WidgetView);
      _this0 = _callSuper(this, WidgetView);
      _this0.widget = widget;
      _this0.length = length;
      _this0.side = side;
      _this0.prevWidget = null;
      return _this0;
    }
    _inherits(WidgetView, _ContentView3);
    return _createClass(WidgetView, [{
      key: "split",
      value: function split(from) {
        var result = WidgetView.create(this.widget, this.length - from, this.side);
        this.length -= from;
        return result;
      }
    }, {
      key: "sync",
      value: function sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable) this.dom.contentEditable = "false";
        }
      }
    }, {
      key: "getSide",
      value: function getSide() {
        return this.side;
      }
    }, {
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        this.length = from + (source ? source.length : 0) + (this.length - to);
        return true;
      }
    }, {
      key: "become",
      value: function become(other) {
        if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
          if (!this.widget.compare(other.widget)) this.markDirty(true);
          if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          return true;
        }
        return false;
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation() {
        return true;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        if (this.length == 0) return Text.empty;
        var top = this;
        while (top.parent) top = top.parent;
        var _top5 = top,
          view = _top5.view,
          text = view && view.state.doc,
          start = this.posAtStart;
        return text ? text.slice(start, start + this.length) : Text.empty;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom) return custom;
        var rects = this.dom.getClientRects(),
          rect = null;
        if (!rects.length) return null;
        var fromBack = this.side ? this.side < 0 : pos > 0;
        for (var _i61 = fromBack ? rects.length - 1 : 0;; _i61 += fromBack ? -1 : 1) {
          rect = rects[_i61];
          if (pos > 0 ? _i61 == 0 : _i61 == rects.length - 1 || rect.top < rect.bottom) break;
        }
        return flattenRect(rect, !fromBack);
      }
    }, {
      key: "isEditable",
      get: function get() {
        return false;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return true;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return this.widget.isHidden;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(WidgetView, "destroy", this, 3)([]);
        if (this.dom) this.widget.destroy(this.dom);
      }
    }], [{
      key: "create",
      value: function create(widget, length, side) {
        return new WidgetView(widget, length, side);
      }
    }]);
  }(ContentView); // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  var WidgetBufferView = /*#__PURE__*/function (_ContentView4) {
    function WidgetBufferView(side) {
      var _this1;
      _classCallCheck(this, WidgetBufferView);
      _this1 = _callSuper(this, WidgetBufferView);
      _this1.side = side;
      return _this1;
    }
    _inherits(WidgetBufferView, _ContentView4);
    return _createClass(WidgetBufferView, [{
      key: "length",
      get: function get() {
        return 0;
      }
    }, {
      key: "merge",
      value: function merge() {
        return false;
      }
    }, {
      key: "become",
      value: function become(other) {
        return other instanceof WidgetBufferView && other.side == this.side;
      }
    }, {
      key: "split",
      value: function split() {
        return new WidgetBufferView(this.side);
      }
    }, {
      key: "sync",
      value: function sync() {
        if (!this.dom) {
          var dom = document.createElement("img");
          dom.className = "cm-widgetBuffer";
          dom.setAttribute("aria-hidden", "true");
          this.setDOM(dom);
        }
      }
    }, {
      key: "getSide",
      value: function getSide() {
        return this.side;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
      }
    }, {
      key: "localPosFromDOM",
      value: function localPosFromDOM() {
        return 0;
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos) {
        return this.dom.getBoundingClientRect();
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        return Text.empty;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return true;
      }
    }]);
  }(ContentView);
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
    var dom = parent.dom,
      children = parent.children,
      i = 0;
    for (var off = 0; i < children.length; i++) {
      var child = children[i],
        end = off + child.length;
      if (end == off && child.getSide() <= 0) continue;
      if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
      if (pos <= off) break;
      off = end;
    }
    for (var j = i; j > 0; j--) {
      var prev = children[j - 1];
      if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);
    }
    for (var _j = i; _j < children.length; _j++) {
      var next = children[_j];
      if (next.dom.parentNode == dom) return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
    var last,
      children = parent.children;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    var before = null,
      beforePos = -1,
      after = null,
      afterPos = -1;
    function scan(view, pos) {
      for (var _i62 = 0, off = 0; _i62 < view.children.length && off <= pos; _i62++) {
        var child = view.children[_i62],
          end = off + child.length;
        if (end >= pos) {
          if (child.children.length) {
            scan(child, pos - off);
          } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end > pos || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos - off;
          } else if (off < pos || off == end && child.getSide() < 0 && !child.isHidden) {
            before = child;
            beforePos = pos - off;
          }
        }
        off = end;
      }
    }
    scan(view, pos);
    var target = (side < 0 ? before : after) || before || after;
    if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    var last = view.dom.lastChild;
    if (!last) return view.dom.getBoundingClientRect();
    var rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function onSameLine(a, b) {
    var posA = a.coordsAt(0, 1),
      posB = b.coordsAt(0, 1);
    return posA && posB && posB.top < posA.bottom;
  }
  function combineAttrs(source, target) {
    for (var _name2 in source) {
      if (_name2 == "class" && target["class"]) target["class"] += " " + source["class"];else if (_name2 == "style" && target.style) target.style += ";" + source.style;else target[_name2] = source[_name2];
    }
    return target;
  }
  var noAttrs$1 = /*@__PURE__*/Object.create(null);
  function attrsEq(a, b, ignore) {
    if (a == b) return true;
    if (!a) a = noAttrs$1;
    if (!b) b = noAttrs$1;
    var keysA = Object.keys(a),
      keysB = Object.keys(b);
    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0)) return false;
    for (var _i63 = 0, _keysA = keysA; _i63 < _keysA.length; _i63++) {
      var key = _keysA[_i63];
      if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key])) return false;
    }
    return true;
  }
  function _updateAttrs(dom, prev, attrs) {
    var changed = false;
    if (prev) for (var _name3 in prev) if (!(attrs && _name3 in attrs)) {
      changed = true;
      if (_name3 == "style") dom.style.cssText = "";else dom.removeAttribute(_name3);
    }
    if (attrs) for (var _name4 in attrs) if (!(prev && prev[_name4] == attrs[_name4])) {
      changed = true;
      if (_name4 == "style") dom.style.cssText = attrs[_name4];else dom.setAttribute(_name4, attrs[_name4]);
    }
    return changed;
  }
  function getAttrs(dom) {
    var attrs = Object.create(null);
    for (var _i64 = 0; _i64 < dom.attributes.length; _i64++) {
      var attr = dom.attributes[_i64];
      attrs[attr.name] = attr.value;
    }
    return attrs;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  var WidgetType = /*#__PURE__*/function () {
    function WidgetType() {
      _classCallCheck(this, WidgetType);
    }
    return _createClass(WidgetType, [{
      key: "eq",
      value:
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      function eq(widget) {
        return false;
      }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
    }, {
      key: "updateDOM",
      value: function updateDOM(dom, view) {
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "compare",
      value: function compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
    }, {
      key: "estimatedHeight",
      get: function get() {
        return -1;
      }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
    }, {
      key: "lineBreaks",
      get: function get() {
        return 0;
      }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return true;
      }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
    }, {
      key: "coordsAt",
      value: function coordsAt(dom, pos, side) {
        return null;
      }
      /**
      @internal
      */
    }, {
      key: "isHidden",
      get: function get() {
        return false;
      }
      /**
      @internal
      */
    }, {
      key: "editable",
      get: function get() {
        return false;
      }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
    }, {
      key: "destroy",
      value: function destroy(dom) {}
    }]);
  }();
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/function (BlockType) {
    /**
    A line of text.
    */
    BlockType[BlockType["Text"] = 0] = "Text";
    /**
    A block widget associated with the position after it.
    */
    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
    /**
    A block widget associated with the position before it.
    */
    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
    /**
    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
    */
    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType;
  }(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  var Decoration = /*#__PURE__*/function (_RangeValue) {
    function Decoration(
    /**
    @internal
    */
    startSide,
    /**
    @internal
    */
    endSide,
    /**
    @internal
    */
    widget,
    /**
    The config object used to create this decoration. You can
    include additional properties in there to store metadata about
    your decoration.
    */
    spec) {
      var _this10;
      _classCallCheck(this, Decoration);
      _this10 = _callSuper(this, Decoration);
      _this10.startSide = startSide;
      _this10.endSide = endSide;
      _this10.widget = widget;
      _this10.spec = spec;
      return _this10;
    }
    /**
    @internal
    */
    _inherits(Decoration, _RangeValue);
    return _createClass(Decoration, [{
      key: "heightRelevant",
      get: function get() {
        return false;
      }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
    }, {
      key: "hasHeight",
      value:
      /**
      @internal
      */
      function hasHeight() {
        return this.widget ? this.widget.estimatedHeight > -1 : false;
      }
    }], [{
      key: "mark",
      value: function mark(spec) {
        return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
    }, {
      key: "widget",
      value: function widget(spec) {
        var side = Math.max(-10000, Math.min(10000, spec.side || 0)),
          block = !!spec.block;
        side += block && !spec.inlineOrder ? side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */ : side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */;
        return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
    }, {
      key: "replace",
      value: function replace(spec) {
        var block = !!spec.block,
          startSide,
          endSide;
        if (spec.isBlockGap) {
          startSide = -500000000 /* Side.GapStart */;
          endSide = 400000000 /* Side.GapEnd */;
        } else {
          var _getInclusive = getInclusive(spec, block),
            start = _getInclusive.start,
            end = _getInclusive.end;
          startSide = (start ? block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */) - 1;
          endSide = (end ? block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */) + 1;
        }
        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
    }, {
      key: "line",
      value: function line(spec) {
        return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
    }, {
      key: "set",
      value: function set(of) {
        var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return RangeSet.of(of, sort);
      }
    }]);
  }(RangeValue);
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  var MarkDecoration = /*#__PURE__*/function (_Decoration) {
    function MarkDecoration(spec) {
      var _this11;
      _classCallCheck(this, MarkDecoration);
      var _getInclusive2 = getInclusive(spec),
        start = _getInclusive2.start,
        end = _getInclusive2.end;
      _this11 = _callSuper(this, MarkDecoration, [start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec]);
      _this11.tagName = spec.tagName || "span";
      _this11["class"] = spec["class"] || "";
      _this11.attrs = spec.attributes || null;
      return _this11;
    }
    _inherits(MarkDecoration, _Decoration);
    return _createClass(MarkDecoration, [{
      key: "eq",
      value: function eq(other) {
        var _a, _b;
        return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && (this["class"] || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a["class"])) == (other["class"] || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b["class"])) && attrsEq(this.attrs, other.attrs, "class");
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (from >= to) throw new RangeError("Mark decorations may not be empty");
        return _superPropGet(MarkDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  MarkDecoration.prototype.point = false;
  var LineDecoration = /*#__PURE__*/function (_Decoration2) {
    function LineDecoration(spec) {
      _classCallCheck(this, LineDecoration);
      return _callSuper(this, LineDecoration, [-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec]);
    }
    _inherits(LineDecoration, _Decoration2);
    return _createClass(LineDecoration, [{
      key: "eq",
      value: function eq(other) {
        return other instanceof LineDecoration && this.spec["class"] == other.spec["class"] && attrsEq(this.spec.attributes, other.spec.attributes);
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
        return _superPropGet(LineDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  var PointDecoration = /*#__PURE__*/function (_Decoration3) {
    function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
      var _this12;
      _classCallCheck(this, PointDecoration);
      _this12 = _callSuper(this, PointDecoration, [startSide, endSide, widget, spec]);
      _this12.block = block;
      _this12.isReplace = isReplace;
      _this12.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      return _this12;
    }
    // Only relevant when this.block == true
    _inherits(PointDecoration, _Decoration3);
    return _createClass(PointDecoration, [{
      key: "type",
      get: function get() {
        return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
    }, {
      key: "heightRelevant",
      get: function get() {
        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
    }, {
      key: "eq",
      value: function eq(other) {
        return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
      }
    }, {
      key: "range",
      value: function range(from) {
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
        if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
        if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
        return _superPropGet(PointDecoration, "range", this, 3)([from, to]);
      }
    }]);
  }(Decoration);
  PointDecoration.prototype.point = true;
  function getInclusive(spec) {
    var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var start = spec.inclusiveStart,
      end = spec.inclusiveEnd;
    if (start == null) start = spec.inclusive;
    if (end == null) end = spec.inclusive;
    return {
      start: start !== null && start !== void 0 ? start : block,
      end: end !== null && end !== void 0 ? end : block
    };
  }
  function widgetsEq(a, b) {
    return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges) {
    var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
  }
  var LineView = /*#__PURE__*/function (_ContentView5) {
    function LineView() {
      var _this13;
      _classCallCheck(this, LineView);
      _this13 = _callSuper(this, LineView, arguments);
      _this13.children = [];
      _this13.length = 0;
      _this13.prevAttrs = undefined;
      _this13.attrs = null;
      _this13.breakAfter = 0;
      return _this13;
    }
    // Consumes source
    _inherits(LineView, _ContentView5);
    return _createClass(LineView, [{
      key: "merge",
      value: function merge(from, to, source, hasStart, openStart, openEnd) {
        if (source) {
          if (!(source instanceof LineView)) return false;
          if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
        }
        if (hasStart) this.setDeco(source ? source.attrs : null);
        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
        return true;
      }
    }, {
      key: "split",
      value: function split(at) {
        var end = new LineView();
        end.breakAfter = this.breakAfter;
        if (this.length == 0) return end;
        var _this$childPos = this.childPos(at),
          i = _this$childPos.i,
          off = _this$childPos.off;
        if (off) {
          end.append(this.children[i].split(off), 0);
          this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
          i++;
        }
        for (var j = i; j < this.children.length; j++) end.append(this.children[j], 0);
        while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();
        this.children.length = i;
        this.markDirty();
        this.length = at;
        return end;
      }
    }, {
      key: "transferDOM",
      value: function transferDOM(other) {
        if (!this.dom) return;
        this.markDirty();
        other.setDOM(this.dom);
        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
        this.prevAttrs = undefined;
        this.dom = null;
      }
    }, {
      key: "setDeco",
      value: function setDeco(attrs) {
        if (!attrsEq(this.attrs, attrs)) {
          if (this.dom) {
            this.prevAttrs = this.attrs;
            this.markDirty();
          }
          this.attrs = attrs;
        }
      }
    }, {
      key: "append",
      value: function append(child, openStart) {
        joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
    }, {
      key: "addLineDeco",
      value: function addLineDeco(deco) {
        var attrs = deco.spec.attributes,
          cls = deco.spec["class"];
        if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
        if (cls) this.attrs = combineAttrs({
          "class": cls
        }, this.attrs || {});
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
    }, {
      key: "reuseDOM",
      value: function reuseDOM(node) {
        if (node.nodeName == "DIV") {
          this.setDOM(node);
          this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
        }
      }
    }, {
      key: "sync",
      value: function sync(view, track) {
        var _a;
        if (!this.dom) {
          this.setDOM(document.createElement("div"));
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : undefined;
        } else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
          clearAttributes(this.dom);
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : undefined;
        }
        if (this.prevAttrs !== undefined) {
          _updateAttrs(this.dom, this.prevAttrs, this.attrs);
          this.dom.classList.add("cm-line");
          this.prevAttrs = undefined;
        }
        _superPropGet(LineView, "sync", this, 3)([view, track]);
        var last = this.dom.lastChild;
        while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;
        if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(function (ch) {
          return ch instanceof TextView;
        }))) {
          var hack = document.createElement("BR");
          hack.cmIgnore = true;
          this.dom.appendChild(hack);
        }
      }
    }, {
      key: "measureTextSize",
      value: function measureTextSize() {
        if (this.children.length == 0 || this.length > 20) return null;
        var totalWidth = 0,
          textHeight;
        var _iterator38 = _createForOfIteratorHelper(this.children),
          _step38;
        try {
          for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
            var child = _step38.value;
            if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
            var rects = clientRectsFor(child.dom);
            if (rects.length != 1) return null;
            totalWidth += rects[0].width;
            textHeight = rects[0].height;
          }
        } catch (err) {
          _iterator38.e(err);
        } finally {
          _iterator38.f();
        }
        return !totalWidth ? null : {
          lineHeight: this.dom.getBoundingClientRect().height,
          charWidth: totalWidth / this.length,
          textHeight: textHeight
        };
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var rect = coordsInChildren(this, pos, side);
        // Correct rectangle height for empty lines when the returned
        // height is larger than the text height.
        if (!this.children.length && rect && this.parent) {
          var heightOracle = this.parent.view.viewState.heightOracle,
            height = rect.bottom - rect.top;
          if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
            var _dist = (height - heightOracle.textHeight) / 2;
            return {
              top: rect.top + _dist,
              bottom: rect.bottom - _dist,
              left: rect.left,
              right: rect.left
            };
          }
        }
        return rect;
      }
    }, {
      key: "become",
      value: function become(other) {
        return other instanceof LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
    }, {
      key: "covers",
      value: function covers() {
        return true;
      }
    }], [{
      key: "find",
      value: function find(docView, pos) {
        for (var _i65 = 0, off = 0; _i65 < docView.children.length; _i65++) {
          var block = docView.children[_i65],
            end = off + block.length;
          if (end >= pos) {
            if (block instanceof LineView) return block;
            if (end > pos) break;
          }
          off = end + block.breakAfter;
        }
        return null;
      }
    }]);
  }(ContentView);
  var BlockWidgetView = /*#__PURE__*/function (_ContentView6) {
    function BlockWidgetView(widget, length, deco) {
      var _this14;
      _classCallCheck(this, BlockWidgetView);
      _this14 = _callSuper(this, BlockWidgetView);
      _this14.widget = widget;
      _this14.length = length;
      _this14.deco = deco;
      _this14.breakAfter = 0;
      _this14.prevWidget = null;
      return _this14;
    }
    _inherits(BlockWidgetView, _ContentView6);
    return _createClass(BlockWidgetView, [{
      key: "merge",
      value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
        this.length = from + (source ? source.length : 0) + (this.length - to);
        return true;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
    }, {
      key: "split",
      value: function split(at) {
        var len = this.length - at;
        this.length = at;
        var end = new BlockWidgetView(this.widget, len, this.deco);
        end.breakAfter = this.breakAfter;
        return end;
      }
    }, {
      key: "children",
      get: function get() {
        return noChildren;
      }
    }, {
      key: "sync",
      value: function sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable) this.dom.contentEditable = "false";
        }
      }
    }, {
      key: "overrideDOMText",
      get: function get() {
        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
    }, {
      key: "domBoundsAround",
      value: function domBoundsAround() {
        return null;
      }
    }, {
      key: "become",
      value: function become(other) {
        if (other instanceof BlockWidgetView && other.widget.constructor == this.widget.constructor) {
          if (!other.widget.compare(this.widget)) this.markDirty(true);
          if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          this.deco = other.deco;
          this.breakAfter = other.breakAfter;
          return true;
        }
        return false;
      }
    }, {
      key: "ignoreMutation",
      value: function ignoreMutation() {
        return true;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
    }, {
      key: "isEditable",
      get: function get() {
        return false;
      }
    }, {
      key: "isWidget",
      get: function get() {
        return true;
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom) return custom;
        if (this.widget instanceof BlockGapWidget) return null;
        return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(BlockWidgetView, "destroy", this, 3)([]);
        if (this.dom) this.widget.destroy(this.dom);
      }
    }, {
      key: "covers",
      value: function covers(side) {
        var _this$deco = this.deco,
          startSide = _this$deco.startSide,
          endSide = _this$deco.endSide;
        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
    }]);
  }(ContentView);
  var BlockGapWidget = /*#__PURE__*/function (_WidgetType) {
    function BlockGapWidget(height) {
      var _this15;
      _classCallCheck(this, BlockGapWidget);
      _this15 = _callSuper(this, BlockGapWidget);
      _this15.height = height;
      return _this15;
    }
    _inherits(BlockGapWidget, _WidgetType);
    return _createClass(BlockGapWidget, [{
      key: "toDOM",
      value: function toDOM() {
        var elt = document.createElement("div");
        elt.className = "cm-gap";
        this.updateDOM(elt);
        return elt;
      }
    }, {
      key: "eq",
      value: function eq(other) {
        return other.height == this.height;
      }
    }, {
      key: "updateDOM",
      value: function updateDOM(elt) {
        elt.style.height = this.height + "px";
        return true;
      }
    }, {
      key: "editable",
      get: function get() {
        return true;
      }
    }, {
      key: "estimatedHeight",
      get: function get() {
        return this.height;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  var ContentBuilder = /*#__PURE__*/function () {
    function ContentBuilder(doc, pos, end, disallowBlockEffectsFor) {
      _classCallCheck(this, ContentBuilder);
      this.doc = doc;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0 /* Buf.No */;
      this.bufferMarks = [];
      // Set to false directly after a widget that covers the position after it
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc.iter();
      this.skip = pos;
    }
    return _createClass(ContentBuilder, [{
      key: "posCovered",
      value: function posCovered() {
        if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
        var last = this.content[this.content.length - 1];
        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
    }, {
      key: "getLine",
      value: function getLine() {
        if (!this.curLine) {
          this.content.push(this.curLine = new LineView());
          this.atCursorPos = true;
        }
        return this.curLine;
      }
    }, {
      key: "flushBuffer",
      value: function flushBuffer() {
        var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.bufferMarks;
        if (this.pendingBuffer) {
          this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
          this.pendingBuffer = 0 /* Buf.No */;
        }
      }
    }, {
      key: "addBlockWidget",
      value: function addBlockWidget(view) {
        this.flushBuffer();
        this.curLine = null;
        this.content.push(view);
      }
    }, {
      key: "finish",
      value: function finish(openEnd) {
        if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();else this.pendingBuffer = 0 /* Buf.No */;
        if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView)) this.getLine();
      }
    }, {
      key: "buildText",
      value: function buildText(length, active, openStart) {
        while (length > 0) {
          if (this.textOff == this.text.length) {
            var _this$cursor$next2 = this.cursor.next(this.skip),
              value = _this$cursor$next2.value,
              lineBreak = _this$cursor$next2.lineBreak,
              done = _this$cursor$next2.done;
            this.skip = 0;
            if (done) throw new Error("Ran out of text content when drawing inline views");
            if (lineBreak) {
              if (!this.posCovered()) this.getLine();
              if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
              this.flushBuffer();
              this.curLine = null;
              this.atCursorPos = true;
              length--;
              continue;
            } else {
              this.text = value;
              this.textOff = 0;
            }
          }
          var take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
          this.flushBuffer(active.slice(active.length - openStart));
          this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
          this.atCursorPos = true;
          this.textOff += take;
          length -= take;
          openStart = 0;
        }
      }
    }, {
      key: "span",
      value: function span(from, to, active, openStart) {
        this.buildText(to - from, active, openStart);
        this.pos = to;
        if (this.openStart < 0) this.openStart = openStart;
      }
    }, {
      key: "point",
      value: function point(from, to, deco, active, openStart, index) {
        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
          if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
          if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
        }
        var len = to - from;
        if (deco instanceof PointDecoration) {
          if (deco.block) {
            if (deco.startSide > 0 && !this.posCovered()) this.getLine();
            this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
          } else {
            var view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
            var cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
            var cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
            var line = this.getLine();
            if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable) this.pendingBuffer = 0 /* Buf.No */;
            this.flushBuffer(active);
            if (cursorBefore) {
              line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
              openStart = active.length + Math.max(0, openStart - active.length);
            }
            line.append(wrapMarks(view, active), openStart);
            this.atCursorPos = cursorAfter;
            this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
            if (this.pendingBuffer) this.bufferMarks = active.slice();
          }
        } else if (this.doc.lineAt(this.pos).from == this.pos) {
          // Line decoration
          this.getLine().addLineDeco(deco);
        }
        if (len) {
          // Advance the iterator past the replaced content
          if (this.textOff + len <= this.text.length) {
            this.textOff += len;
          } else {
            this.skip += len - (this.text.length - this.textOff);
            this.text = "";
            this.textOff = 0;
          }
          this.pos = to;
        }
        if (this.openStart < 0) this.openStart = openStart;
      }
    }], [{
      key: "build",
      value: function build(text, from, to, decorations, dynamicDecorationMap) {
        var builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
        builder.openEnd = RangeSet.spans(decorations, from, to, builder);
        if (builder.openStart < 0) builder.openStart = builder.openEnd;
        builder.finish(builder.openEnd);
        return builder;
      }
    }]);
  }();
  function wrapMarks(view, active) {
    var _iterator39 = _createForOfIteratorHelper(active),
      _step39;
    try {
      for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
        var mark = _step39.value;
        view = new MarkView(mark, [view], view.length);
      }
    } catch (err) {
      _iterator39.e(err);
    } finally {
      _iterator39.f();
    }
    return view;
  }
  var NullWidget = /*#__PURE__*/function (_WidgetType2) {
    function NullWidget(tag) {
      var _this16;
      _classCallCheck(this, NullWidget);
      _this16 = _callSuper(this, NullWidget);
      _this16.tag = tag;
      return _this16;
    }
    _inherits(NullWidget, _WidgetType2);
    return _createClass(NullWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.tag == this.tag;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        return document.createElement(this.tag);
      }
    }, {
      key: "updateDOM",
      value: function updateDOM(elt) {
        return elt.nodeName.toLowerCase() == this.tag;
      }
    }, {
      key: "isHidden",
      get: function get() {
        return true;
      }
    }]);
  }(WidgetType);
  NullWidget.inline = /*@__PURE__*/new NullWidget("span");
  NullWidget.block = /*@__PURE__*/new NullWidget("div");

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/function (Direction) {
    // (These are chosen to match the base levels, in bidi algorithm
    // terms, of spans in that direction.)
    /**
    Left-to-right.
    */
    Direction[Direction["LTR"] = 0] = "LTR";
    /**
    Right-to-left.
    */
    Direction[Direction["RTL"] = 1] = "RTL";
    return Direction;
  }(Direction || (Direction = {}));
  var LTR = Direction.LTR,
    RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
    var result = [];
    for (var _i66 = 0; _i66 < str.length; _i66++) result.push(1 << +str[_i66]);
    return result;
  }
  // Character types for codepoints 0 to 0xf8
  var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  var Brackets = /*@__PURE__*/Object.create(null),
    BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (var _i67 = 0, _arr = ["()", "[]", "{}"]; _i67 < _arr.length; _i67++) {
    var p = _arr[_i67];
    var l = /*@__PURE__*/p.charCodeAt(0),
      r = /*@__PURE__*/p.charCodeAt(1);
    Brackets[l] = r;
    Brackets[r] = -l;
  }
  function charType(ch) {
    return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ : 0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
  }
  var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  var BidiSpan = /*#__PURE__*/function () {
    /**
    @internal
    */
    function BidiSpan(
    /**
    The start of the span (relative to the start of the line).
    */
    from,
    /**
    The end of the span.
    */
    to,
    /**
    The ["bidi
    level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
    of the span (in this context, 0 means
    left-to-right, 1 means right-to-left, 2 means left-to-right
    number inside right-to-left text).
    */
    level) {
      _classCallCheck(this, BidiSpan);
      this.from = from;
      this.to = to;
      this.level = level;
    }
    /**
    @internal
    */
    return _createClass(BidiSpan, [{
      key: "dir",
      get:
      /**
      The direction of this span.
      */
      function get() {
        return this.level % 2 ? RTL : LTR;
      }
    }, {
      key: "side",
      value: function side(end, dir) {
        return this.dir == dir == end ? this.to : this.from;
      }
      /**
      @internal
      */
    }, {
      key: "forward",
      value: function forward(_forward, dir) {
        return _forward == (this.dir == dir);
      }
      /**
      @internal
      */
    }], [{
      key: "find",
      value: function find(order, index, level, assoc) {
        var maybe = -1;
        for (var _i68 = 0; _i68 < order.length; _i68++) {
          var span = order[_i68];
          if (span.from <= index && span.to >= index) {
            if (span.level == level) return _i68;
            // When multiple spans match, if assoc != 0, take the one that
            // covers that side, otherwise take the one with the minimum
            // level.
            if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = _i68;
          }
        }
        if (maybe < 0) throw new RangeError("Index out of range");
        return maybe;
      }
    }]);
  }();
  function isolatesEq(a, b) {
    if (a.length != b.length) return false;
    for (var _i69 = 0; _i69 < a.length; _i69++) {
      var iA = a[_i69],
        iB = b[_i69];
      if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner)) return false;
    }
    return true;
  }
  // Reused array of character types
  var types = [];
  // Fill in the character types (in `types`) from `from` to `to` and
  // apply W normalization rules.
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
    for (var iI = 0; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      var prevType = iI ? 256 /* T.NI */ : outerType;
      // W1. Examine each non-spacing mark (NSM) in the level run, and
      // change the type of the NSM to the type of the previous
      // character. If the NSM is at the start of the level run, it will
      // get the type of sor.
      // W2. Search backwards from each instance of a European number
      // until the first strong type (R, L, AL, or sor) is found. If an
      // AL is found, change the type of the European number to Arabic
      // number.
      // W3. Change all ALs to R.
      // (Left after this: L, R, EN, AN, ET, CS, NI)
      for (var _i70 = from, prev = prevType, prevStrong = prevType; _i70 < to; _i70++) {
        var type = charType(line.charCodeAt(_i70));
        if (type == 512 /* T.NSM */) type = prev;else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */) type = 16 /* T.AN */;
        types[_i70] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
        if (type & 7 /* T.Strong */) prevStrong = type;
        prev = type;
      }
      // W5. A sequence of European terminators adjacent to European
      // numbers changes to all European numbers.
      // W6. Otherwise, separators and terminators change to Other
      // Neutral.
      // W7. Search backwards from each instance of a European number
      // until the first strong type (R, L, or sor) is found. If an L is
      // found, then change the type of the European number to L.
      // (Left after this: L, R, EN+AN, NI)
      for (var _i71 = from, _prev = prevType, _prevStrong = prevType; _i71 < to; _i71++) {
        var _type2 = types[_i71];
        if (_type2 == 128 /* T.CS */) {
          if (_i71 < to - 1 && _prev == types[_i71 + 1] && _prev & 24 /* T.Num */) _type2 = types[_i71] = _prev;else types[_i71] = 256 /* T.NI */;
        } else if (_type2 == 64 /* T.ET */) {
          var end = _i71 + 1;
          while (end < to && types[end] == 64 /* T.ET */) end++;
          var _replace = _i71 && _prev == 8 /* T.EN */ || end < rTo && types[end] == 8 /* T.EN */ ? _prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */ : 256 /* T.NI */;
          for (var j = _i71; j < end; j++) types[j] = _replace;
          _i71 = end - 1;
        } else if (_type2 == 8 /* T.EN */ && _prevStrong == 1 /* T.L */) {
          types[_i71] = 1 /* T.L */;
        }
        _prev = _type2;
        if (_type2 & 7 /* T.Strong */) _prevStrong = _type2;
      }
    }
  }
  // Process brackets throughout a run sequence.
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
    var oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
    for (var iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      // N0. Process bracket pairs in an isolating run sequence
      // sequentially in the logical order of the text positions of the
      // opening paired brackets using the logic given below. Within this
      // scope, bidirectional types EN and AN are treated as R.
      for (var _i72 = from, ch, br, type; _i72 < to; _i72++) {
        // Keeps [startIndex, type, strongSeen] triples for each open
        // bracket on BracketStack.
        if (br = Brackets[ch = line.charCodeAt(_i72)]) {
          if (br < 0) {
            // Closing bracket
            for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
              if (BracketStack[sJ + 1] == -br) {
                var flags = BracketStack[sJ + 2];
                var _type3 = flags & 2 /* Bracketed.EmbedInside */ ? outerType : !(flags & 4 /* Bracketed.OppositeInside */) ? 0 : flags & 1 /* Bracketed.OppositeBefore */ ? oppositeType : outerType;
                if (_type3) types[_i72] = types[BracketStack[sJ]] = _type3;
                sI = sJ;
                break;
              }
            }
          } else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
            break;
          } else {
            BracketStack[sI++] = _i72;
            BracketStack[sI++] = ch;
            BracketStack[sI++] = context;
          }
        } else if ((type = types[_i72]) == 2 /* T.R */ || type == 1 /* T.L */) {
          var embed = type == outerType;
          context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
          for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
            var _cur9 = BracketStack[_sJ + 2];
            if (_cur9 & 2 /* Bracketed.EmbedInside */) break;
            if (embed) {
              BracketStack[_sJ + 2] |= 2 /* Bracketed.EmbedInside */;
            } else {
              if (_cur9 & 4 /* Bracketed.OppositeInside */) break;
              BracketStack[_sJ + 2] |= 4 /* Bracketed.OppositeInside */;
            }
          }
        }
      }
    }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
    for (var iI = 0, prev = outerType; iI <= isolates.length; iI++) {
      var from = iI ? isolates[iI - 1].to : rFrom,
        to = iI < isolates.length ? isolates[iI].from : rTo;
      // N1. A sequence of neutrals takes the direction of the
      // surrounding strong text if the text on both sides has the same
      // direction. European and Arabic numbers act as if they were R in
      // terms of their influence on neutrals. Start-of-level-run (sor)
      // and end-of-level-run (eor) are used at level run boundaries.
      // N2. Any remaining neutrals take the embedding direction.
      // (Left after this: L, R, EN+AN)
      for (var _i73 = from; _i73 < to;) {
        var type = types[_i73];
        if (type == 256 /* T.NI */) {
          var end = _i73 + 1;
          for (;;) {
            if (end == to) {
              if (iI == isolates.length) break;
              end = isolates[iI++].to;
              to = iI < isolates.length ? isolates[iI].from : rTo;
            } else if (types[end] == 256 /* T.NI */) {
              end++;
            } else {
              break;
            }
          }
          var beforeL = prev == 1 /* T.L */;
          var afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
          var _replace2 = beforeL == afterL ? beforeL ? 1 /* T.L */ : 2 /* T.R */ : outerType;
          for (var j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > _i73;) {
            if (j == fromJ) {
              j = isolates[--jI].from;
              fromJ = jI ? isolates[jI - 1].to : rFrom;
            }
            types[--j] = _replace2;
          }
          _i73 = end;
        } else {
          prev = type;
          _i73++;
        }
      }
    }
  }
  // Find the contiguous ranges of character types in a given range, and
  // emit spans for them. Flip the order of the spans as appropriate
  // based on the level, and call through to compute the spans for
  // isolates at the proper point.
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
    var ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
    if (level % 2 == baseLevel % 2) {
      // Same dir as base direction, don't flip
      for (var iCh = from, iI = 0; iCh < to;) {
        // Scan a section of characters in direction ourType, unless
        // there's another type of char right after iCh, in which case
        // we scan a section of other characters (which, if ourType ==
        // T.L, may contain both T.R and T.AN chars).
        var sameDir = true,
          isNum = false;
        if (iI == isolates.length || iCh < isolates[iI].from) {
          var next = types[iCh];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16 /* T.AN */;
          }
        }
        // Holds an array of isolates to pass to a recursive call if we
        // must recurse (to distinguish T.AN inside an RTL section in
        // LTR text), null if we can emit directly
        var recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
        var localLevel = sameDir ? level : level + 1;
        var iScan = iCh;
        run: for (;;) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum) break run;
            var iso = isolates[iI];
            // Scan ahead to verify that there is another char in this dir after the isolate(s)
            if (!sameDir) for (var upto = iso.to, jI = iI + 1;;) {
              if (upto == to) break run;
              if (jI < isolates.length && isolates[jI].from == upto) upto = isolates[jI++].to;else if (types[upto] == ourType) break run;else break;
            }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh) order.push(new BidiSpan(iCh, iso.from, localLevel));
              var dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
        if (recurse) emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);else if (iCh < iScan) order.push(new BidiSpan(iCh, iScan, localLevel));
        iCh = iScan;
      }
    } else {
      // Iterate in reverse to flip the span order. Same code again, but
      // going from the back of the section to the front
      for (var _iCh = to, _iI = isolates.length; _iCh > from;) {
        var _sameDir = true,
          _isNum = false;
        if (!_iI || _iCh > isolates[_iI - 1].to) {
          var _next2 = types[_iCh - 1];
          if (_next2 != ourType) {
            _sameDir = false;
            _isNum = _next2 == 16 /* T.AN */;
          }
        }
        var _recurse = !_sameDir && ourType == 1 /* T.L */ ? [] : null;
        var _localLevel = _sameDir ? level : level + 1;
        var _iScan = _iCh;
        run: for (;;) {
          if (_iI && _iScan == isolates[_iI - 1].to) {
            if (_isNum) break run;
            var _iso = isolates[--_iI];
            // Scan ahead to verify that there is another char in this dir after the isolate(s)
            if (!_sameDir) for (var _upto = _iso.from, _jI = _iI;;) {
              if (_upto == from) break run;
              if (_jI && isolates[_jI - 1].to == _upto) _upto = isolates[--_jI].from;else if (types[_upto - 1] == ourType) break run;else break;
            }
            if (_recurse) {
              _recurse.push(_iso);
            } else {
              if (_iso.to < _iCh) order.push(new BidiSpan(_iso.to, _iCh, _localLevel));
              var _dirSwap = _iso.direction == LTR != !(_localLevel % 2);
              computeSectionOrder(line, _dirSwap ? level + 1 : level, baseLevel, _iso.inner, _iso.from, _iso.to, order);
              _iCh = _iso.from;
            }
            _iScan = _iso.from;
          } else if (_iScan == from || (_sameDir ? types[_iScan - 1] != ourType : types[_iScan - 1] == ourType)) {
            break;
          } else {
            _iScan--;
          }
        }
        if (_recurse) emitSpans(line, _iScan, _iCh, level + 1, baseLevel, _recurse, order);else if (_iScan < _iCh) order.push(new BidiSpan(_iScan, _iCh, _localLevel));
        _iCh = _iScan;
      }
    }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
    var outerType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
    computeCharTypes(line, from, to, isolates, outerType);
    processBracketPairs(line, from, to, isolates, outerType);
    processNeutrals(from, to, isolates, outerType);
    emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
    if (!line) return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
    if (direction == LTR && !isolates.length && !BidiRE.test(line)) return trivialOrder(line.length);
    if (isolates.length) while (line.length > types.length) types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
    var order = [],
      level = direction == LTR ? 0 : 1;
    computeSectionOrder(line, level, level, isolates, 0, line.length, order);
    return order;
  }
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  var movedOver = "";
  // This implementation moves strictly visually, without concern for a
  // traversal visiting every logical position in the string. It will
  // still do so for simple input, but situations like multiple isolates
  // with the same level next to each other, or text going against the
  // main dir at the end of the line, will make some positions
  // unreachable with this motion. Each visible cursor position will
  // correspond to the lower-level bidi span that touches it.
  //
  // The alternative would be to solve an order globally for a given
  // line, making sure that it includes every position, but that would
  // require associating non-canonical (higher bidi span level)
  // positions with a given visual position, which is likely to confuse
  // people. (And would generally be a lot more complicated.)
  function moveVisually(line, order, dir, start, forward) {
    var _a;
    var startIndex = start.head - line.from;
    var spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
    var span = order[spanI],
      spanEnd = span.side(forward, dir);
    // End of span
    if (startIndex == spanEnd) {
      var nextI = spanI += forward ? 1 : -1;
      if (nextI < 0 || nextI >= order.length) return null;
      span = order[spanI = nextI];
      startIndex = span.side(!forward, dir);
      spanEnd = span.side(forward, dir);
    }
    var nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
    if (nextIndex < span.from || nextIndex > span.to) nextIndex = spanEnd;
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level) return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
    for (var _i74 = from; _i74 < to; _i74++) {
      var type = charType(text.charCodeAt(_i74));
      if (type == 1 /* T.L */) return LTR;
      if (type == 2 /* T.R */ || type == 4 /* T.AL */) return RTL;
    }
    return LTR;
  }
  var clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  var dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  var mouseSelectionStyle = /*@__PURE__*/Facet.define();
  var exceptionSink = /*@__PURE__*/Facet.define();
  var updateListener = /*@__PURE__*/Facet.define();
  var inputHandler$1 = /*@__PURE__*/Facet.define();
  var focusChangeEffect = /*@__PURE__*/Facet.define();
  var clipboardInputFilter = /*@__PURE__*/Facet.define();
  var clipboardOutputFilter = /*@__PURE__*/Facet.define();
  var perLineTextDirection = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  var nativeSelectionHidden = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  var scrollHandler = /*@__PURE__*/Facet.define();
  var ScrollTarget = /*#__PURE__*/function () {
    function ScrollTarget(range) {
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "nearest";
      var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "nearest";
      var yMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
      var xMargin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;
      var isSnapshot = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      _classCallCheck(this, ScrollTarget);
      this.range = range;
      this.y = y;
      this.x = x;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
      this.isSnapshot = isSnapshot;
    }
    return _createClass(ScrollTarget, [{
      key: "map",
      value: function map(changes) {
        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    }, {
      key: "clip",
      value: function clip(state) {
        return this.range.to <= state.doc.length ? this : new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    }]);
  }();
  var scrollIntoView$1 = /*@__PURE__*/StateEffect.define({
    map: function map(t, ch) {
      return t.map(ch);
    }
  });
  var setEditContextFormatting = /*@__PURE__*/StateEffect.define();
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).
   Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
    var handler = state.facet(exceptionSink);
    if (handler.length) handler[0](exception);else if (window.onerror && window.onerror(String(exception), context, undefined, undefined, exception)) ;else if (context) console.error(context + ":", exception);else console.error(exception);
  }
  var editable = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : true;
    }
  });
  var nextPluginID = 0;
  var viewPlugin = /*@__PURE__*/Facet.define({
    combine: function combine(plugins) {
      return plugins.filter(function (p, i) {
        for (var j = 0; j < i; j++) if (plugins[j].plugin == p.plugin) return false;
        return true;
      });
    }
  });
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view. They optionally take an argument, in
  which case you need to call [`of`](https://codemirror.net/6/docs/ref/#view.ViewPlugin.of) to create
  an extension for the plugin. When the argument type is undefined,
  you can use the plugin instance as an extension directly.
  */
  var ViewPlugin = /*#__PURE__*/function () {
    function ViewPlugin(
    /**
    @internal
    */
    id,
    /**
    @internal
    */
    create,
    /**
    @internal
    */
    domEventHandlers,
    /**
    @internal
    */
    domEventObservers, buildExtensions) {
      _classCallCheck(this, ViewPlugin);
      this.id = id;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.domEventObservers = domEventObservers;
      this.baseExtensions = buildExtensions(this);
      this.extension = this.baseExtensions.concat(viewPlugin.of({
        plugin: this,
        arg: undefined
      }));
    }
    /**
    Create an extension for this plugin with the given argument.
    */
    return _createClass(ViewPlugin, [{
      key: "of",
      value: function of(arg) {
        return this.baseExtensions.concat(viewPlugin.of({
          plugin: this,
          arg: arg
        }));
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
    }], [{
      key: "define",
      value: function define(create, spec) {
        var _ref4 = spec || {},
          eventHandlers = _ref4.eventHandlers,
          eventObservers = _ref4.eventObservers,
          provide = _ref4.provide,
          deco = _ref4.decorations;
        return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, function (plugin) {
          var ext = [];
          if (deco) ext.push(decorations.of(function (view) {
            var pluginInst = view.plugin(plugin);
            return pluginInst ? deco(pluginInst) : Decoration.none;
          }));
          if (provide) ext.push(provide(plugin));
          return ext;
        });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
    }, {
      key: "fromClass",
      value: function fromClass(cls, spec) {
        return ViewPlugin.define(function (view, arg) {
          return new cls(view, arg);
        }, spec);
      }
    }]);
  }();
  var PluginInstance = /*#__PURE__*/function () {
    function PluginInstance(spec) {
      _classCallCheck(this, PluginInstance);
      this.spec = spec;
      // When starting an update, all plugins have this field set to the
      // update object, indicating they need to be updated. When finished
      // updating, it is set to `null`. Retrieving a plugin that needs to
      // be updated with `view.plugin` forces an eager update.
      this.mustUpdate = null;
      // This is null when the plugin is initially created, but
      // initialized on the first update.
      this.value = null;
    }
    return _createClass(PluginInstance, [{
      key: "plugin",
      get: function get() {
        return this.spec && this.spec.plugin;
      }
    }, {
      key: "update",
      value: function update(view) {
        if (!this.value) {
          if (this.spec) {
            try {
              this.value = this.spec.plugin.create(view, this.spec.arg);
            } catch (e) {
              logException(view.state, e, "CodeMirror plugin crashed");
              this.deactivate();
            }
          }
        } else if (this.mustUpdate) {
          var _update = this.mustUpdate;
          this.mustUpdate = null;
          if (this.value.update) {
            try {
              this.value.update(_update);
            } catch (e) {
              logException(_update.state, e, "CodeMirror plugin crashed");
              if (this.value.destroy) try {
                this.value.destroy();
              } catch (_) {}
              this.deactivate();
            }
          }
        }
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy(view) {
        var _a;
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
          try {
            this.value.destroy();
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
          }
        }
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        this.spec = this.value = null;
      }
    }]);
  }();
  var editorAttributes = /*@__PURE__*/Facet.define();
  var contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  var decorations = /*@__PURE__*/Facet.define();
  var outerDecorations = /*@__PURE__*/Facet.define();
  var atomicRanges = /*@__PURE__*/Facet.define();
  var bidiIsolatedRanges = /*@__PURE__*/Facet.define();
  function getIsolatedRanges(view, line) {
    var isolates = view.state.facet(bidiIsolatedRanges);
    if (!isolates.length) return isolates;
    var sets = isolates.map(function (i) {
      return i instanceof Function ? i(view) : i;
    });
    var result = [];
    RangeSet.spans(sets, line.from, line.to, {
      point: function point() {},
      span: function span(fromDoc, toDoc, active, open) {
        var from = fromDoc - line.from,
          to = toDoc - line.from;
        var level = result;
        for (var _i75 = active.length - 1; _i75 >= 0; _i75--, open--) {
          var direction = active[_i75].spec.bidiIsolate,
            update = void 0;
          if (direction == null) direction = autoDirection(line.text, from, to);
          if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
            update.to = to;
            level = update.inner;
          } else {
            var add = {
              from: from,
              to: to,
              direction: direction,
              inner: []
            };
            level.push(add);
            level = add.inner;
          }
        }
      }
    });
    return result;
  }
  var scrollMargins = /*@__PURE__*/Facet.define();
  function getScrollMargins(view) {
    var left = 0,
      right = 0,
      top = 0,
      bottom = 0;
    var _iterator40 = _createForOfIteratorHelper(view.state.facet(scrollMargins)),
      _step40;
    try {
      for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
        var source = _step40.value;
        var m = source(view);
        if (m) {
          if (m.left != null) left = Math.max(left, m.left);
          if (m.right != null) right = Math.max(right, m.right);
          if (m.top != null) top = Math.max(top, m.top);
          if (m.bottom != null) bottom = Math.max(bottom, m.bottom);
        }
      }
    } catch (err) {
      _iterator40.e(err);
    } finally {
      _iterator40.f();
    }
    return {
      left: left,
      right: right,
      top: top,
      bottom: bottom
    };
  }
  var styleModule = /*@__PURE__*/Facet.define();
  var ChangedRange = /*#__PURE__*/function () {
    function ChangedRange(fromA, toA, fromB, toB) {
      _classCallCheck(this, ChangedRange);
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    return _createClass(ChangedRange, [{
      key: "join",
      value: function join(other) {
        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
    }, {
      key: "addToSet",
      value: function addToSet(set) {
        var i = set.length,
          me = this;
        for (; i > 0; i--) {
          var range = set[i - 1];
          if (range.fromA > me.toA) continue;
          if (range.toA < me.fromA) break;
          me = me.join(range);
          set.splice(i - 1, 1);
        }
        set.splice(i, 0, me);
        return set;
      }
    }], [{
      key: "extendWithRanges",
      value: function extendWithRanges(diff, ranges) {
        if (ranges.length == 0) return diff;
        var result = [];
        for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
          var next = dI == diff.length ? null : diff[dI],
            off = posA - posB;
          var end = next ? next.fromB : 1e9;
          while (rI < ranges.length && ranges[rI] < end) {
            var from = ranges[rI],
              to = ranges[rI + 1];
            var fromB = Math.max(posB, from),
              toB = Math.min(end, to);
            if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
            if (to > end) break;else rI += 2;
          }
          if (!next) return result;
          new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
          posA = next.toA;
          posB = next.toB;
        }
      }
    }]);
  }();
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  var ViewUpdate = /*#__PURE__*/function () {
    function ViewUpdate(
    /**
    The editor view that the update is associated with.
    */
    view,
    /**
    The new editor state.
    */
    state,
    /**
    The transactions involved in the update. May be empty.
    */
    transactions) {
      _classCallCheck(this, ViewUpdate);
      this.view = view;
      this.state = state;
      this.transactions = transactions;
      /**
      @internal
      */
      this.flags = 0;
      this.startState = view.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      var _iterator41 = _createForOfIteratorHelper(transactions),
        _step41;
      try {
        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
          var tr = _step41.value;
          this.changes = this.changes.compose(tr.changes);
        }
      } catch (err) {
        _iterator41.e(err);
      } finally {
        _iterator41.f();
      }
      var changedRanges = [];
      this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
        return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
      });
      this.changedRanges = changedRanges;
    }
    /**
    @internal
    */
    return _createClass(ViewUpdate, [{
      key: "viewportChanged",
      get:
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      function get() {
        return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
    }, {
      key: "viewportMoved",
      get: function get() {
        return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
    }, {
      key: "heightChanged",
      get: function get() {
        return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
    }, {
      key: "geometryChanged",
      get: function get() {
        return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
    }, {
      key: "focusChanged",
      get: function get() {
        return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
    }, {
      key: "docChanged",
      get: function get() {
        return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
    }, {
      key: "selectionSet",
      get: function get() {
        return this.transactions.some(function (tr) {
          return tr.selection;
        });
      }
      /**
      @internal
      */
    }, {
      key: "empty",
      get: function get() {
        return this.flags == 0 && this.transactions.length == 0;
      }
    }], [{
      key: "create",
      value: function create(view, state, transactions) {
        return new ViewUpdate(view, state, transactions);
      }
    }]);
  }();
  var DocView = /*#__PURE__*/function (_ContentView7) {
    function DocView(view) {
      var _this17;
      _classCallCheck(this, DocView);
      _this17 = _callSuper(this, DocView);
      _this17.view = view;
      _this17.decorations = [];
      _this17.dynamicDecorationMap = [false];
      _this17.domChanged = null;
      _this17.hasComposition = null;
      _this17.markedForComposition = new Set();
      _this17.editContextFormatting = Decoration.none;
      _this17.lastCompositionAfterCursor = false;
      // Track a minimum width for the editor. When measuring sizes in
      // measureVisibleLineHeights, this is updated to point at the width
      // of a given element and its extent in the document. When a change
      // happens in that range, these are reset. That way, once we've seen
      // a line/element of a given length, we keep the editor wide enough
      // to fit at least that element, until it is changed, at which point
      // we forget it again.
      _this17.minWidth = 0;
      _this17.minWidthFrom = 0;
      _this17.minWidthTo = 0;
      // Track whether the DOM selection was set in a lossy way, so that
      // we don't mess it up when reading it back it
      _this17.impreciseAnchor = null;
      _this17.impreciseHead = null;
      _this17.forceSelection = false;
      // Used by the resize observer to ignore resizes that we caused
      // ourselves
      _this17.lastUpdate = Date.now();
      _this17.setDOM(view.contentDOM);
      _this17.children = [new LineView()];
      _this17.children[0].setParent(_this17);
      _this17.updateDeco();
      _this17.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      return _this17;
    }
    // Update the document view to a given state.
    _inherits(DocView, _ContentView7);
    return _createClass(DocView, [{
      key: "length",
      get: function get() {
        return this.view.state.doc.length;
      }
    }, {
      key: "update",
      value: function update(_update2) {
        var _this18 = this;
        var _a;
        var changedRanges = _update2.changedRanges;
        if (this.minWidth > 0 && changedRanges.length) {
          if (!changedRanges.every(function (_ref5) {
            var fromA = _ref5.fromA,
              toA = _ref5.toA;
            return toA < _this18.minWidthFrom || fromA > _this18.minWidthTo;
          })) {
            this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
          } else {
            this.minWidthFrom = _update2.changes.mapPos(this.minWidthFrom, 1);
            this.minWidthTo = _update2.changes.mapPos(this.minWidthTo, 1);
          }
        }
        this.updateEditContextFormatting(_update2);
        var readCompositionAt = -1;
        if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
          if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel) readCompositionAt = this.domChanged.newSel.head;else if (!touchesComposition(_update2.changes, this.hasComposition) && !_update2.selectionSet) readCompositionAt = _update2.state.selection.main.head;
        }
        var composition = readCompositionAt > -1 ? findCompositionRange(this.view, _update2.changes, readCompositionAt) : null;
        this.domChanged = null;
        if (this.hasComposition) {
          this.markedForComposition.clear();
          var _this$hasComposition = this.hasComposition,
            from = _this$hasComposition.from,
            to = _this$hasComposition.to;
          changedRanges = new ChangedRange(from, to, _update2.changes.mapPos(from, -1), _update2.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
        }
        this.hasComposition = composition ? {
          from: composition.range.fromB,
          to: composition.range.toB
        } : null;
        // When the DOM nodes around the selection are moved to another
        // parent, Chrome sometimes reports a different selection through
        // getSelection than the one that it actually shows to the user.
        // This forces a selection update when lines are joined to work
        // around that. Issue #54
        if ((browser.ie || browser.chrome) && !composition && _update2 && _update2.state.doc.lines != _update2.startState.doc.lines) this.forceSelection = true;
        var prevDeco = this.decorations,
          deco = this.updateDeco();
        var decoDiff = findChangedDeco(prevDeco, deco, _update2.changes);
        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
        if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
          return false;
        } else {
          this.updateInner(changedRanges, _update2.startState.doc.length, composition);
          if (_update2.transactions.length) this.lastUpdate = Date.now();
          return true;
        }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
    }, {
      key: "updateInner",
      value: function updateInner(changes, oldLength, composition) {
        var _this19 = this;
        this.view.viewState.mustMeasureContent = true;
        this.updateChildren(changes, oldLength, composition);
        var observer = this.view.observer;
        observer.ignore(function () {
          // Lock the height during redrawing, since Chrome sometimes
          // messes with the scroll position during DOM mutation (though
          // no relayout is triggered and I cannot imagine how it can
          // recompute the scroll position without a layout)
          _this19.dom.style.height = _this19.view.viewState.contentHeight / _this19.view.scaleY + "px";
          _this19.dom.style.flexBasis = _this19.minWidth ? _this19.minWidth + "px" : "";
          // Chrome will sometimes, when DOM mutations occur directly
          // around the selection, get confused and report a different
          // selection from the one it displays (issue #218). This tries
          // to detect that situation.
          var track = browser.chrome || browser.ios ? {
            node: observer.selectionRange.focusNode,
            written: false
          } : undefined;
          _this19.sync(_this19.view, track);
          _this19.flags &= ~7 /* ViewFlag.Dirty */;
          if (track && (track.written || observer.selectionRange.focusNode != track.node)) _this19.forceSelection = true;
          _this19.dom.style.height = "";
        });
        this.markedForComposition.forEach(function (cView) {
          return cView.flags &= ~8;
        } /* ViewFlag.Composition */);
        var gaps = [];
        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
          var _iterator42 = _createForOfIteratorHelper(this.children),
            _step42;
          try {
            for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
              var child = _step42.value;
              if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
            }
          } catch (err) {
            _iterator42.e(err);
          } finally {
            _iterator42.f();
          }
        }
        observer.updateGaps(gaps);
      }
    }, {
      key: "updateChildren",
      value: function updateChildren(changes, oldLength, composition) {
        var ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
        var cursor = this.childCursor(oldLength);
        for (var _i76 = ranges.length - 1;; _i76--) {
          var next = _i76 >= 0 ? ranges[_i76] : null;
          if (!next) break;
          var fromA = next.fromA,
            toA = next.toA,
            fromB = next.fromB,
            toB = next.toB,
            _content4 = void 0,
            breakAtStart = void 0,
            openStart = void 0,
            openEnd = void 0;
          if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
            var before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
            var after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
            breakAtStart = before.breakAtStart;
            openStart = before.openStart;
            openEnd = after.openEnd;
            var compLine = this.compositionView(composition);
            if (after.breakAtStart) {
              compLine.breakAfter = 1;
            } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
              compLine.breakAfter = after.content[0].breakAfter;
              after.content.shift();
            }
            if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
              before.content.pop();
            }
            _content4 = before.content.concat(compLine).concat(after.content);
          } else {
            var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
            _content4 = _ContentBuilder$build.content;
            breakAtStart = _ContentBuilder$build.breakAtStart;
            openStart = _ContentBuilder$build.openStart;
            openEnd = _ContentBuilder$build.openEnd;
          }
          var _cursor$findPos = cursor.findPos(toA, 1),
            toI = _cursor$findPos.i,
            toOff = _cursor$findPos.off;
          var _cursor$findPos2 = cursor.findPos(fromA, -1),
            fromI = _cursor$findPos2.i,
            fromOff = _cursor$findPos2.off;
          replaceRange(this, fromI, fromOff, toI, toOff, _content4, breakAtStart, openStart, openEnd);
        }
        if (composition) this.fixCompositionDOM(composition);
      }
    }, {
      key: "updateEditContextFormatting",
      value: function updateEditContextFormatting(update) {
        this.editContextFormatting = this.editContextFormatting.map(update.changes);
        var _iterator43 = _createForOfIteratorHelper(update.transactions),
          _step43;
        try {
          for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
            var tr = _step43.value;
            var _iterator44 = _createForOfIteratorHelper(tr.effects),
              _step44;
            try {
              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                var effect = _step44.value;
                if (effect.is(setEditContextFormatting)) {
                  this.editContextFormatting = effect.value;
                }
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }
          }
        } catch (err) {
          _iterator43.e(err);
        } finally {
          _iterator43.f();
        }
      }
    }, {
      key: "compositionView",
      value: function compositionView(composition) {
        var cur = new TextView(composition.text.nodeValue);
        cur.flags |= 8 /* ViewFlag.Composition */;
        var _iterator45 = _createForOfIteratorHelper(composition.marks),
          _step45;
        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var deco = _step45.value.deco;
            cur = new MarkView(deco, [cur], cur.length);
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }
        var line = new LineView();
        line.append(cur, 0);
        return line;
      }
    }, {
      key: "fixCompositionDOM",
      value: function fixCompositionDOM(composition) {
        var _this20 = this;
        var fix = function fix(dom, cView) {
          cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(function (c) {
            return c.flags & 7;
          } /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
          _this20.markedForComposition.add(cView);
          var prev = ContentView.get(dom);
          if (prev && prev != cView) prev.dom = null;
          cView.setDOM(dom);
        };
        var pos = this.childPos(composition.range.fromB, 1);
        var cView = this.children[pos.i];
        fix(composition.line, cView);
        for (var _i77 = composition.marks.length - 1; _i77 >= -1; _i77--) {
          pos = cView.childPos(pos.off, 1);
          cView = cView.children[pos.i];
          fix(_i77 >= 0 ? composition.marks[_i77].node : composition.text, cView);
        }
      }
      // Sync the DOM selection to this.state.selection
    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var _this21 = this;
        var mustRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
        var activeElt = this.view.root.activeElement,
          focused = activeElt == this.dom;
        var selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
        if (!(focused || fromPointer || selectionNotFocus)) return;
        var force = this.forceSelection;
        this.forceSelection = false;
        var main = this.view.state.selection.main;
        var anchor = this.moveToLine(this.domAtPos(main.anchor));
        var head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
        // Always reset on Firefox when next to an uneditable node to
        // avoid invisible cursor bugs (#111)
        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
          var dummy = document.createTextNode("");
          this.view.observer.ignore(function () {
            return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
          });
          anchor = head = new DOMPos(dummy, 0);
          force = true;
        }
        var domSel = this.view.observer.selectionRange;
        // If the selection is already here, or in an equivalent position, don't touch it
        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
          this.view.observer.ignore(function () {
            // Chrome Android will hide the virtual keyboard when tapping
            // inside an uneditable node, and not bring it back when we
            // move the cursor to its proper position. This tries to
            // restore the keyboard by cycling focus.
            if (browser.android && browser.chrome && _this21.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, _this21.dom)) {
              _this21.dom.blur();
              _this21.dom.focus({
                preventScroll: true
              });
            }
            var rawSel = getSelection(_this21.view.root);
            if (!rawSel) ;else if (main.empty) {
              // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
              if (browser.gecko) {
                var nextTo = nextToUneditable(anchor.node, anchor.offset);
                if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                  var text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                  if (text) anchor = new DOMPos(text.node, text.offset);
                }
              }
              rawSel.collapse(anchor.node, anchor.offset);
              if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined) rawSel.caretBidiLevel = main.bidiLevel;
            } else if (rawSel.extend) {
              // Selection.extend can be used to create an 'inverted' selection
              // (one where the focus is before the anchor), but not all
              // browsers support it yet.
              rawSel.collapse(anchor.node, anchor.offset);
              // Safari will ignore the call above when the editor is
              // hidden, and then raise an error on the call to extend
              // (#940).
              try {
                rawSel.extend(head.node, head.offset);
              } catch (_) {}
            } else {
              // Primitive (IE) way
              var range = document.createRange();
              if (main.anchor > main.head) {
                var _ref6 = [head, anchor];
                anchor = _ref6[0];
                head = _ref6[1];
              }
              range.setEnd(head.node, head.offset);
              range.setStart(anchor.node, anchor.offset);
              rawSel.removeAllRanges();
              rawSel.addRange(range);
            }
            if (selectionNotFocus && _this21.view.root.activeElement == _this21.dom) {
              _this21.dom.blur();
              if (activeElt) activeElt.focus();
            }
          });
          this.view.observer.setSelectionRange(anchor, head);
        }
        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
    }, {
      key: "suppressWidgetCursorChange",
      value: function suppressWidgetCursorChange(sel, cursor) {
        return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
    }, {
      key: "enforceCursorAssoc",
      value: function enforceCursorAssoc() {
        if (this.hasComposition) return;
        var view = this.view,
          cursor = view.state.selection.main;
        var sel = getSelection(view.root);
        var _view$observer$select = view.observer.selectionRange,
          anchorNode = _view$observer$select.anchorNode,
          anchorOffset = _view$observer$select.anchorOffset;
        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
        var line = LineView.find(this, cursor.head);
        if (!line) return;
        var lineStart = line.posAtStart;
        if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
        var before = this.coordsAt(cursor.head, -1),
          after = this.coordsAt(cursor.head, 1);
        if (!before || !after || before.bottom > after.top) return;
        var dom = this.domAtPos(cursor.head + cursor.assoc);
        sel.collapse(dom.node, dom.offset);
        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        // This can go wrong in corner cases like single-character lines,
        // so check and reset if necessary.
        view.observer.readSelectionRange();
        var newRange = view.observer.selectionRange;
        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
    }, {
      key: "moveToLine",
      value: function moveToLine(pos) {
        // Block widgets will return positions before/after them, which
        // are thus directly in the document DOM element.
        var dom = this.dom,
          newPos;
        if (pos.node != dom) return pos;
        for (var _i78 = pos.offset; !newPos && _i78 < dom.childNodes.length; _i78++) {
          var view = ContentView.get(dom.childNodes[_i78]);
          if (view instanceof LineView) newPos = view.domAtPos(0);
        }
        for (var _i79 = pos.offset - 1; !newPos && _i79 >= 0; _i79--) {
          var _view2 = ContentView.get(dom.childNodes[_i79]);
          if (_view2 instanceof LineView) newPos = _view2.domAtPos(_view2.length);
        }
        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
    }, {
      key: "nearest",
      value: function nearest(dom) {
        for (var _cur0 = dom; _cur0;) {
          var domView = ContentView.get(_cur0);
          if (domView && domView.rootView == this) return domView;
          _cur0 = _cur0.parentNode;
        }
        return null;
      }
    }, {
      key: "posFromDOM",
      value: function posFromDOM(node, offset) {
        var view = this.nearest(node);
        if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
        return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
          i = _this$childCursor$fin.i,
          off = _this$childCursor$fin.off;
        for (; i < this.children.length - 1;) {
          var child = this.children[i];
          if (off < child.length || child instanceof LineView) break;
          i++;
          off = 0;
        }
        return this.children[i].domAtPos(off);
      }
    }, {
      key: "coordsAt",
      value: function coordsAt(pos, side) {
        var best = null,
          bestPos = 0;
        for (var off = this.length, _i80 = this.children.length - 1; _i80 >= 0; _i80--) {
          var child = this.children[_i80],
            end = off - child.breakAfter,
            start = end - child.length;
          if (end < pos) break;
          if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
            best = child;
            bestPos = start;
          } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
            if (child.deco.startSide < 0) break;else if (_i80) best = null;
          }
          off = start;
        }
        return best ? best.coordsAt(pos - bestPos, side) : null;
      }
    }, {
      key: "coordsForChar",
      value: function coordsForChar(pos) {
        var _this$childPos2 = this.childPos(pos, 1),
          i = _this$childPos2.i,
          off = _this$childPos2.off,
          child = this.children[i];
        if (!(child instanceof LineView)) return null;
        while (child.children.length) {
          var _child$childPos = child.childPos(off, 1),
            _i81 = _child$childPos.i,
            childOff = _child$childPos.off;
          for (;; _i81++) {
            if (_i81 == child.children.length) return null;
            if ((child = child.children[_i81]).length) break;
          }
          off = childOff;
        }
        if (!(child instanceof TextView)) return null;
        var end = findClusterBreak(child.text, off);
        if (end == off) return null;
        var rects = textRange(child.dom, off, end).getClientRects();
        for (var _i82 = 0; _i82 < rects.length; _i82++) {
          var rect = rects[_i82];
          if (_i82 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right) return rect;
        }
        return null;
      }
    }, {
      key: "measureVisibleLineHeights",
      value: function measureVisibleLineHeights(viewport) {
        var result = [],
          from = viewport.from,
          to = viewport.to;
        var contentWidth = this.view.contentDOM.clientWidth;
        var isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
        var widest = -1,
          ltr = this.view.textDirection == Direction.LTR;
        for (var pos = 0, _i83 = 0; _i83 < this.children.length; _i83++) {
          var child = this.children[_i83],
            end = pos + child.length;
          if (end > to) break;
          if (pos >= from) {
            var childRect = child.dom.getBoundingClientRect();
            result.push(childRect.height);
            if (isWider) {
              var last = child.dom.lastChild;
              var rects = last ? clientRectsFor(last) : [];
              if (rects.length) {
                var rect = rects[rects.length - 1];
                var width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                if (width > widest) {
                  widest = width;
                  this.minWidth = contentWidth;
                  this.minWidthFrom = pos;
                  this.minWidthTo = end;
                }
              }
            }
          }
          pos = end + child.breakAfter;
        }
        return result;
      }
    }, {
      key: "textDirectionAt",
      value: function textDirectionAt(pos) {
        var _this$childPos3 = this.childPos(pos, 1),
          i = _this$childPos3.i;
        return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
    }, {
      key: "measureTextSize",
      value: function measureTextSize() {
        var _this22 = this;
        var _iterator46 = _createForOfIteratorHelper(this.children),
          _step46;
        try {
          for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
            var child = _step46.value;
            if (child instanceof LineView) {
              var measure = child.measureTextSize();
              if (measure) return measure;
            }
          }
          // If no workable line exists, force a layout of a measurable element
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }
        var dummy = document.createElement("div"),
          lineHeight,
          charWidth,
          textHeight;
        dummy.className = "cm-line";
        dummy.style.width = "99999px";
        dummy.style.position = "absolute";
        dummy.textContent = "abc def ghi jkl mno pqr stu";
        this.view.observer.ignore(function () {
          _this22.dom.appendChild(dummy);
          var rect = clientRectsFor(dummy.firstChild)[0];
          lineHeight = dummy.getBoundingClientRect().height;
          charWidth = rect ? rect.width / 27 : 7;
          textHeight = rect ? rect.height : lineHeight;
          dummy.remove();
        });
        return {
          lineHeight: lineHeight,
          charWidth: charWidth,
          textHeight: textHeight
        };
      }
    }, {
      key: "childCursor",
      value: function childCursor() {
        var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
        // Move back to start of last element when possible, so that
        // `ChildCursor.findPos` doesn't have to deal with the edge case
        // of being after the last element.
        var i = this.children.length;
        if (i) pos -= this.children[--i].length;
        return new ChildCursor(this.children, pos, i);
      }
    }, {
      key: "computeBlockGapDeco",
      value: function computeBlockGapDeco() {
        var deco = [],
          vs = this.view.viewState;
        for (var pos = 0, _i84 = 0;; _i84++) {
          var next = _i84 == vs.viewports.length ? null : vs.viewports[_i84];
          var end = next ? next.from - 1 : this.length;
          if (end > pos) {
            var height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
            deco.push(Decoration.replace({
              widget: new BlockGapWidget(height),
              block: true,
              inclusive: true,
              isBlockGap: true
            }).range(pos, end));
          }
          if (!next) break;
          pos = next.to + 1;
        }
        return Decoration.set(deco);
      }
    }, {
      key: "updateDeco",
      value: function updateDeco() {
        var _this23 = this;
        var i = 1;
        var allDeco = this.view.state.facet(decorations).map(function (d) {
          var dynamic = _this23.dynamicDecorationMap[i++] = typeof d == "function";
          return dynamic ? d(_this23.view) : d;
        });
        var dynamicOuter = false,
          outerDeco = this.view.state.facet(outerDecorations).map(function (d, i) {
            var dynamic = typeof d == "function";
            if (dynamic) dynamicOuter = true;
            return dynamic ? d(_this23.view) : d;
          });
        if (outerDeco.length) {
          this.dynamicDecorationMap[i++] = dynamicOuter;
          allDeco.push(RangeSet.join(outerDeco));
        }
        this.decorations = [this.editContextFormatting].concat(_toConsumableArray(allDeco), [this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
        while (i < this.decorations.length) this.dynamicDecorationMap[i++] = false;
        return this.decorations;
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView(target) {
        if (target.isSnapshot) {
          var ref = this.view.viewState.lineBlockAt(target.range.head);
          this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
          this.view.scrollDOM.scrollLeft = target.xMargin;
          return;
        }
        var _iterator47 = _createForOfIteratorHelper(this.view.state.facet(scrollHandler)),
          _step47;
        try {
          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
            var handler = _step47.value;
            try {
              if (handler(this.view, target.range, target)) return true;
            } catch (e) {
              logException(this.view.state, e, "scroll handler");
            }
          }
        } catch (err) {
          _iterator47.e(err);
        } finally {
          _iterator47.f();
        }
        var range = target.range;
        var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
          other;
        if (!rect) return;
        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
          left: Math.min(rect.left, other.left),
          top: Math.min(rect.top, other.top),
          right: Math.max(rect.right, other.right),
          bottom: Math.max(rect.bottom, other.bottom)
        };
        var margins = getScrollMargins(this.view);
        var targetRect = {
          left: rect.left - margins.left,
          top: rect.top - margins.top,
          right: rect.right + margins.right,
          bottom: rect.bottom + margins.bottom
        };
        var _this$view$scrollDOM = this.view.scrollDOM,
          offsetWidth = _this$view$scrollDOM.offsetWidth,
          offsetHeight = _this$view$scrollDOM.offsetHeight;
        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
    }]);
  }(ContentView);
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
    var sel = view.observer.selectionRange;
    if (!sel.focusNode) return null;
    var textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
    var textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
    var textNode = textBefore || textAfter;
    if (textAfter && textBefore && textAfter.node != textBefore.node) {
      var descAfter = ContentView.get(textAfter.node);
      if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
        textNode = textAfter;
      } else if (view.docView.lastCompositionAfterCursor) {
        var descBefore = ContentView.get(textBefore.node);
        if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue)) textNode = textAfter;
      }
    }
    view.docView.lastCompositionAfterCursor = textNode != textBefore;
    if (!textNode) return null;
    var from = headPos - textNode.offset;
    return {
      from: from,
      to: from + textNode.node.nodeValue.length,
      node: textNode.node
    };
  }
  function findCompositionRange(view, changes, headPos) {
    var found = findCompositionNode(view, headPos);
    if (!found) return null;
    var textNode = found.node,
      from = found.from,
      to = found.to,
      text = textNode.nodeValue;
    // Don't try to preserve multi-line compositions
    if (/[\n\r]/.test(text)) return null;
    if (view.state.doc.sliceString(found.from, found.to) != text) return null;
    var inv = changes.invertedDesc;
    var range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
    var marks = [];
    for (var parent = textNode.parentNode;; parent = parent.parentNode) {
      var parentView = ContentView.get(parent);
      if (parentView instanceof MarkView) marks.push({
        node: parent,
        deco: parentView.mark
      });else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM) return {
        range: range,
        text: textNode,
        marks: marks,
        line: parent
      };else if (parent != view.contentDOM) marks.push({
        node: parent,
        deco: new MarkDecoration({
          inclusive: true,
          attributes: getAttrs(parent),
          tagName: parent.tagName.toLowerCase()
        })
      });else return null;
    }
  }
  function nextToUneditable(node, offset) {
    if (node.nodeType != 1) return 0;
    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  var DecorationComparator$1 = /*#__PURE__*/function () {
    function DecorationComparator() {
      _classCallCheck(this, DecorationComparator);
      this.changes = [];
    }
    return _createClass(DecorationComparator, [{
      key: "compareRange",
      value: function compareRange(from, to) {
        addRange(from, to, this.changes);
      }
    }, {
      key: "comparePoint",
      value: function comparePoint(from, to) {
        addRange(from, to, this.changes);
      }
    }, {
      key: "boundChange",
      value: function boundChange(pos) {
        addRange(pos, pos, this.changes);
      }
    }]);
  }();
  function findChangedDeco(a, b, diff) {
    var comp = new DecorationComparator$1();
    RangeSet.compare(a, b, diff, comp);
    return comp.changes;
  }
  function inUneditable(node, inside) {
    for (var _cur1 = node; _cur1 && _cur1 != inside; _cur1 = _cur1.assignedSlot || _cur1.parentNode) {
      if (_cur1.nodeType == 1 && _cur1.contentEditable == 'false') {
        return true;
      }
    }
    return false;
  }
  function touchesComposition(changes, composition) {
    var touched = false;
    if (composition) changes.iterChangedRanges(function (from, to) {
      if (from < composition.to && to > composition.from) touched = true;
    });
    return touched;
  }
  function groupAt(state, pos) {
    var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var categorize = state.charCategorizer(pos);
    var line = state.doc.lineAt(pos),
      linePos = pos - line.from;
    if (line.length == 0) return EditorSelection.cursor(pos);
    if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
    var from = linePos,
      to = linePos;
    if (bias < 0) from = findClusterBreak(line.text, linePos, false);else to = findClusterBreak(line.text, linePos);
    var cat = categorize(line.text.slice(from, to));
    while (from > 0) {
      var prev = findClusterBreak(line.text, from, false);
      if (categorize(line.text.slice(prev, from)) != cat) break;
      from = prev;
    }
    while (to < line.length) {
      var next = findClusterBreak(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat) break;
      to = next;
    }
    return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
    return top < rect.top ? {
      top: top,
      left: rect.left,
      right: rect.right,
      bottom: rect.bottom
    } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? {
      top: rect.top,
      left: rect.left,
      right: rect.right,
      bottom: bottom
    } : rect;
  }
  function domPosAtCoords(parent, x, y) {
    var closest,
      closestRect,
      closestX,
      closestY,
      closestOverlap = false;
    var above, below, aboveRect, belowRect;
    for (var child = parent.firstChild; child; child = child.nextSibling) {
      var rects = clientRectsFor(child);
      for (var _i85 = 0; _i85 < rects.length; _i85++) {
        var rect = rects[_i85];
        if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        var dx = getdx(x, rect),
          dy = getdy(y, rect);
        if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          closestOverlap = !dx ? true : x < rect.left ? _i85 > 0 : _i85 < rects.length - 1;
        }
        if (dx == 0) {
          if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest) return {
      node: parent,
      offset: 0
    };
    var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
    if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
    if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
    var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return {
      node: parent,
      offset: offset
    };
  }
  function domPosInText(node, x, y) {
    var len = node.nodeValue.length;
    var closestOffset = -1,
      closestDY = 1e9,
      generalSide = 0;
    for (var _i86 = 0; _i86 < len; _i86++) {
      var rects = textRange(node, _i86, _i86 + 1).getClientRects();
      for (var j = 0; j < rects.length; j++) {
        var rect = rects[j];
        if (rect.top == rect.bottom) continue;
        if (!generalSide) generalSide = x - rect.left;
        var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
        if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
          var right = x >= (rect.left + rect.right) / 2,
            after = right;
          if (browser.chrome || browser.gecko) {
            // Check for RTL on browsers that support getting client
            // rects for empty ranges.
            var rectBefore = textRange(node, _i86).getBoundingClientRect();
            if (rectBefore.left == rect.right) after = !right;
          }
          if (dy <= 0) return {
            node: node,
            offset: _i86 + (after ? 1 : 0)
          };
          closestOffset = _i86 + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return {
      node: node,
      offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
    };
  }
  function _posAtCoords(view, coords, precise) {
    var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
    var _a, _b;
    var content = view.contentDOM.getBoundingClientRect(),
      docTop = content.top + view.viewState.paddingTop;
    var block,
      docHeight = view.viewState.docHeight;
    var x = coords.x,
      y = coords.y,
      yOffset = y - docTop;
    if (yOffset < 0) return 0;
    if (yOffset > docHeight) return view.state.doc.length;
    // Scan for a text block near the queried y position
    for (var halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
      block = view.elementAtHeight(yOffset);
      if (block.type == BlockType.Text) break;
      for (;;) {
        // Move the y position out of this block
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight) break;
        // If the document consists entirely of replaced widgets, we
        // won't find a text block, so return 0
        if (bounced) return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y = docTop + yOffset;
    var lineStart = block.from;
    // If this is outside of the rendered viewport, we can't determine a position
    if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
    var doc = view.dom.ownerDocument;
    var root = view.root.elementFromPoint ? view.root : doc;
    var element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
    // If the element is unexpected, clip x at the sides of the content area and try again
    if (!element) {
      x = Math.max(content.left + 1, Math.min(content.right - 1, x));
      element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element)) element = null;
    }
    // There's visible editor content under the point, so we can try
    // using caret(Position|Range)FromPoint as a shortcut
    var node,
      offset = -1;
    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
      if (doc.caretPositionFromPoint) {
        var pos = doc.caretPositionFromPoint(x, y);
        if (pos) {
          node = pos.offsetNode;
          offset = pos.offset;
        }
      } else if (doc.caretRangeFromPoint) {
        var range = doc.caretRangeFromPoint(x, y);
        if (range) {
          node = range.startContainer;
          offset = range.startOffset;
          if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
        }
      }
      // Chrome will return offsets into <input> elements without child
      // nodes, which will lead to a null deref below, so clip the
      // offset to the node size.
      if (node) offset = Math.min(maxOffset(node), offset);
    }
    // No luck, do our own (potentially expensive) search
    if (!node || !view.docView.dom.contains(node)) {
      var line = LineView.find(view.docView, lineStart);
      if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
      var _domPosAtCoords = domPosAtCoords(line.dom, x, y);
      node = _domPosAtCoords.node;
      offset = _domPosAtCoords.offset;
    }
    var nearest = view.docView.nearest(node);
    if (!nearest) return null;
    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
      var rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
    }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
    var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
      var textHeight = view.viewState.heightOracle.textHeight;
      var line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    var content = view.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
    var len,
      scan = node;
    if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
    for (;;) {
      // Check that there is no content after this node
      var next = scan.nextSibling;
      if (next) {
        if (next.nodeName == "BR") break;
        return false;
      } else {
        var parent = scan.parentNode;
        if (!parent || parent.nodeName == "DIV") break;
        scan = parent;
      }
    }
    return textRange(node, len - 1, len).getBoundingClientRect().right > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
    if (offset != 0) return false;
    for (var _cur10 = node;;) {
      var parent = _cur10.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != _cur10) return false;
      if (parent.classList.contains("cm-line")) break;
      _cur10 = parent;
    }
    var rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x - rect.left > 5;
  }
  function blockAt(view, pos, side) {
    var line = view.lineBlockAt(pos);
    if (Array.isArray(line.type)) {
      var best;
      var _iterator48 = _createForOfIteratorHelper(line.type),
        _step48;
      try {
        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
          var _l = _step48.value;
          if (_l.from > pos) break;
          if (_l.to < pos) continue;
          if (_l.from < pos && _l.to > pos) return _l;
          if (!best || _l.type == BlockType.Text && (best.type != _l.type || (side < 0 ? _l.from < pos : _l.to > pos))) best = _l;
        }
      } catch (err) {
        _iterator48.e(err);
      } finally {
        _iterator48.f();
      }
      return best || line;
    }
    return line;
  }
  function _moveToLineBoundary(view, start, forward, includeWrap) {
    var line = blockAt(view, start.head, start.assoc || -1);
    var coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      var editorRect = view.dom.getBoundingClientRect();
      var direction = view.textDirectionAt(line.from);
      var pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null) return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function _moveByChar(view, start, forward, by) {
    var line = view.state.doc.lineAt(start.head),
      spans = view.bidiSpans(line);
    var direction = view.textDirectionAt(line.from);
    for (var _cur11 = start, check = null;;) {
      var next = moveVisually(line, spans, direction, _cur11, forward),
        _char2 = movedOver;
      if (!next) {
        if (line.number == (forward ? view.state.doc.lines : 1)) return _cur11;
        _char2 = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next = view.visualLineSide(line, !forward);
      }
      if (!check) {
        if (!by) return next;
        check = by(_char2);
      } else if (!check(_char2)) {
        return _cur11;
      }
      _cur11 = next;
    }
  }
  function byGroup(view, pos, start) {
    var categorize = view.state.charCategorizer(pos);
    var cat = categorize(start);
    return function (next) {
      var nextCat = categorize(next);
      if (cat == CharCategory.Space) cat = nextCat;
      return cat == nextCat;
    };
  }
  function _moveVertically(view, start, forward, distance) {
    var startPos = start.head,
      dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0)) return EditorSelection.cursor(startPos, start.assoc);
    var goal = start.goalColumn,
      startY;
    var rect = view.contentDOM.getBoundingClientRect();
    var startCoords = view.coordsAtPos(startPos, start.assoc || -1),
      docTop = view.documentTop;
    if (startCoords) {
      if (goal == null) goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      var line = view.viewState.lineBlockAt(startPos);
      if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    var resolvedGoal = rect.left + goal;
    var dist = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
    for (var extra = 0;; extra += 10) {
      var curY = startY + (dist + extra) * dir;
      var pos = _posAtCoords(view, {
        x: resolvedGoal,
        y: curY
      }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
        var charRect = view.docView.coordsForChar(pos);
        var assoc = !charRect || curY < charRect.top ? -1 : 1;
        return EditorSelection.cursor(pos, assoc, undefined, goal);
      }
    }
  }
  function skipAtomicRanges(atoms, pos, bias) {
    var _loop5 = function _loop5() {
        var moved = 0;
        var _iterator49 = _createForOfIteratorHelper(atoms),
          _step49;
        try {
          for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
            var set = _step49.value;
            set.between(pos - 1, pos + 1, function (from, to, value) {
              if (pos > from && pos < to) {
                var side = moved || bias || (pos - from < to - pos ? -1 : 1);
                pos = side < 0 ? from : to;
                moved = side;
              }
            });
          }
        } catch (err) {
          _iterator49.e(err);
        } finally {
          _iterator49.f();
        }
        if (!moved) return {
          v: pos
        };
      },
      _ret;
    for (;;) {
      _ret = _loop5();
      if (_ret) return _ret.v;
    }
  }
  function skipAtoms(view, oldPos, pos) {
    var newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(function (f) {
      return f(view);
    }), pos.from, oldPos.head > pos.from ? -1 : 1);
    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }
  var LineBreakPlaceholder = "\uFFFF";
  var DOMReader = /*#__PURE__*/function () {
    function DOMReader(points, state) {
      _classCallCheck(this, DOMReader);
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    return _createClass(DOMReader, [{
      key: "append",
      value: function append(text) {
        this.text += text;
      }
    }, {
      key: "lineBreak",
      value: function lineBreak() {
        this.text += LineBreakPlaceholder;
      }
    }, {
      key: "readRange",
      value: function readRange(start, end) {
        if (!start) return this;
        var parent = start.parentNode;
        for (var _cur12 = start;;) {
          this.findPointBefore(parent, _cur12);
          var oldLen = this.text.length;
          this.readNode(_cur12);
          var next = _cur12.nextSibling;
          if (next == end) break;
          var view = ContentView.get(_cur12),
            nextView = ContentView.get(next);
          if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(_cur12)) || isBlockElement(next) && (_cur12.nodeName != "BR" || _cur12.cmIgnore) && this.text.length > oldLen) this.lineBreak();
          _cur12 = next;
        }
        this.findPointBefore(parent, end);
        return this;
      }
    }, {
      key: "readTextNode",
      value: function readTextNode(node) {
        var text = node.nodeValue;
        var _iterator50 = _createForOfIteratorHelper(this.points),
          _step50;
        try {
          for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
            var _point = _step50.value;
            if (_point.node == node) _point.pos = this.text.length + Math.min(_point.offset, text.length);
          }
        } catch (err) {
          _iterator50.e(err);
        } finally {
          _iterator50.f();
        }
        for (var off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
          var nextBreak = -1,
            breakSize = 1,
            m = void 0;
          if (this.lineSeparator) {
            nextBreak = text.indexOf(this.lineSeparator, off);
            breakSize = this.lineSeparator.length;
          } else if (m = re.exec(text)) {
            nextBreak = m.index;
            breakSize = m[0].length;
          }
          this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
          if (nextBreak < 0) break;
          this.lineBreak();
          if (breakSize > 1) {
            var _iterator51 = _createForOfIteratorHelper(this.points),
              _step51;
            try {
              for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
                var point = _step51.value;
                if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
              }
            } catch (err) {
              _iterator51.e(err);
            } finally {
              _iterator51.f();
            }
          }
          off = nextBreak + breakSize;
        }
      }
    }, {
      key: "readNode",
      value: function readNode(node) {
        if (node.cmIgnore) return;
        var view = ContentView.get(node);
        var fromView = view && view.overrideDOMText;
        if (fromView != null) {
          this.findPointInside(node, fromView.length);
          for (var _i87 = fromView.iter(); !_i87.next().done;) {
            if (_i87.lineBreak) this.lineBreak();else this.append(_i87.value);
          }
        } else if (node.nodeType == 3) {
          this.readTextNode(node);
        } else if (node.nodeName == "BR") {
          if (node.nextSibling) this.lineBreak();
        } else if (node.nodeType == 1) {
          this.readRange(node.firstChild, null);
        }
      }
    }, {
      key: "findPointBefore",
      value: function findPointBefore(node, next) {
        var _iterator52 = _createForOfIteratorHelper(this.points),
          _step52;
        try {
          for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
            var point = _step52.value;
            if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
          }
        } catch (err) {
          _iterator52.e(err);
        } finally {
          _iterator52.f();
        }
      }
    }, {
      key: "findPointInside",
      value: function findPointInside(node, length) {
        var _iterator53 = _createForOfIteratorHelper(this.points),
          _step53;
        try {
          for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
            var point = _step53.value;
            if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
          }
        } catch (err) {
          _iterator53.e(err);
        } finally {
          _iterator53.f();
        }
      }
    }]);
  }();
  function isAtEnd(parent, node, offset) {
    for (;;) {
      if (!node || offset < maxOffset(node)) return false;
      if (node == parent) return true;
      offset = domIndex(node) + 1;
      node = node.parentNode;
    }
  }
  var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
    _classCallCheck(this, DOMPoint);
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  });
  var DOMChange = /*#__PURE__*/_createClass(function DOMChange(view, start, end, typeOver) {
    _classCallCheck(this, DOMChange);
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    this.domChanged = start > -1;
    var _view$docView = view.docView,
      iHead = _view$docView.impreciseHead,
      iAnchor = _view$docView.impreciseAnchor;
    if (view.state.readOnly && start > -1) {
      // Ignore changes when the editor is read-only
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      var selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      var reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      var domSel = view.observer.selectionRange;
      var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      // iOS will refuse to select the block gaps when doing
      // select-all.
      // Chrome will put the selection *inside* them, confusing
      // posFromDOM
      var vp = view.viewport;
      if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
        var from = Math.min(head, anchor),
          to = Math.max(head, anchor);
        var offFrom = vp.from - from,
          offTo = vp.to - to;
        if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
          head = 0;
          anchor = view.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  });
  function applyDOMChange(view, domChange) {
    var change;
    var newSel = domChange.newSel,
      sel = view.state.selection.main;
    var lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
    if (domChange.bounds) {
      var _domChange$bounds = domChange.bounds,
        from = _domChange$bounds.from,
        to = _domChange$bounds.to;
      var preferredPos = sel.from,
        preferredSide = null;
      // Prefer anchoring to end when Backspace is pressed (or, on
      // Android, when something was deleted)
      if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      var diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
      if (diff) {
        // Chrome inserts two newlines when pressing shift-enter at the
        // end of a line. DomChange drops one of those.
        if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
        change = {
          from: from + diff.from,
          to: from + diff.toA,
          insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel) return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      // Heuristic to notice typing over a selected character
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, sel.to)
      };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
      // Detect insert-period-on-double-space Mac and Android behavior,
      // and transform it into a regular space insert.
      if (newSel && change.insert.length == 2) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: change.from,
        to: change.to,
        insert: Text.of([change.insert.toString().replace(".", " ")])
      };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      // If the change is inside the selection and covers most of it,
      // assume it is a selection replace (with identical characters at
      // the start/end not included in the diff)
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      // In Chrome, if you insert a space at the start of a wrapped
      // line, it will actually insert a newline and a space, causing a
      // bogus new line to be created in CodeMirror (#968)
      if (newSel) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: sel.from,
        to: sel.to,
        insert: Text.of([" "])
      };
    }
    if (change) {
      return applyDOMChangeInner(view, change, newSel, lastKey);
    } else if (newSel && !newSel.main.eq(sel)) {
      var _scrollIntoView = false,
        userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select") _scrollIntoView = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({
        selection: newSel,
        scrollIntoView: _scrollIntoView,
        userEvent: userEvent
      });
      return true;
    } else {
      return false;
    }
  }
  function applyDOMChangeInner(view, change, newSel) {
    var lastKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
    if (browser.ios && view.inputState.flushIOSKey(change)) return true;
    var sel = view.state.selection.main;
    // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events. (Some of these keys are also handled by beforeinput
    // events and the pendingAndroidKey mechanism, but that's not
    // reliable in all situations.)
    if (browser.android && (change.to == sel.to && (
    // GBoard will sometimes remove a space it just inserted
    // after a completion when you press enter
    change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
    var text = change.insert.toString();
    if (view.inputState.composing >= 0) view.inputState.composing++;
    var defaultTr;
    var defaultInsert = function defaultInsert() {
      return defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
    };
    if (!view.state.facet(inputHandler$1).some(function (h) {
      return h(view, change.from, change.to, text, defaultInsert);
    })) view.dispatch(defaultInsert());
    return true;
  }
  function applyDefaultInsert(view, change, newSel) {
    var tr,
      startState = view.state,
      sel = startState.selection.main;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      var changes = startState.changes(change);
      var mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
      // Try to apply a composition change to all cursors
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        var replaced = view.state.sliceDoc(change.from, change.to);
        var compositionRange,
          composition = newSel && findCompositionNode(view, newSel.main.head);
        if (composition) {
          var dLen = change.insert.length - (change.to - change.from);
          compositionRange = {
            from: composition.from,
            to: composition.to - dLen
          };
        } else {
          compositionRange = view.state.doc.lineAt(sel.head);
        }
        var offset = sel.to - change.to,
          size = sel.to - sel.from;
        tr = startState.changeByRange(function (range) {
          if (range.from == sel.from && range.to == sel.to) return {
            changes: changes,
            range: mainSel || range.map(changes)
          };
          var to = range.to - offset,
            from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
          // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          range.to >= compositionRange.from && range.from <= compositionRange.to) return {
            range: range
          };
          var rangeChanges = startState.changes({
              from: from,
              to: to,
              insert: change.insert
            }),
            selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes: changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    var userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    return startState.update(tr, {
      userEvent: userEvent,
      scrollIntoView: true
    });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
    var minLen = Math.min(a.length, b.length);
    var from = 0;
    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;
    if (from == minLen && a.length == b.length) return null;
    var toA = a.length,
      toB = b.length;
    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      var adjust = Math.max(0, from - Math.min(toA, toB));
      preferredPos -= toA + adjust - from;
    }
    if (toA < from && a.length < b.length) {
      var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
      from -= move;
      toB = from + (toB - toA);
      toA = from;
    } else if (toB < from) {
      var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
      from -= _move;
      toA = from + (toA - toB);
      toB = from;
    }
    return {
      from: from,
      toA: toA,
      toB: toB
    };
  }
  function selectionPoints(view) {
    var result = [];
    if (view.root.activeElement != view.contentDOM) return result;
    var _view$observer$select2 = view.observer.selectionRange,
      anchorNode = _view$observer$select2.anchorNode,
      anchorOffset = _view$observer$select2.anchorOffset,
      focusNode = _view$observer$select2.focusNode,
      focusOffset = _view$observer$select2.focusOffset;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base) {
    if (points.length == 0) return null;
    var anchor = points[0].pos,
      head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }
  var InputState = /*#__PURE__*/function () {
    function InputState(view) {
      _classCallCheck(this, InputState);
      this.view = view;
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      // On iOS, some keys need to have their default behavior happen
      // (after which we retroactively handle them and reset the DOM) to
      // avoid messing up the virtual keyboard state.
      this.pendingIOSKey = undefined;
      /**
      When enabled (>-1), tab presses are not given to key handlers,
      leaving the browser's default behavior. If >0, the mode expires
      at that timestamp, and any other keypress clears it.
      Esc enables temporary tab focus mode for two seconds when not
      otherwise handled.
      */
      this.tabFocusMode = -1;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.handlers = Object.create(null);
      // -1 means not in a composition. Otherwise, this counts the number
      // of changes made during the composition. The count is used to
      // avoid treating the start state of the composition, before any
      // changes have been made, as part of the composition.
      this.composing = -1;
      // Tracks whether the next change should be marked as starting the
      // composition (null means no composition, true means next is the
      // first, false means first has already been marked for this
      // composition)
      this.compositionFirstChange = null;
      // End time of the previous composition
      this.compositionEndedAt = 0;
      // Used in a kludge to detect when an Enter keypress should be
      // considered part of the composition on Safari, which fires events
      // in the wrong order
      this.compositionPendingKey = false;
      // Used to categorize changes as part of a composition, even when
      // the mutation events fire shortly after the compositionend event
      this.compositionPendingChange = false;
      this.mouseSelection = null;
      // When a drag from the editor is active, this points at the range
      // being dragged.
      this.draggedContent = null;
      this.handleEvent = this.handleEvent.bind(this);
      this.notifiedFocused = view.hasFocus;
      // On Safari adding an input event handler somehow prevents an
      // issue where the composition vanishes when you press enter.
      if (browser.safari) view.contentDOM.addEventListener("input", function () {
        return null;
      });
      if (browser.gecko) firefoxCopyCutHack(view.contentDOM.ownerDocument);
    }
    return _createClass(InputState, [{
      key: "setSelectionOrigin",
      value: function setSelectionOrigin(origin) {
        this.lastSelectionOrigin = origin;
        this.lastSelectionTime = Date.now();
      }
    }, {
      key: "handleEvent",
      value: function handleEvent(event) {
        var _this24 = this;
        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event)) return;
        if (event.type == "keydown" && this.keydown(event)) return;
        if (this.view.updateState != 0 /* UpdateState.Idle */) Promise.resolve().then(function () {
          return _this24.runHandlers(event.type, event);
        });else this.runHandlers(event.type, event);
      }
    }, {
      key: "runHandlers",
      value: function runHandlers(type, event) {
        var handlers = this.handlers[type];
        if (handlers) {
          var _iterator54 = _createForOfIteratorHelper(handlers.observers),
            _step54;
          try {
            for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
              var observer = _step54.value;
              observer(this.view, event);
            }
          } catch (err) {
            _iterator54.e(err);
          } finally {
            _iterator54.f();
          }
          var _iterator55 = _createForOfIteratorHelper(handlers.handlers),
            _step55;
          try {
            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
              var handler = _step55.value;
              if (event.defaultPrevented) break;
              if (handler(this.view, event)) {
                event.preventDefault();
                break;
              }
            }
          } catch (err) {
            _iterator55.e(err);
          } finally {
            _iterator55.f();
          }
        }
      }
    }, {
      key: "ensureHandlers",
      value: function ensureHandlers(plugins) {
        var handlers = computeHandlers(plugins),
          prev = this.handlers,
          dom = this.view.contentDOM;
        for (var type in handlers) if (type != "scroll") {
          var passive = !handlers[type].handlers.length;
          var exists = prev[type];
          if (exists && passive != !exists.handlers.length) {
            dom.removeEventListener(type, this.handleEvent);
            exists = null;
          }
          if (!exists) dom.addEventListener(type, this.handleEvent, {
            passive: passive
          });
        }
        for (var _type4 in prev) if (_type4 != "scroll" && !handlers[_type4]) dom.removeEventListener(_type4, this.handleEvent);
        this.handlers = handlers;
      }
    }, {
      key: "keydown",
      value: function keydown(event) {
        var _this25 = this;
        // Must always run, even if a custom handler handled the event
        this.lastKeyCode = event.keyCode;
        this.lastKeyTime = Date.now();
        if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode)) return true;
        if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0) this.tabFocusMode = -1;
        // Chrome for Android usually doesn't fire proper key events, but
        // occasionally does, usually surrounded by a bunch of complicated
        // composition changes. When an enter or backspace key event is
        // seen, hold off on handling DOM events for a bit, and then
        // dispatch it.
        if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
          this.view.observer.delayAndroidKey(event.key, event.keyCode);
          return true;
        }
        // Preventing the default behavior of Enter on iOS makes the
        // virtual keyboard get stuck in the wrong (lowercase)
        // state. So we let it go through, and then, in
        // applyDOMChange, notify key handlers of it and reset to
        // the state they produce.
        var pending;
        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find(function (key) {
          return key.keyCode == event.keyCode;
        })) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
          this.pendingIOSKey = pending || event;
          setTimeout(function () {
            return _this25.flushIOSKey();
          }, 250);
          return true;
        }
        if (event.keyCode != 229) this.view.observer.forceFlush();
        return false;
      }
    }, {
      key: "flushIOSKey",
      value: function flushIOSKey(change) {
        var key = this.pendingIOSKey;
        if (!key) return false;
        // This looks like an autocorrection before Enter
        if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString())) return false;
        this.pendingIOSKey = undefined;
        return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
      }
    }, {
      key: "ignoreDuringComposition",
      value: function ignoreDuringComposition(event) {
        if (!/^key/.test(event.type)) return false;
        if (this.composing > 0) return true;
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On some input method editors (IMEs), the Enter key is used to
        // confirm character selection. On Safari, when Enter is pressed,
        // compositionend and keydown events are sometimes emitted in the
        // wrong order. The key event should still be ignored, even when
        // it happens after the compositionend event.
        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
          this.compositionPendingKey = false;
          return true;
        }
        return false;
      }
    }, {
      key: "startMouseSelection",
      value: function startMouseSelection(mouseSelection) {
        if (this.mouseSelection) this.mouseSelection.destroy();
        this.mouseSelection = mouseSelection;
      }
    }, {
      key: "update",
      value: function update(_update3) {
        this.view.observer.update(_update3);
        if (this.mouseSelection) this.mouseSelection.update(_update3);
        if (this.draggedContent && _update3.docChanged) this.draggedContent = this.draggedContent.map(_update3.changes);
        if (_update3.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.mouseSelection) this.mouseSelection.destroy();
      }
    }]);
  }();
  function bindHandler(plugin, handler) {
    return function (view, event) {
      try {
        return handler.call(plugin, event, view);
      } catch (e) {
        logException(view.state, e);
      }
    };
  }
  function computeHandlers(plugins) {
    var result = Object.create(null);
    function record(type) {
      return result[type] || (result[type] = {
        observers: [],
        handlers: []
      });
    }
    var _iterator56 = _createForOfIteratorHelper(plugins),
      _step56;
    try {
      for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
        var plugin = _step56.value;
        var spec = plugin.spec,
          _handlers = spec && spec.plugin.domEventHandlers,
          _observers = spec && spec.plugin.domEventObservers;
        if (_handlers) for (var _type6 in _handlers) {
          var f = _handlers[_type6];
          if (f) record(_type6).handlers.push(bindHandler(plugin.value, f));
        }
        if (_observers) for (var _type7 in _observers) {
          var _f2 = _observers[_type7];
          if (_f2) record(_type7).observers.push(bindHandler(plugin.value, _f2));
        }
      }
    } catch (err) {
      _iterator56.e(err);
    } finally {
      _iterator56.f();
    }
    for (var type in handlers) record(type).handlers.push(handlers[type]);
    for (var _type5 in observers) record(_type5).observers.push(observers[_type5]);
    return result;
  }
  var PendingKeys = [{
    key: "Backspace",
    keyCode: 8,
    inputType: "deleteContentBackward"
  }, {
    key: "Enter",
    keyCode: 13,
    inputType: "insertParagraph"
  }, {
    key: "Enter",
    keyCode: 13,
    inputType: "insertLineBreak"
  }, {
    key: "Delete",
    keyCode: 46,
    inputType: "deleteContentForward"
  }];
  var EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  var dragScrollMargin = 6;
  function dragScrollSpeed(dist) {
    return Math.max(0, dist) * 0.7 + 8;
  }
  function dist(a, b) {
    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  var MouseSelection = /*#__PURE__*/function () {
    function MouseSelection(view, startEvent, style, mustSelect) {
      _classCallCheck(this, MouseSelection);
      this.view = view;
      this.startEvent = startEvent;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = {
        x: 0,
        y: 0
      };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParents = scrollableParents(view.contentDOM);
      this.atoms = view.state.facet(atomicRanges).map(function (f) {
        return f(view);
      });
      var doc = view.contentDOM.ownerDocument;
      doc.addEventListener("mousemove", this.move = this.move.bind(this));
      doc.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
      this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
    }
    return _createClass(MouseSelection, [{
      key: "start",
      value: function start(event) {
        // When clicking outside of the selection, immediately apply the
        // effect of starting the selection
        if (this.dragging === false) this.select(event);
      }
    }, {
      key: "move",
      value: function move(event) {
        if (event.buttons == 0) return this.destroy();
        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10) return;
        this.select(this.lastEvent = event);
        var sx = 0,
          sy = 0;
        var left = 0,
          top = 0,
          right = this.view.win.innerWidth,
          bottom = this.view.win.innerHeight;
        if (this.scrollParents.x) {
          var _this$scrollParents$x = this.scrollParents.x.getBoundingClientRect();
          left = _this$scrollParents$x.left;
          right = _this$scrollParents$x.right;
        }
        if (this.scrollParents.y) {
          var _this$scrollParents$y = this.scrollParents.y.getBoundingClientRect();
          top = _this$scrollParents$y.top;
          bottom = _this$scrollParents$y.bottom;
        }
        var margins = getScrollMargins(this.view);
        if (event.clientX - margins.left <= left + dragScrollMargin) sx = -dragScrollSpeed(left - event.clientX);else if (event.clientX + margins.right >= right - dragScrollMargin) sx = dragScrollSpeed(event.clientX - right);
        if (event.clientY - margins.top <= top + dragScrollMargin) sy = -dragScrollSpeed(top - event.clientY);else if (event.clientY + margins.bottom >= bottom - dragScrollMargin) sy = dragScrollSpeed(event.clientY - bottom);
        this.setScrollSpeed(sx, sy);
      }
    }, {
      key: "up",
      value: function up(event) {
        if (this.dragging == null) this.select(this.lastEvent);
        if (!this.dragging) event.preventDefault();
        this.destroy();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.setScrollSpeed(0, 0);
        var doc = this.view.contentDOM.ownerDocument;
        doc.removeEventListener("mousemove", this.move);
        doc.removeEventListener("mouseup", this.up);
        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
    }, {
      key: "setScrollSpeed",
      value: function setScrollSpeed(sx, sy) {
        var _this26 = this;
        this.scrollSpeed = {
          x: sx,
          y: sy
        };
        if (sx || sy) {
          if (this.scrolling < 0) this.scrolling = setInterval(function () {
            return _this26.scroll();
          }, 50);
        } else if (this.scrolling > -1) {
          clearInterval(this.scrolling);
          this.scrolling = -1;
        }
      }
    }, {
      key: "scroll",
      value: function scroll() {
        var _this$scrollSpeed = this.scrollSpeed,
          x = _this$scrollSpeed.x,
          y = _this$scrollSpeed.y;
        if (x && this.scrollParents.x) {
          this.scrollParents.x.scrollLeft += x;
          x = 0;
        }
        if (y && this.scrollParents.y) {
          this.scrollParents.y.scrollTop += y;
          y = 0;
        }
        if (x || y) this.view.win.scrollBy(x, y);
        if (this.dragging === false) this.select(this.lastEvent);
      }
    }, {
      key: "skipAtoms",
      value: function skipAtoms(sel) {
        var ranges = null;
        for (var _i88 = 0; _i88 < sel.ranges.length; _i88++) {
          var range = sel.ranges[_i88],
            updated = null;
          if (range.empty) {
            var pos = skipAtomicRanges(this.atoms, range.from, 0);
            if (pos != range.from) updated = EditorSelection.cursor(pos, -1);
          } else {
            var from = skipAtomicRanges(this.atoms, range.from, -1);
            var to = skipAtomicRanges(this.atoms, range.to, 1);
            if (from != range.from || to != range.to) updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
          }
          if (updated) {
            if (!ranges) ranges = sel.ranges.slice();
            ranges[_i88] = updated;
          }
        }
        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
    }, {
      key: "select",
      value: function select(event) {
        var view = this.view,
          selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
        if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false)) this.view.dispatch({
          selection: selection,
          userEvent: "select.pointer"
        });
        this.mustSelect = false;
      }
    }, {
      key: "update",
      value: function update(_update4) {
        var _this27 = this;
        if (_update4.transactions.some(function (tr) {
          return tr.isUserEvent("input.type");
        })) this.destroy();else if (this.style.update(_update4)) setTimeout(function () {
          return _this27.select(_this27.lastEvent);
        }, 20);
      }
    }]);
  }();
  function addsSelectionRange(view, event) {
    var facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    var facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    var main = view.state.selection.main;
    if (main.empty) return false;
    // On boundary clicks, check whether the coordinates are inside the
    // selection's client rectangles
    var sel = getSelection(view.root);
    if (!sel || sel.rangeCount == 0) return true;
    var rects = sel.getRangeAt(0).getClientRects();
    for (var _i89 = 0; _i89 < rects.length; _i89++) {
      var rect = rects[_i89];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles) return true;
    if (event.defaultPrevented) return false;
    for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
    return true;
  }
  var handlers = /*@__PURE__*/Object.create(null);
  var observers = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view) {
    var parent = view.dom.parentNode;
    if (!parent) return;
    var target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(function () {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function textFilter(state, facet, text) {
    var _iterator57 = _createForOfIteratorHelper(state.facet(facet)),
      _step57;
    try {
      for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
        var filter = _step57.value;
        text = filter(text, state);
      }
    } catch (err) {
      _iterator57.e(err);
    } finally {
      _iterator57.f();
    }
    return text;
  }
  function doPaste(view, input) {
    input = textFilter(view.state, clipboardInputFilter, input);
    var state = view.state,
      changes,
      i = 1,
      text = state.toText(input);
    var byLine = text.lines == state.selection.ranges.length;
    var linewise = lastLinewiseCopy != null && state.selection.ranges.every(function (r) {
      return r.empty;
    }) && lastLinewiseCopy == text.toString();
    if (linewise) {
      var lastLine = -1;
      changes = state.changeByRange(function (range) {
        var line = state.doc.lineAt(range.from);
        if (line.from == lastLine) return {
          range: range
        };
        lastLine = line.from;
        var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
        return {
          changes: {
            from: line.from,
            insert: insert
          },
          range: EditorSelection.cursor(range.from + insert.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange(function (range) {
        var line = text.line(i++);
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: line.text
          },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  observers.scroll = function (view) {
    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = function (view, event) {
    view.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27 && view.inputState.tabFocusMode != 0) view.inputState.tabFocusMode = Date.now() + 2000;
    return false;
  };
  observers.touchstart = function (view, e) {
    view.inputState.lastTouchTime = Date.now();
    view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = function (view) {
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = function (view, event) {
    view.observer.flush();
    if (view.inputState.lastTouchTime > Date.now() - 2000) return false; // Ignore touch interaction
    var style = null;
    var _iterator58 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
      _step58;
    try {
      for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
        var makeStyle = _step58.value;
        style = makeStyle(view, event);
        if (style) break;
      }
    } catch (err) {
      _iterator58.e(err);
    } finally {
      _iterator58.f();
    }
    if (!style && event.button == 0) style = basicMouseSelection(view, event);
    if (style) {
      var mustFocus = !view.hasFocus;
      view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
      if (mustFocus) view.observer.ignore(function () {
        focusPreventScroll(view.contentDOM);
        var active = view.root.activeElement;
        if (active && !active.contains(view.contentDOM)) active.blur();
      });
      var mouseSel = view.inputState.mouseSelection;
      if (mouseSel) {
        mouseSel.start(event);
        return mouseSel.dragging === false;
      }
    }
    return false;
  };
  function rangeForClick(view, pos, bias, type) {
    if (type == 1) {
      // Single click
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      // Double click
      return groupAt(view.state, pos, bias);
    } else {
      // Triple click
      var visual = LineView.find(view.docView, pos),
        line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      var from = visual ? visual.posAtStart : line.from,
        to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to) to++;
      return EditorSelection.range(from, to);
    }
  }
  var inside = function inside(x, y, rect) {
    return y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  };
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
    var line = LineView.find(view.docView, pos);
    if (!line) return 1;
    var off = pos - line.posAtStart;
    // Line boundaries point into the line
    if (off == 0) return 1;
    if (off == line.length) return -1;
    // Positions on top of an element point at that element
    var before = line.coordsAt(off, -1);
    if (before && inside(x, y, before)) return -1;
    var after = line.coordsAt(off, 1);
    if (after && inside(x, y, after)) return 1;
    // This is probably a line wrap point. Pick before if the point is
    // above its bottom.
    return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
    var pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    return {
      pos: pos,
      bias: findPositionSide(view, pos, event.clientX, event.clientY)
    };
  }
  var BadMouseDetail = browser.ie && browser.ie_version <= 11;
  var lastMouseDown = null,
    lastMouseDownCount = 0,
    lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail) return event.detail;
    var last = lastMouseDown,
      lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    var start = queryPos(view, event),
      type = getClickType(event);
    var startSel = view.state.selection;
    return {
      update: function update(_update5) {
        if (_update5.docChanged) {
          start.pos = _update5.changes.mapPos(start.pos);
          startSel = startSel.map(_update5.changes);
        }
      },
      get: function get(event, extend, multiple) {
        var cur = queryPos(view, event),
          removed;
        var range = rangeForClick(view, cur.pos, cur.bias, type);
        if (start.pos != cur.pos && !extend) {
          var startRange = rangeForClick(view, start.pos, start.bias, type);
          var from = Math.min(startRange.from, range.from),
            to = Math.max(startRange.to, range.to);
          range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
        }
        if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos))) return removed;else if (multiple) return startSel.addRange(range);else return EditorSelection.create([range]);
      }
    };
  }
  function removeRangeAround(sel, pos) {
    for (var _i90 = 0; _i90 < sel.ranges.length; _i90++) {
      var _sel$ranges$_i = sel.ranges[_i90],
        from = _sel$ranges$_i.from,
        to = _sel$ranges$_i.to;
      if (from <= pos && to >= pos) return EditorSelection.create(sel.ranges.slice(0, _i90).concat(sel.ranges.slice(_i90 + 1)), sel.mainIndex == _i90 ? 0 : sel.mainIndex - (sel.mainIndex > _i90 ? 1 : 0));
    }
    return null;
  }
  handlers.dragstart = function (view, event) {
    var range = view.state.selection.main;
    if (event.target.draggable) {
      var cView = view.docView.nearest(event.target);
      if (cView && cView.isWidget) {
        var from = cView.posAtStart,
          to = from + cView.length;
        if (from >= range.to || to <= range.from) range = EditorSelection.range(from, to);
      }
    }
    var inputState = view.inputState;
    if (inputState.mouseSelection) inputState.mouseSelection.dragging = true;
    inputState.draggedContent = range;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
      event.dataTransfer.effectAllowed = "copyMove";
    }
    return false;
  };
  handlers.dragend = function (view) {
    view.inputState.draggedContent = null;
    return false;
  };
  function dropText(view, event, text, direct) {
    text = textFilter(view.state, clipboardInputFilter, text);
    if (!text) return;
    var dropPos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    var draggedContent = view.inputState.draggedContent;
    var del = direct && draggedContent && dragMovesSelection(view, event) ? {
      from: draggedContent.from,
      to: draggedContent.to
    } : null;
    var ins = {
      from: dropPos,
      insert: text
    };
    var changes = view.state.changes(del ? [del, ins] : ins);
    view.focus();
    view.dispatch({
      changes: changes,
      selection: {
        anchor: changes.mapPos(dropPos, -1),
        head: changes.mapPos(dropPos, 1)
      },
      userEvent: del ? "move.drop" : "input.drop"
    });
    view.inputState.draggedContent = null;
  }
  handlers.drop = function (view, event) {
    if (!event.dataTransfer) return false;
    if (view.state.readOnly) return true;
    var files = event.dataTransfer.files;
    if (files && files.length) {
      // For a file drop, read the file's text.
      var text = Array(files.length),
        read = 0;
      var finishFile = function finishFile() {
        if (++read == files.length) dropText(view, event, text.filter(function (s) {
          return s != null;
        }).join(view.state.lineBreak), false);
      };
      var _loop6 = function _loop6(_i91) {
        var reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = function () {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[_i91] = reader.result;
          finishFile();
        };
        reader.readAsText(files[_i91]);
      };
      for (var _i91 = 0; _i91 < files.length; _i91++) {
        _loop6(_i91);
      }
      return true;
    } else {
      var _text = event.dataTransfer.getData("Text");
      if (_text) {
        dropText(view, event, _text, true);
        return true;
      }
    }
    return false;
  };
  handlers.paste = function (view, event) {
    if (view.state.readOnly) return true;
    view.observer.flush();
    var data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
      return true;
    } else {
      capturePaste(view);
      return false;
    }
  };
  function captureCopy(view, text) {
    // The extra wrapper is somehow necessary on IE/Edge to prevent the
    // content from being mangled when it is put onto the clipboard
    var parent = view.dom.parentNode;
    if (!parent) return;
    var target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(function () {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    var content = [],
      ranges = [],
      linewise = false;
    var _iterator59 = _createForOfIteratorHelper(state.selection.ranges),
      _step59;
    try {
      for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
        var range = _step59.value;
        if (!range.empty) {
          content.push(state.sliceDoc(range.from, range.to));
          ranges.push(range);
        }
      }
    } catch (err) {
      _iterator59.e(err);
    } finally {
      _iterator59.f();
    }
    if (!content.length) {
      // Nothing selected, do a line-wise copy
      var upto = -1;
      var _iterator60 = _createForOfIteratorHelper(state.selection.ranges),
        _step60;
      try {
        for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
          var from = _step60.value.from;
          var line = state.doc.lineAt(from);
          if (line.number > upto) {
            content.push(line.text);
            ranges.push({
              from: line.from,
              to: Math.min(state.doc.length, line.to + 1)
            });
          }
          upto = line.number;
        }
      } catch (err) {
        _iterator60.e(err);
      } finally {
        _iterator60.f();
      }
      linewise = true;
    }
    return {
      text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)),
      ranges: ranges,
      linewise: linewise
    };
  }
  var lastLinewiseCopy = null;
  handlers.copy = handlers.cut = function (view, event) {
    var _copiedRange = copiedRange(view.state),
      text = _copiedRange.text,
      ranges = _copiedRange.ranges,
      linewise = _copiedRange.linewise;
    if (!text && !linewise) return false;
    lastLinewiseCopy = linewise ? text : null;
    if (event.type == "cut" && !view.state.readOnly) view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
    var data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      data.clearData();
      data.setData("text/plain", text);
      return true;
    } else {
      captureCopy(view, text);
      return false;
    }
  };
  var isFocusChange = /*@__PURE__*/Annotation.define();
  function focusChangeTransaction(state, focus) {
    var effects = [];
    var _iterator61 = _createForOfIteratorHelper(state.facet(focusChangeEffect)),
      _step61;
    try {
      for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
        var getEffect = _step61.value;
        var effect = getEffect(state, focus);
        if (effect) effects.push(effect);
      }
    } catch (err) {
      _iterator61.e(err);
    } finally {
      _iterator61.f();
    }
    return effects.length ? state.update({
      effects: effects,
      annotations: isFocusChange.of(true)
    }) : null;
  }
  function updateForFocusChange(view) {
    setTimeout(function () {
      var focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        var tr = focusChangeTransaction(view.state, focus);
        if (tr) view.dispatch(tr);else view.update([]);
      }
    }, 10);
  }
  observers.focus = function (view) {
    view.inputState.lastFocusTime = Date.now();
    // When focusing reset the scroll position, move it back to where it was
    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
      view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
      view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
    }
    updateForFocusChange(view);
  };
  observers.blur = function (view) {
    view.observer.clearSelectionRange();
    updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = function (view) {
    if (view.observer.editContext) return; // Composition handled by edit context
    if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;
    if (view.inputState.composing < 0) {
      // FIXME possibly set a timeout to clear it again on Android
      view.inputState.composing = 0;
    }
  };
  observers.compositionend = function (view) {
    if (view.observer.editContext) return; // Composition handled by edit context
    view.inputState.composing = -1;
    view.inputState.compositionEndedAt = Date.now();
    view.inputState.compositionPendingKey = true;
    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
    view.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) {
      // Delay flushing for a bit on Android because it'll often fire a
      // bunch of contradictory changes in a row at end of compositon
      view.observer.flushSoon();
    } else if (view.inputState.compositionPendingChange) {
      // If we found pending records, schedule a flush.
      Promise.resolve().then(function () {
        return view.observer.flush();
      });
    } else {
      // Otherwise, make sure that, if no changes come in soon, the
      // composition view is cleared.
      setTimeout(function () {
        if (view.inputState.composing < 0 && view.docView.hasComposition) view.update([]);
      }, 50);
    }
  };
  observers.contextmenu = function (view) {
    view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = function (view, event) {
    var _a, _b;
    // In EditContext mode, we must handle insertReplacementText events
    // directly, to make spell checking corrections work
    if (event.inputType == "insertReplacementText" && view.observer.editContext) {
      var text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"),
        ranges = event.getTargetRanges();
      if (text && ranges.length) {
        var _r = ranges[0];
        var from = view.posAtDOM(_r.startContainer, _r.startOffset),
          to = view.posAtDOM(_r.endContainer, _r.endOffset);
        applyDOMChangeInner(view, {
          from: from,
          to: to,
          insert: view.state.toText(text)
        }, null);
        return true;
      }
    }
    // Because Chrome Android doesn't fire useful key events, use
    // beforeinput to detect backspace (and possibly enter and delete,
    // but those usually don't even seem to fire beforeinput events at
    // the moment) and fake a key event for it.
    //
    // (preventDefault on beforeinput, though supported in the spec,
    // seems to do nothing at all on Chrome).
    var pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find(function (key) {
      return key.inputType == event.inputType;
    }))) {
      view.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        var startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
        setTimeout(function () {
          var _a;
          // Backspacing near uneditable nodes on Chrome Android sometimes
          // closes the virtual keyboard. This tries to crudely detect
          // that and refocus to get it back.
          if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
            view.contentDOM.blur();
            view.focus();
          }
        }, 100);
      }
    }
    if (browser.ios && event.inputType == "deleteContentForward") {
      // For some reason, DOM changes (and beforeinput) happen _before_
      // the key event for ctrl-d on iOS when using an external
      // keyboard.
      view.observer.flushSoon();
    }
    // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
    if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
      setTimeout(function () {
        return observers.compositionend(view, event);
      }, 20);
    }
    return false;
  };
  var appliedFirefoxHack = /*@__PURE__*/new Set();
  // In Firefox, when cut/copy handlers are added to the document, that
  // somehow avoids a bug where those events aren't fired when the
  // selection is empty. See https://github.com/codemirror/dev/issues/1082
  // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
  function firefoxCopyCutHack(doc) {
    if (!appliedFirefoxHack.has(doc)) {
      appliedFirefoxHack.add(doc);
      doc.addEventListener("copy", function () {});
      doc.addEventListener("cut", function () {});
    }
  }
  var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  // Used to track, during updateHeight, if any actual heights changed
  var heightChangeFlag = false;
  function clearHeightChangeFlag() {
    heightChangeFlag = false;
  }
  var HeightOracle = /*#__PURE__*/function () {
    function HeightOracle(lineWrapping) {
      _classCallCheck(this, HeightOracle);
      this.lineWrapping = lineWrapping;
      this.doc = Text.empty;
      this.heightSamples = {};
      this.lineHeight = 14; // The height of an entire line (line-height)
      this.charWidth = 7;
      this.textHeight = 14; // The height of the actual font (font-size)
      this.lineLength = 30;
    }
    return _createClass(HeightOracle, [{
      key: "heightForGap",
      value: function heightForGap(from, to) {
        var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
        if (this.lineWrapping) lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
        return this.lineHeight * lines;
      }
    }, {
      key: "heightForLine",
      value: function heightForLine(length) {
        if (!this.lineWrapping) return this.lineHeight;
        var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / Math.max(1, this.lineLength - 5)));
        return lines * this.lineHeight;
      }
    }, {
      key: "setDoc",
      value: function setDoc(doc) {
        this.doc = doc;
        return this;
      }
    }, {
      key: "mustRefreshForWrapping",
      value: function mustRefreshForWrapping(whiteSpace) {
        return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
      }
    }, {
      key: "mustRefreshForHeights",
      value: function mustRefreshForHeights(lineHeights) {
        var newHeight = false;
        for (var _i92 = 0; _i92 < lineHeights.length; _i92++) {
          var h = lineHeights[_i92];
          if (h < 0) {
            _i92++;
          } else if (!this.heightSamples[Math.floor(h * 10)]) {
            // Round to .1 pixels
            newHeight = true;
            this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return newHeight;
      }
    }, {
      key: "refresh",
      value: function refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
        var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
        var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
        this.lineWrapping = lineWrapping;
        this.lineHeight = lineHeight;
        this.charWidth = charWidth;
        this.textHeight = textHeight;
        this.lineLength = lineLength;
        if (changed) {
          this.heightSamples = {};
          for (var _i93 = 0; _i93 < knownHeights.length; _i93++) {
            var h = knownHeights[_i93];
            if (h < 0) _i93++;else this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return changed;
      }
    }]);
  }(); // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  var MeasuredHeights = /*#__PURE__*/function () {
    function MeasuredHeights(from, heights) {
      _classCallCheck(this, MeasuredHeights);
      this.from = from;
      this.heights = heights;
      this.index = 0;
    }
    return _createClass(MeasuredHeights, [{
      key: "more",
      get: function get() {
        return this.index < this.heights.length;
      }
    }]);
  }();
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  var BlockInfo = /*#__PURE__*/function () {
    /**
    @internal
    */
    function BlockInfo(
    /**
    The start of the element in the document.
    */
    from,
    /**
    The length of the element.
    */
    length,
    /**
    The top position of the element (relative to the top of the
    document).
    */
    top,
    /**
    Its height.
    */
    height,
    /**
    @internal Weird packed field that holds an array of children
    for composite blocks, a decoration for block widgets, and a
    number indicating the amount of widget-create line breaks for
    text blocks.
    */
    _content) {
      _classCallCheck(this, BlockInfo);
      this.from = from;
      this.length = length;
      this.top = top;
      this.height = height;
      this._content = _content;
    }
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    return _createClass(BlockInfo, [{
      key: "type",
      get: function get() {
        return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
    }, {
      key: "to",
      get: function get() {
        return this.from + this.length;
      }
      /**
      The bottom position of the element.
      */
    }, {
      key: "bottom",
      get: function get() {
        return this.top + this.height;
      }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
    }, {
      key: "widget",
      get: function get() {
        return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
    }, {
      key: "widgetLineBreaks",
      get: function get() {
        return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
    }, {
      key: "join",
      value: function join(other) {
        var content = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
      }
    }]);
  }();
  var QueryType = /*@__PURE__*/function (QueryType) {
    QueryType[QueryType["ByPos"] = 0] = "ByPos";
    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType;
  }(QueryType || (QueryType = {}));
  var Epsilon = 1e-3;
  var HeightMap = /*#__PURE__*/function () {
    function HeightMap(length,
    // The number of characters covered
    height) {
      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
      _classCallCheck(this, HeightMap);
      this.length = length;
      this.height = height;
      this.flags = flags;
    }
    return _createClass(HeightMap, [{
      key: "outdated",
      get: function get() {
        return (this.flags & 2 /* Flag.Outdated */) > 0;
      },
      set: function set(value) {
        this.flags = (value ? 2 /* Flag.Outdated */ : 0) | this.flags & ~2 /* Flag.Outdated */;
      }
    }, {
      key: "setHeight",
      value: function setHeight(height) {
        if (this.height != height) {
          if (Math.abs(this.height - height) > Epsilon) heightChangeFlag = true;
          this.height = height;
        }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
    }, {
      key: "replace",
      value: function replace(_from, _to, nodes) {
        return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(_to, result) {
        result.push(this);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(_from, result) {
        result.push(this);
      }
    }, {
      key: "applyChanges",
      value: function applyChanges(decorations, oldDoc, oracle, changes) {
        var me = this,
          doc = oracle.doc;
        for (var _i94 = changes.length - 1; _i94 >= 0; _i94--) {
          var _changes$_i = changes[_i94],
            fromA = _changes$_i.fromA,
            toA = _changes$_i.toA,
            fromB = _changes$_i.fromB,
            toB = _changes$_i.toB;
          var start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
          var end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
          toB += end.to - toA;
          toA = end.to;
          while (_i94 > 0 && start.from <= changes[_i94 - 1].toA) {
            fromA = changes[_i94 - 1].fromA;
            fromB = changes[_i94 - 1].fromB;
            _i94--;
            if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
          }
          fromB += start.from - fromA;
          fromA = start.from;
          var nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
          me = replace(me, me.replace(fromA, toA, nodes));
        }
        return me.updateHeight(oracle, 0);
      }
    }], [{
      key: "empty",
      value: function empty() {
        return new HeightMapText(0, 0);
      }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
    }, {
      key: "of",
      value: function of(nodes) {
        if (nodes.length == 1) return nodes[0];
        var i = 0,
          j = nodes.length,
          before = 0,
          after = 0;
        for (;;) {
          if (i == j) {
            if (before > after * 2) {
              var split = nodes[i - 1];
              if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
              j += 1 + split["break"];
              before -= split.size;
            } else if (after > before * 2) {
              var _split = nodes[j];
              if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
              j += 2 + _split["break"];
              after -= _split.size;
            } else {
              break;
            }
          } else if (before < after) {
            var next = nodes[i++];
            if (next) before += next.size;
          } else {
            var _next3 = nodes[--j];
            if (_next3) after += _next3.size;
          }
        }
        var brk = 0;
        if (nodes[i - 1] == null) {
          brk = 1;
          i--;
        } else if (nodes[i] == null) {
          brk = 1;
          j++;
        }
        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
    }]);
  }();
  function replace(old, val) {
    if (old == val) return old;
    if (old.constructor != val.constructor) heightChangeFlag = true;
    return val;
  }
  HeightMap.prototype.size = 1;
  var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
    function HeightMapBlock(length, height, deco) {
      var _this28;
      _classCallCheck(this, HeightMapBlock);
      _this28 = _callSuper(this, HeightMapBlock, [length, height]);
      _this28.deco = deco;
      return _this28;
    }
    _inherits(HeightMapBlock, _HeightMap);
    return _createClass(HeightMapBlock, [{
      key: "blockAt",
      value: function blockAt(_height, _oracle, top, offset) {
        return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
      }
    }, {
      key: "lineAt",
      value: function lineAt(_value, _type, oracle, top, offset) {
        return this.blockAt(0, oracle, top, offset);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        if (from <= offset + this.length && to >= offset) f(this.blockAt(0, oracle, top, offset));
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var _force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        if (measured && measured.from <= offset && measured.more) this.setHeight(measured.heights[measured.index++]);
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "block(".concat(this.length, ")");
      }
    }]);
  }(HeightMap);
  var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
    function HeightMapText(length, height) {
      var _this29;
      _classCallCheck(this, HeightMapText);
      _this29 = _callSuper(this, HeightMapText, [length, height, null]);
      _this29.collapsed = 0; // Amount of collapsed content in the line
      _this29.widgetHeight = 0; // Maximum inline widget height
      _this29.breaks = 0; // Number of widget-introduced line breaks on the line
      return _this29;
    }
    _inherits(HeightMapText, _HeightMapBlock);
    return _createClass(HeightMapText, [{
      key: "blockAt",
      value: function blockAt(_height, _oracle, top, offset) {
        return new BlockInfo(offset, this.length, top, this.height, this.breaks);
      }
    }, {
      key: "replace",
      value: function replace(_from, _to, nodes) {
        var node = nodes[0];
        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* Flag.SingleLine */) && Math.abs(this.length - node.length) < 10) {
          if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
          if (!this.outdated) node.outdated = false;
          return node;
        } else {
          return HeightMap.of(nodes);
        }
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        if (measured && measured.from <= offset && measured.more) this.setHeight(measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
      }
    }]);
  }(HeightMapBlock);
  var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
    function HeightMapGap(length) {
      _classCallCheck(this, HeightMapGap);
      return _callSuper(this, HeightMapGap, [length, 0]);
    }
    _inherits(HeightMapGap, _HeightMap2);
    return _createClass(HeightMapGap, [{
      key: "heightMetrics",
      value: function heightMetrics(oracle, offset) {
        var firstLine = oracle.doc.lineAt(offset).number,
          lastLine = oracle.doc.lineAt(offset + this.length).number;
        var lines = lastLine - firstLine + 1;
        var perLine,
          perChar = 0;
        if (oracle.lineWrapping) {
          var totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
          perLine = totalPerLine / lines;
          if (this.length > lines + 1) perChar = (this.height - totalPerLine) / (this.length - lines - 1);
        } else {
          perLine = this.height / lines;
        }
        return {
          firstLine: firstLine,
          lastLine: lastLine,
          perLine: perLine,
          perChar: perChar
        };
      }
    }, {
      key: "blockAt",
      value: function blockAt(height, oracle, top, offset) {
        var _this$heightMetrics = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics.firstLine,
          lastLine = _this$heightMetrics.lastLine,
          perLine = _this$heightMetrics.perLine,
          perChar = _this$heightMetrics.perChar;
        if (oracle.lineWrapping) {
          var guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
          var line = oracle.doc.lineAt(guess),
            lineHeight = perLine + line.length * perChar;
          var lineTop = Math.max(top, height - lineHeight / 2);
          return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
        } else {
          var _line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
          var _oracle$doc$line = oracle.doc.line(firstLine + _line),
            from = _oracle$doc$line.from,
            length = _oracle$doc$line.length;
          return new BlockInfo(from, length, top + perLine * _line, perLine, 0);
        }
      }
    }, {
      key: "lineAt",
      value: function lineAt(value, type, oracle, top, offset) {
        if (type == QueryType.ByHeight) return this.blockAt(value, oracle, top, offset);
        if (type == QueryType.ByPosNoHeight) {
          var _oracle$doc$lineAt = oracle.doc.lineAt(value),
            from = _oracle$doc$lineAt.from,
            to = _oracle$doc$lineAt.to;
          return new BlockInfo(from, to - from, 0, 0, 0);
        }
        var _this$heightMetrics2 = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics2.firstLine,
          perLine = _this$heightMetrics2.perLine,
          perChar = _this$heightMetrics2.perChar;
        var line = oracle.doc.lineAt(value),
          lineHeight = perLine + line.length * perChar;
        var linesAbove = line.number - firstLine;
        var lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
        return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        from = Math.max(from, offset);
        to = Math.min(to, offset + this.length);
        var _this$heightMetrics3 = this.heightMetrics(oracle, offset),
          firstLine = _this$heightMetrics3.firstLine,
          perLine = _this$heightMetrics3.perLine,
          perChar = _this$heightMetrics3.perChar;
        for (var pos = from, lineTop = top; pos <= to;) {
          var line = oracle.doc.lineAt(pos);
          if (pos == from) {
            var linesAbove = line.number - firstLine;
            lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
          }
          var lineHeight = perLine + perChar * line.length;
          f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
          lineTop += lineHeight;
          pos = line.to + 1;
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, nodes) {
        var after = this.length - to;
        if (after > 0) {
          var last = nodes[nodes.length - 1];
          if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
        }
        if (from > 0) {
          var first = nodes[0];
          if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
        }
        return HeightMap.of(nodes);
      }
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(to, result) {
        result.push(new HeightMapGap(to - 1), null);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(from, result) {
        result.push(null, new HeightMapGap(this.length - from - 1));
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        var end = offset + this.length;
        if (measured && measured.from <= offset + this.length && measured.more) {
          // Fill in part of this gap with measured lines. We know there
          // can't be widgets or collapsed ranges in those lines, because
          // they would already have been added to the heightmap (gaps
          // only contain plain text).
          var nodes = [],
            pos = Math.max(offset, measured.from),
            singleHeight = -1;
          if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
          while (pos <= end && measured.more) {
            var len = oracle.doc.lineAt(pos).length;
            if (nodes.length) nodes.push(null);
            var height = measured.heights[measured.index++];
            if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
            var line = new HeightMapText(len, height);
            line.outdated = false;
            nodes.push(line);
            pos += len + 1;
          }
          if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
          var result = HeightMap.of(nodes);
          if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon) heightChangeFlag = true;
          return replace(this, result);
        } else if (force || this.outdated) {
          this.setHeight(oracle.heightForGap(offset, offset + this.length));
          this.outdated = false;
        }
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "gap(".concat(this.length, ")");
      }
    }]);
  }(HeightMap);
  var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
    function HeightMapBranch(left, brk, right) {
      var _this30;
      _classCallCheck(this, HeightMapBranch);
      _this30 = _callSuper(this, HeightMapBranch, [left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0)]);
      _this30.left = left;
      _this30.right = right;
      _this30.size = left.size + right.size;
      return _this30;
    }
    _inherits(HeightMapBranch, _HeightMap3);
    return _createClass(HeightMapBranch, [{
      key: "break",
      get: function get() {
        return this.flags & 1 /* Flag.Break */;
      }
    }, {
      key: "blockAt",
      value: function blockAt(height, oracle, top, offset) {
        var mid = top + this.left.height;
        return height < mid ? this.left.blockAt(height, oracle, top, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this["break"]);
      }
    }, {
      key: "lineAt",
      value: function lineAt(value, type, oracle, top, offset) {
        var rightTop = top + this.left.height,
          rightOffset = offset + this.left.length + this["break"];
        var left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
        var base = left ? this.left.lineAt(value, type, oracle, top, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
        if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
        var subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
        if (left) return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
      }
    }, {
      key: "forEachLine",
      value: function forEachLine(from, to, oracle, top, offset, f) {
        var rightTop = top + this.left.height,
          rightOffset = offset + this.left.length + this["break"];
        if (this["break"]) {
          if (from < rightOffset) this.left.forEachLine(from, to, oracle, top, offset, f);
          if (to >= rightOffset) this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
        } else {
          var mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
          if (from < mid.from) this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
          if (mid.to >= from && mid.from <= to) f(mid);
          if (to > mid.to) this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
        }
      }
    }, {
      key: "replace",
      value: function replace(from, to, nodes) {
        var rightStart = this.left.length + this["break"];
        if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
        if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
        var result = [];
        if (from > 0) this.decomposeLeft(from, result);
        var left = result.length;
        var _iterator62 = _createForOfIteratorHelper(nodes),
          _step62;
        try {
          for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
            var node = _step62.value;
            result.push(node);
          }
        } catch (err) {
          _iterator62.e(err);
        } finally {
          _iterator62.f();
        }
        if (from > 0) mergeGaps(result, left - 1);
        if (to < this.length) {
          var right = result.length;
          this.decomposeRight(to, result);
          mergeGaps(result, right);
        }
        return HeightMap.of(result);
      }
    }, {
      key: "decomposeLeft",
      value: function decomposeLeft(to, result) {
        var left = this.left.length;
        if (to <= left) return this.left.decomposeLeft(to, result);
        result.push(this.left);
        if (this["break"]) {
          left++;
          if (to >= left) result.push(null);
        }
        if (to > left) this.right.decomposeLeft(to - left, result);
      }
    }, {
      key: "decomposeRight",
      value: function decomposeRight(from, result) {
        var left = this.left.length,
          right = left + this["break"];
        if (from >= right) return this.right.decomposeRight(from - right, result);
        if (from < left) this.left.decomposeRight(from, result);
        if (this["break"] && from < right) result.push(null);
        result.push(this.right);
      }
    }, {
      key: "balanced",
      value: function balanced(left, right) {
        if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
        this.left = replace(this.left, left);
        this.right = replace(this.right, right);
        this.setHeight(left.height + right.height);
        this.outdated = left.outdated || right.outdated;
        this.size = left.size + right.size;
        this.length = left.length + this["break"] + right.length;
        return this;
      }
    }, {
      key: "updateHeight",
      value: function updateHeight(oracle) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var measured = arguments.length > 3 ? arguments[3] : undefined;
        var left = this.left,
          right = this.right,
          rightStart = offset + left.length + this["break"],
          rebalance = null;
        if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
        if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
        if (rebalance) return this.balanced(left, right);
        this.height = this.left.height + this.right.height;
        this.outdated = false;
        return this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.left + (this["break"] ? " " : "-") + this.right;
      }
    }]);
  }(HeightMap);
  function mergeGaps(nodes, around) {
    var before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  var relevantWidgetHeight = 5;
  var NodeBuilder = /*#__PURE__*/function () {
    function NodeBuilder(pos, oracle) {
      _classCallCheck(this, NodeBuilder);
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    return _createClass(NodeBuilder, [{
      key: "isCovered",
      get: function get() {
        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
    }, {
      key: "span",
      value: function span(_from, to) {
        if (this.lineStart > -1) {
          var end = Math.min(to, this.lineEnd),
            last = this.nodes[this.nodes.length - 1];
          if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
          this.writtenTo = end;
          if (to > end) {
            this.nodes.push(null);
            this.writtenTo++;
            this.lineStart = -1;
          }
        }
        this.pos = to;
      }
    }, {
      key: "point",
      value: function point(from, to, deco) {
        if (from < to || deco.heightRelevant) {
          var height = deco.widget ? deco.widget.estimatedHeight : 0;
          var breaks = deco.widget ? deco.widget.lineBreaks : 0;
          if (height < 0) height = this.oracle.lineHeight;
          var len = to - from;
          if (deco.block) {
            this.addBlock(new HeightMapBlock(len, height, deco));
          } else if (len || breaks || height >= relevantWidgetHeight) {
            this.addLineDeco(height, breaks, len);
          }
        } else if (to > from) {
          this.span(from, to);
        }
        if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
    }, {
      key: "enterLine",
      value: function enterLine() {
        if (this.lineStart > -1) return;
        var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
          from = _this$oracle$doc$line.from,
          to = _this$oracle$doc$line.to;
        this.lineStart = from;
        this.lineEnd = to;
        if (this.writtenTo < from) {
          if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
          this.nodes.push(null);
        }
        if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
        this.writtenTo = this.pos;
      }
    }, {
      key: "blankContent",
      value: function blankContent(from, to) {
        var gap = new HeightMapGap(to - from);
        if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* Flag.SingleLine */;
        return gap;
      }
    }, {
      key: "ensureLine",
      value: function ensureLine() {
        this.enterLine();
        var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
        if (last instanceof HeightMapText) return last;
        var line = new HeightMapText(0, -1);
        this.nodes.push(line);
        return line;
      }
    }, {
      key: "addBlock",
      value: function addBlock(block) {
        this.enterLine();
        var deco = block.deco;
        if (deco && deco.startSide > 0 && !this.isCovered) this.ensureLine();
        this.nodes.push(block);
        this.writtenTo = this.pos = this.pos + block.length;
        if (deco && deco.endSide > 0) this.covering = block;
      }
    }, {
      key: "addLineDeco",
      value: function addLineDeco(height, breaks, length) {
        var line = this.ensureLine();
        line.length += length;
        line.collapsed += length;
        line.widgetHeight = Math.max(line.widgetHeight, height);
        line.breaks += breaks;
        this.writtenTo = this.pos = this.pos + length;
      }
    }, {
      key: "finish",
      value: function finish(from) {
        var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
        var pos = from;
        var _iterator63 = _createForOfIteratorHelper(this.nodes),
          _step63;
        try {
          for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
            var node = _step63.value;
            if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
            pos += node ? node.length : 1;
          }
        } catch (err) {
          _iterator63.e(err);
        } finally {
          _iterator63.f();
        }
        return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
    }], [{
      key: "build",
      value: function build(oracle, decorations, from, to) {
        var builder = new NodeBuilder(from, oracle);
        RangeSet.spans(decorations, from, to, builder, 0);
        return builder.finish(from);
      }
    }]);
  }();
  function heightRelevantDecoChanges(a, b, diff) {
    var comp = new DecorationComparator();
    RangeSet.compare(a, b, diff, comp, 0);
    return comp.changes;
  }
  var DecorationComparator = /*#__PURE__*/function () {
    function DecorationComparator() {
      _classCallCheck(this, DecorationComparator);
      this.changes = [];
    }
    return _createClass(DecorationComparator, [{
      key: "compareRange",
      value: function compareRange() {}
    }, {
      key: "comparePoint",
      value: function comparePoint(from, to, a, b) {
        if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
      }
    }]);
  }();
  function visiblePixelRange(dom, paddingTop) {
    var rect = dom.getBoundingClientRect();
    var doc = dom.ownerDocument,
      win = doc.defaultView || window;
    var left = Math.max(0, rect.left),
      right = Math.min(win.innerWidth, rect.right);
    var top = Math.max(0, rect.top),
      bottom = Math.min(win.innerHeight, rect.bottom);
    for (var parent = dom.parentNode; parent && parent != doc.body;) {
      if (parent.nodeType == 1) {
        var elt = parent;
        var style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          var parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top = Math.max(top, parentRect.top);
          bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        // Shadow root
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top - (rect.top + paddingTop),
      bottom: Math.max(top, bottom) - (rect.top + paddingTop)
    };
  }
  function inWindow(elt) {
    var rect = elt.getBoundingClientRect(),
      win = elt.ownerDocument.defaultView || window;
    return rect.left < win.innerWidth && rect.right > 0 && rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
    var rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  var LineGap = /*#__PURE__*/function () {
    function LineGap(from, to, size, displaySize) {
      _classCallCheck(this, LineGap);
      this.from = from;
      this.to = to;
      this.size = size;
      this.displaySize = displaySize;
    }
    return _createClass(LineGap, [{
      key: "draw",
      value: function draw(viewState, wrapping) {
        return Decoration.replace({
          widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
        }).range(this.from, this.to);
      }
    }], [{
      key: "same",
      value: function same(a, b) {
        if (a.length != b.length) return false;
        for (var _i95 = 0; _i95 < a.length; _i95++) {
          var gA = a[_i95],
            gB = b[_i95];
          if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
        }
        return true;
      }
    }]);
  }();
  var LineGapWidget = /*#__PURE__*/function (_WidgetType3) {
    function LineGapWidget(size, vertical) {
      var _this31;
      _classCallCheck(this, LineGapWidget);
      _this31 = _callSuper(this, LineGapWidget);
      _this31.size = size;
      _this31.vertical = vertical;
      return _this31;
    }
    _inherits(LineGapWidget, _WidgetType3);
    return _createClass(LineGapWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.size == this.size && other.vertical == this.vertical;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        var elt = document.createElement("div");
        if (this.vertical) {
          elt.style.height = this.size + "px";
        } else {
          elt.style.width = this.size + "px";
          elt.style.height = "2px";
          elt.style.display = "inline-block";
        }
        return elt;
      }
    }, {
      key: "estimatedHeight",
      get: function get() {
        return this.vertical ? this.size : -1;
      }
    }]);
  }(WidgetType);
  var ViewState = /*#__PURE__*/function () {
    function ViewState(state) {
      var _this32 = this;
      _classCallCheck(this, ViewState);
      this.state = state;
      // These are contentDOM-local coordinates
      this.pixelViewport = {
        left: 0,
        right: window.innerWidth,
        top: 0,
        bottom: 0
      };
      this.inView = true;
      this.paddingTop = 0; // Padding above the document, scaled
      this.paddingBottom = 0; // Padding below the document, scaled
      this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
      this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
      this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
      this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
      this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
      this.scrolledToBottom = false;
      // The CSS-transformation scale of the editor (transformed size /
      // concrete size)
      this.scaleX = 1;
      this.scaleY = 1;
      // The vertical position (document-relative) to which to anchor the
      // scroll position. -1 means anchor to the end of the document.
      this.scrollAnchorPos = 0;
      // The height at the anchor position. Set by the DOM update phase.
      // -1 means no height available.
      this.scrollAnchorHeight = -1;
      // See VP.MaxDOMHeight
      this.scaler = IdScaler;
      this.scrollTarget = null;
      // Briefly set to true when printing, to disable viewport limiting
      this.printing = false;
      // Flag set when editor content was redrawn, so that the next
      // measure stage knows it must read DOM layout
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      // Cursor 'assoc' is only significant when the cursor is on a line
      // wrap point, where it must stick to the character that it is
      // associated with. Since browsers don't provide a reasonable
      // interface to set or query this, when a selection is set that
      // might cause this to be significant, this flag is set. The next
      // measure phase will check whether the cursor is on a line-wrapping
      // boundary and, if so, reset it to make sure it is positioned in
      // the right place.
      this.mustEnforceCursorAssoc = false;
      var guessWrapping = state.facet(contentAttributes).some(function (v) {
        return typeof v != "function" && v["class"] == "cm-lineWrapping";
      });
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter(function (d) {
        return typeof d != "function";
      });
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      for (var _i96 = 0; _i96 < 2; _i96++) {
        this.viewport = this.getViewport(0, null);
        if (!this.updateForViewport()) break;
      }
      this.updateViewportLines();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
        return gap.draw(_this32, false);
      }));
      this.computeVisibleRanges();
    }
    return _createClass(ViewState, [{
      key: "updateForViewport",
      value: function updateForViewport() {
        var _this33 = this;
        var viewports = [this.viewport],
          main = this.state.selection.main;
        var _loop7 = function _loop7() {
          var pos = _i97 ? main.head : main.anchor;
          if (!viewports.some(function (_ref7) {
            var from = _ref7.from,
              to = _ref7.to;
            return pos >= from && pos <= to;
          })) {
            var _this33$lineBlockAt = _this33.lineBlockAt(pos),
              from = _this33$lineBlockAt.from,
              to = _this33$lineBlockAt.to;
            viewports.push(new Viewport(from, to));
          }
        };
        for (var _i97 = 0; _i97 <= 1; _i97++) {
          _loop7();
        }
        this.viewports = viewports.sort(function (a, b) {
          return a.from - b.from;
        });
        return this.updateScaler();
      }
    }, {
      key: "updateScaler",
      value: function updateScaler() {
        var scaler = this.scaler;
        this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
      }
    }, {
      key: "updateViewportLines",
      value: function updateViewportLines() {
        var _this34 = this;
        this.viewportLines = [];
        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, function (block) {
          _this34.viewportLines.push(scaleBlock(block, _this34.scaler));
        });
      }
    }, {
      key: "update",
      value: function update(_update6) {
        var scrollTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        this.state = _update6.state;
        var prevDeco = this.stateDeco;
        this.stateDeco = this.state.facet(decorations).filter(function (d) {
          return typeof d != "function";
        });
        var contentChanges = _update6.changedRanges;
        var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, _update6 ? _update6.changes : ChangeSet.empty(this.state.doc.length)));
        var prevHeight = this.heightMap.height;
        var scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
        clearHeightChangeFlag();
        this.heightMap = this.heightMap.applyChanges(this.stateDeco, _update6.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
        if (this.heightMap.height != prevHeight || heightChangeFlag) _update6.flags |= 2 /* UpdateFlag.Height */;
        if (scrollAnchor) {
          this.scrollAnchorPos = _update6.changes.mapPos(scrollAnchor.from, -1);
          this.scrollAnchorHeight = scrollAnchor.top;
        } else {
          this.scrollAnchorPos = -1;
          this.scrollAnchorHeight = prevHeight;
        }
        var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update6.changes) : this.viewport;
        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
        var viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
        this.viewport = viewport;
        _update6.flags |= this.updateForViewport();
        if (viewportChange || !_update6.changes.empty || _update6.flags & 2 /* UpdateFlag.Height */) this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update6.changes)));
        _update6.flags |= this.computeVisibleRanges(_update6.changes);
        if (scrollTarget) this.scrollTarget = scrollTarget;
        if (!this.mustEnforceCursorAssoc && _update6.selectionSet && _update6.view.lineWrapping && _update6.state.selection.main.empty && _update6.state.selection.main.assoc && !_update6.state.facet(nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;
      }
    }, {
      key: "measure",
      value: function measure(view) {
        var dom = view.contentDOM,
          style = window.getComputedStyle(dom);
        var oracle = this.heightOracle;
        var whiteSpace = style.whiteSpace;
        this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
        var refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
        var domRect = dom.getBoundingClientRect();
        var measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
        this.contentDOMHeight = domRect.height;
        this.mustMeasureContent = false;
        var result = 0,
          bias = 0;
        if (domRect.width && domRect.height) {
          var _getScale2 = getScale(dom, domRect),
            scaleX = _getScale2.scaleX,
            scaleY = _getScale2.scaleY;
          if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 || scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
            this.scaleX = scaleX;
            this.scaleY = scaleY;
            result |= 16 /* UpdateFlag.Geometry */;
            refresh = measureContent = true;
          }
        }
        // Vertical padding
        var paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
        var paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
          this.paddingTop = paddingTop;
          this.paddingBottom = paddingBottom;
          result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
        }
        if (this.editorWidth != view.scrollDOM.clientWidth) {
          if (oracle.lineWrapping) measureContent = true;
          this.editorWidth = view.scrollDOM.clientWidth;
          result |= 16 /* UpdateFlag.Geometry */;
        }
        var scrollTop = view.scrollDOM.scrollTop * this.scaleY;
        if (this.scrollTop != scrollTop) {
          this.scrollAnchorHeight = -1;
          this.scrollTop = scrollTop;
        }
        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
        // Pixel viewport
        var pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
        var dTop = pixelViewport.top - this.pixelViewport.top,
          dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
        this.pixelViewport = pixelViewport;
        var inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
        if (inView != this.inView) {
          this.inView = inView;
          if (inView) measureContent = true;
        }
        if (!this.inView && !this.scrollTarget && !inWindow(view.dom)) return 0;
        var contentWidth = domRect.width;
        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
          this.contentDOMWidth = domRect.width;
          this.editorHeight = view.scrollDOM.clientHeight;
          result |= 16 /* UpdateFlag.Geometry */;
        }
        if (measureContent) {
          var lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
          if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
          if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
            var _view$docView$measure = view.docView.measureTextSize(),
              lineHeight = _view$docView$measure.lineHeight,
              charWidth = _view$docView$measure.charWidth,
              textHeight = _view$docView$measure.textHeight;
            refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, Math.max(5, contentWidth / charWidth), lineHeights);
            if (refresh) {
              view.docView.minWidth = 0;
              result |= 16 /* UpdateFlag.Geometry */;
            }
          }
          if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
          clearHeightChangeFlag();
          var _iterator64 = _createForOfIteratorHelper(this.viewports),
            _step64;
          try {
            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
              var vp = _step64.value;
              var heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
              this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
            }
          } catch (err) {
            _iterator64.e(err);
          } finally {
            _iterator64.f();
          }
          if (heightChangeFlag) result |= 2 /* UpdateFlag.Height */;
        }
        var viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
        if (viewportChange) {
          if (result & 2 /* UpdateFlag.Height */) result |= this.updateScaler();
          this.viewport = this.getViewport(bias, this.scrollTarget);
          result |= this.updateForViewport();
        }
        if (result & 2 /* UpdateFlag.Height */ || viewportChange) this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
        result |= this.computeVisibleRanges();
        if (this.mustEnforceCursorAssoc) {
          this.mustEnforceCursorAssoc = false;
          // This is done in the read stage, because moving the selection
          // to a line end is going to trigger a layout anyway, so it
          // can't be a pure write. It should be rare that it does any
          // writing.
          view.docView.enforceCursorAssoc();
        }
        return result;
      }
    }, {
      key: "visibleTop",
      get: function get() {
        return this.scaler.fromDOM(this.pixelViewport.top);
      }
    }, {
      key: "visibleBottom",
      get: function get() {
        return this.scaler.fromDOM(this.pixelViewport.bottom);
      }
    }, {
      key: "getViewport",
      value: function getViewport(bias, scrollTarget) {
        // This will divide VP.Margin between the top and the
        // bottom, depending on the bias (the change in viewport position
        // since the last update). It'll hold a number between 0 and 1
        var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
        var map = this.heightMap,
          oracle = this.heightOracle;
        var visibleTop = this.visibleTop,
          visibleBottom = this.visibleBottom;
        var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
        // If scrollTarget is given, make sure the viewport includes that position
        if (scrollTarget) {
          var head = scrollTarget.range.head;
          if (head < viewport.from || head > viewport.to) {
            var viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
            var block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0),
              topPos;
            if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
            viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
          }
        }
        return viewport;
      }
    }, {
      key: "mapViewport",
      value: function mapViewport(viewport, changes) {
        var from = changes.mapPos(viewport.from, -1),
          to = changes.mapPos(viewport.to, 1);
        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
    }, {
      key: "viewportIsAppropriate",
      value: function viewportIsAppropriate(_ref8) {
        var from = _ref8.from,
          to = _ref8.to;
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (!this.inView) return true;
        var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0),
          top = _this$heightMap$lineA.top;
        var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0),
          bottom = _this$heightMap$lineA2.bottom;
        var visibleTop = this.visibleTop,
          visibleBottom = this.visibleBottom;
        return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */;
      }
    }, {
      key: "mapLineGaps",
      value: function mapLineGaps(gaps, changes) {
        if (!gaps.length || changes.empty) return gaps;
        var mapped = [];
        var _iterator65 = _createForOfIteratorHelper(gaps),
          _step65;
        try {
          for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
            var gap = _step65.value;
            if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
          }
        } catch (err) {
          _iterator65.e(err);
        } finally {
          _iterator65.f();
        }
        return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
    }, {
      key: "ensureLineGaps",
      value: function ensureLineGaps(current, mayMeasure) {
        var _this35 = this;
        var wrapping = this.heightOracle.lineWrapping;
        var margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */,
          halfMargin = margin >> 1,
          doubleMargin = margin << 1;
        // The non-wrapping logic won't work at all in predominantly right-to-left text.
        if (this.defaultTextDirection != Direction.LTR && !wrapping) return [];
        var gaps = [];
        var _addGap = function addGap(from, to, line, structure) {
          if (to - from < halfMargin) return;
          var sel = _this35.state.selection.main,
            avoid = [sel.from];
          if (!sel.empty) avoid.push(sel.to);
          for (var _i98 = 0, _avoid = avoid; _i98 < _avoid.length; _i98++) {
            var pos = _avoid[_i98];
            if (pos > from && pos < to) {
              _addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
              _addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
              return;
            }
          }
          var gap = find(current, function (gap) {
            return gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some(function (pos) {
              return gap.from < pos && gap.to > pos;
            });
          });
          if (!gap) {
            // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
            if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some(function (r) {
              return r.from <= to && r.to >= to;
            })) {
              var lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
              if (lineStart > from) to = lineStart;
            }
            var size = _this35.gapSize(line, from, to, structure);
            var displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
            gap = new LineGap(from, to, size, displaySize);
          }
          gaps.push(gap);
        };
        var checkLine = function checkLine(line) {
          if (line.length < doubleMargin || line.type != BlockType.Text) return;
          var structure = lineStructure(line.from, line.to, _this35.stateDeco);
          if (structure.total < doubleMargin) return;
          var target = _this35.scrollTarget ? _this35.scrollTarget.range.head : null;
          var viewFrom, viewTo;
          if (wrapping) {
            var marginHeight = margin / _this35.heightOracle.lineLength * _this35.heightOracle.lineHeight;
            var _top6, bot;
            if (target != null) {
              var targetFrac = findFraction(structure, target);
              var spaceFrac = ((_this35.visibleBottom - _this35.visibleTop) / 2 + marginHeight) / line.height;
              _top6 = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              _top6 = (_this35.visibleTop - line.top - marginHeight) / line.height;
              bot = (_this35.visibleBottom - line.top + marginHeight) / line.height;
            }
            viewFrom = findPosition(structure, _top6);
            viewTo = findPosition(structure, bot);
          } else {
            var totalWidth = structure.total * _this35.heightOracle.charWidth;
            var marginWidth = margin * _this35.heightOracle.charWidth;
            var horizOffset = 0;
            if (totalWidth > 2000000 /* VP.MaxHorizGap */) {
              var _iterator66 = _createForOfIteratorHelper(current),
                _step66;
              try {
                for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                  var old = _step66.value;
                  if (old.from >= line.from && old.from < line.to && old.size != old.displaySize && old.from * _this35.heightOracle.charWidth + horizOffset < _this35.pixelViewport.left) horizOffset = old.size - old.displaySize;
                }
              } catch (err) {
                _iterator66.e(err);
              } finally {
                _iterator66.f();
              }
            }
            var pxLeft = _this35.pixelViewport.left + horizOffset,
              pxRight = _this35.pixelViewport.right + horizOffset;
            var left, right;
            if (target != null) {
              var _targetFrac = findFraction(structure, target);
              var _spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
              left = _targetFrac - _spaceFrac;
              right = _targetFrac + _spaceFrac;
            } else {
              left = (pxLeft - marginWidth) / totalWidth;
              right = (pxRight + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left);
            viewTo = findPosition(structure, right);
          }
          if (viewFrom > line.from) _addGap(line.from, viewFrom, line, structure);
          if (viewTo < line.to) _addGap(viewTo, line.to, line, structure);
        };
        var _iterator67 = _createForOfIteratorHelper(this.viewportLines),
          _step67;
        try {
          for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
            var line = _step67.value;
            if (Array.isArray(line.type)) line.type.forEach(checkLine);else checkLine(line);
          }
        } catch (err) {
          _iterator67.e(err);
        } finally {
          _iterator67.f();
        }
        return gaps;
      }
    }, {
      key: "gapSize",
      value: function gapSize(line, from, to, structure) {
        var fraction = findFraction(structure, to) - findFraction(structure, from);
        if (this.heightOracle.lineWrapping) {
          return line.height * fraction;
        } else {
          return structure.total * this.heightOracle.charWidth * fraction;
        }
      }
    }, {
      key: "updateLineGaps",
      value: function updateLineGaps(gaps) {
        var _this36 = this;
        if (!LineGap.same(gaps, this.lineGaps)) {
          this.lineGaps = gaps;
          this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
            return gap.draw(_this36, _this36.heightOracle.lineWrapping);
          }));
        }
      }
    }, {
      key: "computeVisibleRanges",
      value: function computeVisibleRanges(changes) {
        var deco = this.stateDeco;
        if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
        var ranges = [];
        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
          span: function span(from, to) {
            ranges.push({
              from: from,
              to: to
            });
          },
          point: function point() {}
        }, 20);
        var changed = 0;
        if (ranges.length != this.visibleRanges.length) {
          changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
        } else {
          for (var _i99 = 0; _i99 < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); _i99++) {
            var old = this.visibleRanges[_i99],
              nw = ranges[_i99];
            if (old.from != nw.from || old.to != nw.to) {
              changed |= 4 /* UpdateFlag.Viewport */;
              if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to)) changed |= 8 /* UpdateFlag.ViewportMoved */;
            }
          }
        }
        this.visibleRanges = ranges;
        return changed;
      }
    }, {
      key: "lineBlockAt",
      value: function lineBlockAt(pos) {
        return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(function (b) {
          return b.from <= pos && b.to >= pos;
        }) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "lineBlockAtHeight",
      value: function lineBlockAtHeight(height) {
        return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find(function (l) {
          return l.top <= height && l.bottom >= height;
        }) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "scrollAnchorAt",
      value: function scrollAnchorAt(scrollTop) {
        var block = this.lineBlockAtHeight(scrollTop + 8);
        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
      }
    }, {
      key: "elementAtHeight",
      value: function elementAtHeight(height) {
        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
    }, {
      key: "docHeight",
      get: function get() {
        return this.scaler.toDOM(this.heightMap.height);
      }
    }, {
      key: "contentHeight",
      get: function get() {
        return this.docHeight + this.paddingTop + this.paddingBottom;
      }
    }]);
  }();
  var Viewport = /*#__PURE__*/_createClass(function Viewport(from, to) {
    _classCallCheck(this, Viewport);
    this.from = from;
    this.to = to;
  });
  function lineStructure(from, to, stateDeco) {
    var ranges = [],
      pos = from,
      total = 0;
    RangeSet.spans(stateDeco, from, to, {
      span: function span() {},
      point: function point(from, to) {
        if (from > pos) {
          ranges.push({
            from: pos,
            to: from
          });
          total += from - pos;
        }
        pos = to;
      }
    }, 20); // We're only interested in collapsed ranges of a significant size
    if (pos < to) {
      ranges.push({
        from: pos,
        to: to
      });
      total += to - pos;
    }
    return {
      total: total,
      ranges: ranges
    };
  }
  function findPosition(_ref9, ratio) {
    var total = _ref9.total,
      ranges = _ref9.ranges;
    if (ratio <= 0) return ranges[0].from;
    if (ratio >= 1) return ranges[ranges.length - 1].to;
    var dist = Math.floor(total * ratio);
    for (var _i100 = 0;; _i100++) {
      var _ranges$_i = ranges[_i100],
        from = _ranges$_i.from,
        to = _ranges$_i.to,
        size = to - from;
      if (dist <= size) return from + dist;
      dist -= size;
    }
  }
  function findFraction(structure, pos) {
    var counted = 0;
    var _iterator68 = _createForOfIteratorHelper(structure.ranges),
      _step68;
    try {
      for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
        var _step68$value = _step68.value,
          from = _step68$value.from,
          to = _step68$value.to;
        if (pos <= to) {
          counted += pos - from;
          break;
        }
        counted += to - from;
      }
    } catch (err) {
      _iterator68.e(err);
    } finally {
      _iterator68.f();
    }
    return counted / structure.total;
  }
  function find(array, f) {
    var _iterator69 = _createForOfIteratorHelper(array),
      _step69;
    try {
      for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
        var val = _step69.value;
        if (f(val)) return val;
      }
    } catch (err) {
      _iterator69.e(err);
    } finally {
      _iterator69.f();
    }
    return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  var IdScaler = {
    toDOM: function toDOM(n) {
      return n;
    },
    fromDOM: function fromDOM(n) {
      return n;
    },
    scale: 1,
    eq: function eq(other) {
      return other == this;
    }
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  var BigScaler = /*#__PURE__*/function () {
    function BigScaler(oracle, heightMap, viewports) {
      _classCallCheck(this, BigScaler);
      var vpHeight = 0,
        base = 0,
        domBase = 0;
      this.viewports = viewports.map(function (_ref0) {
        var from = _ref0.from,
          to = _ref0.to;
        var top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
        var bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
        vpHeight += bottom - top;
        return {
          from: from,
          to: to,
          top: top,
          bottom: bottom,
          domTop: 0,
          domBottom: 0
        };
      });
      this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
      var _iterator70 = _createForOfIteratorHelper(this.viewports),
        _step70;
      try {
        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
          var obj = _step70.value;
          obj.domTop = domBase + (obj.top - base) * this.scale;
          domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
          base = obj.bottom;
        }
      } catch (err) {
        _iterator70.e(err);
      } finally {
        _iterator70.f();
      }
    }
    return _createClass(BigScaler, [{
      key: "toDOM",
      value: function toDOM(n) {
        for (var _i101 = 0, _base = 0, domBase = 0;; _i101++) {
          var vp = _i101 < this.viewports.length ? this.viewports[_i101] : null;
          if (!vp || n < vp.top) return domBase + (n - _base) * this.scale;
          if (n <= vp.bottom) return vp.domTop + (n - vp.top);
          _base = vp.bottom;
          domBase = vp.domBottom;
        }
      }
    }, {
      key: "fromDOM",
      value: function fromDOM(n) {
        for (var _i102 = 0, _base2 = 0, domBase = 0;; _i102++) {
          var vp = _i102 < this.viewports.length ? this.viewports[_i102] : null;
          if (!vp || n < vp.domTop) return _base2 + (n - domBase) / this.scale;
          if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
          _base2 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
    }, {
      key: "eq",
      value: function eq(other) {
        if (!(other instanceof BigScaler)) return false;
        return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every(function (vp, i) {
          return vp.from == other.viewports[i].from && vp.to == other.viewports[i].to;
        });
      }
    }]);
  }();
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1) return block;
    var bTop = scaler.toDOM(block.top),
      bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(function (b) {
      return scaleBlock(b, scaler);
    }) : block._content);
  }
  var _theme = /*@__PURE__*/Facet.define({
    combine: function combine(strs) {
      return strs.join(" ");
    }
  });
  var darkTheme = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.indexOf(true) > -1;
    }
  });
  var baseThemeID = /*@__PURE__*/StyleModule.newName(),
    baseLightID = /*@__PURE__*/StyleModule.newName(),
    baseDarkID = /*@__PURE__*/StyleModule.newName();
  var lightDarkIDs = {
    "&light": "." + baseLightID,
    "&dark": "." + baseDarkID
  };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish: function finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
          if (m == "&") return main;
          if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
          return scopes[m];
        }) : main + " " + sel;
      }
    });
  }
  var baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
    "&": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0,
      overflowAnchor: "none"
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      // https://github.com/codemirror/dev/issues/456
      boxSizing: "border-box",
      minHeight: "100%",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      // For IE
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      // For Safari, which doesn't support overflow-wrap: anywhere
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": {
      caretColor: "black"
    },
    "&dark .cm-content": {
      caretColor: "white"
    },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      position: "absolute",
      left: 0,
      top: 0,
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    "@keyframes cm-blink2": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#ddd"
    },
    ".cm-dropCursor": {
      position: "absolute"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
      display: "block"
    },
    ".cm-iso": {
      unicodeBidi: "isolate"
    },
    ".cm-announced": {
      position: "fixed",
      top: "-10000px"
    },
    "@media print": {
      ".cm-announced": {
        display: "none"
      }
    },
    "&light .cm-activeLine": {
      backgroundColor: "#cceeff44"
    },
    "&dark .cm-activeLine": {
      backgroundColor: "#99eeff33"
    },
    "&light .cm-specialChar": {
      color: "red"
    },
    "&dark .cm-specialChar": {
      color: "#f78"
    },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      zIndex: 200
    },
    ".cm-gutters-before": {
      insetInlineStart: 0
    },
    ".cm-gutters-after": {
      insetInlineEnd: 0
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      border: "0px solid #ddd",
      "&.cm-gutters-before": {
        borderRightWidth: "1px"
      },
      "&.cm-gutters-after": {
        borderLeftWidth: "1px"
      }
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      // Necessary -- prevents margin collapsing
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0,
      zIndex: 300
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-dialog": {
      padding: "2px 19px 4px 6px",
      position: "relative",
      "& label": {
        fontSize: "80%"
      }
    },
    ".cm-dialog-close": {
      position: "absolute",
      top: "3px",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      fontSize: "14px",
      padding: "0"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top",
      userSelect: "none"
    },
    ".cm-highlightSpace": {
      backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
      backgroundPosition: "center"
    },
    ".cm-highlightTab": {
      backgroundImage: "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')",
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  var observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  var useCharData = browser.ie && browser.ie_version <= 11;
  var DOMObserver = /*#__PURE__*/function () {
    function DOMObserver(view) {
      var _this37 = this;
      _classCallCheck(this, DOMObserver);
      this.view = view;
      this.active = false;
      this.editContext = null;
      // The known selection. Kept in our own object, as opposed to just
      // directly accessing the selection because:
      //  - Safari doesn't report the right selection in shadow DOM
      //  - Reading from the selection forces a DOM layout
      //  - This way, we can ignore selectionchange events if we have
      //    already seen the 'new' selection
      this.selectionRange = new DOMSelectionState();
      // Set when a selection change is detected, cleared on flush
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      this.printQuery = null;
      // Timeout for scheduling check of the parents that need scroll handlers
      this.parentCheck = -1;
      this.dom = view.contentDOM;
      this.observer = new MutationObserver(function (mutations) {
        var _iterator71 = _createForOfIteratorHelper(mutations),
          _step71;
        try {
          for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
            var mut = _step71.value;
            _this37.queue.push(mut);
          }
          // IE11 will sometimes (on typing over a selection or
          // backspacing out a single character text node) call the
          // observer callback before actually updating the DOM.
          //
          // Unrelatedly, iOS Safari will, when ending a composition,
          // sometimes first clear it, deliver the mutations, and then
          // reinsert the finished text. CodeMirror's handling of the
          // deletion will prevent the reinsertion from happening,
          // breaking composition.
        } catch (err) {
          _iterator71.e(err);
        } finally {
          _iterator71.f();
        }
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
          return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
        })) _this37.flushSoon();else _this37.flush();
      });
      if (window.EditContext && browser.android && view.constructor.EDIT_CONTEXT !== false &&
      // Chrome <126 doesn't support inverted selections in edit context (#1392)
      !(browser.chrome && browser.chrome_version < 126)) {
        this.editContext = new EditContextManager(view);
        if (view.state.facet(editable)) view.contentDOM.editContext = this.editContext.editContext;
      }
      if (useCharData) this.onCharData = function (event) {
        _this37.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        _this37.flushSoon();
      };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (window.matchMedia) this.printQuery = window.matchMedia("print");
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(function () {
          var _a;
          if (((_a = _this37.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) _this37.onResize();
        });
        this.resizeScroll.observe(view.scrollDOM);
      }
      this.addWindowListeners(this.win = view.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver(function (entries) {
          if (_this37.parentCheck < 0) _this37.parentCheck = setTimeout(_this37.listenForScroll.bind(_this37), 1000);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != _this37.intersecting) {
            _this37.intersecting = !_this37.intersecting;
            if (_this37.intersecting != _this37.view.inView) _this37.onScrollChanged(document.createEvent("Event"));
          }
        }, {
          threshold: [0, .001]
        });
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver(function (entries) {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) _this37.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    return _createClass(DOMObserver, [{
      key: "onScrollChanged",
      value: function onScrollChanged(e) {
        this.view.inputState.runHandlers("scroll", e);
        if (this.intersecting) this.view.measure();
      }
    }, {
      key: "onScroll",
      value: function onScroll(e) {
        if (this.intersecting) this.flush(false);
        if (this.editContext) this.view.requestMeasure(this.editContext.measureReq);
        this.onScrollChanged(e);
      }
    }, {
      key: "onResize",
      value: function onResize() {
        var _this38 = this;
        if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(function () {
          _this38.resizeTimeout = -1;
          _this38.view.requestMeasure();
        }, 50);
      }
    }, {
      key: "onPrint",
      value: function onPrint(event) {
        var _this39 = this;
        if ((event.type == "change" || !event.type) && !event.matches) return;
        this.view.viewState.printing = true;
        this.view.measure();
        setTimeout(function () {
          _this39.view.viewState.printing = false;
          _this39.view.requestMeasure();
        }, 500);
      }
    }, {
      key: "updateGaps",
      value: function updateGaps(gaps) {
        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some(function (g, i) {
          return g != gaps[i];
        }))) {
          this.gapIntersection.disconnect();
          var _iterator72 = _createForOfIteratorHelper(gaps),
            _step72;
          try {
            for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
              var gap = _step72.value;
              this.gapIntersection.observe(gap);
            }
          } catch (err) {
            _iterator72.e(err);
          } finally {
            _iterator72.f();
          }
          this.gaps = gaps;
        }
      }
    }, {
      key: "onSelectionChange",
      value: function onSelectionChange(event) {
        var wasChanged = this.selectionChanged;
        if (!this.readSelectionRange() || this.delayedAndroidKey) return;
        var view = this.view,
          sel = this.selectionRange;
        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel)) return;
        var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
        if (context && context.ignoreEvent(event)) {
          if (!wasChanged) this.selectionChanged = false;
          return;
        }
        // Deletions on IE11 fire their events in the wrong order, giving
        // us a selection change event before the DOM changes are
        // reported.
        // Chrome Android has a similar issue when backspacing out a
        // selection (#645).
        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
        // (Selection.isCollapsed isn't reliable on IE)
        sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
      }
    }, {
      key: "readSelectionRange",
      value: function readSelectionRange() {
        var view = this.view;
        // The Selection object is broken in shadow roots in Safari. See
        // https://github.com/codemirror/dev/issues/414
        var selection = getSelection(view.root);
        if (!selection) return false;
        var range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
        if (!range || this.selectionRange.eq(range)) return false;
        var local = hasSelection(this.dom, range);
        // Detect the situation where the browser has, on focus, moved the
        // selection to the start of the content element. Reset it to the
        // position from the editor state.
        if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
          this.view.inputState.lastFocusTime = 0;
          view.docView.updateSelection();
          return false;
        }
        this.selectionRange.setRange(range);
        if (local) this.selectionChanged = true;
        return true;
      }
    }, {
      key: "setSelectionRange",
      value: function setSelectionRange(anchor, head) {
        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
        this.selectionChanged = false;
      }
    }, {
      key: "clearSelectionRange",
      value: function clearSelectionRange() {
        this.selectionRange.set(null, 0, null, 0);
      }
    }, {
      key: "listenForScroll",
      value: function listenForScroll() {
        this.parentCheck = -1;
        var i = 0,
          changed = null;
        for (var dom = this.dom; dom;) {
          if (dom.nodeType == 1) {
            if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
            if (changed) changed.push(dom);
            dom = dom.assignedSlot || dom.parentNode;
          } else if (dom.nodeType == 11) {
            // Shadow root
            dom = dom.host;
          } else {
            break;
          }
        }
        if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
        if (changed) {
          var _iterator73 = _createForOfIteratorHelper(this.scrollTargets),
            _step73;
          try {
            for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
              var _dom2 = _step73.value;
              _dom2.removeEventListener("scroll", this.onScroll);
            }
          } catch (err) {
            _iterator73.e(err);
          } finally {
            _iterator73.f();
          }
          var _iterator74 = _createForOfIteratorHelper(this.scrollTargets = changed),
            _step74;
          try {
            for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
              var _dom3 = _step74.value;
              _dom3.addEventListener("scroll", this.onScroll);
            }
          } catch (err) {
            _iterator74.e(err);
          } finally {
            _iterator74.f();
          }
        }
      }
    }, {
      key: "ignore",
      value: function ignore(f) {
        if (!this.active) return f();
        try {
          this.stop();
          return f();
        } finally {
          this.start();
          this.clear();
        }
      }
    }, {
      key: "start",
      value: function start() {
        if (this.active) return;
        this.observer.observe(this.dom, observeOptions);
        if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        this.active = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (!this.active) return;
        this.active = false;
        this.observer.disconnect();
        if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
    }, {
      key: "clear",
      value: function clear() {
        this.processRecords();
        this.queue.length = 0;
        this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
    }, {
      key: "delayAndroidKey",
      value: function delayAndroidKey(key, keyCode) {
        var _this40 = this;
        var _a;
        if (!this.delayedAndroidKey) {
          var flush = function flush() {
            var key = _this40.delayedAndroidKey;
            if (key) {
              _this40.clearDelayedAndroidKey();
              _this40.view.inputState.lastKeyCode = key.keyCode;
              _this40.view.inputState.lastKeyTime = Date.now();
              var flushed = _this40.flush();
              if (!flushed && key.force) dispatchKey(_this40.dom, key.key, key.keyCode);
            }
          };
          this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
        }
        // Since backspace beforeinput is sometimes signalled spuriously,
        // Enter always takes precedence.
        if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
          key: key,
          keyCode: keyCode,
          // Only run the key handler when no changes are detected if
          // this isn't coming right after another change, in which case
          // it is probably part of a weird chain of updates, and should
          // be ignored if it returns the DOM to its previous state.
          force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
        };
      }
    }, {
      key: "clearDelayedAndroidKey",
      value: function clearDelayedAndroidKey() {
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
      }
    }, {
      key: "flushSoon",
      value: function flushSoon() {
        var _this41 = this;
        if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(function () {
          _this41.delayedFlush = -1;
          _this41.flush();
        });
      }
    }, {
      key: "forceFlush",
      value: function forceFlush() {
        if (this.delayedFlush >= 0) {
          this.view.win.cancelAnimationFrame(this.delayedFlush);
          this.delayedFlush = -1;
        }
        this.flush();
      }
    }, {
      key: "pendingRecords",
      value: function pendingRecords() {
        var _iterator75 = _createForOfIteratorHelper(this.observer.takeRecords()),
          _step75;
        try {
          for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
            var mut = _step75.value;
            this.queue.push(mut);
          }
        } catch (err) {
          _iterator75.e(err);
        } finally {
          _iterator75.f();
        }
        return this.queue;
      }
    }, {
      key: "processRecords",
      value: function processRecords() {
        var records = this.pendingRecords();
        if (records.length) this.queue = [];
        var from = -1,
          to = -1,
          typeOver = false;
        var _iterator76 = _createForOfIteratorHelper(records),
          _step76;
        try {
          for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
            var record = _step76.value;
            var range = this.readMutation(record);
            if (!range) continue;
            if (range.typeOver) typeOver = true;
            if (from == -1) {
              from = range.from;
              to = range.to;
            } else {
              from = Math.min(range.from, from);
              to = Math.max(range.to, to);
            }
          }
        } catch (err) {
          _iterator76.e(err);
        } finally {
          _iterator76.f();
        }
        return {
          from: from,
          to: to,
          typeOver: typeOver
        };
      }
    }, {
      key: "readChange",
      value: function readChange() {
        var _this$processRecords = this.processRecords(),
          from = _this$processRecords.from,
          to = _this$processRecords.to,
          typeOver = _this$processRecords.typeOver;
        var newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
        if (from < 0 && !newSel) return null;
        if (from > -1) this.lastChange = Date.now();
        this.view.inputState.lastFocusTime = 0;
        this.selectionChanged = false;
        var change = new DOMChange(this.view, from, to, typeOver);
        this.view.docView.domChanged = {
          newSel: change.newSel ? change.newSel.main : null
        };
        return change;
      }
      // Apply pending changes, if any
    }, {
      key: "flush",
      value: function flush() {
        var readSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        // Completely hold off flushing when pending keys are set—the code
        // managing those will make sure processRecords is called and the
        // view is resynchronized after
        if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
        if (readSelection) this.readSelectionRange();
        var domChange = this.readChange();
        if (!domChange) {
          this.view.requestMeasure();
          return false;
        }
        var startState = this.view.state;
        var handled = applyDOMChange(this.view, domChange);
        // The view wasn't updated but DOM/selection changes were seen. Reset the view.
        if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main))) this.view.update([]);
        return handled;
      }
    }, {
      key: "readMutation",
      value: function readMutation(rec) {
        var cView = this.view.docView.nearest(rec.target);
        if (!cView || cView.ignoreMutation(rec)) return null;
        cView.markDirty(rec.type == "attributes");
        if (rec.type == "attributes") cView.flags |= 4 /* ViewFlag.AttrsDirty */;
        if (rec.type == "childList") {
          var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
          var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
          return {
            from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
            to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
            typeOver: false
          };
        } else if (rec.type == "characterData") {
          return {
            from: cView.posAtStart,
            to: cView.posAtEnd,
            typeOver: rec.target.nodeValue == rec.oldValue
          };
        } else {
          return null;
        }
      }
    }, {
      key: "setWindow",
      value: function setWindow(win) {
        if (win != this.win) {
          this.removeWindowListeners(this.win);
          this.win = win;
          this.addWindowListeners(this.win);
        }
      }
    }, {
      key: "addWindowListeners",
      value: function addWindowListeners(win) {
        win.addEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.addEventListener) this.printQuery.addEventListener("change", this.onPrint);else this.printQuery.addListener(this.onPrint);
        } else win.addEventListener("beforeprint", this.onPrint);
        win.addEventListener("scroll", this.onScroll);
        win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
    }, {
      key: "removeWindowListeners",
      value: function removeWindowListeners(win) {
        win.removeEventListener("scroll", this.onScroll);
        win.removeEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.removeEventListener) this.printQuery.removeEventListener("change", this.onPrint);else this.printQuery.removeListener(this.onPrint);
        } else win.removeEventListener("beforeprint", this.onPrint);
        win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
    }, {
      key: "update",
      value: function update(_update7) {
        if (this.editContext) {
          this.editContext.update(_update7);
          if (_update7.startState.facet(editable) != _update7.state.facet(editable)) _update7.view.contentDOM.editContext = _update7.state.facet(editable) ? this.editContext.editContext : null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _a, _b, _c;
        this.stop();
        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
        var _iterator77 = _createForOfIteratorHelper(this.scrollTargets),
          _step77;
        try {
          for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
            var dom = _step77.value;
            dom.removeEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator77.e(err);
        } finally {
          _iterator77.f();
        }
        this.removeWindowListeners(this.win);
        clearTimeout(this.parentCheck);
        clearTimeout(this.resizeTimeout);
        this.win.cancelAnimationFrame(this.delayedFlush);
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        if (this.editContext) {
          this.view.contentDOM.editContext = null;
          this.editContext.destroy();
        }
      }
    }]);
  }();
  function findChild(cView, dom, dir) {
    while (dom) {
      var curView = ContentView.get(dom);
      if (curView && curView.parent == cView) return curView;
      var parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  function buildSelectionRangeFromRange(view, range) {
    var anchorNode = range.startContainer,
      anchorOffset = range.startOffset;
    var focusNode = range.endContainer,
      focusOffset = range.endOffset;
    var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    // Since such a range doesn't distinguish between anchor and head,
    // use a heuristic that flips it around if its end matches the
    // current anchor.
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
      var _ref1 = [focusNode, focusOffset, anchorNode, anchorOffset];
      anchorNode = _ref1[0];
      anchorOffset = _ref1[1];
      focusNode = _ref1[2];
      focusOffset = _ref1[3];
    }
    return {
      anchorNode: anchorNode,
      anchorOffset: anchorOffset,
      focusNode: focusNode,
      focusOffset: focusOffset
    };
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view, selection) {
    if (selection.getComposedRanges) {
      var range = selection.getComposedRanges(view.root)[0];
      if (range) return buildSelectionRangeFromRange(view, range);
    }
    var found = null;
    // Because Safari (at least in 2018-2021) doesn't provide regular
    // access to the selection inside a shadowroot, we have to perform a
    // ridiculous hack to get at it—using `execCommand` to trigger a
    // `beforeInput` event so that we can read the target range from the
    // event.
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  var EditContextManager = /*#__PURE__*/function () {
    function EditContextManager(view) {
      var _this42 = this;
      _classCallCheck(this, EditContextManager);
      // The document window for which the text in the context is
      // maintained. For large documents, this may be smaller than the
      // editor document. This window always includes the selection head.
      this.from = 0;
      this.to = 0;
      // When applying a transaction, this is used to compare the change
      // made to the context content to the change in the transaction in
      // order to make the minimal changes to the context (since touching
      // that sometimes breaks series of multiple edits made for a single
      // user action on some Android keyboards)
      this.pendingContextChange = null;
      this.handlers = Object.create(null);
      // Kludge to work around the fact that EditContext does not respond
      // well to having its content updated during a composition (see #1472)
      this.composing = null;
      this.resetRange(view.state);
      var context = this.editContext = new window.EditContext({
        text: view.state.doc.sliceString(this.from, this.to),
        selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
        selectionEnd: this.toContextPos(view.state.selection.main.head)
      });
      this.handlers.textupdate = function (e) {
        var main = view.state.selection.main,
          anchor = main.anchor,
          head = main.head;
        var from = _this42.toEditorPos(e.updateRangeStart),
          to = _this42.toEditorPos(e.updateRangeEnd);
        if (view.inputState.composing >= 0 && !_this42.composing) _this42.composing = {
          contextBase: e.updateRangeStart,
          editorBase: from,
          drifted: false
        };
        var change = {
          from: from,
          to: to,
          insert: Text.of(e.text.split("\n"))
        };
        // If the window doesn't include the anchor, assume changes
        // adjacent to a side go up to the anchor.
        if (change.from == _this42.from && anchor < _this42.from) change.from = anchor;else if (change.to == _this42.to && anchor > _this42.to) change.to = anchor;
        // Edit contexts sometimes fire empty changes
        if (change.from == change.to && !change.insert.length) {
          var newSel = EditorSelection.single(_this42.toEditorPos(e.selectionStart), _this42.toEditorPos(e.selectionEnd));
          if (!newSel.main.eq(main)) view.dispatch({
            selection: newSel,
            userEvent: "select"
          });
          return;
        }
        if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off") change = {
          from: from,
          to: to,
          insert: Text.of([e.text.replace(".", " ")])
        };
        _this42.pendingContextChange = change;
        if (!view.state.readOnly) {
          var newLen = _this42.to - _this42.from + (change.to - change.from + change.insert.length);
          applyDOMChangeInner(view, change, EditorSelection.single(_this42.toEditorPos(e.selectionStart, newLen), _this42.toEditorPos(e.selectionEnd, newLen)));
        }
        // If the transaction didn't flush our change, revert it so
        // that the context is in sync with the editor state again.
        if (_this42.pendingContextChange) {
          _this42.revertPending(view.state);
          _this42.setSelection(view.state);
        }
      };
      this.handlers.characterboundsupdate = function (e) {
        var rects = [],
          prev = null;
        for (var _i103 = _this42.toEditorPos(e.rangeStart), end = _this42.toEditorPos(e.rangeEnd); _i103 < end; _i103++) {
          var rect = view.coordsForChar(_i103);
          prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
          rects.push(prev);
        }
        context.updateCharacterBounds(e.rangeStart, rects);
      };
      this.handlers.textformatupdate = function (e) {
        var deco = [];
        var _iterator78 = _createForOfIteratorHelper(e.getTextFormats()),
          _step78;
        try {
          for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
            var format = _step78.value;
            var lineStyle = format.underlineStyle,
              thickness = format.underlineThickness;
            if (lineStyle != "None" && thickness != "None") {
              var from = _this42.toEditorPos(format.rangeStart),
                to = _this42.toEditorPos(format.rangeEnd);
              if (from < to) {
                var style = "text-decoration: underline ".concat(lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : "").concat(thickness == "Thin" ? 1 : 2, "px");
                deco.push(Decoration.mark({
                  attributes: {
                    style: style
                  }
                }).range(from, to));
              }
            }
          }
        } catch (err) {
          _iterator78.e(err);
        } finally {
          _iterator78.f();
        }
        view.dispatch({
          effects: setEditContextFormatting.of(Decoration.set(deco))
        });
      };
      this.handlers.compositionstart = function () {
        if (view.inputState.composing < 0) {
          view.inputState.composing = 0;
          view.inputState.compositionFirstChange = true;
        }
      };
      this.handlers.compositionend = function () {
        view.inputState.composing = -1;
        view.inputState.compositionFirstChange = null;
        if (_this42.composing) {
          var drifted = _this42.composing.drifted;
          _this42.composing = null;
          if (drifted) _this42.reset(view.state);
        }
      };
      for (var event in this.handlers) context.addEventListener(event, this.handlers[event]);
      this.measureReq = {
        read: function read(view) {
          _this42.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
          var sel = getSelection(view.root);
          if (sel && sel.rangeCount) _this42.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
        }
      };
    }
    return _createClass(EditContextManager, [{
      key: "applyEdits",
      value: function applyEdits(update) {
        var _this43 = this;
        var off = 0,
          abort = false,
          pending = this.pendingContextChange;
        update.changes.iterChanges(function (fromA, toA, _fromB, _toB, insert) {
          if (abort) return;
          var dLen = insert.length - (toA - fromA);
          if (pending && toA >= pending.to) {
            if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
              pending = _this43.pendingContextChange = null; // Match
              off += dLen;
              _this43.to += dLen;
              return;
            } else {
              // Mismatch, revert
              pending = null;
              _this43.revertPending(update.state);
            }
          }
          fromA += off;
          toA += off;
          if (toA <= _this43.from) {
            // Before the window
            _this43.from += dLen;
            _this43.to += dLen;
          } else if (fromA < _this43.to) {
            // Overlaps with window
            if (fromA < _this43.from || toA > _this43.to || _this43.to - _this43.from + insert.length > 30000 /* CxVp.MaxSize */) {
              abort = true;
              return;
            }
            _this43.editContext.updateText(_this43.toContextPos(fromA), _this43.toContextPos(toA), insert.toString());
            _this43.to += dLen;
          }
          off += dLen;
        });
        if (pending && !abort) this.revertPending(update.state);
        return !abort;
      }
    }, {
      key: "update",
      value: function update(_update8) {
        var _this44 = this;
        var reverted = this.pendingContextChange,
          startSel = _update8.startState.selection.main;
        if (this.composing && (this.composing.drifted || !_update8.changes.touchesRange(startSel.from, startSel.to) && _update8.transactions.some(function (tr) {
          return !tr.isUserEvent("input.type") && tr.changes.touchesRange(_this44.from, _this44.to);
        }))) {
          this.composing.drifted = true;
          this.composing.editorBase = _update8.changes.mapPos(this.composing.editorBase);
        } else if (!this.applyEdits(_update8) || !this.rangeIsValid(_update8.state)) {
          this.pendingContextChange = null;
          this.reset(_update8.state);
        } else if (_update8.docChanged || _update8.selectionSet || reverted) {
          this.setSelection(_update8.state);
        }
        if (_update8.geometryChanged || _update8.docChanged || _update8.selectionSet) _update8.view.requestMeasure(this.measureReq);
      }
    }, {
      key: "resetRange",
      value: function resetRange(state) {
        var head = state.selection.main.head;
        this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
        this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
      }
    }, {
      key: "reset",
      value: function reset(state) {
        this.resetRange(state);
        this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
        this.setSelection(state);
      }
    }, {
      key: "revertPending",
      value: function revertPending(state) {
        var pending = this.pendingContextChange;
        this.pendingContextChange = null;
        this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
    }, {
      key: "setSelection",
      value: function setSelection(state) {
        var main = state.selection.main;
        var start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
        var end = this.toContextPos(main.head);
        if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end) this.editContext.updateSelection(start, end);
      }
    }, {
      key: "rangeIsValid",
      value: function rangeIsValid(state) {
        var head = state.selection.main.head;
        return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ || this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ || this.to - this.from > 10000 /* CxVp.Margin */ * 3);
      }
    }, {
      key: "toEditorPos",
      value: function toEditorPos(contextPos) {
        var clipLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.to - this.from;
        contextPos = Math.min(contextPos, clipLen);
        var c = this.composing;
        return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
      }
    }, {
      key: "toContextPos",
      value: function toContextPos(editorPos) {
        var c = this.composing;
        return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        for (var event in this.handlers) this.editContext.removeEventListener(event, this.handlers[event]);
      }
    }]);
  }(); // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  var EditorView = /*#__PURE__*/function () {
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    function EditorView() {
      var _this45 = this;
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, EditorView);
      var _a;
      this.plugins = [];
      this.pluginMap = new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      /**
      @internal
      */
      this.updateState = 2 /* UpdateState.Updating */;
      /**
      @internal
      */
      this.measureScheduled = -1;
      /**
      @internal
      */
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.className = "cm-announced";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      if (config.parent) config.parent.appendChild(this.dom);
      var dispatch = config.dispatch;
      this.dispatchTransactions = config.dispatchTransactions || dispatch && function (trs) {
        return trs.forEach(function (tr) {
          return dispatch(tr, _this45);
        });
      } || function (trs) {
        return _this45.update(trs);
      };
      this.dispatch = this.dispatch.bind(this);
      this._root = config.root || getRoot(config.parent) || document;
      this.viewState = new ViewState(config.state || EditorState.create(config));
      if (config.scrollTo && config.scrollTo.is(scrollIntoView$1)) this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
      this.plugins = this.state.facet(viewPlugin).map(function (spec) {
        return new PluginInstance(spec);
      });
      var _iterator79 = _createForOfIteratorHelper(this.plugins),
        _step79;
      try {
        for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
          var plugin = _step79.value;
          plugin.update(this);
        }
      } catch (err) {
        _iterator79.e(err);
      } finally {
        _iterator79.f();
      }
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0 /* UpdateState.Idle */;
      this.requestMeasure();
      if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready) document.fonts.ready.then(function () {
        return _this45.requestMeasure();
      });
    }
    return _createClass(EditorView, [{
      key: "state",
      get:
      /**
      The current editor state.
      */
      function get() {
        return this.viewState.state;
      }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
    }, {
      key: "viewport",
      get: function get() {
        return this.viewState.viewport;
      }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
    }, {
      key: "visibleRanges",
      get: function get() {
        return this.viewState.visibleRanges;
      }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
    }, {
      key: "inView",
      get: function get() {
        return this.viewState.inView;
      }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
    }, {
      key: "composing",
      get: function get() {
        return !!this.inputState && this.inputState.composing > 0;
      }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
    }, {
      key: "compositionStarted",
      get: function get() {
        return !!this.inputState && this.inputState.composing >= 0;
      }
      /**
      The document or shadow root that the view lives in.
      */
    }, {
      key: "root",
      get: function get() {
        return this._root;
      }
      /**
      @internal
      */
    }, {
      key: "win",
      get: function get() {
        return this.dom.ownerDocument.defaultView || window;
      }
    }, {
      key: "dispatch",
      value: function dispatch() {
        var _this$state;
        for (var _len6 = arguments.length, input = new Array(_len6), _key4 = 0; _key4 < _len6; _key4++) {
          input[_key4] = arguments[_key4];
        }
        var trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [(_this$state = this.state).update.apply(_this$state, input)];
        this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
    }, {
      key: "update",
      value: function update(transactions) {
        var _this46 = this;
        if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
        var redrawn = false,
          attrsChanged = false,
          update;
        var state = this.state;
        var _iterator80 = _createForOfIteratorHelper(transactions),
          _step80;
        try {
          for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
            var _tr = _step80.value;
            if (_tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
            state = _tr.state;
          }
        } catch (err) {
          _iterator80.e(err);
        } finally {
          _iterator80.f();
        }
        if (this.destroyed) {
          this.viewState.state = state;
          return;
        }
        var focus = this.hasFocus,
          focusFlag = 0,
          dispatchFocus = null;
        if (transactions.some(function (tr) {
          return tr.annotation(isFocusChange);
        })) {
          this.inputState.notifiedFocused = focus;
          // If a focus-change transaction is being dispatched, set this update flag.
          focusFlag = 1 /* UpdateFlag.Focus */;
        } else if (focus != this.inputState.notifiedFocused) {
          this.inputState.notifiedFocused = focus;
          // Schedule a separate focus transaction if necessary, otherwise
          // add a flag to this update
          dispatchFocus = focusChangeTransaction(state, focus);
          if (!dispatchFocus) focusFlag = 1 /* UpdateFlag.Focus */;
        }
        // If there was a pending DOM change, eagerly read it and try to
        // apply it after the given transactions.
        var pendingKey = this.observer.delayedAndroidKey,
          domChange = null;
        if (pendingKey) {
          this.observer.clearDelayedAndroidKey();
          domChange = this.observer.readChange();
          // Only try to apply DOM changes if the transactions didn't
          // change the doc or selection.
          if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;
        } else {
          this.observer.clear();
        }
        // When the phrases change, redraw the editor
        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases)) return this.setState(state);
        update = ViewUpdate.create(this, state, transactions);
        update.flags |= focusFlag;
        var scrollTarget = this.viewState.scrollTarget;
        try {
          this.updateState = 2 /* UpdateState.Updating */;
          var _iterator81 = _createForOfIteratorHelper(transactions),
            _step81;
          try {
            for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
              var tr = _step81.value;
              if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);
              if (tr.scrollIntoView) {
                var main = tr.state.selection.main;
                scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
              }
              var _iterator82 = _createForOfIteratorHelper(tr.effects),
                _step82;
              try {
                for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                  var e = _step82.value;
                  if (e.is(scrollIntoView$1)) scrollTarget = e.value.clip(this.state);
                }
              } catch (err) {
                _iterator82.e(err);
              } finally {
                _iterator82.f();
              }
            }
          } catch (err) {
            _iterator81.e(err);
          } finally {
            _iterator81.f();
          }
          this.viewState.update(update, scrollTarget);
          this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
          }
          redrawn = this.docView.update(update);
          if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
          attrsChanged = this.updateAttrs();
          this.showAnnouncements(transactions);
          this.docView.updateSelection(redrawn, transactions.some(function (tr) {
            return tr.isUserEvent("select.pointer");
          }));
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
        }
        if (update.startState.facet(_theme) != update.state.facet(_theme)) this.viewState.mustMeasureContent = true;
        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
        if (redrawn) this.docViewUpdate();
        if (!update.empty) {
          var _iterator83 = _createForOfIteratorHelper(this.state.facet(updateListener)),
            _step83;
          try {
            for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
              var listener = _step83.value;
              try {
                listener(update);
              } catch (e) {
                logException(this.state, e, "update listener");
              }
            }
          } catch (err) {
            _iterator83.e(err);
          } finally {
            _iterator83.f();
          }
        }
        if (dispatchFocus || domChange) Promise.resolve().then(function () {
          if (dispatchFocus && _this46.state == dispatchFocus.startState) _this46.dispatch(dispatchFocus);
          if (domChange) {
            if (!applyDOMChange(_this46, domChange) && pendingKey.force) dispatchKey(_this46.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
        });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
    }, {
      key: "setState",
      value: function setState(newState) {
        if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
        if (this.destroyed) {
          this.viewState.state = newState;
          return;
        }
        this.updateState = 2 /* UpdateState.Updating */;
        var hadFocus = this.hasFocus;
        try {
          var _iterator84 = _createForOfIteratorHelper(this.plugins),
            _step84;
          try {
            for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
              var plugin = _step84.value;
              plugin.destroy(this);
            }
          } catch (err) {
            _iterator84.e(err);
          } finally {
            _iterator84.f();
          }
          this.viewState = new ViewState(newState);
          this.plugins = newState.facet(viewPlugin).map(function (spec) {
            return new PluginInstance(spec);
          });
          this.pluginMap.clear();
          var _iterator85 = _createForOfIteratorHelper(this.plugins),
            _step85;
          try {
            for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
              var _plugin3 = _step85.value;
              _plugin3.update(this);
            }
          } catch (err) {
            _iterator85.e(err);
          } finally {
            _iterator85.f();
          }
          this.docView.destroy();
          this.docView = new DocView(this);
          this.inputState.ensureHandlers(this.plugins);
          this.mountStyles();
          this.updateAttrs();
          this.bidiCache = [];
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
        }
        if (hadFocus) this.focus();
        this.requestMeasure();
      }
    }, {
      key: "updatePlugins",
      value: function updatePlugins(update) {
        var prevSpecs = update.startState.facet(viewPlugin),
          specs = update.state.facet(viewPlugin);
        if (prevSpecs != specs) {
          var newPlugins = [];
          var _iterator86 = _createForOfIteratorHelper(specs),
            _step86;
          try {
            for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
              var spec = _step86.value;
              var found = prevSpecs.indexOf(spec);
              if (found < 0) {
                newPlugins.push(new PluginInstance(spec));
              } else {
                var plugin = this.plugins[found];
                plugin.mustUpdate = update;
                newPlugins.push(plugin);
              }
            }
          } catch (err) {
            _iterator86.e(err);
          } finally {
            _iterator86.f();
          }
          var _iterator87 = _createForOfIteratorHelper(this.plugins),
            _step87;
          try {
            for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
              var _plugin4 = _step87.value;
              if (_plugin4.mustUpdate != update) _plugin4.destroy(this);
            }
          } catch (err) {
            _iterator87.e(err);
          } finally {
            _iterator87.f();
          }
          this.plugins = newPlugins;
          this.pluginMap.clear();
        } else {
          var _iterator88 = _createForOfIteratorHelper(this.plugins),
            _step88;
          try {
            for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
              var _p = _step88.value;
              _p.mustUpdate = update;
            }
          } catch (err) {
            _iterator88.e(err);
          } finally {
            _iterator88.f();
          }
        }
        for (var _i104 = 0; _i104 < this.plugins.length; _i104++) this.plugins[_i104].update(this);
        if (prevSpecs != specs) this.inputState.ensureHandlers(this.plugins);
      }
    }, {
      key: "docViewUpdate",
      value: function docViewUpdate() {
        var _iterator89 = _createForOfIteratorHelper(this.plugins),
          _step89;
        try {
          for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
            var plugin = _step89.value;
            var val = plugin.value;
            if (val && val.docViewUpdate) {
              try {
                val.docViewUpdate(this);
              } catch (e) {
                logException(this.state, e, "doc view update listener");
              }
            }
          }
        } catch (err) {
          _iterator89.e(err);
        } finally {
          _iterator89.f();
        }
      }
      /**
      @internal
      */
    }, {
      key: "measure",
      value: function measure() {
        var _this47 = this;
        var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (this.destroyed) return;
        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
        if (this.observer.delayedAndroidKey) {
          this.measureScheduled = -1;
          this.requestMeasure();
          return;
        }
        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
        if (flush) this.observer.forceFlush();
        var updated = null;
        var sDOM = this.scrollDOM,
          scrollTop = sDOM.scrollTop * this.scaleY;
        var _this$viewState = this.viewState,
          scrollAnchorPos = _this$viewState.scrollAnchorPos,
          scrollAnchorHeight = _this$viewState.scrollAnchorHeight;
        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1) scrollAnchorHeight = -1;
        this.viewState.scrollAnchorHeight = -1;
        try {
          for (var _i105 = 0;; _i105++) {
            if (scrollAnchorHeight < 0) {
              if (isScrolledToBottom(sDOM)) {
                scrollAnchorPos = -1;
                scrollAnchorHeight = this.viewState.heightMap.height;
              } else {
                var block = this.viewState.scrollAnchorAt(scrollTop);
                scrollAnchorPos = block.from;
                scrollAnchorHeight = block.top;
              }
            }
            this.updateState = 1 /* UpdateState.Measuring */;
            var changed = this.viewState.measure(this);
            if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
            if (_i105 > 5) {
              console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
              break;
            }
            var measuring = [];
            // Only run measure requests in this cycle when the viewport didn't change
            if (!(changed & 4 /* UpdateFlag.Viewport */)) {
              var _ref10 = [measuring, this.measureRequests];
              this.measureRequests = _ref10[0];
              measuring = _ref10[1];
            }
            var measured = measuring.map(function (m) {
              try {
                return m.read(_this47);
              } catch (e) {
                logException(_this47.state, e);
                return BadMeasure;
              }
            });
            var update = ViewUpdate.create(this, this.state, []),
              redrawn = false;
            update.flags |= changed;
            if (!updated) updated = update;else updated.flags |= changed;
            this.updateState = 2 /* UpdateState.Updating */;
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
              this.updateAttrs();
              redrawn = this.docView.update(update);
              if (redrawn) this.docViewUpdate();
            }
            for (var _i106 = 0; _i106 < measuring.length; _i106++) if (measured[_i106] != BadMeasure) {
              try {
                var m = measuring[_i106];
                if (m.write) m.write(measured[_i106], this);
              } catch (e) {
                logException(this.state, e);
              }
            }
            if (redrawn) this.docView.updateSelection(true);
            if (!update.viewportChanged && this.measureRequests.length == 0) {
              if (this.viewState.editorHeight) {
                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                  scrollAnchorHeight = -1;
                  continue;
                } else {
                  var newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                  var diff = newAnchorHeight - scrollAnchorHeight;
                  if (diff > 1 || diff < -1) {
                    scrollTop = scrollTop + diff;
                    sDOM.scrollTop = scrollTop / this.scaleY;
                    scrollAnchorHeight = -1;
                    continue;
                  }
                }
              }
              break;
            }
          }
        } finally {
          this.updateState = 0 /* UpdateState.Idle */;
          this.measureScheduled = -1;
        }
        if (updated && !updated.empty) {
          var _iterator90 = _createForOfIteratorHelper(this.state.facet(updateListener)),
            _step90;
          try {
            for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
              var listener = _step90.value;
              listener(updated);
            }
          } catch (err) {
            _iterator90.e(err);
          } finally {
            _iterator90.f();
          }
        }
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
    }, {
      key: "themeClasses",
      get: function get() {
        return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
      }
    }, {
      key: "updateAttrs",
      value: function updateAttrs() {
        var _this48 = this;
        var editorAttrs = attrsFromFacet(this, editorAttributes, {
          "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
        });
        var contentAttrs = {
          spellcheck: "false",
          autocorrect: "off",
          autocapitalize: "off",
          writingsuggestions: "false",
          translate: "no",
          contenteditable: !this.state.facet(editable) ? "false" : "true",
          "class": "cm-content",
          style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
          role: "textbox",
          "aria-multiline": "true"
        };
        if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
        attrsFromFacet(this, contentAttributes, contentAttrs);
        var changed = this.observer.ignore(function () {
          var changedContent = _updateAttrs(_this48.contentDOM, _this48.contentAttrs, contentAttrs);
          var changedEditor = _updateAttrs(_this48.dom, _this48.editorAttrs, editorAttrs);
          return changedContent || changedEditor;
        });
        this.editorAttrs = editorAttrs;
        this.contentAttrs = contentAttrs;
        return changed;
      }
    }, {
      key: "showAnnouncements",
      value: function showAnnouncements(trs) {
        var first = true;
        var _iterator91 = _createForOfIteratorHelper(trs),
          _step91;
        try {
          for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
            var tr = _step91.value;
            var _iterator92 = _createForOfIteratorHelper(tr.effects),
              _step92;
            try {
              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                var effect = _step92.value;
                if (effect.is(EditorView.announce)) {
                  if (first) this.announceDOM.textContent = "";
                  first = false;
                  var div = this.announceDOM.appendChild(document.createElement("div"));
                  div.textContent = effect.value;
                }
              }
            } catch (err) {
              _iterator92.e(err);
            } finally {
              _iterator92.f();
            }
          }
        } catch (err) {
          _iterator91.e(err);
        } finally {
          _iterator91.f();
        }
      }
    }, {
      key: "mountStyles",
      value: function mountStyles() {
        this.styleModules = this.state.facet(styleModule);
        var nonce = this.state.facet(EditorView.cspNonce);
        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse(), nonce ? {
          nonce: nonce
        } : undefined);
      }
    }, {
      key: "readMeasured",
      value: function readMeasured() {
        if (this.updateState == 2 /* UpdateState.Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
        if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1) this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
    }, {
      key: "requestMeasure",
      value: function requestMeasure(request) {
        var _this49 = this;
        if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(function () {
          return _this49.measure();
        });
        if (request) {
          if (this.measureRequests.indexOf(request) > -1) return;
          if (request.key != null) for (var _i107 = 0; _i107 < this.measureRequests.length; _i107++) {
            if (this.measureRequests[_i107].key === request.key) {
              this.measureRequests[_i107] = request;
              return;
            }
          }
          this.measureRequests.push(request);
        }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
    }, {
      key: "plugin",
      value: function plugin(_plugin2) {
        var known = this.pluginMap.get(_plugin2);
        if (known === undefined || known && known.plugin != _plugin2) this.pluginMap.set(_plugin2, known = this.plugins.find(function (p) {
          return p.plugin == _plugin2;
        }) || null);
        return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
    }, {
      key: "documentTop",
      get: function get() {
        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
    }, {
      key: "documentPadding",
      get: function get() {
        return {
          top: this.viewState.paddingTop,
          bottom: this.viewState.paddingBottom
        };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
    }, {
      key: "scaleX",
      get: function get() {
        return this.viewState.scaleX;
      }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
    }, {
      key: "scaleY",
      get: function get() {
        return this.viewState.scaleY;
      }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
    }, {
      key: "elementAtHeight",
      value: function elementAtHeight(height) {
        this.readMeasured();
        return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
    }, {
      key: "lineBlockAtHeight",
      value: function lineBlockAtHeight(height) {
        this.readMeasured();
        return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
    }, {
      key: "viewportLineBlocks",
      get: function get() {
        return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
    }, {
      key: "lineBlockAt",
      value: function lineBlockAt(pos) {
        return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
    }, {
      key: "contentHeight",
      get: function get() {
        return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
    }, {
      key: "moveByChar",
      value: function moveByChar(start, forward, by) {
        return skipAtoms(this, start, _moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
    }, {
      key: "moveByGroup",
      value: function moveByGroup(start, forward) {
        var _this50 = this;
        return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
          return byGroup(_this50, start.head, initial);
        }));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
    }, {
      key: "visualLineSide",
      value: function visualLineSide(line, end) {
        var order = this.bidiSpans(line),
          dir = this.textDirectionAt(line.from);
        var span = order[end ? order.length - 1 : 0];
        return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
    }, {
      key: "moveToLineBoundary",
      value: function moveToLineBoundary(start, forward) {
        var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return _moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
    }, {
      key: "moveVertically",
      value: function moveVertically(start, forward, distance) {
        return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
    }, {
      key: "domAtPos",
      value: function domAtPos(pos) {
        return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
    }, {
      key: "posAtDOM",
      value: function posAtDOM(node) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.docView.posFromDOM(node, offset);
      }
    }, {
      key: "posAtCoords",
      value: function posAtCoords(coords) {
        var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.readMeasured();
        return _posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
    }, {
      key: "coordsAtPos",
      value: function coordsAtPos(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        this.readMeasured();
        var rect = this.docView.coordsAt(pos, side);
        if (!rect || rect.left == rect.right) return rect;
        var line = this.state.doc.lineAt(pos),
          order = this.bidiSpans(line);
        var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
        return flattenRect(rect, span.dir == Direction.LTR == side > 0);
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
    }, {
      key: "coordsForChar",
      value: function coordsForChar(pos) {
        this.readMeasured();
        return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
    }, {
      key: "defaultCharacterWidth",
      get: function get() {
        return this.viewState.heightOracle.charWidth;
      }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
    }, {
      key: "defaultLineHeight",
      get: function get() {
        return this.viewState.heightOracle.lineHeight;
      }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
    }, {
      key: "textDirection",
      get: function get() {
        return this.viewState.defaultTextDirection;
      }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
    }, {
      key: "textDirectionAt",
      value: function textDirectionAt(pos) {
        var perLine = this.state.facet(perLineTextDirection);
        if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
        this.readMeasured();
        return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
    }, {
      key: "lineWrapping",
      get: function get() {
        return this.viewState.heightOracle.lineWrapping;
      }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
    }, {
      key: "bidiSpans",
      value: function bidiSpans(line) {
        if (line.length > MaxBidiLine) return trivialOrder(line.length);
        var dir = this.textDirectionAt(line.from),
          isolates;
        var _iterator93 = _createForOfIteratorHelper(this.bidiCache),
          _step93;
        try {
          for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
            var entry = _step93.value;
            if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line)))) return entry.order;
          }
        } catch (err) {
          _iterator93.e(err);
        } finally {
          _iterator93.f();
        }
        if (!isolates) isolates = getIsolatedRanges(this, line);
        var order = computeOrder(line.text, dir, isolates);
        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
        return order;
      }
      /**
      Check whether the editor has focus.
      */
    }, {
      key: "hasFocus",
      get: function get() {
        var _a;
        // Safari return false for hasFocus when the context menu is open
        // or closing, which leads us to ignore selection changes from the
        // context menu because it looks like the editor isn't focused.
        // This kludges around that.
        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
    }, {
      key: "focus",
      value: function focus() {
        var _this51 = this;
        this.observer.ignore(function () {
          focusPreventScroll(_this51.contentDOM);
          _this51.docView.updateSelection();
        });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
    }, {
      key: "setRoot",
      value: function setRoot(root) {
        if (this._root != root) {
          this._root = root;
          this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
          this.mountStyles();
        }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.root.activeElement == this.contentDOM) this.contentDOM.blur();
        var _iterator94 = _createForOfIteratorHelper(this.plugins),
          _step94;
        try {
          for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
            var plugin = _step94.value;
            plugin.destroy(this);
          }
        } catch (err) {
          _iterator94.e(err);
        } finally {
          _iterator94.f();
        }
        this.plugins = [];
        this.inputState.destroy();
        this.docView.destroy();
        this.dom.remove();
        this.observer.destroy();
        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);
        this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
    }, {
      key: "scrollSnapshot",
      value:
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      function scrollSnapshot() {
        var _this$scrollDOM = this.scrollDOM,
          scrollTop = _this$scrollDOM.scrollTop,
          scrollLeft = _this$scrollDOM.scrollLeft;
        var ref = this.viewState.scrollAnchorAt(scrollTop);
        return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
    }, {
      key: "setTabFocusMode",
      value: function setTabFocusMode(to) {
        if (to == null) this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;else if (typeof to == "boolean") this.inputState.tabFocusMode = to ? 0 : -1;else if (this.inputState.tabFocusMode != 0) this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
    }], [{
      key: "scrollIntoView",
      value: function scrollIntoView(pos) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
    }, {
      key: "domEventHandlers",
      value: function domEventHandlers(handlers) {
        return ViewPlugin.define(function () {
          return {};
        }, {
          eventHandlers: handlers
        });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
    }, {
      key: "domEventObservers",
      value: function domEventObservers(observers) {
        return ViewPlugin.define(function () {
          return {};
        }, {
          eventObservers: observers
        });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
    }, {
      key: "theme",
      value: function theme(spec, options) {
        var prefix = StyleModule.newName();
        var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
        if (options && options.dark) result.push(darkTheme.of(true));
        return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
    }, {
      key: "baseTheme",
      value: function baseTheme(spec) {
        return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
    }, {
      key: "findFromDOM",
      value: function findFromDOM(dom) {
        var _a;
        var content = dom.querySelector(".cm-content");
        var cView = content && ContentView.get(content) || ContentView.get(dom);
        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
    }]);
  }();
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.
   The `insert` argument can be used to get the default transaction
  that would be applied for this input. This can be useful when
  dispatching the custom behavior as a separate transaction.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  Functions provided in this facet will be used to transform text
  pasted or dropped into the editor.
  */
  EditorView.clipboardInputFilter = clipboardInputFilter;
  /**
  Transform text copied or dragged from the editor.
  */
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  /**
  Scroll handlers can override how things are scrolled into view.
  If they return `true`, no further handling happens for the
  scrolling. If they return false, the default scroll behavior is
  applied. Scroll handlers should never initiate editor updates.
  */
  EditorView.scrollHandler = scrollHandler;
  /**
  This facet can be used to provide functions that create effects
  to be dispatched when the editor's focus state changes.
  */
  EditorView.focusChangeEffect = focusChangeEffect;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.
   Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.
   If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Facet that works much like
  [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
  inputs at the very bottom of the precedence stack, meaning mark
  decorations provided here will only be split by other, partially
  overlapping \`outerDecorations\` ranges, and wrap around all
  regular decorations. Use this for mark elements that should, as
  much as possible, remain in one piece.
  */
  EditorView.outerDecorations = outerDecorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  When range decorations add a `unicode-bidi: isolate` style, they
  should also include a
  [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
  in their decoration spec, and be exposed through this facet, so
  that the editor can compute the proper text order. (Other values
  for `unicode-bidi`, except of course `normal`, are not
  supported.)
  */
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Provides a Content Security Policy nonce to use when creating
  the style sheets for the editor. Holds the empty string when no
  nonce has been provided.
  */
  EditorView.cspNonce = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? values[0] : "";
    }
  });
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
    "class": "cm-lineWrapping"
  });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  var MaxBidiLine = 4096;
  var BadMeasure = {};
  var CachedOrder = /*#__PURE__*/function () {
    function CachedOrder(from, to, dir, isolates, fresh, order) {
      _classCallCheck(this, CachedOrder);
      this.from = from;
      this.to = to;
      this.dir = dir;
      this.isolates = isolates;
      this.fresh = fresh;
      this.order = order;
    }
    return _createClass(CachedOrder, null, [{
      key: "update",
      value: function update(cache, changes) {
        if (changes.empty && !cache.some(function (c) {
          return c.fresh;
        })) return cache;
        var result = [],
          lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
        for (var _i108 = Math.max(0, cache.length - 10); _i108 < cache.length; _i108++) {
          var entry = cache[_i108];
          if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
        }
        return result;
      }
    }]);
  }();
  function attrsFromFacet(view, facet, base) {
    for (var sources = view.state.facet(facet), _i109 = sources.length - 1; _i109 >= 0; _i109--) {
      var source = sources[_i109],
        value = typeof source == "function" ? source(view) : source;
      if (value) combineAttrs(value, base);
    }
    return base;
  }
  var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
    var parts = name.split(/-(?!$)/);
    var result = parts[parts.length - 1];
    if (result == "Space") result = " ";
    var alt, ctrl, shift, meta;
    for (var _i110 = 0; _i110 < parts.length - 1; ++_i110) {
      var mod = parts[_i110];
      if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
        if (platform == "mac") meta = true;else ctrl = true;
      } else throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt) result = "Alt-" + result;
    if (ctrl) result = "Ctrl-" + result;
    if (meta) result = "Meta-" + result;
    if (shift) result = "Shift-" + result;
    return result;
  }
  function modifiers(name, event, shift) {
    if (event.altKey) name = "Alt-" + name;
    if (event.ctrlKey) name = "Ctrl-" + name;
    if (event.metaKey) name = "Meta-" + name;
    if (shift !== false && event.shiftKey) name = "Shift-" + name;
    return name;
  }
  var handleKeyEvents = /*@__PURE__*/Prec["default"](/*@__PURE__*/EditorView.domEventHandlers({
    keydown: function keydown(event, view) {
      return runHandlers(getKeymap(view.state), event, view, "editor");
    }
  }));
  /**
  Facet used for registering keymaps.
   You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  var keymap = /*@__PURE__*/Facet.define({
    enables: handleKeyEvents
  });
  var Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
    var bindings = state.facet(keymap);
    var map = Keymaps.get(bindings);
    if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
      return a.concat(b);
    }, [])));
    return map;
  }
  var storedPrefix = null;
  var PrefixTimeout = 4000;
  function buildKeymap(bindings) {
    var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
    var bound = Object.create(null);
    var isPrefix = Object.create(null);
    var checkPrefix = function checkPrefix(name, is) {
      var current = isPrefix[name];
      if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
    };
    var add = function add(scope, key, command, preventDefault, stopPropagation) {
      var _a, _b;
      var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
      var parts = key.split(/ (?!$)/).map(function (k) {
        return normalizeKeyName(k, platform);
      });
      var _loop8 = function _loop8() {
        var prefix = parts.slice(0, _i111).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix]) scopeObj[prefix] = {
          preventDefault: true,
          stopPropagation: false,
          run: [function (view) {
            var ourObj = storedPrefix = {
              view: view,
              prefix: prefix,
              scope: scope
            };
            setTimeout(function () {
              if (storedPrefix == ourObj) storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
      };
      for (var _i111 = 1; _i111 < parts.length; _i111++) {
        _loop8();
      }
      var full = parts.join(" ");
      checkPrefix(full, false);
      var binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        stopPropagation: false,
        run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command) binding.run.push(command);
      if (preventDefault) binding.preventDefault = true;
      if (stopPropagation) binding.stopPropagation = true;
    };
    var _iterator95 = _createForOfIteratorHelper(bindings),
      _step95;
    try {
      for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
        var b = _step95.value;
        var scopes = b.scope ? b.scope.split(" ") : ["editor"];
        if (b.any) {
          var _iterator96 = _createForOfIteratorHelper(scopes),
            _step96;
          try {
            var _loop9 = function _loop9() {
              var scope = _step96.value;
              var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
              if (!scopeObj._any) scopeObj._any = {
                preventDefault: false,
                stopPropagation: false,
                run: []
              };
              var any = b.any;
              for (var key in scopeObj) scopeObj[key].run.push(function (view) {
                return any(view, currentKeyEvent);
              });
            };
            for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
              _loop9();
            }
          } catch (err) {
            _iterator96.e(err);
          } finally {
            _iterator96.f();
          }
        }
        var _name5 = b[platform] || b.key;
        if (!_name5) continue;
        var _iterator97 = _createForOfIteratorHelper(scopes),
          _step97;
        try {
          for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
            var scope = _step97.value;
            add(scope, _name5, b.run, b.preventDefault, b.stopPropagation);
            if (b.shift) add(scope, "Shift-" + _name5, b.shift, b.preventDefault, b.stopPropagation);
          }
        } catch (err) {
          _iterator97.e(err);
        } finally {
          _iterator97.f();
        }
      }
    } catch (err) {
      _iterator95.e(err);
    } finally {
      _iterator95.f();
    }
    return bound;
  }
  var currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
    currentKeyEvent = event;
    var name = keyName(event);
    var charCode = codePointAt(name, 0),
      isChar = codePointSize(charCode) == name.length && name != " ";
    var prefix = "",
      handled = false,
      prevented = false,
      stopPropagation = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (modifierCodes.indexOf(event.keyCode) < 0) {
        prevented = true;
        storedPrefix = null;
      }
    }
    var ran = new Set();
    var runFor = function runFor(binding) {
      if (binding) {
        var _iterator98 = _createForOfIteratorHelper(binding.run),
          _step98;
        try {
          for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
            var _cmd = _step98.value;
            if (!ran.has(_cmd)) {
              ran.add(_cmd);
              if (_cmd(view)) {
                if (binding.stopPropagation) stopPropagation = true;
                return true;
              }
            }
          }
        } catch (err) {
          _iterator98.e(err);
        } finally {
          _iterator98.f();
        }
        if (binding.preventDefault) {
          if (binding.stopPropagation) stopPropagation = true;
          prevented = true;
        }
      }
      return false;
    };
    var scopeObj = map[scope],
      baseName,
      shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
        handled = true;
      } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
      // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) &&
      // Alt-combinations on macOS tend to be typed characters
      !(browser.mac && event.altKey && !event.ctrlKey) && (baseName = base[event.keyCode]) && baseName != name) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
          handled = true;
        } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
          handled = true;
        }
      } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name, event, true)])) {
        handled = true;
      }
      if (!handled && runFor(scopeObj._any)) handled = true;
    }
    if (prevented) handled = true;
    if (handled && stopPropagation) event.stopPropagation();
    currentKeyEvent = null;
    return handled;
  }

  /**
  Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
  a rectangle at a given set of coordinates.
  */
  var RectangleMarker = /*#__PURE__*/function () {
    /**
    Create a marker with the given class and dimensions. If `width`
    is null, the DOM element will get no width style.
    */
    function RectangleMarker(className,
    /**
    The left position of the marker (in pixels, document-relative).
    */
    left,
    /**
    The top position of the marker.
    */
    top,
    /**
    The width of the marker, or null if it shouldn't get a width assigned.
    */
    width,
    /**
    The height of the marker.
    */
    height) {
      _classCallCheck(this, RectangleMarker);
      this.className = className;
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
    }
    return _createClass(RectangleMarker, [{
      key: "draw",
      value: function draw() {
        var elt = document.createElement("div");
        elt.className = this.className;
        this.adjust(elt);
        return elt;
      }
    }, {
      key: "update",
      value: function update(elt, prev) {
        if (prev.className != this.className) return false;
        this.adjust(elt);
        return true;
      }
    }, {
      key: "adjust",
      value: function adjust(elt) {
        elt.style.left = this.left + "px";
        elt.style.top = this.top + "px";
        if (this.width != null) elt.style.width = this.width + "px";
        elt.style.height = this.height + "px";
      }
    }, {
      key: "eq",
      value: function eq(p) {
        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
    }], [{
      key: "forRange",
      value: function forRange(view, className, range) {
        if (range.empty) {
          var pos = view.coordsAtPos(range.head, range.assoc || 1);
          if (!pos) return [];
          var _base3 = getBase(view);
          return [new RectangleMarker(className, pos.left - _base3.left, pos.top - _base3.top, null, pos.bottom - pos.top)];
        } else {
          return rectanglesForRange(view, className, range);
        }
      }
    }]);
  }();
  function getBase(view) {
    var rect = view.scrollDOM.getBoundingClientRect();
    var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
    return {
      left: left - view.scrollDOM.scrollLeft * view.scaleX,
      top: rect.top - view.scrollDOM.scrollTop * view.scaleY
    };
  }
  function wrappedLine(view, pos, side, inside) {
    var coords = view.coordsAtPos(pos, side * 2);
    if (!coords) return inside;
    var editorRect = view.dom.getBoundingClientRect();
    var y = (coords.top + coords.bottom) / 2;
    var left = view.posAtCoords({
      x: editorRect.left + 1,
      y: y
    });
    var right = view.posAtCoords({
      x: editorRect.right - 1,
      y: y
    });
    if (left == null || right == null) return inside;
    return {
      from: Math.max(inside.from, Math.min(left, right)),
      to: Math.min(inside.to, Math.max(left, right))
    };
  }
  function rectanglesForRange(view, className, range) {
    if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
    var from = Math.max(range.from, view.viewport.from),
      to = Math.min(range.to, view.viewport.to);
    var ltr = view.textDirection == Direction.LTR;
    var content = view.contentDOM,
      contentRect = content.getBoundingClientRect(),
      base = getBase(view);
    var lineElt = content.querySelector(".cm-line"),
      lineStyle = lineElt && window.getComputedStyle(lineElt);
    var leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
    var rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
    var startBlock = blockAt(view, from, 1),
      endBlock = blockAt(view, to, -1);
    var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
    var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks)) visualStart = wrappedLine(view, from, 1, visualStart);
    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks)) visualEnd = wrappedLine(view, to, -1, visualEnd);
    if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
      return pieces(drawForLine(range.from, range.to, visualStart));
    } else {
      var _top7 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
      var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
      var between = [];
      if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && _top7.bottom + view.defaultLineHeight / 2 < bottom.top) between.push(piece(leftSide, _top7.bottom, rightSide, bottom.top));else if (_top7.bottom < bottom.top && view.elementAtHeight((_top7.bottom + bottom.top) / 2).type == BlockType.Text) _top7.bottom = bottom.top = (_top7.bottom + bottom.top) / 2;
      return pieces(_top7).concat(between).concat(pieces(bottom));
    }
    function piece(left, top, right, bottom) {
      return new RectangleMarker(className, left - base.left, top - base.top, right - left, bottom - top);
    }
    function pieces(_ref11) {
      var top = _ref11.top,
        bottom = _ref11.bottom,
        horizontal = _ref11.horizontal;
      var pieces = [];
      for (var _i112 = 0; _i112 < horizontal.length; _i112 += 2) pieces.push(piece(horizontal[_i112], top, horizontal[_i112 + 1], bottom));
      return pieces;
    }
    // Gets passed from/to in line-local positions
    function drawForLine(from, to, line) {
      var top = 1e9,
        bottom = -1e9,
        horizontal = [];
      function addSpan(from, fromOpen, to, toOpen, dir) {
        // Passing 2/-2 is a kludge to force the view to return
        // coordinates on the proper side of block widgets, since
        // normalizing the side there, though appropriate for most
        // coordsAtPos queries, would break selection drawing.
        var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
        var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
        if (!fromCoords || !toCoords) return;
        top = Math.min(fromCoords.top, toCoords.top, top);
        bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
        if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
      }
      var start = from !== null && from !== void 0 ? from : line.from,
        end = to !== null && to !== void 0 ? to : line.to;
      // Split the range by visible range and document line
      var _iterator99 = _createForOfIteratorHelper(view.visibleRanges),
        _step99;
      try {
        for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
          var _r2 = _step99.value;
          if (_r2.to > start && _r2.from < end) {
            for (var pos = Math.max(_r2.from, start), endPos = Math.min(_r2.to, end);;) {
              var docLine = view.state.doc.lineAt(pos);
              var _iterator100 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
                _step100;
              try {
                for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
                  var span = _step100.value;
                  var spanFrom = span.from + docLine.from,
                    spanTo = span.to + docLine.from;
                  if (spanFrom >= endPos) break;
                  if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                }
              } catch (err) {
                _iterator100.e(err);
              } finally {
                _iterator100.f();
              }
              pos = docLine.to + 1;
              if (pos >= endPos) break;
            }
          }
        }
      } catch (err) {
        _iterator99.e(err);
      } finally {
        _iterator99.f();
      }
      if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
      return {
        top: top,
        bottom: bottom,
        horizontal: horizontal
      };
    }
    function drawForWidget(block, top) {
      var y = contentRect.top + (top ? block.top : block.bottom);
      return {
        top: y,
        bottom: y,
        horizontal: []
      };
    }
  }
  function sameMarker(a, b) {
    return a.constructor == b.constructor && a.eq(b);
  }
  var LayerView = /*#__PURE__*/function () {
    function LayerView(view, layer) {
      _classCallCheck(this, LayerView);
      this.view = view;
      this.layer = layer;
      this.drawn = [];
      this.scaleX = 1;
      this.scaleY = 1;
      this.measureReq = {
        read: this.measure.bind(this),
        write: this.draw.bind(this)
      };
      this.dom = view.scrollDOM.appendChild(document.createElement("div"));
      this.dom.classList.add("cm-layer");
      if (layer.above) this.dom.classList.add("cm-layer-above");
      if (layer["class"]) this.dom.classList.add(layer["class"]);
      this.scale();
      this.dom.setAttribute("aria-hidden", "true");
      this.setOrder(view.state);
      view.requestMeasure(this.measureReq);
      if (layer.mount) layer.mount(this.dom, view);
    }
    return _createClass(LayerView, [{
      key: "update",
      value: function update(_update9) {
        if (_update9.startState.facet(layerOrder) != _update9.state.facet(layerOrder)) this.setOrder(_update9.state);
        if (this.layer.update(_update9, this.dom) || _update9.geometryChanged) {
          this.scale();
          _update9.view.requestMeasure(this.measureReq);
        }
      }
    }, {
      key: "docViewUpdate",
      value: function docViewUpdate(view) {
        if (this.layer.updateOnDocViewUpdate !== false) view.requestMeasure(this.measureReq);
      }
    }, {
      key: "setOrder",
      value: function setOrder(state) {
        var pos = 0,
          order = state.facet(layerOrder);
        while (pos < order.length && order[pos] != this.layer) pos++;
        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
    }, {
      key: "measure",
      value: function measure() {
        return this.layer.markers(this.view);
      }
    }, {
      key: "scale",
      value: function scale() {
        var _this$view = this.view,
          scaleX = _this$view.scaleX,
          scaleY = _this$view.scaleY;
        if (scaleX != this.scaleX || scaleY != this.scaleY) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          this.dom.style.transform = "scale(".concat(1 / scaleX, ", ").concat(1 / scaleY, ")");
        }
      }
    }, {
      key: "draw",
      value: function draw(markers) {
        var _this52 = this;
        if (markers.length != this.drawn.length || markers.some(function (p, i) {
          return !sameMarker(p, _this52.drawn[i]);
        })) {
          var old = this.dom.firstChild,
            oldI = 0;
          var _iterator101 = _createForOfIteratorHelper(markers),
            _step101;
          try {
            for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
              var marker = _step101.value;
              if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
                old = old.nextSibling;
                oldI++;
              } else {
                this.dom.insertBefore(marker.draw(), old);
              }
            }
          } catch (err) {
            _iterator101.e(err);
          } finally {
            _iterator101.f();
          }
          while (old) {
            var next = old.nextSibling;
            old.remove();
            old = next;
          }
          this.drawn = markers;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.layer.destroy) this.layer.destroy(this.dom, this.view);
        this.dom.remove();
      }
    }]);
  }();
  var layerOrder = /*@__PURE__*/Facet.define();
  /**
  Define a layer.
  */
  function layer(config) {
    return [ViewPlugin.define(function (v) {
      return new LayerView(v, config);
    }), layerOrder.of(config)];
  }
  var selectionConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        cursorBlinkRate: 1200,
        drawRangeCursor: true
      }, {
        cursorBlinkRate: function cursorBlinkRate(a, b) {
          return Math.min(a, b);
        },
        drawRangeCursor: function drawRangeCursor(a, b) {
          return a || b;
        }
      });
    }
  });
  /**
  Returns an extension that hides the browser's native selection and
  cursor, replacing the selection with a background behind the text
  (with the `cm-selectionBackground` class), and the
  cursors with elements overlaid over the code (using
  `cm-cursor-primary` and `cm-cursor-secondary`).
   This allows the editor to display secondary selection ranges, and
  tends to produce a type of selection more in line with that users
  expect in a text editor (the native selection styling will often
  leave gaps between lines and won't fill the horizontal space after
  a line when the selection continues past it).
   It does have a performance cost, in that it requires an extra DOM
  layout cycle for many updates (the selection is drawn based on DOM
  layout information that's only available after laying out the
  content).
  */
  function drawSelection() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [selectionConfig.of(config), cursorLayer, selectionLayer, hideNativeSelection, nativeSelectionHidden.of(true)];
  }
  function configChanged(update) {
    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  var cursorLayer = /*@__PURE__*/layer({
    above: true,
    markers: function markers(view) {
      var state = view.state,
        conf = state.facet(selectionConfig);
      var cursors = [];
      var _iterator102 = _createForOfIteratorHelper(state.selection.ranges),
        _step102;
      try {
        for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
          var _r3 = _step102.value;
          var prim = _r3 == state.selection.main;
          if (_r3.empty || conf.drawRangeCursor) {
            var className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
            var cursor = _r3.empty ? _r3 : EditorSelection.cursor(_r3.head, _r3.head > _r3.anchor ? -1 : 1);
            var _iterator103 = _createForOfIteratorHelper(RectangleMarker.forRange(view, className, cursor)),
              _step103;
            try {
              for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
                var piece = _step103.value;
                cursors.push(piece);
              }
            } catch (err) {
              _iterator103.e(err);
            } finally {
              _iterator103.f();
            }
          }
        }
      } catch (err) {
        _iterator102.e(err);
      } finally {
        _iterator102.f();
      }
      return cursors;
    },
    update: function update(_update0, dom) {
      if (_update0.transactions.some(function (tr) {
        return tr.selection;
      })) dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      var confChange = configChanged(_update0);
      if (confChange) setBlinkRate(_update0.state, dom);
      return _update0.docChanged || _update0.selectionSet || confChange;
    },
    mount: function mount(dom, view) {
      setBlinkRate(view.state, dom);
    },
    "class": "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  var selectionLayer = /*@__PURE__*/layer({
    above: false,
    markers: function markers(view) {
      return view.state.selection.ranges.map(function (r) {
        return r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r);
      }).reduce(function (a, b) {
        return a.concat(b);
      });
    },
    update: function update(_update1, dom) {
      return _update1.docChanged || _update1.selectionSet || _update1.viewportChanged || configChanged(_update1);
    },
    "class": "cm-selectionLayer"
  });
  var hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme({
    ".cm-line": {
      "& ::selection, &::selection": {
        backgroundColor: "transparent !important"
      },
      caretColor: "transparent !important"
    },
    ".cm-content": {
      caretColor: "transparent !important",
      "& :focus": {
        caretColor: "initial !important",
        "&::selection, & ::selection": {
          backgroundColor: "Highlight !important"
        }
      }
    }
  }));
  function iterMatches(doc, re, from, to, f) {
    re.lastIndex = 0;
    for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
      if (!cursor.lineBreak) while (m = re.exec(cursor.value)) f(pos + m.index, m);
    }
  }
  function matchRanges(view, maxLength) {
    var visible = view.visibleRanges;
    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
    var result = [];
    var _iterator104 = _createForOfIteratorHelper(visible),
      _step104;
    try {
      for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
        var _step104$value = _step104.value,
          from = _step104$value.from,
          to = _step104$value.to;
        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
        if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
          from: from,
          to: to
        });
      }
    } catch (err) {
      _iterator104.e(err);
    } finally {
      _iterator104.f();
    }
    return result;
  }
  /**
  Helper class used to make it easier to maintain decorations on
  visible code that matches a given regular expression. To be used
  in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
  represent a matching configuration.
  */
  var MatchDecorator = /*#__PURE__*/function () {
    /**
    Create a decorator.
    */
    function MatchDecorator(config) {
      _classCallCheck(this, MatchDecorator);
      var regexp = config.regexp,
        decoration = config.decoration,
        decorate = config.decorate,
        boundary = config.boundary,
        _config$maxLength = config.maxLength,
        maxLength = _config$maxLength === void 0 ? 1000 : _config$maxLength;
      if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
      this.regexp = regexp;
      if (decorate) {
        this.addMatch = function (match, view, from, add) {
          return decorate(add, from, from + match[0].length, match, view);
        };
      } else if (typeof decoration == "function") {
        this.addMatch = function (match, view, from, add) {
          var deco = decoration(match, view, from);
          if (deco) add(from, from + match[0].length, deco);
        };
      } else if (decoration) {
        this.addMatch = function (match, _view, from, add) {
          return add(from, from + match[0].length, decoration);
        };
      } else {
        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
      }
      this.boundary = boundary;
      this.maxLength = maxLength;
    }
    /**
    Compute the full set of decorations for matches in the given
    view's viewport. You'll want to call this when initializing your
    plugin.
    */
    return _createClass(MatchDecorator, [{
      key: "createDeco",
      value: function createDeco(view) {
        var _this53 = this;
        var build = new RangeSetBuilder(),
          add = build.add.bind(build);
        var _iterator105 = _createForOfIteratorHelper(matchRanges(view, this.maxLength)),
          _step105;
        try {
          for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
            var _step105$value = _step105.value,
              from = _step105$value.from,
              to = _step105$value.to;
            iterMatches(view.state.doc, this.regexp, from, to, function (from, m) {
              return _this53.addMatch(m, view, from, add);
            });
          }
        } catch (err) {
          _iterator105.e(err);
        } finally {
          _iterator105.f();
        }
        return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
    }, {
      key: "updateDeco",
      value: function updateDeco(update, deco) {
        var changeFrom = 1e9,
          changeTo = -1;
        if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
          if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
            changeFrom = Math.min(from, changeFrom);
            changeTo = Math.max(to, changeTo);
          }
        });
        if (update.viewportMoved || changeTo - changeFrom > 1000) return this.createDeco(update.view);
        if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
        return deco;
      }
    }, {
      key: "updateRange",
      value: function updateRange(view, deco, updateFrom, updateTo) {
        var _this54 = this;
        var _iterator106 = _createForOfIteratorHelper(view.visibleRanges),
          _step106;
        try {
          var _loop0 = function _loop0() {
            var r = _step106.value;
            var from = Math.max(r.from, updateFrom),
              to = Math.min(r.to, updateTo);
            if (to >= from) {
              var fromLine = view.state.doc.lineAt(from),
                toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
              var start = Math.max(r.from, fromLine.from),
                end = Math.min(r.to, toLine.to);
              if (_this54.boundary) {
                for (; from > fromLine.from; from--) if (_this54.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                  start = from;
                  break;
                }
                for (; to < toLine.to; to++) if (_this54.boundary.test(toLine.text[to - toLine.from])) {
                  end = to;
                  break;
                }
              }
              var ranges = [],
                m;
              var add = function add(from, to, deco) {
                return ranges.push(deco.range(from, to));
              };
              if (fromLine == toLine) {
                _this54.regexp.lastIndex = start - fromLine.from;
                while ((m = _this54.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) _this54.addMatch(m, view, m.index + fromLine.from, add);
              } else {
                iterMatches(view.state.doc, _this54.regexp, start, end, function (from, m) {
                  return _this54.addMatch(m, view, from, add);
                });
              }
              deco = deco.update({
                filterFrom: start,
                filterTo: end,
                filter: function filter(from, to) {
                  return from < start || to > end;
                },
                add: ranges
              });
            }
          };
          for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
            _loop0();
          }
        } catch (err) {
          _iterator106.e(err);
        } finally {
          _iterator106.f();
        }
        return deco;
      }
    }]);
  }();
  var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
  var Names = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8294: "left-to-right isolate",
    8295: "right-to-left isolate",
    8297: "pop directional isolate",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
  };
  var _supportsTabSize = null;
  function supportsTabSize() {
    var _a;
    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
      var styles = document.body.style;
      _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
    }
    return _supportsTabSize || false;
  }
  var specialCharConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      var config = combineConfig(configs, {
        render: null,
        specialChars: Specials,
        addSpecialChars: null
      });
      if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
      if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
      return config;
    }
  });
  /**
  Returns an extension that installs highlighting of special
  characters.
  */
  function highlightSpecialChars() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [specialCharConfig.of(config), specialCharPlugin()];
  }
  var _plugin = null;
  function specialCharPlugin() {
    return _plugin || (_plugin = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class(view) {
        _classCallCheck(this, _class);
        this.view = view;
        this.decorations = Decoration.none;
        this.decorationCache = Object.create(null);
        this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
        this.decorations = this.decorator.createDeco(view);
      }
      return _createClass(_class, [{
        key: "makeDecorator",
        value: function makeDecorator(conf) {
          var _this55 = this;
          return new MatchDecorator({
            regexp: conf.specialChars,
            decoration: function decoration(m, view, pos) {
              var doc = view.state.doc;
              var code = codePointAt(m[0], 0);
              if (code == 9) {
                var line = doc.lineAt(pos);
                var size = view.state.tabSize,
                  col = _countColumn(line.text, size, pos - line.from);
                return Decoration.replace({
                  widget: new TabWidget((size - col % size) * _this55.view.defaultCharacterWidth / _this55.view.scaleX)
                });
              }
              return _this55.decorationCache[code] || (_this55.decorationCache[code] = Decoration.replace({
                widget: new SpecialCharWidget(conf, code)
              }));
            },
            boundary: conf.replaceTabs ? undefined : /[^]/
          });
        }
      }, {
        key: "update",
        value: function update(_update10) {
          var conf = _update10.state.facet(specialCharConfig);
          if (_update10.startState.facet(specialCharConfig) != conf) {
            this.decorator = this.makeDecorator(conf);
            this.decorations = this.decorator.createDeco(_update10.view);
          } else {
            this.decorations = this.decorator.updateDeco(_update10, this.decorations);
          }
        }
      }]);
    }(), {
      decorations: function decorations(v) {
        return v.decorations;
      }
    }));
  }
  var DefaultPlaceholder = "\u2022";
  // Assigns placeholder characters from the Control Pictures block to
  // ASCII control characters
  function placeholder$1(code) {
    if (code >= 32) return DefaultPlaceholder;
    if (code == 10) return "\u2424";
    return String.fromCharCode(9216 + code);
  }
  var SpecialCharWidget = /*#__PURE__*/function (_WidgetType4) {
    function SpecialCharWidget(options, code) {
      var _this56;
      _classCallCheck(this, SpecialCharWidget);
      _this56 = _callSuper(this, SpecialCharWidget);
      _this56.options = options;
      _this56.code = code;
      return _this56;
    }
    _inherits(SpecialCharWidget, _WidgetType4);
    return _createClass(SpecialCharWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.code == this.code;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        var ph = placeholder$1(this.code);
        var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
        var custom = this.options.render && this.options.render(this.code, desc, ph);
        if (custom) return custom;
        var span = document.createElement("span");
        span.textContent = ph;
        span.title = desc;
        span.setAttribute("aria-label", desc);
        span.className = "cm-specialChar";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  var TabWidget = /*#__PURE__*/function (_WidgetType5) {
    function TabWidget(width) {
      var _this57;
      _classCallCheck(this, TabWidget);
      _this57 = _callSuper(this, TabWidget);
      _this57.width = width;
      return _this57;
    }
    _inherits(TabWidget, _WidgetType5);
    return _createClass(TabWidget, [{
      key: "eq",
      value: function eq(other) {
        return other.width == this.width;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        var span = document.createElement("span");
        span.textContent = "\t";
        span.className = "cm-tab";
        span.style.width = this.width + "px";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
  }(WidgetType);
  /**
  Mark lines that have a cursor on them with the `"cm-activeLine"`
  DOM class.
  */
  function highlightActiveLine() {
    return activeLineHighlighter;
  }
  var lineDeco = /*@__PURE__*/Decoration.line({
    "class": "cm-activeLine"
  });
  var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.decorations = this.getDeco(view);
    }
    return _createClass(_class2, [{
      key: "update",
      value: function update(_update11) {
        if (_update11.docChanged || _update11.selectionSet) this.decorations = this.getDeco(_update11.view);
      }
    }, {
      key: "getDeco",
      value: function getDeco(view) {
        var lastLineStart = -1,
          deco = [];
        var _iterator107 = _createForOfIteratorHelper(view.state.selection.ranges),
          _step107;
        try {
          for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
            var _r4 = _step107.value;
            var line = view.lineBlockAt(_r4.head);
            if (line.from > lastLineStart) {
              deco.push(lineDeco.range(line.from));
              lastLineStart = line.from;
            }
          }
        } catch (err) {
          _iterator107.e(err);
        } finally {
          _iterator107.f();
        }
        return Decoration.set(deco);
      }
    }]);
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });

  // Don't compute precise column positions for line offsets above this
  // (since it could get expensive). Assume offset==column for them.
  var MaxOff = 2000;
  function rectangleFor(state, a, b) {
    var startLine = Math.min(a.line, b.line),
      endLine = Math.max(a.line, b.line);
    var ranges = [];
    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
      var startOff = Math.min(a.off, b.off),
        endOff = Math.max(a.off, b.off);
      for (var _i113 = startLine; _i113 <= endLine; _i113++) {
        var line = state.doc.line(_i113);
        if (line.length <= endOff) ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
      }
    } else {
      var startCol = Math.min(a.col, b.col),
        endCol = Math.max(a.col, b.col);
      for (var _i114 = startLine; _i114 <= endLine; _i114++) {
        var _line2 = state.doc.line(_i114);
        var start = findColumn(_line2.text, startCol, state.tabSize, true);
        if (start < 0) {
          ranges.push(EditorSelection.cursor(_line2.to));
        } else {
          var end = findColumn(_line2.text, endCol, state.tabSize);
          ranges.push(EditorSelection.range(_line2.from + start, _line2.from + end));
        }
      }
    }
    return ranges;
  }
  function absoluteColumn(view, x) {
    var ref = view.coordsAtPos(view.viewport.from);
    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
    var offset = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    var line = view.state.doc.lineAt(offset),
      off = offset - line.from;
    var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : _countColumn(line.text, view.state.tabSize, offset - line.from);
    return {
      line: line.number,
      col: col,
      off: off
    };
  }
  function rectangleSelectionStyle(view, event) {
    var start = getPos(view, event),
      startSel = view.state.selection;
    if (!start) return null;
    return {
      update: function update(_update12) {
        if (_update12.docChanged) {
          var newStart = _update12.changes.mapPos(_update12.startState.doc.line(start.line).from);
          var newLine = _update12.state.doc.lineAt(newStart);
          start = {
            line: newLine.number,
            col: start.col,
            off: Math.min(start.off, newLine.length)
          };
          startSel = startSel.map(_update12.changes);
        }
      },
      get: function get(event, _extend, multiple) {
        var cur = getPos(view, event);
        if (!cur) return startSel;
        var ranges = rectangleFor(view.state, start, cur);
        if (!ranges.length) return startSel;
        if (multiple) return EditorSelection.create(ranges.concat(startSel.ranges));else return EditorSelection.create(ranges);
      }
    };
  }
  /**
  Create an extension that enables rectangular selections. By
  default, it will react to left mouse drag with the Alt key held
  down. When such a selection occurs, the text within the rectangle
  that was dragged over will be selected, as one selection
  [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
  */
  function rectangularSelection(options) {
    var filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || function (e) {
      return e.altKey && e.button == 0;
    };
    return EditorView.mouseSelectionStyle.of(function (view, event) {
      return filter(event) ? rectangleSelectionStyle(view, event) : null;
    });
  }
  var keys = {
    Alt: [18, function (e) {
      return !!e.altKey;
    }],
    Control: [17, function (e) {
      return !!e.ctrlKey;
    }],
    Shift: [16, function (e) {
      return !!e.shiftKey;
    }],
    Meta: [91, function (e) {
      return !!e.metaKey;
    }]
  };
  var showCrosshair = {
    style: "cursor: crosshair"
  };
  /**
  Returns an extension that turns the pointer cursor into a
  crosshair when a given modifier key, defaulting to Alt, is held
  down. Can serve as a visual hint that rectangular selection is
  going to happen when paired with
  [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
  */
  function crosshairCursor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _keys = _slicedToArray(keys[options.key || "Alt"], 2),
      code = _keys[0],
      getter = _keys[1];
    var plugin = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class3(view) {
        _classCallCheck(this, _class3);
        this.view = view;
        this.isDown = false;
      }
      return _createClass(_class3, [{
        key: "set",
        value: function set(isDown) {
          if (this.isDown != isDown) {
            this.isDown = isDown;
            this.view.update([]);
          }
        }
      }]);
    }(), {
      eventObservers: {
        keydown: function keydown(e) {
          this.set(e.keyCode == code || getter(e));
        },
        keyup: function keyup(e) {
          if (e.keyCode == code || !getter(e)) this.set(false);
        },
        mousemove: function mousemove(e) {
          this.set(getter(e));
        }
      }
    });
    return [plugin, EditorView.contentAttributes.of(function (view) {
      var _a;
      return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null;
    })];
  }
  var Outside = "-10000px";
  var TooltipViewManager = /*#__PURE__*/function () {
    function TooltipViewManager(view, facet, createTooltipView, removeTooltipView) {
      _classCallCheck(this, TooltipViewManager);
      this.facet = facet;
      this.createTooltipView = createTooltipView;
      this.removeTooltipView = removeTooltipView;
      this.input = view.state.facet(facet);
      this.tooltips = this.input.filter(function (t) {
        return t;
      });
      var prev = null;
      this.tooltipViews = this.tooltips.map(function (t) {
        return prev = createTooltipView(t, prev);
      });
    }
    return _createClass(TooltipViewManager, [{
      key: "update",
      value: function update(_update13, above) {
        var _a;
        var input = _update13.state.facet(this.facet);
        var tooltips = input.filter(function (x) {
          return x;
        });
        if (input === this.input) {
          var _iterator108 = _createForOfIteratorHelper(this.tooltipViews),
            _step108;
          try {
            for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
              var _t2 = _step108.value;
              if (_t2.update) _t2.update(_update13);
            }
          } catch (err) {
            _iterator108.e(err);
          } finally {
            _iterator108.f();
          }
          return false;
        }
        var tooltipViews = [],
          newAbove = above ? [] : null;
        for (var _i115 = 0; _i115 < tooltips.length; _i115++) {
          var tip = tooltips[_i115],
            known = -1;
          if (!tip) continue;
          for (var _i116 = 0; _i116 < this.tooltips.length; _i116++) {
            var other = this.tooltips[_i116];
            if (other && other.create == tip.create) known = _i116;
          }
          if (known < 0) {
            tooltipViews[_i115] = this.createTooltipView(tip, _i115 ? tooltipViews[_i115 - 1] : null);
            if (newAbove) newAbove[_i115] = !!tip.above;
          } else {
            var tooltipView = tooltipViews[_i115] = this.tooltipViews[known];
            if (newAbove) newAbove[_i115] = above[known];
            if (tooltipView.update) tooltipView.update(_update13);
          }
        }
        var _iterator109 = _createForOfIteratorHelper(this.tooltipViews),
          _step109;
        try {
          for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
            var _t3 = _step109.value;
            if (tooltipViews.indexOf(_t3) < 0) {
              this.removeTooltipView(_t3);
              (_a = _t3.destroy) === null || _a === void 0 ? void 0 : _a.call(_t3);
            }
          }
        } catch (err) {
          _iterator109.e(err);
        } finally {
          _iterator109.f();
        }
        if (above) {
          newAbove.forEach(function (val, i) {
            return above[i] = val;
          });
          above.length = newAbove.length;
        }
        this.input = input;
        this.tooltips = tooltips;
        this.tooltipViews = tooltipViews;
        return true;
      }
    }]);
  }();
  function windowSpace(view) {
    var docElt = view.dom.ownerDocument.documentElement;
    return {
      top: 0,
      left: 0,
      bottom: docElt.clientHeight,
      right: docElt.clientWidth
    };
  }
  var tooltipConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      var _a, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a = values.find(function (conf) {
          return conf.position;
        })) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
        parent: ((_b = values.find(function (conf) {
          return conf.parent;
        })) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find(function (conf) {
          return conf.tooltipSpace;
        })) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }
  });
  var knownHeight = /*@__PURE__*/new WeakMap();
  var tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class4(view) {
      var _this58 = this;
      _classCallCheck(this, _class4);
      this.view = view;
      this.above = [];
      this.inView = true;
      this.madeAbsolute = false;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      var config = view.state.facet(tooltipConfig);
      this.position = config.position;
      this.parent = config.parent;
      this.classes = view.themeClasses;
      this.createContainer();
      this.measureReq = {
        read: this.readMeasure.bind(this),
        write: this.writeMeasure.bind(this),
        key: this
      };
      this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(function () {
        return _this58.measureSoon();
      }) : null;
      this.manager = new TooltipViewManager(view, showTooltip, function (t, p) {
        return _this58.createTooltip(t, p);
      }, function (t) {
        if (_this58.resizeObserver) _this58.resizeObserver.unobserve(t.dom);
        t.dom.remove();
      });
      this.above = this.manager.tooltips.map(function (t) {
        return !!t.above;
      });
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(function (entries) {
        if (Date.now() > _this58.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) _this58.measureSoon();
      }, {
        threshold: [1]
      }) : null;
      this.observeIntersection();
      view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    return _createClass(_class4, [{
      key: "createContainer",
      value: function createContainer() {
        if (this.parent) {
          this.container = document.createElement("div");
          this.container.style.position = "relative";
          this.container.className = this.view.themeClasses;
          this.parent.appendChild(this.container);
        } else {
          this.container = this.view.dom;
        }
      }
    }, {
      key: "observeIntersection",
      value: function observeIntersection() {
        if (this.intersectionObserver) {
          this.intersectionObserver.disconnect();
          var _iterator110 = _createForOfIteratorHelper(this.manager.tooltipViews),
            _step110;
          try {
            for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
              var tooltip = _step110.value;
              this.intersectionObserver.observe(tooltip.dom);
            }
          } catch (err) {
            _iterator110.e(err);
          } finally {
            _iterator110.f();
          }
        }
      }
    }, {
      key: "measureSoon",
      value: function measureSoon() {
        var _this59 = this;
        if (this.measureTimeout < 0) this.measureTimeout = setTimeout(function () {
          _this59.measureTimeout = -1;
          _this59.maybeMeasure();
        }, 50);
      }
    }, {
      key: "update",
      value: function update(_update14) {
        if (_update14.transactions.length) this.lastTransaction = Date.now();
        var updated = this.manager.update(_update14, this.above);
        if (updated) this.observeIntersection();
        var shouldMeasure = updated || _update14.geometryChanged;
        var newConfig = _update14.state.facet(tooltipConfig);
        if (newConfig.position != this.position && !this.madeAbsolute) {
          this.position = newConfig.position;
          var _iterator111 = _createForOfIteratorHelper(this.manager.tooltipViews),
            _step111;
          try {
            for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
              var _t4 = _step111.value;
              _t4.dom.style.position = this.position;
            }
          } catch (err) {
            _iterator111.e(err);
          } finally {
            _iterator111.f();
          }
          shouldMeasure = true;
        }
        if (newConfig.parent != this.parent) {
          if (this.parent) this.container.remove();
          this.parent = newConfig.parent;
          this.createContainer();
          var _iterator112 = _createForOfIteratorHelper(this.manager.tooltipViews),
            _step112;
          try {
            for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
              var _t5 = _step112.value;
              this.container.appendChild(_t5.dom);
            }
          } catch (err) {
            _iterator112.e(err);
          } finally {
            _iterator112.f();
          }
          shouldMeasure = true;
        } else if (this.parent && this.view.themeClasses != this.classes) {
          this.classes = this.container.className = this.view.themeClasses;
        }
        if (shouldMeasure) this.maybeMeasure();
      }
    }, {
      key: "createTooltip",
      value: function createTooltip(tooltip, prev) {
        var tooltipView = tooltip.create(this.view);
        var before = prev ? prev.dom : null;
        tooltipView.dom.classList.add("cm-tooltip");
        if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
          var arrow = document.createElement("div");
          arrow.className = "cm-tooltip-arrow";
          tooltipView.dom.appendChild(arrow);
        }
        tooltipView.dom.style.position = this.position;
        tooltipView.dom.style.top = Outside;
        tooltipView.dom.style.left = "0px";
        this.container.insertBefore(tooltipView.dom, before);
        if (tooltipView.mount) tooltipView.mount(this.view);
        if (this.resizeObserver) this.resizeObserver.observe(tooltipView.dom);
        return tooltipView;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _a, _b, _c;
        this.view.win.removeEventListener("resize", this.measureSoon);
        var _iterator113 = _createForOfIteratorHelper(this.manager.tooltipViews),
          _step113;
        try {
          for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
            var tooltipView = _step113.value;
            tooltipView.dom.remove();
            (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
          }
        } catch (err) {
          _iterator113.e(err);
        } finally {
          _iterator113.f();
        }
        if (this.parent) this.container.remove();
        (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
        (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
        clearTimeout(this.measureTimeout);
      }
    }, {
      key: "readMeasure",
      value: function readMeasure() {
        var _this60 = this;
        var scaleX = 1,
          scaleY = 1,
          makeAbsolute = false;
        if (this.position == "fixed" && this.manager.tooltipViews.length) {
          var dom = this.manager.tooltipViews[0].dom;
          if (browser.gecko) {
            // Firefox sets the element's `offsetParent` to the
            // transformed element when a transform interferes with fixed
            // positioning.
            makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
          } else if (dom.style.top == Outside && dom.style.left == "0px") {
            // On other browsers, we have to awkwardly try and use other
            // information to detect a transform.
            var rect = dom.getBoundingClientRect();
            makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
          }
        }
        if (makeAbsolute || this.position == "absolute") {
          if (this.parent) {
            var _rect2 = this.parent.getBoundingClientRect();
            if (_rect2.width && _rect2.height) {
              scaleX = _rect2.width / this.parent.offsetWidth;
              scaleY = _rect2.height / this.parent.offsetHeight;
            }
          } else {
            var _this$view$viewState = this.view.viewState;
            scaleX = _this$view$viewState.scaleX;
            scaleY = _this$view$viewState.scaleY;
          }
        }
        var visible = this.view.scrollDOM.getBoundingClientRect(),
          margins = getScrollMargins(this.view);
        return {
          visible: {
            left: visible.left + margins.left,
            top: visible.top + margins.top,
            right: visible.right - margins.right,
            bottom: visible.bottom - margins.bottom
          },
          parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
          pos: this.manager.tooltips.map(function (t, i) {
            var tv = _this60.manager.tooltipViews[i];
            return tv.getCoords ? tv.getCoords(t.pos) : _this60.view.coordsAtPos(t.pos);
          }),
          size: this.manager.tooltipViews.map(function (_ref12) {
            var dom = _ref12.dom;
            return dom.getBoundingClientRect();
          }),
          space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
          scaleX: scaleX,
          scaleY: scaleY,
          makeAbsolute: makeAbsolute
        };
      }
    }, {
      key: "writeMeasure",
      value: function writeMeasure(measured) {
        var _a;
        if (measured.makeAbsolute) {
          this.madeAbsolute = true;
          this.position = "absolute";
          var _iterator114 = _createForOfIteratorHelper(this.manager.tooltipViews),
            _step114;
          try {
            for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
              var _t6 = _step114.value;
              _t6.dom.style.position = "absolute";
            }
          } catch (err) {
            _iterator114.e(err);
          } finally {
            _iterator114.f();
          }
        }
        var visible = measured.visible,
          space = measured.space,
          scaleX = measured.scaleX,
          scaleY = measured.scaleY;
        var others = [];
        for (var _i117 = 0; _i117 < this.manager.tooltips.length; _i117++) {
          var tooltip = this.manager.tooltips[_i117],
            tView = this.manager.tooltipViews[_i117],
            dom = tView.dom;
          var pos = measured.pos[_i117],
            size = measured.size[_i117];
          // Hide tooltips that are outside of the editor.
          if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) || pos.top >= Math.min(visible.bottom, space.bottom) || pos.right < Math.max(visible.left, space.left) - .1 || pos.left > Math.min(visible.right, space.right) + .1)) {
            dom.style.top = Outside;
            continue;
          }
          var arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
          var arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
          var width = size.right - size.left,
            height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
          var offset = tView.offset || noOffset,
            ltr = this.view.textDirection == Direction.LTR;
          var left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)) : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
          var above = this.above[_i117];
          if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space.top : pos.bottom + height + arrowHeight + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = this.above[_i117] = !above;
          var spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
          if (spaceVert < height && tView.resize !== false) {
            if (spaceVert < this.view.defaultLineHeight) {
              dom.style.top = Outside;
              continue;
            }
            knownHeight.set(tView, height);
            dom.style.height = (height = spaceVert) / scaleY + "px";
          } else if (dom.style.height) {
            dom.style.height = "";
          }
          var _top8 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
          var right = left + width;
          if (tView.overlap !== true) {
            var _iterator115 = _createForOfIteratorHelper(others),
              _step115;
            try {
              for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
                var _r5 = _step115.value;
                if (_r5.left < right && _r5.right > left && _r5.top < _top8 + height && _r5.bottom > _top8) _top8 = above ? _r5.top - height - 2 - arrowHeight : _r5.bottom + arrowHeight + 2;
              }
            } catch (err) {
              _iterator115.e(err);
            } finally {
              _iterator115.f();
            }
          }
          if (this.position == "absolute") {
            dom.style.top = (_top8 - measured.parent.top) / scaleY + "px";
            setLeftStyle(dom, (left - measured.parent.left) / scaleX);
          } else {
            dom.style.top = _top8 / scaleY + "px";
            setLeftStyle(dom, left / scaleX);
          }
          if (arrow) {
            var arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
            arrow.style.left = arrowLeft / scaleX + "px";
          }
          if (tView.overlap !== true) others.push({
            left: left,
            top: _top8,
            right: right,
            bottom: _top8 + height
          });
          dom.classList.toggle("cm-tooltip-above", above);
          dom.classList.toggle("cm-tooltip-below", !above);
          if (tView.positioned) tView.positioned(measured.space);
        }
      }
    }, {
      key: "maybeMeasure",
      value: function maybeMeasure() {
        if (this.manager.tooltips.length) {
          if (this.view.inView) this.view.requestMeasure(this.measureReq);
          if (this.inView != this.view.inView) {
            this.inView = this.view.inView;
            if (!this.inView) {
              var _iterator116 = _createForOfIteratorHelper(this.manager.tooltipViews),
                _step116;
              try {
                for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
                  var tv = _step116.value;
                  tv.dom.style.top = Outside;
                }
              } catch (err) {
                _iterator116.e(err);
              } finally {
                _iterator116.f();
              }
            }
          }
        }
      }
    }]);
  }(), {
    eventObservers: {
      scroll: function scroll() {
        this.maybeMeasure();
      }
    }
  });
  function setLeftStyle(elt, value) {
    var current = parseInt(elt.style.left, 10);
    if (isNaN(current) || Math.abs(value - current) > 1) elt.style.left = value + "px";
  }
  var baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 500,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: "".concat(7 /* Arrow.Size */, "px"),
      width: "".concat(7 /* Arrow.Size */ * 2, "px"),
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: "".concat(7 /* Arrow.Size */, "px solid transparent"),
        borderRight: "".concat(7 /* Arrow.Size */, "px solid transparent")
      },
      ".cm-tooltip-above &": {
        bottom: "-".concat(7 /* Arrow.Size */, "px"),
        "&:before": {
          borderTop: "".concat(7 /* Arrow.Size */, "px solid #bbb")
        },
        "&:after": {
          borderTop: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: "-".concat(7 /* Arrow.Size */, "px"),
        "&:before": {
          borderBottom: "".concat(7 /* Arrow.Size */, "px solid #bbb")
        },
        "&:after": {
          borderBottom: "".concat(7 /* Arrow.Size */, "px solid #f5f5f5"),
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  var noOffset = {
    x: 0,
    y: 0
  };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  var showTooltip = /*@__PURE__*/Facet.define({
    enables: [tooltipPlugin, baseTheme$3]
  });
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
    var plugin = view.plugin(tooltipPlugin);
    if (!plugin) return null;
    var found = plugin.manager.tooltips.indexOf(tooltip);
    return found < 0 ? null : plugin.manager.tooltipViews[found];
  }

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  var GutterMarker = /*#__PURE__*/function (_RangeValue2) {
    function GutterMarker() {
      _classCallCheck(this, GutterMarker);
      return _callSuper(this, GutterMarker, arguments);
    }
    _inherits(GutterMarker, _RangeValue2);
    return _createClass(GutterMarker, [{
      key: "compare",
      value:
      /**
      @internal
      */
      function compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
    }, {
      key: "eq",
      value: function eq(other) {
        return false;
      }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
    }, {
      key: "destroy",
      value: function destroy(dom) {}
    }]);
  }(RangeValue);
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  var gutterLineClass = /*@__PURE__*/Facet.define();
  /**
  Facet used to add a class to all gutter elements next to a widget.
  Should not provide widgets with a `toDOM` method.
  */
  var gutterWidgetClass = /*@__PURE__*/Facet.define();
  var defaults$1 = {
    "class": "",
    renderEmptyElements: false,
    elementStyle: "",
    markers: function markers() {
      return RangeSet.empty;
    },
    lineMarker: function lineMarker() {
      return null;
    },
    widgetMarker: function widgetMarker() {
      return null;
    },
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {},
    side: "before"
  };
  var activeGutters = /*@__PURE__*/Facet.define();
  /**
  Define an editor gutter. The order in which the gutters appear is
  determined by their extension priority.
  */
  function gutter(config) {
    return [gutters(), activeGutters.of(_objectSpread(_objectSpread({}, defaults$1), config))];
  }
  var unfixGutters = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.some(function (x) {
        return x;
      });
    }
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.
   Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
    var result = [gutterView];
    if (config && config.fixed === false) result.push(unfixGutters.of(true));
    return result;
  }
  var gutterView = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class5(view) {
      _classCallCheck(this, _class5);
      this.view = view;
      this.domAfter = null;
      this.prevViewport = view.viewport;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutters cm-gutters-before";
      this.dom.setAttribute("aria-hidden", "true");
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.gutters = view.state.facet(activeGutters).map(function (conf) {
        return new SingleGutterView(view, conf);
      });
      this.fixed = !view.state.facet(unfixGutters);
      var _iterator117 = _createForOfIteratorHelper(this.gutters),
        _step117;
      try {
        for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
          var _gutter = _step117.value;
          if (_gutter.config.side == "after") this.getDOMAfter().appendChild(_gutter.dom);else this.dom.appendChild(_gutter.dom);
        }
      } catch (err) {
        _iterator117.e(err);
      } finally {
        _iterator117.f();
      }
      if (this.fixed) {
        // FIXME IE11 fallback, which doesn't support position: sticky,
        // by using position: relative + event handlers that realign the
        // gutter (or just force fixed=false on IE11?)
        this.dom.style.position = "sticky";
      }
      this.syncGutters(false);
      view.scrollDOM.insertBefore(this.dom, view.contentDOM);
    }
    return _createClass(_class5, [{
      key: "getDOMAfter",
      value: function getDOMAfter() {
        if (!this.domAfter) {
          this.domAfter = document.createElement("div");
          this.domAfter.className = "cm-gutters cm-gutters-after";
          this.domAfter.setAttribute("aria-hidden", "true");
          this.domAfter.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
          this.domAfter.style.position = this.fixed ? "sticky" : "";
          this.view.scrollDOM.appendChild(this.domAfter);
        }
        return this.domAfter;
      }
    }, {
      key: "update",
      value: function update(_update15) {
        if (this.updateGutters(_update15)) {
          // Detach during sync when the viewport changed significantly
          // (such as during scrolling), since for large updates that is
          // faster.
          var vpA = this.prevViewport,
            vpB = _update15.view.viewport;
          var vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
          this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
        }
        if (_update15.geometryChanged) {
          var min = this.view.contentHeight / this.view.scaleY + "px";
          this.dom.style.minHeight = min;
          if (this.domAfter) this.domAfter.style.minHeight = min;
        }
        if (this.view.state.facet(unfixGutters) != !this.fixed) {
          this.fixed = !this.fixed;
          this.dom.style.position = this.fixed ? "sticky" : "";
          if (this.domAfter) this.domAfter.style.position = this.fixed ? "sticky" : "";
        }
        this.prevViewport = _update15.view.viewport;
      }
    }, {
      key: "syncGutters",
      value: function syncGutters(detach) {
        var _this61 = this;
        var after = this.dom.nextSibling;
        if (detach) {
          this.dom.remove();
          if (this.domAfter) this.domAfter.remove();
        }
        var lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
        var classSet = [];
        var contexts = this.gutters.map(function (gutter) {
          return new UpdateContext(gutter, _this61.view.viewport, -_this61.view.documentPadding.top);
        });
        var _iterator118 = _createForOfIteratorHelper(this.view.viewportLineBlocks),
          _step118;
        try {
          for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {
            var line = _step118.value;
            if (classSet.length) classSet = [];
            if (Array.isArray(line.type)) {
              var first = true;
              var _iterator120 = _createForOfIteratorHelper(line.type),
                _step120;
              try {
                for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
                  var b = _step120.value;
                  if (b.type == BlockType.Text && first) {
                    advanceCursor(lineClasses, classSet, b.from);
                    var _iterator121 = _createForOfIteratorHelper(contexts),
                      _step121;
                    try {
                      for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
                        var cx = _step121.value;
                        cx.line(this.view, b, classSet);
                      }
                    } catch (err) {
                      _iterator121.e(err);
                    } finally {
                      _iterator121.f();
                    }
                    first = false;
                  } else if (b.widget) {
                    var _iterator122 = _createForOfIteratorHelper(contexts),
                      _step122;
                    try {
                      for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
                        var _cx = _step122.value;
                        _cx.widget(this.view, b);
                      }
                    } catch (err) {
                      _iterator122.e(err);
                    } finally {
                      _iterator122.f();
                    }
                  }
                }
              } catch (err) {
                _iterator120.e(err);
              } finally {
                _iterator120.f();
              }
            } else if (line.type == BlockType.Text) {
              advanceCursor(lineClasses, classSet, line.from);
              var _iterator123 = _createForOfIteratorHelper(contexts),
                _step123;
              try {
                for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
                  var _cx2 = _step123.value;
                  _cx2.line(this.view, line, classSet);
                }
              } catch (err) {
                _iterator123.e(err);
              } finally {
                _iterator123.f();
              }
            } else if (line.widget) {
              var _iterator124 = _createForOfIteratorHelper(contexts),
                _step124;
              try {
                for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
                  var _cx3 = _step124.value;
                  _cx3.widget(this.view, line);
                }
              } catch (err) {
                _iterator124.e(err);
              } finally {
                _iterator124.f();
              }
            }
          }
        } catch (err) {
          _iterator118.e(err);
        } finally {
          _iterator118.f();
        }
        var _iterator119 = _createForOfIteratorHelper(contexts),
          _step119;
        try {
          for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
            var _cx4 = _step119.value;
            _cx4.finish();
          }
        } catch (err) {
          _iterator119.e(err);
        } finally {
          _iterator119.f();
        }
        if (detach) {
          this.view.scrollDOM.insertBefore(this.dom, after);
          if (this.domAfter) this.view.scrollDOM.appendChild(this.domAfter);
        }
      }
    }, {
      key: "updateGutters",
      value: function updateGutters(update) {
        var prev = update.startState.facet(activeGutters),
          cur = update.state.facet(activeGutters);
        var change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
        if (prev == cur) {
          var _iterator125 = _createForOfIteratorHelper(this.gutters),
            _step125;
          try {
            for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {
              var _gutter2 = _step125.value;
              if (_gutter2.update(update)) change = true;
            }
          } catch (err) {
            _iterator125.e(err);
          } finally {
            _iterator125.f();
          }
        } else {
          change = true;
          var _gutters = [];
          var _iterator126 = _createForOfIteratorHelper(cur),
            _step126;
          try {
            for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {
              var conf = _step126.value;
              var known = prev.indexOf(conf);
              if (known < 0) {
                _gutters.push(new SingleGutterView(this.view, conf));
              } else {
                this.gutters[known].update(update);
                _gutters.push(this.gutters[known]);
              }
            }
          } catch (err) {
            _iterator126.e(err);
          } finally {
            _iterator126.f();
          }
          var _iterator127 = _createForOfIteratorHelper(this.gutters),
            _step127;
          try {
            for (_iterator127.s(); !(_step127 = _iterator127.n()).done;) {
              var _g = _step127.value;
              _g.dom.remove();
              if (_gutters.indexOf(_g) < 0) _g.destroy();
            }
          } catch (err) {
            _iterator127.e(err);
          } finally {
            _iterator127.f();
          }
          for (var _i118 = 0, _gutters2 = _gutters; _i118 < _gutters2.length; _i118++) {
            var g = _gutters2[_i118];
            if (g.config.side == "after") this.getDOMAfter().appendChild(g.dom);else this.dom.appendChild(g.dom);
          }
          this.gutters = _gutters;
        }
        return change;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator128 = _createForOfIteratorHelper(this.gutters),
          _step128;
        try {
          for (_iterator128.s(); !(_step128 = _iterator128.n()).done;) {
            var view = _step128.value;
            view.destroy();
          }
        } catch (err) {
          _iterator128.e(err);
        } finally {
          _iterator128.f();
        }
        this.dom.remove();
        if (this.domAfter) this.domAfter.remove();
      }
    }]);
  }(), {
    provide: function provide(plugin) {
      return EditorView.scrollMargins.of(function (view) {
        var value = view.plugin(plugin);
        if (!value || value.gutters.length == 0 || !value.fixed) return null;
        var before = value.dom.offsetWidth * view.scaleX,
          after = value.domAfter ? value.domAfter.offsetWidth * view.scaleX : 0;
        return view.textDirection == Direction.LTR ? {
          left: before,
          right: after
        } : {
          right: before,
          left: after
        };
      });
    }
  });
  function asArray(val) {
    return Array.isArray(val) ? val : [val];
  }
  function advanceCursor(cursor, collect, pos) {
    while (cursor.value && cursor.from <= pos) {
      if (cursor.from == pos) collect.push(cursor.value);
      cursor.next();
    }
  }
  var UpdateContext = /*#__PURE__*/function () {
    function UpdateContext(gutter, viewport, height) {
      _classCallCheck(this, UpdateContext);
      this.gutter = gutter;
      this.height = height;
      this.i = 0;
      this.cursor = RangeSet.iter(gutter.markers, viewport.from);
    }
    return _createClass(UpdateContext, [{
      key: "addElement",
      value: function addElement(view, block, markers) {
        var gutter = this.gutter,
          above = (block.top - this.height) / view.scaleY,
          height = block.height / view.scaleY;
        if (this.i == gutter.elements.length) {
          var newElt = new GutterElement(view, height, above, markers);
          gutter.elements.push(newElt);
          gutter.dom.appendChild(newElt.dom);
        } else {
          gutter.elements[this.i].update(view, height, above, markers);
        }
        this.height = block.bottom;
        this.i++;
      }
    }, {
      key: "line",
      value: function line(view, _line3, extraMarkers) {
        var localMarkers = [];
        advanceCursor(this.cursor, localMarkers, _line3.from);
        if (extraMarkers.length) localMarkers = localMarkers.concat(extraMarkers);
        var forLine = this.gutter.config.lineMarker(view, _line3, localMarkers);
        if (forLine) localMarkers.unshift(forLine);
        var gutter = this.gutter;
        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
        this.addElement(view, _line3, localMarkers);
      }
    }, {
      key: "widget",
      value: function widget(view, block) {
        var marker = this.gutter.config.widgetMarker(view, block.widget, block),
          markers = marker ? [marker] : null;
        var _iterator129 = _createForOfIteratorHelper(view.state.facet(gutterWidgetClass)),
          _step129;
        try {
          for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {
            var cls = _step129.value;
            var _marker = cls(view, block.widget, block);
            if (_marker) (markers || (markers = [])).push(_marker);
          }
        } catch (err) {
          _iterator129.e(err);
        } finally {
          _iterator129.f();
        }
        if (markers) this.addElement(view, block, markers);
      }
    }, {
      key: "finish",
      value: function finish() {
        var gutter = this.gutter;
        while (gutter.elements.length > this.i) {
          var last = gutter.elements.pop();
          gutter.dom.removeChild(last.dom);
          last.destroy();
        }
      }
    }]);
  }();
  var SingleGutterView = /*#__PURE__*/function () {
    function SingleGutterView(view, config) {
      var _this62 = this;
      _classCallCheck(this, SingleGutterView);
      this.view = view;
      this.config = config;
      this.elements = [];
      this.spacer = null;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");
      var _loop1 = function _loop1(prop) {
        _this62.dom.addEventListener(prop, function (event) {
          var target = event.target,
            y;
          if (target != _this62.dom && _this62.dom.contains(target)) {
            while (target.parentNode != _this62.dom) target = target.parentNode;
            var rect = target.getBoundingClientRect();
            y = (rect.top + rect.bottom) / 2;
          } else {
            y = event.clientY;
          }
          var line = view.lineBlockAtHeight(y - view.documentTop);
          if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
        });
      };
      for (var prop in config.domEventHandlers) {
        _loop1(prop);
      }
      this.markers = asArray(config.markers(view));
      if (config.initialSpacer) {
        this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
        this.dom.appendChild(this.spacer.dom);
        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
      }
    }
    return _createClass(SingleGutterView, [{
      key: "update",
      value: function update(_update16) {
        var prevMarkers = this.markers;
        this.markers = asArray(this.config.markers(_update16.view));
        if (this.spacer && this.config.updateSpacer) {
          var updated = this.config.updateSpacer(this.spacer.markers[0], _update16);
          if (updated != this.spacer.markers[0]) this.spacer.update(_update16.view, 0, 0, [updated]);
        }
        var vp = _update16.view.viewport;
        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(_update16) : false);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator130 = _createForOfIteratorHelper(this.elements),
          _step130;
        try {
          for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {
            var elt = _step130.value;
            elt.destroy();
          }
        } catch (err) {
          _iterator130.e(err);
        } finally {
          _iterator130.f();
        }
      }
    }]);
  }();
  var GutterElement = /*#__PURE__*/function () {
    function GutterElement(view, height, above, markers) {
      _classCallCheck(this, GutterElement);
      this.height = -1;
      this.above = 0;
      this.markers = [];
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutterElement";
      this.update(view, height, above, markers);
    }
    return _createClass(GutterElement, [{
      key: "update",
      value: function update(view, height, above, markers) {
        if (this.height != height) {
          this.height = height;
          this.dom.style.height = height + "px";
        }
        if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
        if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
      }
    }, {
      key: "setMarkers",
      value: function setMarkers(view, markers) {
        var cls = "cm-gutterElement",
          domPos = this.dom.firstChild;
        for (var iNew = 0, iOld = 0;;) {
          var skipTo = iOld,
            marker = iNew < markers.length ? markers[iNew++] : null,
            matched = false;
          if (marker) {
            var c = marker.elementClass;
            if (c) cls += " " + c;
            for (var _i119 = iOld; _i119 < this.markers.length; _i119++) if (this.markers[_i119].compare(marker)) {
              skipTo = _i119;
              matched = true;
              break;
            }
          } else {
            skipTo = this.markers.length;
          }
          while (iOld < skipTo) {
            var next = this.markers[iOld++];
            if (next.toDOM) {
              next.destroy(domPos);
              var after = domPos.nextSibling;
              domPos.remove();
              domPos = after;
            }
          }
          if (!marker) break;
          if (marker.toDOM) {
            if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
          }
          if (matched) iOld++;
        }
        this.dom.className = cls;
        this.markers = markers;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.setMarkers(null, []); // First argument not used unless creating markers
      }
    }]);
  }();
  function sameMarkers(a, b) {
    if (a.length != b.length) return false;
    for (var _i120 = 0; _i120 < a.length; _i120++) if (!a[_i120].compare(b[_i120])) return false;
    return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  var lineNumberMarkers = /*@__PURE__*/Facet.define();
  /**
  Facet used to create markers in the line number gutter next to widgets.
  */
  var lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
  var lineNumberConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return combineConfig(values, {
        formatNumber: String,
        domEventHandlers: {}
      }, {
        domEventHandlers: function domEventHandlers(a, b) {
          var result = Object.assign({}, a);
          var _loop10 = function _loop10() {
            var exists = result[event],
              add = b[event];
            result[event] = exists ? function (view, line, event) {
              return exists(view, line, event) || add(view, line, event);
            } : add;
          };
          for (var event in b) {
            _loop10();
          }
          return result;
        }
      });
    }
  });
  var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
    function NumberMarker(number) {
      var _this63;
      _classCallCheck(this, NumberMarker);
      _this63 = _callSuper(this, NumberMarker);
      _this63.number = number;
      return _this63;
    }
    _inherits(NumberMarker, _GutterMarker);
    return _createClass(NumberMarker, [{
      key: "eq",
      value: function eq(other) {
        return this.number == other.number;
      }
    }, {
      key: "toDOM",
      value: function toDOM() {
        return document.createTextNode(this.number);
      }
    }]);
  }(GutterMarker);
  function formatNumber(view, number) {
    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  var lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], function (state) {
    return {
      "class": "cm-lineNumbers",
      renderEmptyElements: false,
      markers: function markers(view) {
        return view.state.facet(lineNumberMarkers);
      },
      lineMarker: function lineMarker(view, line, others) {
        if (others.some(function (m) {
          return m.toDOM;
        })) return null;
        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: function widgetMarker(view, widget, block) {
        var _iterator131 = _createForOfIteratorHelper(view.state.facet(lineNumberWidgetMarker)),
          _step131;
        try {
          for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {
            var m = _step131.value;
            var result = m(view, widget, block);
            if (result) return result;
          }
        } catch (err) {
          _iterator131.e(err);
        } finally {
          _iterator131.f();
        }
        return null;
      },
      lineMarkerChange: function lineMarkerChange(update) {
        return update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig);
      },
      initialSpacer: function initialSpacer(view) {
        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer: function updateSpacer(spacer, update) {
        var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
        return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers,
      side: "before"
    };
  });
  /**
  Create a line number gutter extension.
  */
  function lineNumbers() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
  }
  function maxLineNumber(lines) {
    var last = 9;
    while (last < lines) last = last * 10 + 9;
    return last;
  }
  var activeLineGutterMarker = /*@__PURE__*/new (/*#__PURE__*/function (_GutterMarker2) {
    function _class6() {
      var _this64;
      _classCallCheck(this, _class6);
      _this64 = _callSuper(this, _class6, arguments);
      _this64.elementClass = "cm-activeLineGutter";
      return _this64;
    }
    _inherits(_class6, _GutterMarker2);
    return _createClass(_class6);
  }(GutterMarker))();
  var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
    var marks = [],
      last = -1;
    var _iterator132 = _createForOfIteratorHelper(state.selection.ranges),
      _step132;
    try {
      for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {
        var range = _step132.value;
        var linePos = state.doc.lineAt(range.head).from;
        if (linePos > last) {
          last = linePos;
          marks.push(activeLineGutterMarker.range(linePos));
        }
      }
    } catch (err) {
      _iterator132.e(err);
    } finally {
      _iterator132.f();
    }
    return RangeSet.of(marks);
  });
  /**
  Returns an extension that adds a `cm-activeLineGutter` class to
  all gutter elements on the [active
  line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
  */
  function highlightActiveLineGutter() {
    return activeLineGutterHighlighter;
  }

  /**
  The default maximum length of a `TreeBuffer` node.
  */
  var DefaultBufferLength = 1024;
  var nextPropID = 0;
  var Range = /*#__PURE__*/_createClass(function Range(from, to) {
    _classCallCheck(this, Range);
    this.from = from;
    this.to = to;
  });
  /**
  Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  can have metadata associated with it in props. Instances of this
  class represent prop names.
  */
  var NodeProp = /*#__PURE__*/function () {
    /**
    Create a new node prop type.
    */
    function NodeProp() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, NodeProp);
      this.id = nextPropID++;
      this.perNode = !!config.perNode;
      this.deserialize = config.deserialize || function () {
        throw new Error("This node type doesn't define a deserialize function");
      };
    }
    /**
    This is meant to be used with
    [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.ParserConfig.props) to compute
    prop values for each node type in the set. Takes a [match
    object](#common.NodeType^match) or function that returns undefined
    if the node type doesn't get this prop, and the prop's value if
    it does.
    */
    return _createClass(NodeProp, [{
      key: "add",
      value: function add(match) {
        var _this65 = this;
        if (this.perNode) throw new RangeError("Can't add per-node props to node types");
        if (typeof match != "function") match = NodeType.match(match);
        return function (type) {
          var result = match(type);
          return result === undefined ? null : [_this65, result];
        };
      }
    }]);
  }();
  /**
  Prop that is used to describe matching delimiters. For opening
  delimiters, this holds an array of node names (written as a
  space-separated string when declaring this prop in a grammar)
  for the node types of closing delimiters that match it.
  */
  NodeProp.closedBy = new NodeProp({
    deserialize: function deserialize(str) {
      return str.split(" ");
    }
  });
  /**
  The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  attached to closing delimiters, holding an array of node names
  of types of matching opening delimiters.
  */
  NodeProp.openedBy = new NodeProp({
    deserialize: function deserialize(str) {
      return str.split(" ");
    }
  });
  /**
  Used to assign node types to groups (for example, all node
  types that represent an expression could be tagged with an
  `"Expression"` group).
  */
  NodeProp.group = new NodeProp({
    deserialize: function deserialize(str) {
      return str.split(" ");
    }
  });
  /**
  Attached to nodes to indicate these should be
  [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
  in a bidirectional text isolate, so that direction-neutral
  characters on their sides don't incorrectly get associated with
  surrounding text. You'll generally want to set this for nodes
  that contain arbitrary text, like strings and comments, and for
  nodes that appear _inside_ arbitrary text, like HTML tags. When
  not given a value, in a grammar declaration, defaults to
  `"auto"`.
  */
  NodeProp.isolate = new NodeProp({
    deserialize: function deserialize(value) {
      if (value && value != "rtl" && value != "ltr" && value != "auto") throw new RangeError("Invalid value for isolate: " + value);
      return value || "auto";
    }
  });
  /**
  The hash of the [context](#lr.ContextTracker.constructor)
  that the node was parsed in, if any. Used to limit reuse of
  contextual nodes.
  */
  NodeProp.contextHash = new NodeProp({
    perNode: true
  });
  /**
  The distance beyond the end of the node that the tokenizer
  looked ahead for any of the tokens inside the node. (The LR
  parser only stores this when it is larger than 25, for
  efficiency reasons.)
  */
  NodeProp.lookAhead = new NodeProp({
    perNode: true
  });
  /**
  This per-node prop is used to replace a given node, or part of a
  node, with another tree. This is useful to include trees from
  different languages in mixed-language parsers.
  */
  NodeProp.mounted = new NodeProp({
    perNode: true
  });
  /**
  A mounted tree, which can be [stored](#common.NodeProp^mounted) on
  a tree node to indicate that parts of its content are
  represented by another tree.
  */
  var MountedTree = /*#__PURE__*/function () {
    function MountedTree(
    /**
    The inner tree.
    */
    tree,
    /**
    If this is null, this tree replaces the entire node (it will
    be included in the regular iteration instead of its host
    node). If not, only the given ranges are considered to be
    covered by this tree. This is used for trees that are mixed in
    a way that isn't strictly hierarchical. Such mounted trees are
    only entered by [`resolveInner`](#common.Tree.resolveInner)
    and [`enter`](#common.SyntaxNode.enter).
    */
    overlay,
    /**
    The parser used to create this subtree.
    */
    parser) {
      _classCallCheck(this, MountedTree);
      this.tree = tree;
      this.overlay = overlay;
      this.parser = parser;
    }
    /**
    @internal
    */
    return _createClass(MountedTree, null, [{
      key: "get",
      value: function get(tree) {
        return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
    }]);
  }();
  var noProps = Object.create(null);
  /**
  Each node in a syntax tree has a node type associated with it.
  */
  var NodeType = /*#__PURE__*/function () {
    /**
    @internal
    */
    function NodeType(
    /**
    The name of the node type. Not necessarily unique, but if the
    grammar was written properly, different node types with the
    same name within a node set should play the same semantic
    role.
    */
    name,
    /**
    @internal
    */
    props,
    /**
    The id of this node in its set. Corresponds to the term ids
    used in the parser.
    */
    id) {
      var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      _classCallCheck(this, NodeType);
      this.name = name;
      this.props = props;
      this.id = id;
      this.flags = flags;
    }
    /**
    Define a node type.
    */
    return _createClass(NodeType, [{
      key: "prop",
      value:
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      function prop(_prop) {
        return this.props[_prop.id];
      }
      /**
      True when this is the top node of a grammar.
      */
    }, {
      key: "isTop",
      get: function get() {
        return (this.flags & 1 /* NodeFlag.Top */) > 0;
      }
      /**
      True when this node is produced by a skip rule.
      */
    }, {
      key: "isSkipped",
      get: function get() {
        return (this.flags & 2 /* NodeFlag.Skipped */) > 0;
      }
      /**
      Indicates whether this is an error node.
      */
    }, {
      key: "isError",
      get: function get() {
        return (this.flags & 4 /* NodeFlag.Error */) > 0;
      }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
    }, {
      key: "isAnonymous",
      get: function get() {
        return (this.flags & 8 /* NodeFlag.Anonymous */) > 0;
      }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
    }, {
      key: "is",
      value: function is(name) {
        if (typeof name == 'string') {
          if (this.name == name) return true;
          var group = this.prop(NodeProp.group);
          return group ? group.indexOf(name) > -1 : false;
        }
        return this.id == name;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
    }], [{
      key: "define",
      value: function define(spec) {
        var props = spec.props && spec.props.length ? Object.create(null) : noProps;
        var flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) | (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
        var type = new NodeType(spec.name || "", props, spec.id, flags);
        if (spec.props) {
          var _iterator133 = _createForOfIteratorHelper(spec.props),
            _step133;
          try {
            for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {
              var src = _step133.value;
              if (!Array.isArray(src)) src = src(type);
              if (src) {
                if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
                props[src[0].id] = src[1];
              }
            }
          } catch (err) {
            _iterator133.e(err);
          } finally {
            _iterator133.f();
          }
        }
        return type;
      }
    }, {
      key: "match",
      value: function match(map) {
        var direct = Object.create(null);
        for (var prop in map) {
          var _iterator134 = _createForOfIteratorHelper(prop.split(" ")),
            _step134;
          try {
            for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {
              var _name6 = _step134.value;
              direct[_name6] = map[prop];
            }
          } catch (err) {
            _iterator134.e(err);
          } finally {
            _iterator134.f();
          }
        }
        return function (node) {
          for (var groups = node.prop(NodeProp.group), _i121 = -1; _i121 < (groups ? groups.length : 0); _i121++) {
            var found = direct[_i121 < 0 ? node.name : groups[_i121]];
            if (found) return found;
          }
        };
      }
    }]);
  }();
  /**
  An empty dummy node type to use when no actual type is available.
  */
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /**
  A node set holds a collection of node types. It is used to
  compactly represent trees by storing their type ids, rather than a
  full pointer to the type object, in a numeric array. Each parser
  [has](#lr.LRParser.nodeSet) a node set, and [tree
  buffers](#common.TreeBuffer) can only store collections of nodes
  from the same set. A set can have a maximum of 2**16 (65536) node
  types in it, so that the ids fit into 16-bit typed array slots.
  */
  var NodeSet = /*#__PURE__*/function () {
    /**
    Create a set with the given types. The `id` property of each
    type should correspond to its position within the array.
    */
    function NodeSet(
    /**
    The node types in this set, by id.
    */
    types) {
      _classCallCheck(this, NodeSet);
      this.types = types;
      for (var _i122 = 0; _i122 < types.length; _i122++) if (types[_i122].id != _i122) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    /**
    Create a copy of this set with some node properties added. The
    arguments to this method can be created with
    [`NodeProp.add`](#common.NodeProp.add).
    */
    return _createClass(NodeSet, [{
      key: "extend",
      value: function extend() {
        var newTypes = [];
        for (var _len7 = arguments.length, props = new Array(_len7), _key5 = 0; _key5 < _len7; _key5++) {
          props[_key5] = arguments[_key5];
        }
        var _iterator135 = _createForOfIteratorHelper(this.types),
          _step135;
        try {
          for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {
            var type = _step135.value;
            var newProps = null;
            var _iterator136 = _createForOfIteratorHelper(props),
              _step136;
            try {
              for (_iterator136.s(); !(_step136 = _iterator136.n()).done;) {
                var source = _step136.value;
                var add = source(type);
                if (add) {
                  if (!newProps) newProps = Object.assign({}, type.props);
                  newProps[add[0].id] = add[1];
                }
              }
            } catch (err) {
              _iterator136.e(err);
            } finally {
              _iterator136.f();
            }
            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
        } catch (err) {
          _iterator135.e(err);
        } finally {
          _iterator135.f();
        }
        return new NodeSet(newTypes);
      }
    }]);
  }();
  var CachedNode = new WeakMap(),
    CachedInnerNode = new WeakMap();
  /**
  Options that control iteration. Can be combined with the `|`
  operator to enable multiple ones.
  */
  var IterMode;
  (function (IterMode) {
    /**
    When enabled, iteration will only visit [`Tree`](#common.Tree)
    objects, not nodes packed into
    [`TreeBuffer`](#common.TreeBuffer)s.
    */
    IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
    /**
    Enable this to make iteration include anonymous nodes (such as
    the nodes that wrap repeated grammar constructs into a balanced
    tree).
    */
    IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
    /**
    By default, regular [mounted](#common.NodeProp^mounted) nodes
    replace their base node in iteration. Enable this to ignore them
    instead.
    */
    IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
    /**
    This option only applies in
    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
    library to not enter mounted overlays if one covers the given
    position.
    */
    IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /**
  A piece of syntax tree. There are two ways to approach these
  trees: the way they are actually stored in memory, and the
  convenient way.
   Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  objects. By packing detail information into `TreeBuffer` leaf
  nodes, the representation is made a lot more memory-efficient.
   However, when you want to actually work with tree nodes, this
  representation is very awkward, so most client code will want to
  use the [`TreeCursor`](#common.TreeCursor) or
  [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  a view on some part of this data structure, and can be used to
  move around to adjacent nodes.
  */
  var Tree = /*#__PURE__*/function () {
    /**
    Construct a new tree. See also [`Tree.build`](#common.Tree^build).
    */
    function Tree(
    /**
    The type of the top node.
    */
    type,
    /**
    This node's child nodes.
    */
    children,
    /**
    The positions (offsets relative to the start of this tree) of
    the children.
    */
    positions,
    /**
    The total length of this tree
    */
    length,
    /**
    Per-node [node props](#common.NodeProp) to associate with this node.
    */
    props) {
      _classCallCheck(this, Tree);
      this.type = type;
      this.children = children;
      this.positions = positions;
      this.length = length;
      /**
      @internal
      */
      this.props = null;
      if (props && props.length) {
        this.props = Object.create(null);
        var _iterator137 = _createForOfIteratorHelper(props),
          _step137;
        try {
          for (_iterator137.s(); !(_step137 = _iterator137.n()).done;) {
            var _step137$value = _slicedToArray(_step137.value, 2),
              prop = _step137$value[0],
              value = _step137$value[1];
            this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
        } catch (err) {
          _iterator137.e(err);
        } finally {
          _iterator137.f();
        }
      }
    }
    /**
    @internal
    */
    return _createClass(Tree, [{
      key: "toString",
      value: function toString() {
        var mounted = MountedTree.get(this);
        if (mounted && !mounted.overlay) return mounted.tree.toString();
        var children = "";
        var _iterator138 = _createForOfIteratorHelper(this.children),
          _step138;
        try {
          for (_iterator138.s(); !(_step138 = _iterator138.n()).done;) {
            var ch = _step138.value;
            var str = ch.toString();
            if (str) {
              if (children) children += ",";
              children += str;
            }
          }
        } catch (err) {
          _iterator138.e(err);
        } finally {
          _iterator138.f();
        }
        return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
    }, {
      key: "cursor",
      value: function cursor() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
    }, {
      key: "cursorAt",
      value: function cursorAt(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var scope = CachedNode.get(this) || this.topNode;
        var cursor = new TreeCursor(scope);
        cursor.moveTo(pos, side);
        CachedNode.set(this, cursor._tree);
        return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
    }, {
      key: "topNode",
      get: function get() {
        return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
    }, {
      key: "resolve",
      value: function resolve(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
        CachedNode.set(this, node);
        return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
    }, {
      key: "resolveInner",
      value: function resolveInner(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
        CachedInnerNode.set(this, node);
        return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
    }, {
      key: "resolveStack",
      value: function resolveStack(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
    }, {
      key: "iterate",
      value: function iterate(spec) {
        var enter = spec.enter,
          leave = spec.leave,
          _spec$from = spec.from,
          from = _spec$from === void 0 ? 0 : _spec$from,
          _spec$to2 = spec.to,
          to = _spec$to2 === void 0 ? this.length : _spec$to2;
        var mode = spec.mode || 0,
          anon = (mode & IterMode.IncludeAnonymous) > 0;
        for (var c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
          var entered = false;
          if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
            if (c.firstChild()) continue;
            entered = true;
          }
          for (;;) {
            if (entered && leave && (anon || !c.type.isAnonymous)) leave(c);
            if (c.nextSibling()) break;
            if (!c.parent()) return;
            entered = true;
          }
        }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
    }, {
      key: "prop",
      value: function prop(_prop2) {
        return !_prop2.perNode ? this.type.prop(_prop2) : this.props ? this.props[_prop2.id] : undefined;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
    }, {
      key: "propValues",
      get: function get() {
        var result = [];
        if (this.props) for (var _id2 in this.props) result.push([+_id2, this.props[_id2]]);
        return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
    }, {
      key: "balance",
      value: function balance() {
        var _this66 = this;
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.children.length <= 8 /* Balance.BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, function (children, positions, length) {
          return new Tree(_this66.type, children, positions, length, _this66.propValues);
        }, config.makeTree || function (children, positions, length) {
          return new Tree(NodeType.none, children, positions, length);
        });
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
    }], [{
      key: "build",
      value: function build(data) {
        return buildTree(data);
      }
    }]);
  }();
  /**
  The empty tree
  */
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  var FlatBufferCursor = /*#__PURE__*/function () {
    function FlatBufferCursor(buffer, index) {
      _classCallCheck(this, FlatBufferCursor);
      this.buffer = buffer;
      this.index = index;
    }
    return _createClass(FlatBufferCursor, [{
      key: "id",
      get: function get() {
        return this.buffer[this.index - 4];
      }
    }, {
      key: "start",
      get: function get() {
        return this.buffer[this.index - 3];
      }
    }, {
      key: "end",
      get: function get() {
        return this.buffer[this.index - 2];
      }
    }, {
      key: "size",
      get: function get() {
        return this.buffer[this.index - 1];
      }
    }, {
      key: "pos",
      get: function get() {
        return this.index;
      }
    }, {
      key: "next",
      value: function next() {
        this.index -= 4;
      }
    }, {
      key: "fork",
      value: function fork() {
        return new FlatBufferCursor(this.buffer, this.index);
      }
    }]);
  }();
  /**
  Tree buffers contain (type, start, end, endIndex) quads for each
  node. In such a buffer, nodes are stored in prefix order (parents
  before children, with the endIndex of the parent indicating which
  children belong to it).
  */
  var TreeBuffer = /*#__PURE__*/function () {
    /**
    Create a tree buffer.
    */
    function TreeBuffer(
    /**
    The buffer's content.
    */
    buffer,
    /**
    The total length of the group of nodes in the buffer.
    */
    length,
    /**
    The node set used in this buffer.
    */
    set) {
      _classCallCheck(this, TreeBuffer);
      this.buffer = buffer;
      this.length = length;
      this.set = set;
    }
    /**
    @internal
    */
    return _createClass(TreeBuffer, [{
      key: "type",
      get: function get() {
        return NodeType.none;
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        var result = [];
        for (var index = 0; index < this.buffer.length;) {
          result.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result.join(",");
      }
      /**
      @internal
      */
    }, {
      key: "childString",
      value: function childString(index) {
        var id = this.buffer[index],
          endIndex = this.buffer[index + 3];
        var type = this.set.types[id],
          result = type.name;
        if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
        index += 4;
        if (endIndex == index) return result;
        var children = [];
        while (index < endIndex) {
          children.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
    }, {
      key: "findChild",
      value: function findChild(startIndex, endIndex, dir, pos, side) {
        var buffer = this.buffer,
          pick = -1;
        for (var _i123 = startIndex; _i123 != endIndex; _i123 = buffer[_i123 + 3]) {
          if (checkSide(side, pos, buffer[_i123 + 1], buffer[_i123 + 2])) {
            pick = _i123;
            if (dir > 0) break;
          }
        }
        return pick;
      }
      /**
      @internal
      */
    }, {
      key: "slice",
      value: function slice(startI, endI, from) {
        var b = this.buffer;
        var copy = new Uint16Array(endI - startI),
          len = 0;
        for (var _i124 = startI, j = 0; _i124 < endI;) {
          copy[j++] = b[_i124++];
          copy[j++] = b[_i124++] - from;
          var to = copy[j++] = b[_i124++] - from;
          copy[j++] = b[_i124++] - startI;
          len = Math.max(len, to);
        }
        return new TreeBuffer(copy, len, this.set);
      }
    }]);
  }();
  function checkSide(side, pos, from, to) {
    switch (side) {
      case -2 /* Side.Before */:
        return from < pos;
      case -1 /* Side.AtOrBefore */:
        return to >= pos && from < pos;
      case 0 /* Side.Around */:
        return from < pos && to > pos;
      case 1 /* Side.AtOrAfter */:
        return from <= pos && to > pos;
      case 2 /* Side.After */:
        return to > pos;
      case 4 /* Side.DontCare */:
        return true;
    }
  }
  function resolveNode(node, pos, side, overlays) {
    var _a;
    // Move up to a node that actually holds the position, if possible
    while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
      var parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
      if (!parent) return node;
      node = parent;
    }
    var mode = overlays ? 0 : IterMode.IgnoreOverlays;
    // Must go up out of overlays when those do not overlap with pos
    if (overlays) for (var scan = node, _parent2 = scan.parent; _parent2; scan = _parent2, _parent2 = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a = _parent2.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = _parent2;
    }
    for (;;) {
      var inner = node.enter(pos, side, mode);
      if (!inner) return node;
      node = inner;
    }
  }
  var BaseNode = /*#__PURE__*/function () {
    function BaseNode() {
      _classCallCheck(this, BaseNode);
    }
    return _createClass(BaseNode, [{
      key: "cursor",
      value: function cursor() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        return new TreeCursor(this, mode);
      }
    }, {
      key: "getChild",
      value: function getChild(type) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var r = _getChildren(this, type, before, after);
        return r.length ? r[0] : null;
      }
    }, {
      key: "getChildren",
      value: function getChildren(type) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return _getChildren(this, type, before, after);
      }
    }, {
      key: "resolve",
      value: function resolve(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return resolveNode(this, pos, side, false);
      }
    }, {
      key: "resolveInner",
      value: function resolveInner(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return resolveNode(this, pos, side, true);
      }
    }, {
      key: "matchContext",
      value: function matchContext(context) {
        return matchNodeContext(this.parent, context);
      }
    }, {
      key: "enterUnfinishedNodesBefore",
      value: function enterUnfinishedNodesBefore(pos) {
        var scan = this.childBefore(pos),
          node = this;
        while (scan) {
          var last = scan.lastChild;
          if (!last || last.to != scan.to) break;
          if (last.type.isError && last.from == last.to) {
            node = scan;
            scan = last.prevSibling;
          } else {
            scan = last;
          }
        }
        return node;
      }
    }, {
      key: "node",
      get: function get() {
        return this;
      }
    }, {
      key: "next",
      get: function get() {
        return this.parent;
      }
    }]);
  }();
  var TreeNode = /*#__PURE__*/function (_BaseNode) {
    function TreeNode(_tree, from,
    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
    index, _parent) {
      var _this67;
      _classCallCheck(this, TreeNode);
      _this67 = _callSuper(this, TreeNode);
      _this67._tree = _tree;
      _this67.from = from;
      _this67.index = index;
      _this67._parent = _parent;
      return _this67;
    }
    _inherits(TreeNode, _BaseNode);
    return _createClass(TreeNode, [{
      key: "type",
      get: function get() {
        return this._tree.type;
      }
    }, {
      key: "name",
      get: function get() {
        return this._tree.type.name;
      }
    }, {
      key: "to",
      get: function get() {
        return this.from + this._tree.length;
      }
    }, {
      key: "nextChild",
      value: function nextChild(i, dir, pos, side) {
        var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        for (var parent = this;;) {
          for (var _parent$_tree = parent._tree, children = _parent$_tree.children, positions = _parent$_tree.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
            var next = children[i],
              start = positions[i] + parent.from;
            if (!checkSide(side, pos, start, start + next.length)) continue;
            if (next instanceof TreeBuffer) {
              if (mode & IterMode.ExcludeBuffers) continue;
              var index = next.findChild(0, next.buffer.length, dir, pos - start, side);
              if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
            } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {
              var mounted = void 0;
              if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
              var inner = new TreeNode(next, start, i, parent);
              return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
            }
          }
          if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;
          if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;
          parent = parent._parent;
          if (!parent) return null;
        }
      }
    }, {
      key: "firstChild",
      get: function get() {
        return this.nextChild(0, 1, 0, 4 /* Side.DontCare */);
      }
    }, {
      key: "lastChild",
      get: function get() {
        return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */);
      }
    }, {
      key: "childAfter",
      value: function childAfter(pos) {
        return this.nextChild(0, 1, pos, 2 /* Side.After */);
      }
    }, {
      key: "childBefore",
      value: function childBefore(pos) {
        return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */);
      }
    }, {
      key: "enter",
      value: function enter(pos, side) {
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var mounted;
        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
          var rPos = pos - this.from;
          var _iterator139 = _createForOfIteratorHelper(mounted.overlay),
            _step139;
          try {
            for (_iterator139.s(); !(_step139 = _iterator139.n()).done;) {
              var _step139$value = _step139.value,
                from = _step139$value.from,
                to = _step139$value.to;
              if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
            }
          } catch (err) {
            _iterator139.e(err);
          } finally {
            _iterator139.f();
          }
        }
        return this.nextChild(0, 1, pos, side, mode);
      }
    }, {
      key: "nextSignificantParent",
      value: function nextSignificantParent() {
        var val = this;
        while (val.type.isAnonymous && val._parent) val = val._parent;
        return val;
      }
    }, {
      key: "parent",
      get: function get() {
        return this._parent ? this._parent.nextSignificantParent() : null;
      }
    }, {
      key: "nextSibling",
      get: function get() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
      }
    }, {
      key: "prevSibling",
      get: function get() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
      }
    }, {
      key: "tree",
      get: function get() {
        return this._tree;
      }
    }, {
      key: "toTree",
      value: function toTree() {
        return this._tree;
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        return this._tree.toString();
      }
    }]);
  }(BaseNode);
  function _getChildren(node, type, before, after) {
    var cur = node.cursor(),
      result = [];
    if (!cur.firstChild()) return result;
    if (before != null) for (var found = false; !found;) {
      found = cur.type.is(before);
      if (!cur.nextSibling()) return result;
    }
    for (;;) {
      if (after != null && cur.type.is(after)) return result;
      if (cur.type.is(type)) result.push(cur.node);
      if (!cur.nextSibling()) return after == null ? result : [];
    }
  }
  function matchNodeContext(node, context) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;
    for (var _p2 = node; i >= 0; _p2 = _p2.parent) {
      if (!_p2) return false;
      if (!_p2.type.isAnonymous) {
        if (context[i] && context[i] != _p2.name) return false;
        i--;
      }
    }
    return true;
  }
  var BufferContext = /*#__PURE__*/_createClass(function BufferContext(parent, buffer, index, start) {
    _classCallCheck(this, BufferContext);
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  });
  var BufferNode = /*#__PURE__*/function (_BaseNode2) {
    function BufferNode(context, _parent, index) {
      var _this68;
      _classCallCheck(this, BufferNode);
      _this68 = _callSuper(this, BufferNode);
      _this68.context = context;
      _this68._parent = _parent;
      _this68.index = index;
      _this68.type = context.buffer.set.types[context.buffer.buffer[index]];
      return _this68;
    }
    _inherits(BufferNode, _BaseNode2);
    return _createClass(BufferNode, [{
      key: "name",
      get: function get() {
        return this.type.name;
      }
    }, {
      key: "from",
      get: function get() {
        return this.context.start + this.context.buffer.buffer[this.index + 1];
      }
    }, {
      key: "to",
      get: function get() {
        return this.context.start + this.context.buffer.buffer[this.index + 2];
      }
    }, {
      key: "child",
      value: function child(dir, pos, side) {
        var buffer = this.context.buffer;
        var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
        return index < 0 ? null : new BufferNode(this.context, this, index);
      }
    }, {
      key: "firstChild",
      get: function get() {
        return this.child(1, 0, 4 /* Side.DontCare */);
      }
    }, {
      key: "lastChild",
      get: function get() {
        return this.child(-1, 0, 4 /* Side.DontCare */);
      }
    }, {
      key: "childAfter",
      value: function childAfter(pos) {
        return this.child(1, pos, 2 /* Side.After */);
      }
    }, {
      key: "childBefore",
      value: function childBefore(pos) {
        return this.child(-1, pos, -2 /* Side.Before */);
      }
    }, {
      key: "enter",
      value: function enter(pos, side) {
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        if (mode & IterMode.ExcludeBuffers) return null;
        var buffer = this.context.buffer;
        var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
        return index < 0 ? null : new BufferNode(this.context, this, index);
      }
    }, {
      key: "parent",
      get: function get() {
        return this._parent || this.context.parent.nextSignificantParent();
      }
    }, {
      key: "externalSibling",
      value: function externalSibling(dir) {
        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
      }
    }, {
      key: "nextSibling",
      get: function get() {
        var buffer = this.context.buffer;
        var after = buffer.buffer[this.index + 3];
        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
        return this.externalSibling(1);
      }
    }, {
      key: "prevSibling",
      get: function get() {
        var buffer = this.context.buffer;
        var parentStart = this._parent ? this._parent.index + 4 : 0;
        if (this.index == parentStart) return this.externalSibling(-1);
        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      }
    }, {
      key: "tree",
      get: function get() {
        return null;
      }
    }, {
      key: "toTree",
      value: function toTree() {
        var children = [],
          positions = [];
        var buffer = this.context.buffer;
        var startI = this.index + 4,
          endI = buffer.buffer[this.index + 3];
        if (endI > startI) {
          var from = buffer.buffer[this.index + 1];
          children.push(buffer.slice(startI, endI, from));
          positions.push(0);
        }
        return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        return this.context.buffer.childString(this.index);
      }
    }]);
  }(BaseNode);
  function iterStack(heads) {
    if (!heads.length) return null;
    var pick = 0,
      picked = heads[0];
    for (var _i125 = 1; _i125 < heads.length; _i125++) {
      var node = heads[_i125];
      if (node.from > picked.from || node.to < picked.to) {
        picked = node;
        pick = _i125;
      }
    }
    var next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
    var newHeads = heads.slice();
    if (next) newHeads[pick] = next;else newHeads.splice(pick, 1);
    return new StackIterator(newHeads, picked);
  }
  var StackIterator = /*#__PURE__*/function () {
    function StackIterator(heads, node) {
      _classCallCheck(this, StackIterator);
      this.heads = heads;
      this.node = node;
    }
    return _createClass(StackIterator, [{
      key: "next",
      get: function get() {
        return iterStack(this.heads);
      }
    }]);
  }();
  function stackIterator(tree, pos, side) {
    var inner = tree.resolveInner(pos, side),
      layers = null;
    for (var scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
      if (scan.index < 0) {
        // This is an overlay root
        var parent = scan.parent;
        (layers || (layers = [inner])).push(parent.resolve(pos, side));
        scan = parent;
      } else {
        var mount = MountedTree.get(scan.tree);
        // Relevant overlay branching off
        if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
          var root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
          (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
        }
      }
    }
    return layers ? iterStack(layers) : inner;
  }
  /**
  A tree cursor object focuses on a given node in a syntax tree, and
  allows you to move to adjacent nodes.
  */
  var TreeCursor = /*#__PURE__*/function () {
    /**
    @internal
    */
    function TreeCursor(node) {
      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      _classCallCheck(this, TreeCursor);
      this.mode = mode;
      /**
      @internal
      */
      this.buffer = null;
      this.stack = [];
      /**
      @internal
      */
      this.index = 0;
      this.bufferNode = null;
      if (node instanceof TreeNode) {
        this.yieldNode(node);
      } else {
        this._tree = node.context.parent;
        this.buffer = node.context;
        for (var n = node._parent; n; n = n._parent) this.stack.unshift(n.index);
        this.bufferNode = node;
        this.yieldBuf(node.index);
      }
    }
    return _createClass(TreeCursor, [{
      key: "name",
      get:
      /**
      Shorthand for `.type.name`.
      */
      function get() {
        return this.type.name;
      }
    }, {
      key: "yieldNode",
      value: function yieldNode(node) {
        if (!node) return false;
        this._tree = node;
        this.type = node.type;
        this.from = node.from;
        this.to = node.to;
        return true;
      }
    }, {
      key: "yieldBuf",
      value: function yieldBuf(index, type) {
        this.index = index;
        var _this$buffer = this.buffer,
          start = _this$buffer.start,
          buffer = _this$buffer.buffer;
        this.type = type || buffer.set.types[buffer.buffer[index]];
        this.from = start + buffer.buffer[index + 1];
        this.to = start + buffer.buffer[index + 2];
        return true;
      }
      /**
      @internal
      */
    }, {
      key: "yield",
      value: function _yield(node) {
        if (!node) return false;
        if (node instanceof TreeNode) {
          this.buffer = null;
          return this.yieldNode(node);
        }
        this.buffer = node.context;
        return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
    }, {
      key: "toString",
      value: function toString() {
        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
    }, {
      key: "enterChild",
      value: function enterChild(dir, pos, side) {
        if (!this.buffer) return this["yield"](this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
        var buffer = this.buffer.buffer;
        var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
        if (index < 0) return false;
        this.stack.push(this.index);
        return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
    }, {
      key: "firstChild",
      value: function firstChild() {
        return this.enterChild(1, 0, 4 /* Side.DontCare */);
      }
      /**
      Move the cursor to this node's last child.
      */
    }, {
      key: "lastChild",
      value: function lastChild() {
        return this.enterChild(-1, 0, 4 /* Side.DontCare */);
      }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
    }, {
      key: "childAfter",
      value: function childAfter(pos) {
        return this.enterChild(1, pos, 2 /* Side.After */);
      }
      /**
      Move to the last child that starts before `pos`.
      */
    }, {
      key: "childBefore",
      value: function childBefore(pos) {
        return this.enterChild(-1, pos, -2 /* Side.Before */);
      }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
    }, {
      key: "enter",
      value: function enter(pos, side) {
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;
        if (!this.buffer) return this["yield"](this._tree.enter(pos, side, mode));
        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
    }, {
      key: "parent",
      value: function parent() {
        if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
        if (this.stack.length) return this.yieldBuf(this.stack.pop());
        var parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
        this.buffer = null;
        return this.yieldNode(parent);
      }
      /**
      @internal
      */
    }, {
      key: "sibling",
      value: function sibling(dir) {
        if (!this.buffer) return !this._tree._parent ? false : this["yield"](this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
        var buffer = this.buffer.buffer,
          d = this.stack.length - 1;
        if (dir < 0) {
          var parentStart = d < 0 ? 0 : this.stack[d] + 4;
          if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
        } else {
          var after = buffer.buffer[this.index + 3];
          if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
        }
        return d < 0 ? this["yield"](this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
    }, {
      key: "nextSibling",
      value: function nextSibling() {
        return this.sibling(1);
      }
      /**
      Move to this node's previous sibling, if any.
      */
    }, {
      key: "prevSibling",
      value: function prevSibling() {
        return this.sibling(-1);
      }
    }, {
      key: "atLastNode",
      value: function atLastNode(dir) {
        var index,
          parent,
          buffer = this.buffer;
        if (buffer) {
          if (dir > 0) {
            if (this.index < buffer.buffer.buffer.length) return false;
          } else {
            for (var _i126 = 0; _i126 < this.index; _i126++) if (buffer.buffer.buffer[_i126 + 3] < this.index) return false;
          }
          index = buffer.index;
          parent = buffer.parent;
        } else {
          var _this$_tree = this._tree;
          index = _this$_tree.index;
          parent = _this$_tree._parent;
        }
        for (; parent; _parent3 = parent, index = _parent3.index, parent = _parent3._parent, _parent3) {
          var _parent3;
          if (index > -1) for (var _i127 = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; _i127 != e; _i127 += dir) {
            var child = parent._tree.children[_i127];
            if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
          }
        }
        return true;
      }
    }, {
      key: "move",
      value: function move(dir, enter) {
        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */)) return true;
        for (;;) {
          if (this.sibling(dir)) return true;
          if (this.atLastNode(dir) || !this.parent()) return false;
        }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
    }, {
      key: "next",
      value: function next() {
        var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return this.move(1, enter);
      }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
    }, {
      key: "prev",
      value: function prev() {
        var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return this.move(-1, enter);
      }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
    }, {
      key: "moveTo",
      value: function moveTo(pos) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        // Move up to a node that actually holds the position, if possible
        while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;
        // Then scan down into child nodes as far as possible
        while (this.enterChild(1, pos, side)) {}
        return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
    }, {
      key: "node",
      get: function get() {
        if (!this.buffer) return this._tree;
        var cache = this.bufferNode,
          result = null,
          depth = 0;
        if (cache && cache.context == this.buffer) {
          scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
            for (var c = cache; c; c = c._parent) if (c.index == index) {
              if (index == this.index) return c;
              result = c;
              depth = d + 1;
              break scan;
            }
            index = this.stack[--d];
          }
        }
        for (var _i128 = depth; _i128 < this.stack.length; _i128++) result = new BufferNode(this.buffer, result, this.stack[_i128]);
        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
    }, {
      key: "tree",
      get: function get() {
        return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
    }, {
      key: "iterate",
      value: function iterate(enter, leave) {
        for (var depth = 0;;) {
          var mustLeave = false;
          if (this.type.isAnonymous || enter(this) !== false) {
            if (this.firstChild()) {
              depth++;
              continue;
            }
            if (!this.type.isAnonymous) mustLeave = true;
          }
          for (;;) {
            if (mustLeave && leave) leave(this);
            mustLeave = this.type.isAnonymous;
            if (!depth) return;
            if (this.nextSibling()) break;
            this.parent();
            depth--;
            mustLeave = true;
          }
        }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
    }, {
      key: "matchContext",
      value: function matchContext(context) {
        if (!this.buffer) return matchNodeContext(this.node.parent, context);
        var buffer = this.buffer.buffer,
          types = buffer.set.types;
        for (var _i129 = context.length - 1, d = this.stack.length - 1; _i129 >= 0; d--) {
          if (d < 0) return matchNodeContext(this._tree, context, _i129);
          var type = types[buffer.buffer[this.stack[d]]];
          if (!type.isAnonymous) {
            if (context[_i129] && context[_i129] != type.name) return false;
            _i129--;
          }
        }
        return true;
      }
    }]);
  }();
  function hasChild(tree) {
    return tree.children.some(function (ch) {
      return ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch);
    });
  }
  function buildTree(data) {
    var _a;
    var buffer = data.buffer,
      nodeSet = data.nodeSet,
      _data$maxBufferLength = data.maxBufferLength,
      maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,
      _data$reused = data.reused,
      reused = _data$reused === void 0 ? [] : _data$reused,
      _data$minRepeatType = data.minRepeatType,
      minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;
    var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
    var types = nodeSet.types;
    var contextHash = 0,
      lookAhead = 0;
    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
      var id = cursor.id,
        start = cursor.start,
        end = cursor.end,
        size = cursor.size;
      var lookAheadAtStart = lookAhead,
        contextAtStart = contextHash;
      while (size < 0) {
        cursor.next();
        if (size == -1 /* SpecialRecord.Reuse */) {
          var _node = reused[id];
          children.push(_node);
          positions.push(start - parentStart);
          return;
        } else if (size == -3 /* SpecialRecord.ContextChange */) {
          // Context change
          contextHash = id;
          return;
        } else if (size == -4 /* SpecialRecord.LookAhead */) {
          lookAhead = id;
          return;
        } else {
          throw new RangeError("Unrecognized record size: ".concat(size));
        }
      }
      var type = types[id],
        node,
        buffer;
      var startPos = start - parentStart;
      if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
        // Small enough for a buffer, and no reused nodes inside
        var _data = new Uint16Array(buffer.size - buffer.skip);
        var endPos = cursor.pos - buffer.size,
          index = _data.length;
        while (cursor.pos > endPos) index = copyToBuffer(buffer.start, _data, index);
        node = new TreeBuffer(_data, end - buffer.start, nodeSet);
        startPos = buffer.start - parentStart;
      } else {
        // Make it a node
        var _endPos = cursor.pos - size;
        cursor.next();
        var localChildren = [],
          localPositions = [];
        var localInRepeat = id >= minRepeatType ? id : -1;
        var lastGroup = 0,
          lastEnd = end;
        while (cursor.pos > _endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else if (depth > 2500 /* CutOff.Depth */) {
            takeFlatNode(start, _endPos, localChildren, localPositions);
          } else {
            takeNode(start, _endPos, localChildren, localPositions, localInRepeat, depth + 1);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          var make = makeBalanced(type, contextAtStart);
          node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
        } else {
          node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
        }
      }
      children.push(node);
      positions.push(startPos);
    }
    function takeFlatNode(parentStart, minPos, children, positions) {
      var nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
      var nodeCount = 0,
        stopAt = -1;
      while (cursor.pos > minPos) {
        var _id3 = cursor.id,
          start = cursor.start,
          end = cursor.end,
          size = cursor.size;
        if (size > 4) {
          // Not a leaf
          cursor.next();
        } else if (stopAt > -1 && start < stopAt) {
          break;
        } else {
          if (stopAt < 0) stopAt = end - maxBufferLength;
          nodes.push(_id3, start, end);
          nodeCount++;
          cursor.next();
        }
      }
      if (nodeCount) {
        var _buffer = new Uint16Array(nodeCount * 4);
        var _start2 = nodes[nodes.length - 2];
        for (var _i130 = nodes.length - 3, j = 0; _i130 >= 0; _i130 -= 3) {
          _buffer[j++] = nodes[_i130];
          _buffer[j++] = nodes[_i130 + 1] - _start2;
          _buffer[j++] = nodes[_i130 + 2] - _start2;
          _buffer[j++] = j;
        }
        children.push(new TreeBuffer(_buffer, nodes[2] - _start2, nodeSet));
        positions.push(_start2 - parentStart);
      }
    }
    function makeBalanced(type, contextHash) {
      return function (children, positions, length) {
        var lookAhead = 0,
          lastI = children.length - 1,
          last,
          lookAheadProp;
        if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
          if (!lastI && last.type == type && last.length == length) return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type, children, positions, length, lookAhead, contextHash);
      };
    }
    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
      var localChildren = [],
        localPositions = [];
      while (children.length > i) {
        localChildren.push(children.pop());
        localPositions.push(positions.pop() + base - from);
      }
      children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
      positions.push(from - base);
    }
    function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
      if (contextHash) {
        var _pair = [NodeProp.contextHash, contextHash];
        props = props ? [_pair].concat(props) : [_pair];
      }
      if (lookAhead > 25) {
        var _pair2 = [NodeProp.lookAhead, lookAhead];
        props = props ? [_pair2].concat(props) : [_pair2];
      }
      return new Tree(type, children, positions, length, props);
    }
    function findBufferSize(maxSize, inRepeat) {
      // Scan through the buffer to find previous siblings that fit
      // together in a TreeBuffer, and don't contain any reused nodes
      // (which can't be stored in a buffer).
      // If `inRepeat` is > -1, ignore node boundaries of that type for
      // nesting, but make sure the end falls either at the start
      // (`maxSize`) or before such a node.
      var fork = cursor.fork();
      var size = 0,
        start = 0,
        skip = 0,
        minStart = fork.end - maxBufferLength;
      var result = {
        size: 0,
        start: 0,
        skip: 0
      };
      scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
        var _nodeSize = fork.size;
        // Pretend nested repeat nodes of the same type don't exist
        if (fork.id == inRepeat && _nodeSize >= 0) {
          // Except that we store the current state as a valid return
          // value.
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        var startPos = fork.pos - _nodeSize;
        if (_nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
        var localSkipped = fork.id >= minRepeatType ? 4 : 0;
        var _nodeStart = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3 /* SpecialRecord.ContextChange */) localSkipped += 4;else break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = _nodeStart;
        size += _nodeSize;
        skip += localSkipped;
      }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start;
        result.skip = skip;
      }
      return result.size > 4 ? result : undefined;
    }
    function copyToBuffer(bufferStart, buffer, index) {
      var id = cursor.id,
        start = cursor.start,
        end = cursor.end,
        size = cursor.size;
      cursor.next();
      if (size >= 0 && id < minRepeatType) {
        var startIndex = index;
        if (size > 4) {
          var endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);
        }
        buffer[--index] = startIndex;
        buffer[--index] = end - bufferStart;
        buffer[--index] = start - bufferStart;
        buffer[--index] = id;
      } else if (size == -3 /* SpecialRecord.ContextChange */) {
        contextHash = id;
      } else if (size == -4 /* SpecialRecord.LookAhead */) {
        lookAhead = id;
      }
      return index;
    }
    var children = [],
      positions = [];
    while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
    var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  var nodeSizeCache = new WeakMap();
  function nodeSize(balanceType, node) {
    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
    var size = nodeSizeCache.get(node);
    if (size == null) {
      size = 1;
      var _iterator140 = _createForOfIteratorHelper(node.children),
        _step140;
      try {
        for (_iterator140.s(); !(_step140 = _iterator140.n()).done;) {
          var child = _step140.value;
          if (child.type != balanceType || !(child instanceof Tree)) {
            size = 1;
            break;
          }
          size += nodeSize(balanceType, child);
        }
      } catch (err) {
        _iterator140.e(err);
      } finally {
        _iterator140.f();
      }
      nodeSizeCache.set(node, size);
    }
    return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType,
  // The direct children and their positions
  children, positions,
  // The index range in children/positions to use
  from, to,
  // The start position of the nodes, relative to their parent.
  start,
  // Length of the outer node
  length,
  // Function to build the top node of the balanced tree
  mkTop,
  // Function to build internal nodes for the balanced tree
  mkTree) {
    var total = 0;
    for (var _i131 = from; _i131 < to; _i131++) total += nodeSize(balanceType, children[_i131]);
    var maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */);
    var localChildren = [],
      localPositions = [];
    function divide(children, positions, from, to, offset) {
      for (var _i132 = from; _i132 < to;) {
        var groupFrom = _i132,
          groupStart = positions[_i132],
          groupSize = nodeSize(balanceType, children[_i132]);
        _i132++;
        for (; _i132 < to; _i132++) {
          var nextSize = nodeSize(balanceType, children[_i132]);
          if (groupSize + nextSize >= maxChild) break;
          groupSize += nextSize;
        }
        if (_i132 == groupFrom + 1) {
          if (groupSize > maxChild) {
            var only = children[groupFrom]; // Only trees can have a size > 1
            divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
            continue;
          }
          localChildren.push(children[groupFrom]);
        } else {
          var _length = positions[_i132 - 1] + children[_i132 - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children, positions, groupFrom, _i132, groupStart, _length, null, mkTree));
        }
        localPositions.push(groupStart + offset - start);
      }
    }
    divide(children, positions, from, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length);
  }
  /**
  Provides a way to associate values with pieces of trees. As long
  as that part of the tree is reused, the associated values can be
  retrieved from an updated tree.
  */
  var NodeWeakMap = /*#__PURE__*/function () {
    function NodeWeakMap() {
      _classCallCheck(this, NodeWeakMap);
      this.map = new WeakMap();
    }
    return _createClass(NodeWeakMap, [{
      key: "setBuffer",
      value: function setBuffer(buffer, index, value) {
        var inner = this.map.get(buffer);
        if (!inner) this.map.set(buffer, inner = new Map());
        inner.set(index, value);
      }
    }, {
      key: "getBuffer",
      value: function getBuffer(buffer, index) {
        var inner = this.map.get(buffer);
        return inner && inner.get(index);
      }
      /**
      Set the value for this syntax node.
      */
    }, {
      key: "set",
      value: function set(node, value) {
        if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);
      }
      /**
      Retrieve value for this syntax node, if it exists in the map.
      */
    }, {
      key: "get",
      value: function get(node) {
        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
      }
      /**
      Set the value for the node that a cursor currently points to.
      */
    }, {
      key: "cursorSet",
      value: function cursorSet(cursor, value) {
        if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);
      }
      /**
      Retrieve the value for the node that a cursor currently points
      to.
      */
    }, {
      key: "cursorGet",
      value: function cursorGet(cursor) {
        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
      }
    }]);
  }();
  /**
  Tree fragments are used during [incremental
  parsing](#common.Parser.startParse) to track parts of old trees
  that can be reused in a new parse. An array of fragments is used
  to track regions of an old tree whose nodes might be reused in new
  parses. Use the static
  [`applyChanges`](#common.TreeFragment^applyChanges) method to
  update fragments for document changes.
  */
  var TreeFragment = /*#__PURE__*/function () {
    /**
    Construct a tree fragment. You'll usually want to use
    [`addTree`](#common.TreeFragment^addTree) and
    [`applyChanges`](#common.TreeFragment^applyChanges) instead of
    calling this directly.
    */
    function TreeFragment(
    /**
    The start of the unchanged range pointed to by this fragment.
    This refers to an offset in the _updated_ document (as opposed
    to the original tree).
    */
    from,
    /**
    The end of the unchanged range.
    */
    to,
    /**
    The tree that this fragment is based on.
    */
    tree,
    /**
    The offset between the fragment's tree and the document that
    this fragment can be used against. Add this when going from
    document to tree positions, subtract it to go from tree to
    document positions.
    */
    offset) {
      var openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      _classCallCheck(this, TreeFragment);
      this.from = from;
      this.to = to;
      this.tree = tree;
      this.offset = offset;
      this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
    }
    /**
    Whether the start of the fragment represents the start of a
    parse, or the end of a change. (In the second case, it may not
    be safe to reuse some nodes at the start, depending on the
    parsing algorithm.)
    */
    return _createClass(TreeFragment, [{
      key: "openStart",
      get: function get() {
        return (this.open & 1 /* Open.Start */) > 0;
      }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
    }, {
      key: "openEnd",
      get: function get() {
        return (this.open & 2 /* Open.End */) > 0;
      }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
    }], [{
      key: "addTree",
      value: function addTree(tree) {
        var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
        var _iterator141 = _createForOfIteratorHelper(fragments),
          _step141;
        try {
          for (_iterator141.s(); !(_step141 = _iterator141.n()).done;) {
            var f = _step141.value;
            if (f.to > tree.length) result.push(f);
          }
        } catch (err) {
          _iterator141.e(err);
        } finally {
          _iterator141.f();
        }
        return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
    }, {
      key: "applyChanges",
      value: function applyChanges(fragments, changes) {
        var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;
        if (!changes.length) return fragments;
        var result = [];
        var fI = 1,
          nextF = fragments.length ? fragments[0] : null;
        for (var cI = 0, pos = 0, off = 0;; cI++) {
          var nextC = cI < changes.length ? changes[cI] : null;
          var nextPos = nextC ? nextC.fromA : 1e9;
          if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
            var cut = nextF;
            if (pos >= cut.from || nextPos <= cut.to || off) {
              var fFrom = Math.max(cut.from, pos) - off,
                fTo = Math.min(cut.to, nextPos) - off;
              cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
            }
            if (cut) result.push(cut);
            if (nextF.to > nextPos) break;
            nextF = fI < fragments.length ? fragments[fI++] : null;
          }
          if (!nextC) break;
          pos = nextC.toA;
          off = nextC.toA - nextC.toB;
        }
        return result;
      }
    }]);
  }();
  /**
  A superclass that parsers should extend.
  */
  var Parser = /*#__PURE__*/function () {
    function Parser() {
      _classCallCheck(this, Parser);
    }
    return _createClass(Parser, [{
      key: "startParse",
      value:
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      function startParse(input, fragments, ranges) {
        if (typeof input == "string") input = new StringInput(input);
        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(function (r) {
          return new Range(r.from, r.to);
        }) : [new Range(0, 0)];
        return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
    }, {
      key: "parse",
      value: function parse(input, fragments, ranges) {
        var parse = this.startParse(input, fragments, ranges);
        for (;;) {
          var done = parse.advance();
          if (done) return done;
        }
      }
    }]);
  }();
  var StringInput = /*#__PURE__*/function () {
    function StringInput(string) {
      _classCallCheck(this, StringInput);
      this.string = string;
    }
    return _createClass(StringInput, [{
      key: "length",
      get: function get() {
        return this.string.length;
      }
    }, {
      key: "chunk",
      value: function chunk(from) {
        return this.string.slice(from);
      }
    }, {
      key: "lineChunks",
      get: function get() {
        return false;
      }
    }, {
      key: "read",
      value: function read(from, to) {
        return this.string.slice(from, to);
      }
    }]);
  }();
  new NodeProp({
    perNode: true
  });
  var nextTagID = 0;
  /**
  Highlighting tags are markers that denote a highlighting category.
  They are [associated](#highlight.styleTags) with parts of a syntax
  tree by a language mode, and then mapped to an actual CSS style by
  a [highlighter](#highlight.Highlighter).
   Because syntax tree node types and highlight styles have to be
  able to talk the same language, CodeMirror uses a mostly _closed_
  [vocabulary](#highlight.tags) of syntax tags (as opposed to
  traditional open string-based systems, which make it hard for
  highlighting themes to cover all the tokens produced by the
  various languages).
   It _is_ possible to [define](#highlight.Tag^define) your own
  highlighting tags for system-internal use (where you control both
  the language package and the highlighter), but such tags will not
  be picked up by regular highlighters (though you can derive them
  from standard tags to allow highlighters to fall back to those).
  */
  var Tag = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Tag(
    /**
    The optional name of the base tag @internal
    */
    name,
    /**
    The set of this tag and all its parent tags, starting with
    this one itself and sorted in order of decreasing specificity.
    */
    set,
    /**
    The base unmodified tag that this one is based on, if it's
    modified @internal
    */
    base,
    /**
    The modifiers applied to this.base @internal
    */
    modified) {
      _classCallCheck(this, Tag);
      this.name = name;
      this.set = set;
      this.base = base;
      this.modified = modified;
      /**
      @internal
      */
      this.id = nextTagID++;
    }
    return _createClass(Tag, [{
      key: "toString",
      value: function toString() {
        var name = this.name;
        var _iterator142 = _createForOfIteratorHelper(this.modified),
          _step142;
        try {
          for (_iterator142.s(); !(_step142 = _iterator142.n()).done;) {
            var mod = _step142.value;
            if (mod.name) name = "".concat(mod.name, "(").concat(name, ")");
          }
        } catch (err) {
          _iterator142.e(err);
        } finally {
          _iterator142.f();
        }
        return name;
      }
    }], [{
      key: "define",
      value: function define(nameOrParent, parent) {
        var name = typeof nameOrParent == "string" ? nameOrParent : "?";
        if (nameOrParent instanceof Tag) parent = nameOrParent;
        if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
        var tag = new Tag(name, [], null, []);
        tag.set.push(tag);
        if (parent) {
          var _iterator143 = _createForOfIteratorHelper(parent.set),
            _step143;
          try {
            for (_iterator143.s(); !(_step143 = _iterator143.n()).done;) {
              var _t7 = _step143.value;
              tag.set.push(_t7);
            }
          } catch (err) {
            _iterator143.e(err);
          } finally {
            _iterator143.f();
          }
        }
        return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
    }, {
      key: "defineModifier",
      value: function defineModifier(name) {
        var mod = new Modifier(name);
        return function (tag) {
          if (tag.modified.indexOf(mod) > -1) return tag;
          return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {
            return a.id - b.id;
          }));
        };
      }
    }]);
  }();
  var nextModifierID = 0;
  var Modifier = /*#__PURE__*/function () {
    function Modifier(name) {
      _classCallCheck(this, Modifier);
      this.name = name;
      this.instances = [];
      this.id = nextModifierID++;
    }
    return _createClass(Modifier, null, [{
      key: "get",
      value: function get(base, mods) {
        if (!mods.length) return base;
        var exists = mods[0].instances.find(function (t) {
          return t.base == base && sameArray(mods, t.modified);
        });
        if (exists) return exists;
        var set = [],
          tag = new Tag(base.name, set, base, mods);
        var _iterator144 = _createForOfIteratorHelper(mods),
          _step144;
        try {
          for (_iterator144.s(); !(_step144 = _iterator144.n()).done;) {
            var m = _step144.value;
            m.instances.push(tag);
          }
        } catch (err) {
          _iterator144.e(err);
        } finally {
          _iterator144.f();
        }
        var configs = powerSet(mods);
        var _iterator145 = _createForOfIteratorHelper(base.set),
          _step145;
        try {
          for (_iterator145.s(); !(_step145 = _iterator145.n()).done;) {
            var parent = _step145.value;
            if (!parent.modified.length) {
              var _iterator146 = _createForOfIteratorHelper(configs),
                _step146;
              try {
                for (_iterator146.s(); !(_step146 = _iterator146.n()).done;) {
                  var _config2 = _step146.value;
                  set.push(Modifier.get(parent, _config2));
                }
              } catch (err) {
                _iterator146.e(err);
              } finally {
                _iterator146.f();
              }
            }
          }
        } catch (err) {
          _iterator145.e(err);
        } finally {
          _iterator145.f();
        }
        return tag;
      }
    }]);
  }();
  function sameArray(a, b) {
    return a.length == b.length && a.every(function (x, i) {
      return x == b[i];
    });
  }
  function powerSet(array) {
    var sets = [[]];
    for (var _i133 = 0; _i133 < array.length; _i133++) {
      for (var j = 0, e = sets.length; j < e; j++) {
        sets.push(sets[j].concat(array[_i133]));
      }
    }
    return sets.sort(function (a, b) {
      return b.length - a.length;
    });
  }
  /**
  This function is used to add a set of tags to a language syntax
  via [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.LRParser.configure).
   The argument object maps node selectors to [highlighting
  tags](#highlight.Tag) or arrays of tags.
   Node selectors may hold one or more (space-separated) node paths.
  Such a path can be a [node name](#common.NodeType.name), or
  multiple node names (or `*` wildcards) separated by slash
  characters, as in `"Block/Declaration/VariableName"`. Such a path
  matches the final node but only if its direct parent nodes are the
  other nodes mentioned. A `*` in such a path matches any parent,
  but only a single level—wildcards that match multiple parents
  aren't supported, both for efficiency reasons and because Lezer
  trees make it rather hard to reason about what they would match.)
   A path can be ended with `/...` to indicate that the tag assigned
  to the node should also apply to all child nodes, even if they
  match their own style (by default, only the innermost style is
  used).
   When a path ends in `!`, as in `Attribute!`, no further matching
  happens for the node's child nodes, and the entire node gets the
  given style.
   In this notation, node names that contain `/`, `!`, `*`, or `...`
  must be quoted as JSON strings.
   For example:
   ```javascript
  parser.withProps(
    styleTags({
      // Style Number and BigNumber nodes
      "Number BigNumber": tags.number,
      // Style Escape nodes whose parent is String
      "String/Escape": tags.escape,
      // Style anything inside Attributes nodes
      "Attributes!": tags.meta,
      // Add a style to all content inside Italic nodes
      "Italic/...": tags.emphasis,
      // Style InvalidString nodes as both `string` and `invalid`
      "InvalidString": [tags.string, tags.invalid],
      // Style the node named "/" as punctuation
      '"/"': tags.punctuation
    })
  )
  ```
  */
  function styleTags(spec) {
    var byName = Object.create(null);
    for (var prop in spec) {
      var _tags = spec[prop];
      if (!Array.isArray(_tags)) _tags = [_tags];
      var _iterator147 = _createForOfIteratorHelper(prop.split(" ")),
        _step147;
      try {
        for (_iterator147.s(); !(_step147 = _iterator147.n()).done;) {
          var part = _step147.value;
          if (part) {
            var pieces = [],
              mode = 2 /* Mode.Normal */,
              rest = part;
            for (var pos = 0;;) {
              if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                mode = 1 /* Mode.Inherit */;
                break;
              }
              var m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
              if (!m) throw new RangeError("Invalid path: " + part);
              pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
              pos += m[0].length;
              if (pos == part.length) break;
              var next = part[pos++];
              if (pos == part.length && next == "!") {
                mode = 0 /* Mode.Opaque */;
                break;
              }
              if (next != "/") throw new RangeError("Invalid path: " + part);
              rest = part.slice(pos);
            }
            var last = pieces.length - 1,
              inner = pieces[last];
            if (!inner) throw new RangeError("Invalid path: " + part);
            var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);
            byName[inner] = rule.sort(byName[inner]);
          }
        }
      } catch (err) {
        _iterator147.e(err);
      } finally {
        _iterator147.f();
      }
    }
    return ruleNodeProp.add(byName);
  }
  var ruleNodeProp = new NodeProp();
  var Rule = /*#__PURE__*/function () {
    function Rule(tags, mode, context, next) {
      _classCallCheck(this, Rule);
      this.tags = tags;
      this.mode = mode;
      this.context = context;
      this.next = next;
    }
    return _createClass(Rule, [{
      key: "opaque",
      get: function get() {
        return this.mode == 0 /* Mode.Opaque */;
      }
    }, {
      key: "inherit",
      get: function get() {
        return this.mode == 1 /* Mode.Inherit */;
      }
    }, {
      key: "sort",
      value: function sort(other) {
        if (!other || other.depth < this.depth) {
          this.next = other;
          return this;
        }
        other.next = this.sort(other.next);
        return other;
      }
    }, {
      key: "depth",
      get: function get() {
        return this.context ? this.context.length : 0;
      }
    }]);
  }();
  Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
  /**
  Define a [highlighter](#highlight.Highlighter) from an array of
  tag/class pairs. Classes associated with more specific tags will
  take precedence.
  */
  function tagHighlighter(tags, options) {
    var map = Object.create(null);
    var _iterator148 = _createForOfIteratorHelper(tags),
      _step148;
    try {
      for (_iterator148.s(); !(_step148 = _iterator148.n()).done;) {
        var style = _step148.value;
        if (!Array.isArray(style.tag)) map[style.tag.id] = style["class"];else {
          var _iterator151 = _createForOfIteratorHelper(style.tag),
            _step151;
          try {
            for (_iterator151.s(); !(_step151 = _iterator151.n()).done;) {
              var tag = _step151.value;
              map[tag.id] = style["class"];
            }
          } catch (err) {
            _iterator151.e(err);
          } finally {
            _iterator151.f();
          }
        }
      }
    } catch (err) {
      _iterator148.e(err);
    } finally {
      _iterator148.f();
    }
    var _ref13 = options || {},
      scope = _ref13.scope,
      _ref13$all = _ref13.all,
      all = _ref13$all === void 0 ? null : _ref13$all;
    return {
      style: function style(tags) {
        var cls = all;
        var _iterator149 = _createForOfIteratorHelper(tags),
          _step149;
        try {
          for (_iterator149.s(); !(_step149 = _iterator149.n()).done;) {
            var tag = _step149.value;
            var _iterator150 = _createForOfIteratorHelper(tag.set),
              _step150;
            try {
              for (_iterator150.s(); !(_step150 = _iterator150.n()).done;) {
                var sub = _step150.value;
                var tagClass = map[sub.id];
                if (tagClass) {
                  cls = cls ? cls + " " + tagClass : tagClass;
                  break;
                }
              }
            } catch (err) {
              _iterator150.e(err);
            } finally {
              _iterator150.f();
            }
          }
        } catch (err) {
          _iterator149.e(err);
        } finally {
          _iterator149.f();
        }
        return cls;
      },
      scope: scope
    };
  }
  function highlightTags(highlighters, tags) {
    var result = null;
    var _iterator152 = _createForOfIteratorHelper(highlighters),
      _step152;
    try {
      for (_iterator152.s(); !(_step152 = _iterator152.n()).done;) {
        var highlighter = _step152.value;
        var value = highlighter.style(tags);
        if (value) result = result ? result + " " + value : value;
      }
    } catch (err) {
      _iterator152.e(err);
    } finally {
      _iterator152.f();
    }
    return result;
  }
  /**
  Highlight the given [tree](#common.Tree) with the given
  [highlighter](#highlight.Highlighter). Often, the higher-level
  [`highlightCode`](#highlight.highlightCode) function is easier to
  use.
  */
  function highlightTree(tree, highlighter,
  /**
  Assign styling to a region of the text. Will be called, in order
  of position, for any ranges where more than zero classes apply.
  `classes` is a space separated string of CSS classes.
  */
  putStyle) {
    var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tree.length;
    var builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
    builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
    builder.flush(to);
  }
  var HighlightBuilder = /*#__PURE__*/function () {
    function HighlightBuilder(at, highlighters, span) {
      _classCallCheck(this, HighlightBuilder);
      this.at = at;
      this.highlighters = highlighters;
      this.span = span;
      this["class"] = "";
    }
    return _createClass(HighlightBuilder, [{
      key: "startSpan",
      value: function startSpan(at, cls) {
        if (cls != this["class"]) {
          this.flush(at);
          if (at > this.at) this.at = at;
          this["class"] = cls;
        }
      }
    }, {
      key: "flush",
      value: function flush(to) {
        if (to > this.at && this["class"]) this.span(this.at, to, this["class"]);
      }
    }, {
      key: "highlightRange",
      value: function highlightRange(cursor, from, to, inheritedClass, highlighters) {
        var type = cursor.type,
          start = cursor.from,
          end = cursor.to;
        if (start >= to || end <= from) return;
        if (type.isTop) highlighters = this.highlighters.filter(function (h) {
          return !h.scope || h.scope(type);
        });
        var cls = inheritedClass;
        var rule = getStyleTags(cursor) || Rule.empty;
        var tagCls = highlightTags(highlighters, rule.tags);
        if (tagCls) {
          if (cls) cls += " ";
          cls += tagCls;
          if (rule.mode == 1 /* Mode.Inherit */) inheritedClass += (inheritedClass ? " " : "") + tagCls;
        }
        this.startSpan(Math.max(from, start), cls);
        if (rule.opaque) return;
        var mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
        if (mounted && mounted.overlay) {
          var inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
          var innerHighlighters = this.highlighters.filter(function (h) {
            return !h.scope || h.scope(mounted.tree.type);
          });
          var _hasChild = cursor.firstChild();
          for (var _i134 = 0, pos = start;; _i134++) {
            var next = _i134 < mounted.overlay.length ? mounted.overlay[_i134] : null;
            var nextPos = next ? next.from + start : end;
            var _rangeFrom = Math.max(from, pos),
              _rangeTo = Math.min(to, nextPos);
            if (_rangeFrom < _rangeTo && _hasChild) {
              while (cursor.from < _rangeTo) {
                this.highlightRange(cursor, _rangeFrom, _rangeTo, inheritedClass, highlighters);
                this.startSpan(Math.min(_rangeTo, cursor.to), cls);
                if (cursor.to >= nextPos || !cursor.nextSibling()) break;
              }
            }
            if (!next || nextPos > to) break;
            pos = next.to + start;
            if (pos > from) {
              this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
              this.startSpan(Math.min(to, pos), cls);
            }
          }
          if (_hasChild) cursor.parent();
        } else if (cursor.firstChild()) {
          if (mounted) inheritedClass = "";
          do {
            if (cursor.to <= from) continue;
            if (cursor.from >= to) break;
            this.highlightRange(cursor, from, to, inheritedClass, highlighters);
            this.startSpan(Math.min(to, cursor.to), cls);
          } while (cursor.nextSibling());
          cursor.parent();
        }
      }
    }]);
  }();
  /**
  Match a syntax node's [highlight rules](#highlight.styleTags). If
  there's a match, return its set of tags, and whether it is
  opaque (uses a `!`) or applies to all child nodes (`/...`).
  */
  function getStyleTags(node) {
    var rule = node.type.prop(ruleNodeProp);
    while (rule && rule.context && !node.matchContext(rule.context)) rule = rule.next;
    return rule || null;
  }
  var t = Tag.define;
  var comment = t(),
    name = t(),
    typeName = t(name),
    propertyName = t(name),
    literal = t(),
    string = t(literal),
    number = t(literal),
    content = t(),
    heading = t(content),
    keyword = t(),
    operator = t(),
    punctuation = t(),
    bracket = t(punctuation),
    meta = t();
  /**
  The default set of highlighting [tags](#highlight.Tag).
   This collection is heavily biased towards programming languages,
  and necessarily incomplete. A full ontology of syntactic
  constructs would fill a stack of books, and be impractical to
  write themes for. So try to make do with this set. If all else
  fails, [open an
  issue](https://github.com/codemirror/codemirror.next) to propose a
  new tag, or [define](#highlight.Tag^define) a local custom tag for
  your use case.
   Note that it is not obligatory to always attach the most specific
  tag possible to an element—if your grammar can't easily
  distinguish a certain type of element (such as a local variable),
  it is okay to style it as its more general variant (a variable).
   For tags that extend some parent tag, the documentation links to
  the parent.
  */
  var tags = {
    /**
    A comment.
    */
    comment: comment,
    /**
    A line [comment](#highlight.tags.comment).
    */
    lineComment: t(comment),
    /**
    A block [comment](#highlight.tags.comment).
    */
    blockComment: t(comment),
    /**
    A documentation [comment](#highlight.tags.comment).
    */
    docComment: t(comment),
    /**
    Any kind of identifier.
    */
    name: name,
    /**
    The [name](#highlight.tags.name) of a variable.
    */
    variableName: t(name),
    /**
    A type [name](#highlight.tags.name).
    */
    typeName: typeName,
    /**
    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
    */
    tagName: t(typeName),
    /**
    A property or field [name](#highlight.tags.name).
    */
    propertyName: propertyName,
    /**
    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
    */
    attributeName: t(propertyName),
    /**
    The [name](#highlight.tags.name) of a class.
    */
    className: t(name),
    /**
    A label [name](#highlight.tags.name).
    */
    labelName: t(name),
    /**
    A namespace [name](#highlight.tags.name).
    */
    namespace: t(name),
    /**
    The [name](#highlight.tags.name) of a macro.
    */
    macroName: t(name),
    /**
    A literal value.
    */
    literal: literal,
    /**
    A string [literal](#highlight.tags.literal).
    */
    string: string,
    /**
    A documentation [string](#highlight.tags.string).
    */
    docString: t(string),
    /**
    A character literal (subtag of [string](#highlight.tags.string)).
    */
    character: t(string),
    /**
    An attribute value (subtag of [string](#highlight.tags.string)).
    */
    attributeValue: t(string),
    /**
    A number [literal](#highlight.tags.literal).
    */
    number: number,
    /**
    An integer [number](#highlight.tags.number) literal.
    */
    integer: t(number),
    /**
    A floating-point [number](#highlight.tags.number) literal.
    */
    "float": t(number),
    /**
    A boolean [literal](#highlight.tags.literal).
    */
    bool: t(literal),
    /**
    Regular expression [literal](#highlight.tags.literal).
    */
    regexp: t(literal),
    /**
    An escape [literal](#highlight.tags.literal), for example a
    backslash escape in a string.
    */
    escape: t(literal),
    /**
    A color [literal](#highlight.tags.literal).
    */
    color: t(literal),
    /**
    A URL [literal](#highlight.tags.literal).
    */
    url: t(literal),
    /**
    A language keyword.
    */
    keyword: keyword,
    /**
    The [keyword](#highlight.tags.keyword) for the self or this
    object.
    */
    self: t(keyword),
    /**
    The [keyword](#highlight.tags.keyword) for null.
    */
    "null": t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) denoting some atomic value.
    */
    atom: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that represents a unit.
    */
    unit: t(keyword),
    /**
    A modifier [keyword](#highlight.tags.keyword).
    */
    modifier: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that acts as an operator.
    */
    operatorKeyword: t(keyword),
    /**
    A control-flow related [keyword](#highlight.tags.keyword).
    */
    controlKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that defines something.
    */
    definitionKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) related to defining or
    interfacing with modules.
    */
    moduleKeyword: t(keyword),
    /**
    An operator.
    */
    operator: operator,
    /**
    An [operator](#highlight.tags.operator) that dereferences something.
    */
    derefOperator: t(operator),
    /**
    Arithmetic-related [operator](#highlight.tags.operator).
    */
    arithmeticOperator: t(operator),
    /**
    Logical [operator](#highlight.tags.operator).
    */
    logicOperator: t(operator),
    /**
    Bit [operator](#highlight.tags.operator).
    */
    bitwiseOperator: t(operator),
    /**
    Comparison [operator](#highlight.tags.operator).
    */
    compareOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that updates its operand.
    */
    updateOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that defines something.
    */
    definitionOperator: t(operator),
    /**
    Type-related [operator](#highlight.tags.operator).
    */
    typeOperator: t(operator),
    /**
    Control-flow [operator](#highlight.tags.operator).
    */
    controlOperator: t(operator),
    /**
    Program or markup punctuation.
    */
    punctuation: punctuation,
    /**
    [Punctuation](#highlight.tags.punctuation) that separates
    things.
    */
    separator: t(punctuation),
    /**
    Bracket-style [punctuation](#highlight.tags.punctuation).
    */
    bracket: bracket,
    /**
    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
    tokens).
    */
    angleBracket: t(bracket),
    /**
    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
    tokens).
    */
    squareBracket: t(bracket),
    /**
    Parentheses (usually `(` and `)` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    paren: t(bracket),
    /**
    Braces (usually `{` and `}` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    brace: t(bracket),
    /**
    Content, for example plain text in XML or markup documents.
    */
    content: content,
    /**
    [Content](#highlight.tags.content) that represents a heading.
    */
    heading: heading,
    /**
    A level 1 [heading](#highlight.tags.heading).
    */
    heading1: t(heading),
    /**
    A level 2 [heading](#highlight.tags.heading).
    */
    heading2: t(heading),
    /**
    A level 3 [heading](#highlight.tags.heading).
    */
    heading3: t(heading),
    /**
    A level 4 [heading](#highlight.tags.heading).
    */
    heading4: t(heading),
    /**
    A level 5 [heading](#highlight.tags.heading).
    */
    heading5: t(heading),
    /**
    A level 6 [heading](#highlight.tags.heading).
    */
    heading6: t(heading),
    /**
    A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
    */
    contentSeparator: t(content),
    /**
    [Content](#highlight.tags.content) that represents a list.
    */
    list: t(content),
    /**
    [Content](#highlight.tags.content) that represents a quote.
    */
    quote: t(content),
    /**
    [Content](#highlight.tags.content) that is emphasized.
    */
    emphasis: t(content),
    /**
    [Content](#highlight.tags.content) that is styled strong.
    */
    strong: t(content),
    /**
    [Content](#highlight.tags.content) that is part of a link.
    */
    link: t(content),
    /**
    [Content](#highlight.tags.content) that is styled as code or
    monospace.
    */
    monospace: t(content),
    /**
    [Content](#highlight.tags.content) that has a strike-through
    style.
    */
    strikethrough: t(content),
    /**
    Inserted text in a change-tracking format.
    */
    inserted: t(),
    /**
    Deleted text.
    */
    deleted: t(),
    /**
    Changed text.
    */
    changed: t(),
    /**
    An invalid or unsyntactic element.
    */
    invalid: t(),
    /**
    Metadata or meta-instruction.
    */
    meta: meta,
    /**
    [Metadata](#highlight.tags.meta) that applies to the entire
    document.
    */
    documentMeta: t(meta),
    /**
    [Metadata](#highlight.tags.meta) that annotates or adds
    attributes to a given syntactic element.
    */
    annotation: t(meta),
    /**
    Processing instruction or preprocessor directive. Subtag of
    [meta](#highlight.tags.meta).
    */
    processingInstruction: t(meta),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that a
    given element is being defined. Expected to be used with the
    various [name](#highlight.tags.name) tags.
    */
    definition: Tag.defineModifier("definition"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that
    something is constant. Mostly expected to be used with
    [variable names](#highlight.tags.variableName).
    */
    constant: Tag.defineModifier("constant"),
    /**
    [Modifier](#highlight.Tag^defineModifier) used to indicate that
    a [variable](#highlight.tags.variableName) or [property
    name](#highlight.tags.propertyName) is being called or defined
    as a function.
    */
    "function": Tag.defineModifier("function"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that can be applied to
    [names](#highlight.tags.name) to indicate that they belong to
    the language's standard environment.
    */
    standard: Tag.defineModifier("standard"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates a given
    [names](#highlight.tags.name) is local to some scope.
    */
    local: Tag.defineModifier("local"),
    /**
    A generic variant [modifier](#highlight.Tag^defineModifier) that
    can be used to tag language-specific alternative variants of
    some common tag. It is recommended for themes to define special
    forms of at least the [string](#highlight.tags.string) and
    [variable name](#highlight.tags.variableName) tags, since those
    come up a lot.
    */
    special: Tag.defineModifier("special")
  };
  for (var _name7 in tags) {
    var val = tags[_name7];
    if (val instanceof Tag) val.name = _name7;
  }
  /**
  This is a highlighter that adds stable, predictable classes to
  tokens, for styling with external CSS.
   The following tags are mapped to their name prefixed with `"tok-"`
  (for example `"tok-comment"`):
   * [`link`](#highlight.tags.link)
  * [`heading`](#highlight.tags.heading)
  * [`emphasis`](#highlight.tags.emphasis)
  * [`strong`](#highlight.tags.strong)
  * [`keyword`](#highlight.tags.keyword)
  * [`atom`](#highlight.tags.atom)
  * [`bool`](#highlight.tags.bool)
  * [`url`](#highlight.tags.url)
  * [`labelName`](#highlight.tags.labelName)
  * [`inserted`](#highlight.tags.inserted)
  * [`deleted`](#highlight.tags.deleted)
  * [`literal`](#highlight.tags.literal)
  * [`string`](#highlight.tags.string)
  * [`number`](#highlight.tags.number)
  * [`variableName`](#highlight.tags.variableName)
  * [`typeName`](#highlight.tags.typeName)
  * [`namespace`](#highlight.tags.namespace)
  * [`className`](#highlight.tags.className)
  * [`macroName`](#highlight.tags.macroName)
  * [`propertyName`](#highlight.tags.propertyName)
  * [`operator`](#highlight.tags.operator)
  * [`comment`](#highlight.tags.comment)
  * [`meta`](#highlight.tags.meta)
  * [`punctuation`](#highlight.tags.punctuation)
  * [`invalid`](#highlight.tags.invalid)
   In addition, these mappings are provided:
   * [`regexp`](#highlight.tags.regexp),
    [`escape`](#highlight.tags.escape), and
    [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    are mapped to `"tok-string2"`
  * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName2"`
  * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-local"`
  * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-definition"`
  * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    to `"tok-propertyName tok-definition"`
  */
  tagHighlighter([{
    tag: tags.link,
    "class": "tok-link"
  }, {
    tag: tags.heading,
    "class": "tok-heading"
  }, {
    tag: tags.emphasis,
    "class": "tok-emphasis"
  }, {
    tag: tags.strong,
    "class": "tok-strong"
  }, {
    tag: tags.keyword,
    "class": "tok-keyword"
  }, {
    tag: tags.atom,
    "class": "tok-atom"
  }, {
    tag: tags.bool,
    "class": "tok-bool"
  }, {
    tag: tags.url,
    "class": "tok-url"
  }, {
    tag: tags.labelName,
    "class": "tok-labelName"
  }, {
    tag: tags.inserted,
    "class": "tok-inserted"
  }, {
    tag: tags.deleted,
    "class": "tok-deleted"
  }, {
    tag: tags.literal,
    "class": "tok-literal"
  }, {
    tag: tags.string,
    "class": "tok-string"
  }, {
    tag: tags.number,
    "class": "tok-number"
  }, {
    tag: [tags.regexp, tags.escape, tags.special(tags.string)],
    "class": "tok-string2"
  }, {
    tag: tags.variableName,
    "class": "tok-variableName"
  }, {
    tag: tags.local(tags.variableName),
    "class": "tok-variableName tok-local"
  }, {
    tag: tags.definition(tags.variableName),
    "class": "tok-variableName tok-definition"
  }, {
    tag: tags.special(tags.variableName),
    "class": "tok-variableName2"
  }, {
    tag: tags.definition(tags.propertyName),
    "class": "tok-propertyName tok-definition"
  }, {
    tag: tags.typeName,
    "class": "tok-typeName"
  }, {
    tag: tags.namespace,
    "class": "tok-namespace"
  }, {
    tag: tags.className,
    "class": "tok-className"
  }, {
    tag: tags.macroName,
    "class": "tok-macroName"
  }, {
    tag: tags.propertyName,
    "class": "tok-propertyName"
  }, {
    tag: tags.operator,
    "class": "tok-operator"
  }, {
    tag: tags.comment,
    "class": "tok-comment"
  }, {
    tag: tags.meta,
    "class": "tok-meta"
  }, {
    tag: tags.invalid,
    "class": "tok-invalid"
  }, {
    tag: tags.punctuation,
    "class": "tok-punctuation"
  }]);
  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  var languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? function (values) {
        return values.concat(baseData);
      } : undefined
    });
  }
  /**
  Syntax node prop used to register sublanguages. Should be added to
  the top level node type for the language.
  */
  var sublanguageProp = /*@__PURE__*/new NodeProp();
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  var Language = /*#__PURE__*/function () {
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    function Language(
    /**
    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
    used for this language.
    */
    data, parser) {
      var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      _classCallCheck(this, Language);
      this.data = data;
      this.name = name;
      // Kludge to define EditorState.tree as a debugging helper,
      // without the EditorState package actually knowing about
      // languages and lezer trees.
      if (!EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(EditorState.prototype, "tree", {
        get: function get() {
          return syntaxTree(this);
        }
      });
      this.parser = parser;
      this.extension = [language.of(this), EditorState.languageData.of(function (state, pos, side) {
        var top = topNodeAt(state, pos, side),
          data = top.type.prop(languageDataProp);
        if (!data) return [];
        var base = state.facet(data),
          sub = top.type.prop(sublanguageProp);
        if (sub) {
          var innerNode = top.resolve(pos - top.from, side);
          var _iterator153 = _createForOfIteratorHelper(sub),
            _step153;
          try {
            for (_iterator153.s(); !(_step153 = _iterator153.n()).done;) {
              var sublang = _step153.value;
              if (sublang.test(innerNode, state)) {
                var _data2 = state.facet(sublang.facet);
                return sublang.type == "replace" ? _data2 : _data2.concat(base);
              }
            }
          } catch (err) {
            _iterator153.e(err);
          } finally {
            _iterator153.f();
          }
        }
        return base;
      })].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    return _createClass(Language, [{
      key: "isActiveAt",
      value: function isActiveAt(state, pos) {
        var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
    }, {
      key: "findRegions",
      value: function findRegions(state) {
        var _this69 = this;
        var lang = state.facet(language);
        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
          from: 0,
          to: state.doc.length
        }];
        if (!lang || !lang.allowsNesting) return [];
        var result = [];
        var _explore = function explore(tree, from) {
          if (tree.prop(languageDataProp) == _this69.data) {
            result.push({
              from: from,
              to: from + tree.length
            });
            return;
          }
          var mount = tree.prop(NodeProp.mounted);
          if (mount) {
            if (mount.tree.prop(languageDataProp) == _this69.data) {
              if (mount.overlay) {
                var _iterator154 = _createForOfIteratorHelper(mount.overlay),
                  _step154;
                try {
                  for (_iterator154.s(); !(_step154 = _iterator154.n()).done;) {
                    var _r6 = _step154.value;
                    result.push({
                      from: _r6.from + from,
                      to: _r6.to + from
                    });
                  }
                } catch (err) {
                  _iterator154.e(err);
                } finally {
                  _iterator154.f();
                }
              } else result.push({
                from: from,
                to: from + tree.length
              });
              return;
            } else if (mount.overlay) {
              var size = result.length;
              _explore(mount.tree, mount.overlay[0].from + from);
              if (result.length > size) return;
            }
          }
          for (var _i135 = 0; _i135 < tree.children.length; _i135++) {
            var ch = tree.children[_i135];
            if (ch instanceof Tree) _explore(ch, tree.positions[_i135] + from);
          }
        };
        _explore(syntaxTree(state), 0);
        return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
    }, {
      key: "allowsNesting",
      get: function get() {
        return true;
      }
    }]);
  }();
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function topNodeAt(state, pos, side) {
    var topLang = state.facet(language),
      tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (var node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;
    }
    return tree;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  var LRLanguage = /*#__PURE__*/function (_Language) {
    function LRLanguage(data, parser, name) {
      var _this70;
      _classCallCheck(this, LRLanguage);
      _this70 = _callSuper(this, LRLanguage, [data, parser, [], name]);
      _this70.parser = parser;
      return _this70;
    }
    /**
    Define a language from a parser.
    */
    _inherits(LRLanguage, _Language);
    return _createClass(LRLanguage, [{
      key: "configure",
      value:
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      function configure(options, name) {
        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
    }, {
      key: "allowsNesting",
      get: function get() {
        return this.parser.hasWrappers();
      }
    }], [{
      key: "define",
      value: function define(spec) {
        var data = defineLanguageFacet(spec.languageData);
        return new LRLanguage(data, spec.parser.configure({
          props: [languageDataProp.add(function (type) {
            return type.isTop ? data : undefined;
          })]
        }), spec.name);
      }
    }]);
  }(Language);
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
    var field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  /**
  Lezer-style
  [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
  object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
  */
  var DocInput = /*#__PURE__*/function () {
    /**
    Create an input object for the given document.
    */
    function DocInput(doc) {
      _classCallCheck(this, DocInput);
      this.doc = doc;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc.iter();
    }
    return _createClass(DocInput, [{
      key: "length",
      get: function get() {
        return this.doc.length;
      }
    }, {
      key: "syncTo",
      value: function syncTo(pos) {
        this.string = this.cursor.next(pos - this.cursorPos).value;
        this.cursorPos = pos + this.string.length;
        return this.cursorPos - this.string.length;
      }
    }, {
      key: "chunk",
      value: function chunk(pos) {
        this.syncTo(pos);
        return this.string;
      }
    }, {
      key: "lineChunks",
      get: function get() {
        return true;
      }
    }, {
      key: "read",
      value: function read(from, to) {
        var stringStart = this.cursorPos - this.string.length;
        if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
      }
    }]);
  }();
  var currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  var ParseContext = /*#__PURE__*/function () {
    function ParseContext(parser,
    /**
    The current editor state.
    */
    state) {
      var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var
      /**
      @internal
      */
      tree = arguments.length > 3 ? arguments[3] : undefined;
      var
      /**
      @internal
      */
      treeLen = arguments.length > 4 ? arguments[4] : undefined;
      var
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport = arguments.length > 5 ? arguments[5] : undefined;
      var
      /**
      @internal
      */
      skipped = arguments.length > 6 ? arguments[6] : undefined;
      var
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn = arguments.length > 7 ? arguments[7] : undefined;
      _classCallCheck(this, ParseContext);
      this.parser = parser;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      /**
      @internal
      */
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    return _createClass(ParseContext, [{
      key: "startParse",
      value: function startParse() {
        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
    }, {
      key: "work",
      value: function work(until, upto) {
        var _this71 = this;
        if (upto != null && upto >= this.state.doc.length) upto = undefined;
        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
          this.takeTree();
          return true;
        }
        return this.withContext(function () {
          var _a;
          if (typeof until == "number") {
            var endTime = Date.now() + until;
            until = function until() {
              return Date.now() > endTime;
            };
          }
          if (!_this71.parse) _this71.parse = _this71.startParse();
          if (upto != null && (_this71.parse.stoppedAt == null || _this71.parse.stoppedAt > upto) && upto < _this71.state.doc.length) _this71.parse.stopAt(upto);
          for (;;) {
            var done = _this71.parse.advance();
            if (done) {
              _this71.fragments = _this71.withoutTempSkipped(TreeFragment.addTree(done, _this71.fragments, _this71.parse.stoppedAt != null));
              _this71.treeLen = (_a = _this71.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this71.state.doc.length;
              _this71.tree = done;
              _this71.parse = null;
              if (_this71.treeLen < (upto !== null && upto !== void 0 ? upto : _this71.state.doc.length)) _this71.parse = _this71.startParse();else return true;
            }
            if (until()) return false;
          }
        });
      }
      /**
      @internal
      */
    }, {
      key: "takeTree",
      value: function takeTree() {
        var _this72 = this;
        var pos, tree;
        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
          if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
          this.withContext(function () {
            while (!(tree = _this72.parse.advance())) {}
          });
          this.treeLen = pos;
          this.tree = tree;
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
          this.parse = null;
        }
      }
    }, {
      key: "withContext",
      value: function withContext(f) {
        var prev = currentContext;
        currentContext = this;
        try {
          return f();
        } finally {
          currentContext = prev;
        }
      }
    }, {
      key: "withoutTempSkipped",
      value: function withoutTempSkipped(fragments) {
        for (var _r7; _r7 = this.tempSkipped.pop();) fragments = cutFragments(fragments, _r7.from, _r7.to);
        return fragments;
      }
      /**
      @internal
      */
    }, {
      key: "changes",
      value: function changes(_changes, newState) {
        var fragments = this.fragments,
          tree = this.tree,
          treeLen = this.treeLen,
          viewport = this.viewport,
          skipped = this.skipped;
        this.takeTree();
        if (!_changes.empty) {
          var ranges = [];
          _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
            return ranges.push({
              fromA: fromA,
              toA: toA,
              fromB: fromB,
              toB: toB
            });
          });
          fragments = TreeFragment.applyChanges(fragments, ranges);
          tree = Tree.empty;
          treeLen = 0;
          viewport = {
            from: _changes.mapPos(viewport.from, -1),
            to: _changes.mapPos(viewport.to, 1)
          };
          if (this.skipped.length) {
            skipped = [];
            var _iterator155 = _createForOfIteratorHelper(this.skipped),
              _step155;
            try {
              for (_iterator155.s(); !(_step155 = _iterator155.n()).done;) {
                var _r8 = _step155.value;
                var from = _changes.mapPos(_r8.from, 1),
                  to = _changes.mapPos(_r8.to, -1);
                if (from < to) skipped.push({
                  from: from,
                  to: to
                });
              }
            } catch (err) {
              _iterator155.e(err);
            } finally {
              _iterator155.f();
            }
          }
        }
        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
    }, {
      key: "updateViewport",
      value: function updateViewport(viewport) {
        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
        this.viewport = viewport;
        var startLen = this.skipped.length;
        for (var _i136 = 0; _i136 < this.skipped.length; _i136++) {
          var _this$skipped$_i = this.skipped[_i136],
            from = _this$skipped$_i.from,
            to = _this$skipped$_i.to;
          if (from < viewport.to && to > viewport.from) {
            this.fragments = cutFragments(this.fragments, from, to);
            this.skipped.splice(_i136--, 1);
          }
        }
        if (this.skipped.length >= startLen) return false;
        this.reset();
        return true;
      }
      /**
      @internal
      */
    }, {
      key: "reset",
      value: function reset() {
        if (this.parse) {
          this.takeTree();
          this.parse = null;
        }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
    }, {
      key: "skipUntilInView",
      value: function skipUntilInView(from, to) {
        this.skipped.push({
          from: from,
          to: to
        });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
    }, {
      key: "isDone",
      value:
      /**
      @internal
      */
      function isDone(upto) {
        upto = Math.min(upto, this.state.doc.length);
        var frags = this.fragments;
        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
    }], [{
      key: "create",
      value: function create(parser, state, viewport) {
        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
    }, {
      key: "getSkippingParser",
      value: function getSkippingParser(until) {
        return new (/*#__PURE__*/function (_Parser) {
          function _class7() {
            _classCallCheck(this, _class7);
            return _callSuper(this, _class7, arguments);
          }
          _inherits(_class7, _Parser);
          return _createClass(_class7, [{
            key: "createParse",
            value: function createParse(input, fragments, ranges) {
              var from = ranges[0].from,
                to = ranges[ranges.length - 1].to;
              var parser = {
                parsedPos: from,
                advance: function advance() {
                  var cx = currentContext;
                  if (cx) {
                    var _iterator156 = _createForOfIteratorHelper(ranges),
                      _step156;
                    try {
                      for (_iterator156.s(); !(_step156 = _iterator156.n()).done;) {
                        var _r9 = _step156.value;
                        cx.tempSkipped.push(_r9);
                      }
                    } catch (err) {
                      _iterator156.e(err);
                    } finally {
                      _iterator156.f();
                    }
                    if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                  }
                  this.parsedPos = to;
                  return new Tree(NodeType.none, [], [], to - from);
                },
                stoppedAt: null,
                stopAt: function stopAt() {}
              };
              return parser;
            }
          }]);
        }(Parser))();
      }
    }, {
      key: "get",
      value: function get() {
        return currentContext;
      }
    }]);
  }();
  function cutFragments(fragments, from, to) {
    return TreeFragment.applyChanges(fragments, [{
      fromA: from,
      toA: to,
      fromB: from,
      toB: to
    }]);
  }
  var LanguageState = /*#__PURE__*/function () {
    function LanguageState(
    // A mutable parse state that is used to preserve work done during
    // the lifetime of a state when moving to the next state.
    context) {
      _classCallCheck(this, LanguageState);
      this.context = context;
      this.tree = context.tree;
    }
    return _createClass(LanguageState, [{
      key: "apply",
      value: function apply(tr) {
        if (!tr.docChanged && this.tree == this.context.tree) return this;
        var newCx = this.context.changes(tr.changes, tr.state);
        // If the previous parse wasn't done, go forward only up to its
        // end position or the end of the viewport, to avoid slowing down
        // state updates with parse work beyond the viewport.
        var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
        if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();
        return new LanguageState(newCx);
      }
    }], [{
      key: "init",
      value: function init(state) {
        var vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
        var parseState = ParseContext.create(state.facet(language).parser, state, {
          from: 0,
          to: vpTo
        });
        if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();
        return new LanguageState(parseState);
      }
    }]);
  }();
  Language.state = /*@__PURE__*/StateField.define({
    create: LanguageState.init,
    update: function update(value, tr) {
      var _iterator157 = _createForOfIteratorHelper(tr.effects),
        _step157;
      try {
        for (_iterator157.s(); !(_step157 = _iterator157.n()).done;) {
          var e = _step157.value;
          if (e.is(Language.setState)) return e.value;
        }
      } catch (err) {
        _iterator157.e(err);
      } finally {
        _iterator157.f();
      }
      if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  var requestIdle = function requestIdle(callback) {
    var timeout = setTimeout(function () {
      return callback();
    }, 500 /* Work.MaxPause */);
    return function () {
      return clearTimeout(timeout);
    };
  };
  if (typeof requestIdleCallback != "undefined") requestIdle = function requestIdle(callback) {
    var idle = -1,
      timeout = setTimeout(function () {
        idle = requestIdleCallback(callback, {
          timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */
        });
      }, 100 /* Work.MinPause */);
    return function () {
      return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
    };
  };
  var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {
    return navigator.scheduling.isInputPending();
  } : null;
  var parseWorker = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function ParseWorker(view) {
      _classCallCheck(this, ParseWorker);
      this.view = view;
      this.working = null;
      this.workScheduled = 0;
      // End of the current time chunk
      this.chunkEnd = -1;
      // Milliseconds of budget left for this chunk
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    return _createClass(ParseWorker, [{
      key: "update",
      value: function update(_update17) {
        var cx = this.view.state.field(Language.state).context;
        if (cx.updateViewport(_update17.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();
        if (_update17.docChanged || _update17.selectionSet) {
          if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;
          this.scheduleWork();
        }
        this.checkAsyncSchedule(cx);
      }
    }, {
      key: "scheduleWork",
      value: function scheduleWork() {
        if (this.working) return;
        var state = this.view.state,
          field = state.field(Language.state);
        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
      }
    }, {
      key: "work",
      value: function work(deadline) {
        this.working = null;
        var now = Date.now();
        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
          // Start a new chunk
          this.chunkEnd = now + 30000 /* Work.ChunkTime */;
          this.chunkBudget = 3000 /* Work.ChunkBudget */;
        }
        if (this.chunkBudget <= 0) return; // No more budget
        var _this$view2 = this.view,
          state = _this$view2.state,
          vpTo = _this$view2.viewport.to,
          field = state.field(Language.state);
        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;
        var endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
        var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
        var done = field.context.work(function () {
          return isInputPending && isInputPending() || Date.now() > endTime;
        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
        this.chunkBudget -= Date.now() - now;
        if (done || this.chunkBudget <= 0) {
          field.context.takeTree();
          this.view.dispatch({
            effects: Language.setState.of(new LanguageState(field.context))
          });
        }
        if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
        this.checkAsyncSchedule(field.context);
      }
    }, {
      key: "checkAsyncSchedule",
      value: function checkAsyncSchedule(cx) {
        var _this73 = this;
        if (cx.scheduleOn) {
          this.workScheduled++;
          cx.scheduleOn.then(function () {
            return _this73.scheduleWork();
          })["catch"](function (err) {
            return logException(_this73.view.state, err);
          }).then(function () {
            return _this73.workScheduled--;
          });
          cx.scheduleOn = null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.working) this.working();
      }
    }, {
      key: "isWorking",
      value: function isWorking() {
        return !!(this.working || this.workScheduled > 0);
      }
    }]);
  }(), {
    eventHandlers: {
      focus: function focus() {
        this.scheduleWork();
      }
    }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  var language = /*@__PURE__*/Facet.define({
    combine: function combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: function enables(language) {
      return [Language.state, parseWorker, EditorView.contentAttributes.compute([language], function (state) {
        var lang = state.facet(language);
        return lang && lang.name ? {
          "data-language": lang.name
        } : {};
      })];
    }
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  var LanguageSupport = /*#__PURE__*/_createClass(
  /**
  Create a language support object.
  */
  function LanguageSupport(
  /**
  The language object.
  */
  language) {
    var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _classCallCheck(this, LanguageSupport);
    this.language = language;
    this.support = support;
    this.extension = [language, support];
  });
  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  var indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens. Should
  be a string consisting entirely of the same whitespace character.
  When not set, this defaults to 2 spaces.
  */
  var indentUnit = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      if (!values.length) return "  ";
      var unit = values[0];
      if (!unit || /\S/.test(unit) || Array.from(unit).some(function (e) {
        return e != unit[0];
      })) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return unit;
    }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
    var unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
    var result = "",
      ts = state.tabSize,
      ch = state.facet(indentUnit)[0];
    if (ch == "\t") {
      while (cols >= ts) {
        result += "\t";
        cols -= ts;
      }
      ch = " ";
    }
    for (var _i137 = 0; _i137 < cols; _i137++) result += ch;
    return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
    if (context instanceof EditorState) context = new IndentContext(context);
    var _iterator158 = _createForOfIteratorHelper(context.state.facet(indentService)),
      _step158;
    try {
      for (_iterator158.s(); !(_step158 = _iterator158.n()).done;) {
        var service = _step158.value;
        var result = service(context, pos);
        if (result !== undefined) return result;
      }
    } catch (err) {
      _iterator158.e(err);
    } finally {
      _iterator158.f();
    }
    var tree = syntaxTree(context.state);
    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  var IndentContext = /*#__PURE__*/function () {
    /**
    Create an indent context.
    */
    function IndentContext(
    /**
    The editor state.
    */
    state) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, IndentContext);
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    return _createClass(IndentContext, [{
      key: "lineAt",
      value: function lineAt(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var line = this.state.doc.lineAt(pos);
        var _this$options = this.options,
          simulateBreak = _this$options.simulateBreak,
          simulateDoubleBreak = _this$options.simulateDoubleBreak;
        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
          if (simulateDoubleBreak && simulateBreak == pos) return {
            text: "",
            from: pos
          };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
            text: line.text.slice(simulateBreak - line.from),
            from: simulateBreak
          };else return {
            text: line.text.slice(0, simulateBreak - line.from),
            from: line.from
          };
        }
        return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
    }, {
      key: "textAfterPos",
      value: function textAfterPos(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
        var _this$lineAt = this.lineAt(pos, bias),
          text = _this$lineAt.text,
          from = _this$lineAt.from;
        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
    }, {
      key: "column",
      value: function column(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var _this$lineAt2 = this.lineAt(pos, bias),
          text = _this$lineAt2.text,
          from = _this$lineAt2.from;
        var result = this.countColumn(text, pos - from);
        var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
        if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
        return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
    }, {
      key: "countColumn",
      value: function countColumn(line) {
        var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;
        return _countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
    }, {
      key: "lineIndent",
      value: function lineIndent(pos) {
        var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var _this$lineAt3 = this.lineAt(pos, bias),
          text = _this$lineAt3.text,
          from = _this$lineAt3.from;
        var override = this.options.overrideIndentation;
        if (override) {
          var overriden = override(from);
          if (overriden > -1) return overriden;
        }
        return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
    }, {
      key: "simulatedBreak",
      get: function get() {
        return this.options.simulateBreak || null;
      }
    }]);
  }();
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  var indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
    var stack = ast.resolveStack(pos);
    var inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
    if (inner != stack.node) {
      var add = [];
      for (var _cur13 = inner; _cur13 && !(_cur13.from < stack.node.from || _cur13.to > stack.node.to || _cur13.from == stack.node.from && _cur13.type == stack.node.type); _cur13 = _cur13.parent) add.push(_cur13);
      for (var _i138 = add.length - 1; _i138 >= 0; _i138--) stack = {
        node: add[_i138],
        next: stack
      };
    }
    return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
    for (var _cur14 = stack; _cur14; _cur14 = _cur14.next) {
      var strategy = indentStrategy(_cur14.node);
      if (strategy) return strategy(TreeIndentContext.create(cx, pos, _cur14));
    }
    return 0;
  }
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
    var strategy = tree.type.prop(indentNodeProp);
    if (strategy) return strategy;
    var first = tree.firstChild,
      close;
    if (first && (close = first.type.prop(NodeProp.closedBy))) {
      var last = tree.lastChild,
        closed = last && close.indexOf(last.name) > -1;
      return function (cx) {
        return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      };
    }
    return tree.parent == null ? topIndent : null;
  }
  function topIndent() {
    return 0;
  }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
    function TreeIndentContext(base,
    /**
    The position at which indentation is being computed.
    */
    pos,
    /**
    @internal
    */
    context) {
      var _this74;
      _classCallCheck(this, TreeIndentContext);
      _this74 = _callSuper(this, TreeIndentContext, [base.state, base.options]);
      _this74.base = base;
      _this74.pos = pos;
      _this74.context = context;
      return _this74;
    }
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    _inherits(TreeIndentContext, _IndentContext);
    return _createClass(TreeIndentContext, [{
      key: "node",
      get: function get() {
        return this.context.node;
      }
      /**
      @internal
      */
    }, {
      key: "textAfter",
      get:
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      function get() {
        return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
    }, {
      key: "baseIndent",
      get: function get() {
        return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
    }, {
      key: "baseIndentFor",
      value: function baseIndentFor(node) {
        var line = this.state.doc.lineAt(node.from);
        // Skip line starts that are covered by a sibling (or cousin, etc)
        for (;;) {
          var atBreak = node.resolve(line.from);
          while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;
          if (isParent(atBreak, node)) break;
          line = this.state.doc.lineAt(atBreak.from);
        }
        return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
    }, {
      key: "continue",
      value: function _continue() {
        return indentFor(this.context.next, this.base, this.pos);
      }
    }], [{
      key: "create",
      value: function create(base, pos, context) {
        return new TreeIndentContext(base, pos, context);
      }
    }]);
  }(IndentContext);
  function isParent(parent, of) {
    for (var _cur15 = of; _cur15; _cur15 = _cur15.parent) if (parent == _cur15) return true;
    return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
    var tree = context.node;
    var openToken = tree.childAfter(tree.from),
      last = tree.lastChild;
    if (!openToken) return null;
    var sim = context.options.simulateBreak;
    var openLine = context.state.doc.lineAt(openToken.from);
    var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (var pos = openToken.to;;) {
      var next = tree.childAfter(pos);
      if (!next || next == last) return null;
      if (!next.type.isSkipped) {
        if (next.from >= lineEnd) return null;
        var _space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
        return {
          from: openToken.from,
          to: openToken.to + _space
        };
      }
      pos = next.to;
    }
  }
  /**
  An indentation strategy for delimited (usually bracketed) nodes.
  Will, by default, indent one unit more than the parent's base
  indent unless the line starts with a closing token. When `align`
  is true and there are non-skipped nodes on the node's opening
  line, the content of the node will be aligned with the end of the
  opening node, like this:
       foo(bar,
          baz)
  */
  function delimitedIndent(_ref14) {
    var closing = _ref14.closing,
      _ref14$align = _ref14.align,
      align = _ref14$align === void 0 ? true : _ref14$align,
      _ref14$units = _ref14.units,
      units = _ref14$units === void 0 ? 1 : _ref14$units;
    return function (context) {
      return delimitedStrategy(context, align, units, closing);
    };
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
    var after = context.textAfter,
      space = after.match(/^\s*/)[0].length;
    var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
    var aligned = align ? bracketedAligned(context) : null;
    if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  An indentation strategy that aligns a node's content to its base
  indentation.
  */
  var flatIndent = function flatIndent(context) {
    return context.baseIndent;
  };
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent() {
    var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      except = _ref15.except,
      _ref15$units = _ref15.units,
      units = _ref15$units === void 0 ? 1 : _ref15$units;
    return function (context) {
      var matchExcept = except && except.test(context.textAfter);
      return context.baseIndent + (matchExcept ? 0 : units * context.unit);
    };
  }
  var DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.
   To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
    return EditorState.transactionFilter.of(function (tr) {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
      var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length) return tr;
      var doc = tr.newDoc,
        head = tr.newSelection.main.head,
        line = doc.lineAt(head);
      if (head > line.from + DontIndentBeyond) return tr;
      var lineStart = doc.sliceString(line.from, head);
      if (!rules.some(function (r) {
        return r.test(lineStart);
      })) return tr;
      var state = tr.state,
        last = -1,
        changes = [];
      var _iterator159 = _createForOfIteratorHelper(state.selection.ranges),
        _step159;
      try {
        for (_iterator159.s(); !(_step159 = _iterator159.n()).done;) {
          var _head = _step159.value.head;
          var _line4 = state.doc.lineAt(_head);
          if (_line4.from == last) continue;
          last = _line4.from;
          var indent = getIndentation(state, _line4.from);
          if (indent == null) continue;
          var _cur16 = /^\s*/.exec(_line4.text)[0];
          var norm = indentString(state, indent);
          if (_cur16 != norm) changes.push({
            from: _line4.from,
            to: _line4.from + _cur16.length,
            insert: norm
          });
        }
      } catch (err) {
        _iterator159.e(err);
      } finally {
        _iterator159.f();
      }
      return changes.length ? [tr, {
        changes: changes,
        sequential: true
      }] : tr;
    });
  }

  /**
  A facet that registers a code folding service. When called with
  the extent of a line, such a function should return a foldable
  range that starts on that line (but continues beyond it), if one
  can be found.
  */
  var foldService = /*@__PURE__*/Facet.define();
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  var foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
    var first = node.firstChild,
      last = node.lastChild;
    return first && first.to < last.from ? {
      from: first.to,
      to: last.type.isError ? node.to : last.from
    } : null;
  }
  function syntaxFolding(state, start, end) {
    var tree = syntaxTree(state);
    if (tree.length < end) return null;
    var stack = tree.resolveStack(end, 1);
    var found = null;
    for (var iter = stack; iter; iter = iter.next) {
      var _cur17 = iter.node;
      if (_cur17.to <= end || _cur17.from > end) continue;
      if (found && _cur17.from < start) break;
      var prop = _cur17.type.prop(foldNodeProp);
      if (prop && (_cur17.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(_cur17))) {
        var value = prop(_cur17, state);
        if (value && value.from <= end && value.from >= start && value.to > end) found = value;
      }
    }
    return found;
  }
  function isUnfinished(node) {
    var ch = node.lastChild;
    return ch && ch.to == node.to && ch.type.isError;
  }
  /**
  Check whether the given line is foldable. First asks any fold
  services registered through
  [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
  a result, tries to query the [fold node
  prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
  of the line.
  */
  function foldable(state, lineStart, lineEnd) {
    var _iterator160 = _createForOfIteratorHelper(state.facet(foldService)),
      _step160;
    try {
      for (_iterator160.s(); !(_step160 = _iterator160.n()).done;) {
        var service = _step160.value;
        var result = service(state, lineStart, lineEnd);
        if (result) return result;
      }
    } catch (err) {
      _iterator160.e(err);
    } finally {
      _iterator160.f();
    }
    return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
    var from = mapping.mapPos(range.from, 1),
      to = mapping.mapPos(range.to, -1);
    return from >= to ? undefined : {
      from: from,
      to: to
    };
  }
  /**
  State effect that can be attached to a transaction to fold the
  given range. (You probably only need this in exceptional
  circumstances—usually you'll just want to let
  [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
  gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
  */
  var foldEffect = /*@__PURE__*/StateEffect.define({
    map: mapRange
  });
  /**
  State effect that unfolds the given range (if it was folded).
  */
  var unfoldEffect = /*@__PURE__*/StateEffect.define({
    map: mapRange
  });
  function selectedLines(view) {
    var lines = [];
    var _iterator161 = _createForOfIteratorHelper(view.state.selection.ranges),
      _step161;
    try {
      var _loop11 = function _loop11() {
        var head = _step161.value.head;
        if (lines.some(function (l) {
          return l.from <= head && l.to >= head;
        })) return 1; // continue
        lines.push(view.lineBlockAt(head));
      };
      for (_iterator161.s(); !(_step161 = _iterator161.n()).done;) {
        if (_loop11()) continue;
      }
    } catch (err) {
      _iterator161.e(err);
    } finally {
      _iterator161.f();
    }
    return lines;
  }
  /**
  The state field that stores the folded ranges (as a [decoration
  set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
  [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
  [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
  state.
  */
  var foldState = /*@__PURE__*/StateField.define({
    create: function create() {
      return Decoration.none;
    },
    update: function update(folded, tr) {
      if (tr.isUserEvent("delete")) tr.changes.iterChangedRanges(function (fromA, toA) {
        return folded = clearTouchedFolds(folded, fromA, toA);
      });
      folded = folded.map(tr.changes);
      var _iterator162 = _createForOfIteratorHelper(tr.effects),
        _step162;
      try {
        var _loop12 = function _loop12() {
          var e = _step162.value;
          if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
            var _tr$state$facet = tr.state.facet(foldConfig),
              preparePlaceholder = _tr$state$facet.preparePlaceholder;
            var widget = !preparePlaceholder ? foldWidget : Decoration.replace({
              widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value))
            });
            folded = folded.update({
              add: [widget.range(e.value.from, e.value.to)]
            });
          } else if (e.is(unfoldEffect)) {
            folded = folded.update({
              filter: function filter(from, to) {
                return e.value.from != from || e.value.to != to;
              },
              filterFrom: e.value.from,
              filterTo: e.value.to
            });
          }
        };
        for (_iterator162.s(); !(_step162 = _iterator162.n()).done;) {
          _loop12();
        }
        // Clear folded ranges that cover the selection head
      } catch (err) {
        _iterator162.e(err);
      } finally {
        _iterator162.f();
      }
      if (tr.selection) folded = clearTouchedFolds(folded, tr.selection.main.head);
      return folded;
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f);
    },
    toJSON: function toJSON(folded, state) {
      var ranges = [];
      folded.between(0, state.doc.length, function (from, to) {
        ranges.push(from, to);
      });
      return ranges;
    },
    fromJSON: function fromJSON(value) {
      if (!Array.isArray(value) || value.length % 2) throw new RangeError("Invalid JSON for fold state");
      var ranges = [];
      for (var _i139 = 0; _i139 < value.length;) {
        var from = value[_i139++],
          to = value[_i139++];
        if (typeof from != "number" || typeof to != "number") throw new RangeError("Invalid JSON for fold state");
        ranges.push(foldWidget.range(from, to));
      }
      return Decoration.set(ranges, true);
    }
  });
  function clearTouchedFolds(folded, from) {
    var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
    var touched = false;
    folded.between(from, to, function (a, b) {
      if (a < to && b > from) touched = true;
    });
    return !touched ? folded : folded.update({
      filterFrom: from,
      filterTo: to,
      filter: function filter(a, b) {
        return a >= to || b <= from;
      }
    });
  }
  function findFold(state, from, to) {
    var _a;
    var found = null;
    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
      if (!found || found.from > from) found = {
        from: from,
        to: to
      };
    });
    return found;
  }
  function foldExists(folded, from, to) {
    var found = false;
    folded.between(from, from, function (a, b) {
      if (a == from && b == to) found = true;
    });
    return found;
  }
  function maybeEnable(state, other) {
    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  /**
  Fold the lines that are selected, if possible.
  */
  var foldCode = function foldCode(view) {
    var _iterator163 = _createForOfIteratorHelper(selectedLines(view)),
      _step163;
    try {
      for (_iterator163.s(); !(_step163 = _iterator163.n()).done;) {
        var line = _step163.value;
        var range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({
            effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
          });
          return true;
        }
      }
    } catch (err) {
      _iterator163.e(err);
    } finally {
      _iterator163.f();
    }
    return false;
  };
  /**
  Unfold folded ranges on selected lines.
  */
  var unfoldCode = function unfoldCode(view) {
    if (!view.state.field(foldState, false)) return false;
    var effects = [];
    var _iterator164 = _createForOfIteratorHelper(selectedLines(view)),
      _step164;
    try {
      for (_iterator164.s(); !(_step164 = _iterator164.n()).done;) {
        var line = _step164.value;
        var folded = findFold(view.state, line.from, line.to);
        if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      }
    } catch (err) {
      _iterator164.e(err);
    } finally {
      _iterator164.f();
    }
    if (effects.length) view.dispatch({
      effects: effects
    });
    return effects.length > 0;
  };
  function announceFold(view, range) {
    var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var lineFrom = view.state.doc.lineAt(range.from).number,
      lineTo = view.state.doc.lineAt(range.to).number;
    return EditorView.announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
  }
  /**
  Fold all top-level foldable ranges. Note that, in most cases,
  folding information will depend on the [syntax
  tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
  reliably when the document hasn't been fully parsed (either
  because the editor state was only just initialized, or because the
  document is so big that the parser decided not to parse it
  entirely).
  */
  var foldAll = function foldAll(view) {
    var state = view.state,
      effects = [];
    for (var pos = 0; pos < state.doc.length;) {
      var line = view.lineBlockAt(pos),
        range = foldable(state, line.from, line.to);
      if (range) effects.push(foldEffect.of(range));
      pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
    }
    if (effects.length) view.dispatch({
      effects: maybeEnable(view.state, effects)
    });
    return !!effects.length;
  };
  /**
  Unfold all folded code.
  */
  var unfoldAll = function unfoldAll(view) {
    var field = view.state.field(foldState, false);
    if (!field || !field.size) return false;
    var effects = [];
    field.between(0, view.state.doc.length, function (from, to) {
      effects.push(unfoldEffect.of({
        from: from,
        to: to
      }));
    });
    view.dispatch({
      effects: effects
    });
    return true;
  };
  /**
  Default fold-related key bindings.
    - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
   - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
   - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
   - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
  */
  var foldKeymap = [{
    key: "Ctrl-Shift-[",
    mac: "Cmd-Alt-[",
    run: foldCode
  }, {
    key: "Ctrl-Shift-]",
    mac: "Cmd-Alt-]",
    run: unfoldCode
  }, {
    key: "Ctrl-Alt-[",
    run: foldAll
  }, {
    key: "Ctrl-Alt-]",
    run: unfoldAll
  }];
  var defaultConfig = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: "…"
  };
  var foldConfig = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return combineConfig(values, defaultConfig);
    }
  });
  /**
  Create an extension that configures code folding.
  */
  function codeFolding(config) {
    var result = [foldState, baseTheme$1];
    if (config) result.push(foldConfig.of(config));
    return result;
  }
  function widgetToDOM(view, prepared) {
    var state = view.state,
      conf = state.facet(foldConfig);
    var onclick = function onclick(event) {
      var line = view.lineBlockAt(view.posAtDOM(event.target));
      var folded = findFold(view.state, line.from, line.to);
      if (folded) view.dispatch({
        effects: unfoldEffect.of(folded)
      });
      event.preventDefault();
    };
    if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick, prepared);
    var element = document.createElement("span");
    element.textContent = conf.placeholderText;
    element.setAttribute("aria-label", state.phrase("folded code"));
    element.title = state.phrase("unfold");
    element.className = "cm-foldPlaceholder";
    element.onclick = onclick;
    return element;
  }
  var foldWidget = /*@__PURE__*/Decoration.replace({
    widget: /*@__PURE__*/new (/*#__PURE__*/function (_WidgetType6) {
      function _class8() {
        _classCallCheck(this, _class8);
        return _callSuper(this, _class8, arguments);
      }
      _inherits(_class8, _WidgetType6);
      return _createClass(_class8, [{
        key: "toDOM",
        value: function toDOM(view) {
          return widgetToDOM(view, null);
        }
      }]);
    }(WidgetType))()
  });
  var PreparedFoldWidget = /*#__PURE__*/function (_WidgetType7) {
    function PreparedFoldWidget(value) {
      var _this75;
      _classCallCheck(this, PreparedFoldWidget);
      _this75 = _callSuper(this, PreparedFoldWidget);
      _this75.value = value;
      return _this75;
    }
    _inherits(PreparedFoldWidget, _WidgetType7);
    return _createClass(PreparedFoldWidget, [{
      key: "eq",
      value: function eq(other) {
        return this.value == other.value;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        return widgetToDOM(view, this.value);
      }
    }]);
  }(WidgetType);
  var foldGutterDefaults = {
    openText: "⌄",
    closedText: "›",
    markerDOM: null,
    domEventHandlers: {},
    foldingChanged: function foldingChanged() {
      return false;
    }
  };
  var FoldMarker = /*#__PURE__*/function (_GutterMarker3) {
    function FoldMarker(config, open) {
      var _this76;
      _classCallCheck(this, FoldMarker);
      _this76 = _callSuper(this, FoldMarker);
      _this76.config = config;
      _this76.open = open;
      return _this76;
    }
    _inherits(FoldMarker, _GutterMarker3);
    return _createClass(FoldMarker, [{
      key: "eq",
      value: function eq(other) {
        return this.config == other.config && this.open == other.open;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        if (this.config.markerDOM) return this.config.markerDOM(this.open);
        var span = document.createElement("span");
        span.textContent = this.open ? this.config.openText : this.config.closedText;
        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
        return span;
      }
    }]);
  }(GutterMarker);
  /**
  Create an extension that registers a fold gutter, which shows a
  fold status indicator before foldable lines (which can be clicked
  to fold or unfold the line).
  */
  function foldGutter() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fullConfig = _objectSpread(_objectSpread({}, foldGutterDefaults), config);
    var canFold = new FoldMarker(fullConfig, true),
      canUnfold = new FoldMarker(fullConfig, false);
    var _markers = ViewPlugin.fromClass(/*#__PURE__*/function () {
      function _class9(view) {
        _classCallCheck(this, _class9);
        this.from = view.viewport.from;
        this.markers = this.buildMarkers(view);
      }
      return _createClass(_class9, [{
        key: "update",
        value: function update(_update18) {
          if (_update18.docChanged || _update18.viewportChanged || _update18.startState.facet(language) != _update18.state.facet(language) || _update18.startState.field(foldState, false) != _update18.state.field(foldState, false) || syntaxTree(_update18.startState) != syntaxTree(_update18.state) || fullConfig.foldingChanged(_update18)) this.markers = this.buildMarkers(_update18.view);
        }
      }, {
        key: "buildMarkers",
        value: function buildMarkers(view) {
          var builder = new RangeSetBuilder();
          var _iterator165 = _createForOfIteratorHelper(view.viewportLineBlocks),
            _step165;
          try {
            for (_iterator165.s(); !(_step165 = _iterator165.n()).done;) {
              var line = _step165.value;
              var mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
              if (mark) builder.add(line.from, line.from, mark);
            }
          } catch (err) {
            _iterator165.e(err);
          } finally {
            _iterator165.f();
          }
          return builder.finish();
        }
      }]);
    }());
    var domEventHandlers = fullConfig.domEventHandlers;
    return [_markers, gutter({
      "class": "cm-foldGutter",
      markers: function markers(view) {
        var _a;
        return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;
      },
      initialSpacer: function initialSpacer() {
        return new FoldMarker(fullConfig, false);
      },
      domEventHandlers: _objectSpread(_objectSpread({}, domEventHandlers), {}, {
        click: function click(view, line, event) {
          if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;
          var folded = findFold(view.state, line.from, line.to);
          if (folded) {
            view.dispatch({
              effects: unfoldEffect.of(folded)
            });
            return true;
          }
          var range = foldable(view.state, line.from, line.to);
          if (range) {
            view.dispatch({
              effects: foldEffect.of(range)
            });
            return true;
          }
          return false;
        }
      })
    }), codeFolding()];
  }
  var baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-foldPlaceholder": {
      backgroundColor: "#eee",
      border: "1px solid #ddd",
      color: "#888",
      borderRadius: ".2em",
      margin: "0 1px",
      padding: "0 1px",
      cursor: "pointer"
    },
    ".cm-foldGutter span": {
      padding: "0 1px",
      cursor: "pointer"
    }
  });

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  var HighlightStyle = /*#__PURE__*/function () {
    function HighlightStyle(
    /**
    The tag styles used to create this highlight style.
    */
    specs, options) {
      _classCallCheck(this, HighlightStyle);
      this.specs = specs;
      var modSpec;
      function def(spec) {
        var cls = StyleModule.newName();
        (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
        return cls;
      }
      var all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
      var scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? function (type) {
        return type.prop(languageDataProp) == scopeOpt.data;
      } : scopeOpt ? function (type) {
        return type == scopeOpt;
      } : undefined;
      this.style = tagHighlighter(specs.map(function (style) {
        return {
          tag: style.tag,
          "class": style["class"] || def(Object.assign({}, style, {
            tag: null
          }))
        };
      }), {
        all: all
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    return _createClass(HighlightStyle, null, [{
      key: "define",
      value: function define(specs, options) {
        return new HighlightStyle(specs, options || {});
      }
    }]);
  }();
  var highlighterFacet = /*@__PURE__*/Facet.define();
  var fallbackHighlighter = /*@__PURE__*/Facet.define({
    combine: function combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    var main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.
   When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
    var ext = [treeHighlighter],
      themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], function (state) {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));else ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  var TreeHighlighter = /*#__PURE__*/function () {
    function TreeHighlighter(view) {
      _classCallCheck(this, TreeHighlighter);
      this.markCache = Object.create(null);
      this.tree = syntaxTree(view.state);
      this.decorations = this.buildDeco(view, getHighlighters(view.state));
      this.decoratedTo = view.viewport.to;
    }
    return _createClass(TreeHighlighter, [{
      key: "update",
      value: function update(_update19) {
        var tree = syntaxTree(_update19.state),
          highlighters = getHighlighters(_update19.state);
        var styleChange = highlighters != getHighlighters(_update19.startState);
        var viewport = _update19.view.viewport,
          decoratedToMapped = _update19.changes.mapPos(this.decoratedTo, 1);
        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
          this.decorations = this.decorations.map(_update19.changes);
          this.decoratedTo = decoratedToMapped;
        } else if (tree != this.tree || _update19.viewportChanged || styleChange) {
          this.tree = tree;
          this.decorations = this.buildDeco(_update19.view, highlighters);
          this.decoratedTo = viewport.to;
        }
      }
    }, {
      key: "buildDeco",
      value: function buildDeco(view, highlighters) {
        var _this77 = this;
        if (!highlighters || !this.tree.length) return Decoration.none;
        var builder = new RangeSetBuilder();
        var _iterator166 = _createForOfIteratorHelper(view.visibleRanges),
          _step166;
        try {
          for (_iterator166.s(); !(_step166 = _iterator166.n()).done;) {
            var _step166$value = _step166.value,
              from = _step166$value.from,
              to = _step166$value.to;
            highlightTree(this.tree, highlighters, function (from, to, style) {
              builder.add(from, to, _this77.markCache[style] || (_this77.markCache[style] = Decoration.mark({
                "class": style
              })));
            }, from, to);
          }
        } catch (err) {
          _iterator166.e(err);
        } finally {
          _iterator166.f();
        }
        return builder.finish();
      }
    }]);
  }();
  var treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
    decorations: function decorations(v) {
      return v.decorations;
    }
  }));
  /**
  A default highlight style (works well with light themes).
  */
  var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
    tag: tags.meta,
    color: "#404740"
  }, {
    tag: tags.link,
    textDecoration: "underline"
  }, {
    tag: tags.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.keyword,
    color: "#708"
  }, {
    tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
    color: "#219"
  }, {
    tag: [tags.literal, tags.inserted],
    color: "#164"
  }, {
    tag: [tags.string, tags.deleted],
    color: "#a11"
  }, {
    tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
    color: "#e40"
  }, {
    tag: /*@__PURE__*/tags.definition(tags.variableName),
    color: "#00f"
  }, {
    tag: /*@__PURE__*/tags.local(tags.variableName),
    color: "#30a"
  }, {
    tag: [tags.typeName, tags.namespace],
    color: "#085"
  }, {
    tag: tags.className,
    color: "#167"
  }, {
    tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
    color: "#256"
  }, {
    tag: /*@__PURE__*/tags.definition(tags.propertyName),
    color: "#00c"
  }, {
    tag: tags.comment,
    color: "#940"
  }, {
    tag: tags.invalid,
    color: "#f00"
  }]);
  var baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": {
      backgroundColor: "#328c8252"
    },
    "&.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bb555544"
    }
  });
  var DefaultScanDist = 10000,
    DefaultBrackets = "()[]{}";
  var bracketMatchingConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  var matchingMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-matchingBracket"
    }),
    nonmatchingMark = /*@__PURE__*/Decoration.mark({
      "class": "cm-nonmatchingBracket"
    });
  function defaultRenderMatch(match) {
    var decorations = [];
    var mark = match.matched ? matchingMark : nonmatchingMark;
    decorations.push(mark.range(match.start.from, match.start.to));
    if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
    return decorations;
  }
  var bracketMatchingState = /*@__PURE__*/StateField.define({
    create: function create() {
      return Decoration.none;
    },
    update: function update(deco, tr) {
      if (!tr.docChanged && !tr.selection) return deco;
      var decorations = [];
      var config = tr.state.facet(bracketMatchingConfig);
      var _iterator167 = _createForOfIteratorHelper(tr.state.selection.ranges),
        _step167;
      try {
        for (_iterator167.s(); !(_step167 = _iterator167.n()).done;) {
          var range = _step167.value;
          if (!range.empty) continue;
          var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
          if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
        }
      } catch (err) {
        _iterator167.e(err);
      } finally {
        _iterator167.f();
      }
      return Decoration.set(decorations, true);
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f);
    }
  });
  var bracketMatchingUnique = [bracketMatchingState, baseTheme$2];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  /**
  When larger syntax nodes, such as HTML tags, are marked as
  opening/closing, it can be a bit messy to treat the whole node as
  a matchable bracket. This node prop allows you to define, for such
  a node, a ‘handle’—the part of the node that is highlighted, and
  that the cursor must be on to activate highlighting in the first
  place.
  */
  var bracketMatchingHandle = /*@__PURE__*/new NodeProp();
  function matchingNodes(node, dir, brackets) {
    var byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp) return byProp;
    if (node.name.length == 1) {
      var index = brackets.indexOf(node.name);
      if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
    }
    return null;
  }
  function findHandle(node) {
    var hasHandle = node.type.prop(bracketMatchingHandle);
    return hasHandle ? hasHandle(node.node) : node;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir) {
    var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var maxScanDistance = config.maxScanDistance || DefaultScanDist,
      brackets = config.brackets || DefaultBrackets;
    var tree = syntaxTree(state),
      node = tree.resolveInner(pos, dir);
    for (var _cur18 = node; _cur18; _cur18 = _cur18.parent) {
      var matches = matchingNodes(_cur18.type, dir, brackets);
      if (matches && _cur18.from < _cur18.to) {
        var handle = findHandle(_cur18);
        if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, _cur18, handle, matches, brackets);
      }
    }
    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
    var parent = token.parent,
      firstToken = {
        from: handle.from,
        to: handle.to
      };
    var depth = 0,
      cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          var endHandle = findHandle(cursor);
          return {
            start: firstToken,
            end: endHandle ? {
              from: endHandle.from,
              to: endHandle.to
            } : undefined,
            matched: true
          };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) {
            var _endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: _endHandle && _endHandle.from < _endHandle.to ? {
                from: _endHandle.from,
                to: _endHandle.to
              } : undefined,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return {
      start: firstToken,
      matched: false
    };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    var bracket = brackets.indexOf(startCh);
    if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
    var startToken = {
      from: dir < 0 ? pos - 1 : pos,
      to: dir > 0 ? pos + 1 : pos
    };
    var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
      depth = 0;
    for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
      var text = iter.value;
      if (dir < 0) distance += text.length;
      var basePos = pos + distance * dir;
      for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
        var found = brackets.indexOf(text[_pos2]);
        if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;
        if (found % 2 == 0 == dir > 0) {
          depth++;
        } else if (depth == 1) {
          // Closing
          return {
            start: startToken,
            end: {
              from: basePos + _pos2,
              to: basePos + _pos2 + 1
            },
            matched: found >> 1 == bracket >> 1
          };
        } else {
          depth--;
        }
      }
      if (dir > 0) distance += text.length;
    }
    return iter.done ? {
      start: startToken,
      matched: false
    } : null;
  }
  var noTokens = /*@__PURE__*/Object.create(null);
  var typeArray = [NodeType.none];
  var warned = [];
  // Cache of node types by name and tags
  var byTag = /*@__PURE__*/Object.create(null);
  var defaultTable = /*@__PURE__*/Object.create(null);
  for (var _i140 = 0, _arr2 = [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]; _i140 < _arr2.length; _i140++) {
    var _arr2$_i = _slicedToArray(_arr2[_i140], 2),
      legacyName = _arr2$_i[0],
      _name8 = _arr2$_i[1];
    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, _name8);
  }
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1) return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    var tags$1 = [];
    var _iterator168 = _createForOfIteratorHelper(tagStr.split(" ")),
      _step168;
    try {
      for (_iterator168.s(); !(_step168 = _iterator168.n()).done;) {
        var _name9 = _step168.value;
        var found = [];
        var _iterator169 = _createForOfIteratorHelper(_name9.split(".")),
          _step169;
        try {
          for (_iterator169.s(); !(_step169 = _iterator169.n()).done;) {
            var part = _step169.value;
            var value = extra[part] || tags[part];
            if (!value) {
              warnForPart(part, "Unknown highlighting tag ".concat(part));
            } else if (typeof value == "function") {
              if (!found.length) warnForPart(part, "Modifier ".concat(part, " used at start of tag"));else found = found.map(value);
            } else {
              if (found.length) warnForPart(part, "Tag ".concat(part, " used as modifier"));else found = Array.isArray(value) ? value : [value];
            }
          }
        } catch (err) {
          _iterator169.e(err);
        } finally {
          _iterator169.f();
        }
        var _iterator170 = _createForOfIteratorHelper(found),
          _step170;
        try {
          for (_iterator170.s(); !(_step170 = _iterator170.n()).done;) {
            var tag = _step170.value;
            tags$1.push(tag);
          }
        } catch (err) {
          _iterator170.e(err);
        } finally {
          _iterator170.f();
        }
      }
    } catch (err) {
      _iterator168.e(err);
    } finally {
      _iterator168.f();
    }
    if (!tags$1.length) return 0;
    var name = tagStr.replace(/ /g, "_"),
      key = name + " " + tags$1.map(function (t) {
        return t.id;
      });
    var known = byTag[key];
    if (known) return known.id;
    var type = byTag[key] = NodeType.define({
      id: typeArray.length,
      name: name,
      props: [styleTags(_defineProperty({}, name, tags$1))]
    });
    typeArray.push(type);
    return type.id;
  }
  ({
    rtl: /*@__PURE__*/Decoration.mark({
      "class": "cm-iso",
      inclusive: true,
      attributes: {
        dir: "rtl"
      },
      bidiIsolate: Direction.RTL
    }),
    ltr: /*@__PURE__*/Decoration.mark({
      "class": "cm-iso",
      inclusive: true,
      attributes: {
        dir: "ltr"
      },
      bidiIsolate: Direction.LTR
    }),
    auto: /*@__PURE__*/Decoration.mark({
      "class": "cm-iso",
      inclusive: true,
      attributes: {
        dir: "auto"
      },
      bidiIsolate: null
    })
  });

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  var toggleComment = function toggleComment(target) {
    var state = target.state,
      line = state.doc.lineAt(state.selection.main.from),
      config = getConfig(target.state, line.from);
    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
    return function (_ref16) {
      var state = _ref16.state,
        dispatch = _ref16.dispatch;
      if (state.readOnly) return false;
      var tr = f(option, state);
      if (!tr) return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  var toggleBlockCommentByLine = /*@__PURE__*/command(function (o, s) {
    return changeBlockComment(o, s, selectedLineRanges(s));
  }, 0 /* CommentOption.Toggle */);
  function getConfig(state, pos) {
    var data = state.languageDataAt("commentTokens", pos, 1);
    return data.length ? data[0] : {};
  }
  var SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, _ref17, from, to) {
    var open = _ref17.open,
      close = _ref17.close;
    var textBefore = state.sliceDoc(from - SearchMargin, from);
    var textAfter = state.sliceDoc(to, to + SearchMargin);
    var spaceBefore = /\s*$/.exec(textBefore)[0].length,
      spaceAfter = /^\s*/.exec(textAfter)[0].length;
    var beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
      return {
        open: {
          pos: from - spaceBefore,
          margin: spaceBefore && 1
        },
        close: {
          pos: to + spaceAfter,
          margin: spaceAfter && 1
        }
      };
    }
    var startText, endText;
    if (to - from <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from, to);
    } else {
      startText = state.sliceDoc(from, from + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    var startSpace = /^\s*/.exec(startText)[0].length,
      endSpace = /\s*$/.exec(endText)[0].length;
    var endOff = endText.length - endSpace - close.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
      return {
        open: {
          pos: from + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  function selectedLineRanges(state) {
    var ranges = [];
    var _iterator171 = _createForOfIteratorHelper(state.selection.ranges),
      _step171;
    try {
      for (_iterator171.s(); !(_step171 = _iterator171.n()).done;) {
        var _r0 = _step171.value;
        var fromLine = state.doc.lineAt(_r0.from);
        var toLine = _r0.to <= fromLine.to ? fromLine : state.doc.lineAt(_r0.to);
        if (toLine.from > fromLine.from && toLine.from == _r0.to) toLine = _r0.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(_r0.to - 1);
        var last = ranges.length - 1;
        if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
          from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length,
          to: toLine.to
        });
      }
    } catch (err) {
      _iterator171.e(err);
    } finally {
      _iterator171.f();
    }
    return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state) {
    var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
    var tokens = ranges.map(function (r) {
      return getConfig(state, r.from).block;
    });
    if (!tokens.every(function (c) {
      return c;
    })) return null;
    var comments = ranges.map(function (r, i) {
      return findBlockComment(state, tokens[i], r.from, r.to);
    });
    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(function (c) {
      return c;
    })) {
      return {
        changes: state.changes(ranges.map(function (range, i) {
          if (comments[i]) return [];
          return [{
            from: range.from,
            insert: tokens[i].open + " "
          }, {
            from: range.to,
            insert: " " + tokens[i].close
          }];
        }))
      };
    } else if (option != 1 /* CommentOption.Comment */ && comments.some(function (c) {
      return c;
    })) {
      var changes = [];
      for (var _i141 = 0, _comment; _i141 < comments.length; _i141++) if (_comment = comments[_i141]) {
        var token = tokens[_i141],
          _comment2 = _comment,
          open = _comment2.open,
          close = _comment2.close;
        changes.push({
          from: open.pos - token.open.length,
          to: open.pos + open.margin
        }, {
          from: close.pos - close.margin,
          to: close.pos + token.close.length
        });
      }
      return {
        changes: changes
      };
    }
    return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state) {
    var ranges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : state.selection.ranges;
    var lines = [];
    var prevLine = -1;
    var _iterator172 = _createForOfIteratorHelper(ranges),
      _step172;
    try {
      for (_iterator172.s(); !(_step172 = _iterator172.n()).done;) {
        var _step172$value = _step172.value,
          _from2 = _step172$value.from,
          _to2 = _step172$value.to;
        var startI = lines.length,
          minIndent = 1e9;
        var _token2 = getConfig(state, _from2).line;
        if (!_token2) continue;
        for (var pos = _from2; pos <= _to2;) {
          var _line6 = state.doc.lineAt(pos);
          if (_line6.from > prevLine && (_from2 == _to2 || _to2 > _line6.from)) {
            prevLine = _line6.from;
            var _indent = /^\s*/.exec(_line6.text)[0].length;
            var _empty = _indent == _line6.length;
            var _comment4 = _line6.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;
            if (_indent < _line6.text.length && _indent < minIndent) minIndent = _indent;
            lines.push({
              line: _line6,
              comment: _comment4,
              token: _token2,
              indent: _indent,
              empty: _empty,
              single: false
            });
          }
          pos = _line6.to + 1;
        }
        if (minIndent < 1e9) for (var _i142 = startI; _i142 < lines.length; _i142++) if (lines[_i142].indent < lines[_i142].line.text.length) lines[_i142].indent = minIndent;
        if (lines.length == startI + 1) lines[startI].single = true;
      }
    } catch (err) {
      _iterator172.e(err);
    } finally {
      _iterator172.f();
    }
    if (option != 2 /* CommentOption.Uncomment */ && lines.some(function (l) {
      return l.comment < 0 && (!l.empty || l.single);
    })) {
      var changes = [];
      var _iterator173 = _createForOfIteratorHelper(lines),
        _step173;
      try {
        for (_iterator173.s(); !(_step173 = _iterator173.n()).done;) {
          var _step173$value = _step173.value,
            line = _step173$value.line,
            token = _step173$value.token,
            indent = _step173$value.indent,
            empty = _step173$value.empty,
            single = _step173$value.single;
          if (single || !empty) changes.push({
            from: line.from + indent,
            insert: token + " "
          });
        }
      } catch (err) {
        _iterator173.e(err);
      } finally {
        _iterator173.f();
      }
      var changeSet = state.changes(changes);
      return {
        changes: changeSet,
        selection: state.selection.map(changeSet, 1)
      };
    } else if (option != 1 /* CommentOption.Comment */ && lines.some(function (l) {
      return l.comment >= 0;
    })) {
      var _changes2 = [];
      var _iterator174 = _createForOfIteratorHelper(lines),
        _step174;
      try {
        for (_iterator174.s(); !(_step174 = _iterator174.n()).done;) {
          var _step174$value = _step174.value,
            _line5 = _step174$value.line,
            _comment3 = _step174$value.comment,
            _token = _step174$value.token;
          if (_comment3 >= 0) {
            var from = _line5.from + _comment3,
              to = from + _token.length;
            if (_line5.text[to - _line5.from] == " ") to++;
            _changes2.push({
              from: from,
              to: to
            });
          }
        }
      } catch (err) {
        _iterator174.e(err);
      } finally {
        _iterator174.f();
      }
      return {
        changes: _changes2
      };
    }
    return null;
  }
  var fromHistory = /*@__PURE__*/Annotation.define();
  /**
  Transaction annotation that will prevent that transaction from
  being combined with other transactions in the undo history. Given
  `"before"`, it'll prevent merging with previous transactions. With
  `"after"`, subsequent transactions won't be combined with this
  one. With `"full"`, the transaction is isolated on both sides.
  */
  var isolateHistory = /*@__PURE__*/Annotation.define();
  /**
  This facet provides a way to register functions that, given a
  transaction, provide a set of effects that the history should
  store when inverting the transaction. This can be used to
  integrate some kinds of effects in the history, so that they can
  be undone (and redone again).
  */
  var invertedEffects = /*@__PURE__*/Facet.define();
  var historyConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: function joinToEvent(_t, isAdjacent) {
          return isAdjacent;
        }
      }, {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: function joinToEvent(a, b) {
          return function (tr, adj) {
            return a(tr, adj) || b(tr, adj);
          };
        }
      });
    }
  });
  var historyField_ = /*@__PURE__*/StateField.define({
    create: function create() {
      return HistoryState.empty;
    },
    update: function update(state, tr) {
      var config = tr.state.facet(historyConfig);
      var fromHist = tr.annotation(fromHistory);
      if (fromHist) {
        var item = HistEvent.fromTransaction(tr, fromHist.selection),
          from = fromHist.side;
        var other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
        if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
        return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
      }
      var isolate = tr.annotation(isolateHistory);
      if (isolate == "full" || isolate == "before") state = state.isolate();
      if (tr.annotation(Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
      var event = HistEvent.fromTransaction(tr);
      var time = tr.annotation(Transaction.time),
        userEvent = tr.annotation(Transaction.userEvent);
      if (event) state = state.addChanges(event, time, userEvent, config, tr);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
      if (isolate == "full" || isolate == "after") state = state.isolate();
      return state;
    },
    toJSON: function toJSON(value) {
      return {
        done: value.done.map(function (e) {
          return e.toJSON();
        }),
        undone: value.undone.map(function (e) {
          return e.toJSON();
        })
      };
    },
    fromJSON: function fromJSON(json) {
      return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
    }
  });
  /**
  Create a history extension with the given configuration.
  */
  function history() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [historyField_, historyConfig.of(config), EditorView.domEventHandlers({
      beforeinput: function beforeinput(e, view) {
        var command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command) return false;
        e.preventDefault();
        return command(view);
      }
    })];
  }
  function cmd(side, selection) {
    return function (_ref18) {
      var state = _ref18.state,
        dispatch = _ref18.dispatch;
      if (!selection && state.readOnly) return false;
      var historyState = state.field(historyField_, false);
      if (!historyState) return false;
      var tr = historyState.pop(side, state, selection);
      if (!tr) return false;
      dispatch(tr);
      return true;
    };
  }
  /**
  Undo a single group of history events. Returns false if no group
  was available.
  */
  var undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
  /**
  Redo a group of history events. Returns false if no group was
  available.
  */
  var redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
  /**
  Undo a change or selection change.
  */
  var undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
  /**
  Redo a change or selection change.
  */
  var redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
  // History events store groups of changes or effects that need to be
  // undone/redone together.
  var HistEvent = /*#__PURE__*/function () {
    function HistEvent(
    // The changes in this event. Normal events hold at least one
    // change or effect. But it may be necessary to store selection
    // events before the first change, in which case a special type of
    // instance is created which doesn't hold any changes, with
    // changes == startSelection == undefined
    changes,
    // The effects associated with this event
    effects,
    // Accumulated mapping (from addToHistory==false) that should be
    // applied to events below this one.
    mapped,
    // The selection before this event
    startSelection,
    // Stores selection changes after this event, to be used for
    // selection undo/redo.
    selectionsAfter) {
      _classCallCheck(this, HistEvent);
      this.changes = changes;
      this.effects = effects;
      this.mapped = mapped;
      this.startSelection = startSelection;
      this.selectionsAfter = selectionsAfter;
    }
    return _createClass(HistEvent, [{
      key: "setSelAfter",
      value: function setSelAfter(after) {
        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var _a, _b, _c;
        return {
          changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
          mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
          startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
          selectionsAfter: this.selectionsAfter.map(function (s) {
            return s.toJSON();
          })
        };
      }
    }], [{
      key: "fromJSON",
      value: function fromJSON(json) {
        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
    }, {
      key: "fromTransaction",
      value: function fromTransaction(tr, selection) {
        var effects = none$1;
        var _iterator175 = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),
          _step175;
        try {
          for (_iterator175.s(); !(_step175 = _iterator175.n()).done;) {
            var invert = _step175.value;
            var result = invert(tr);
            if (result.length) effects = effects.concat(result);
          }
        } catch (err) {
          _iterator175.e(err);
        } finally {
          _iterator175.f();
        }
        if (!effects.length && tr.changes.empty) return null;
        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$1);
      }
    }, {
      key: "selection",
      value: function selection(selections) {
        return new HistEvent(undefined, none$1, undefined, undefined, selections);
      }
    }]);
  }();
  function updateBranch(branch, to, maxLen, newEvent) {
    var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
    var newBranch = branch.slice(start, to);
    newBranch.push(newEvent);
    return newBranch;
  }
  function isAdjacent(a, b) {
    var ranges = [],
      isAdjacent = false;
    a.iterChangedRanges(function (f, t) {
      return ranges.push(f, t);
    });
    b.iterChangedRanges(function (_f, _t, f, t) {
      for (var _i143 = 0; _i143 < ranges.length;) {
        var from = ranges[_i143++],
          to = ranges[_i143++];
        if (t >= from && f <= to) isAdjacent = true;
      }
    });
    return isAdjacent;
  }
  function eqSelectionShape(a, b) {
    return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
      return r.empty != b.ranges[i].empty;
    }).length === 0;
  }
  function conc(a, b) {
    return !a.length ? b : !b.length ? a : a.concat(b);
  }
  var none$1 = [];
  var MaxSelectionsPerEvent = 200;
  function _addSelection(branch, selection) {
    if (!branch.length) {
      return [HistEvent.selection([selection])];
    } else {
      var lastEvent = branch[branch.length - 1];
      var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
      if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
      sels.push(selection);
      return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
    }
  }
  // Assumes the top item has one or more selectionAfter values
  function popSelection(branch) {
    var last = branch[branch.length - 1];
    var newBranch = branch.slice();
    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
    return newBranch;
  }
  // Add a mapping to the top event in the given branch. If this maps
  // away all the changes and effects in that item, drop it and
  // propagate the mapping to the next item.
  function addMappingToBranch(branch, mapping) {
    if (!branch.length) return branch;
    var length = branch.length,
      selections = none$1;
    while (length) {
      var event = mapEvent(branch[length - 1], mapping, selections);
      if (event.changes && !event.changes.empty || event.effects.length) {
        // Event survived mapping
        var result = branch.slice(0, length);
        result[length - 1] = event;
        return result;
      } else {
        // Drop this event, since there's no changes or effects left
        mapping = event.mapped;
        length--;
        selections = event.selectionsAfter;
      }
    }
    return selections.length ? [HistEvent.selection(selections)] : none$1;
  }
  function mapEvent(event, mapping, extraSelections) {
    var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
      return s.map(mapping);
    }) : none$1, extraSelections);
    // Change-less events don't store mappings (they are always the last event in a branch)
    if (!event.changes) return HistEvent.selection(selections);
    var mappedChanges = event.changes.map(mapping),
      before = mapping.mapDesc(event.changes, true);
    var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  var joinableUserEvent = /^(input\.type|delete)($|\.)/;
  var HistoryState = /*#__PURE__*/function () {
    function HistoryState(done, undone) {
      var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      _classCallCheck(this, HistoryState);
      this.done = done;
      this.undone = undone;
      this.prevTime = prevTime;
      this.prevUserEvent = prevUserEvent;
    }
    return _createClass(HistoryState, [{
      key: "isolate",
      value: function isolate() {
        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
    }, {
      key: "addChanges",
      value: function addChanges(event, time, userEvent, config, tr) {
        var done = this.done,
          lastEvent = done[done.length - 1];
        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) ||
        // For compose (but not compose.start) events, always join with previous event
        userEvent == "input.type.compose")) {
          done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$1));
        } else {
          done = updateBranch(done, done.length, config.minDepth, event);
        }
        return new HistoryState(done, none$1, time, userEvent);
      }
    }, {
      key: "addSelection",
      value: function addSelection(selection, time, userEvent, newGroupDelay) {
        var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$1;
        if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
        return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
      }
    }, {
      key: "addMapping",
      value: function addMapping(mapping) {
        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
    }, {
      key: "pop",
      value: function pop(side, state, onlySelection) {
        var branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
        if (branch.length == 0) return null;
        var event = branch[branch.length - 1],
          selection = event.selectionsAfter[0] || state.selection;
        if (onlySelection && event.selectionsAfter.length) {
          return state.update({
            selection: event.selectionsAfter[event.selectionsAfter.length - 1],
            annotations: fromHistory.of({
              side: side,
              rest: popSelection(branch),
              selection: selection
            }),
            userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
            scrollIntoView: true
          });
        } else if (!event.changes) {
          return null;
        } else {
          var rest = branch.length == 1 ? none$1 : branch.slice(0, branch.length - 1);
          if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
          return state.update({
            changes: event.changes,
            selection: event.startSelection,
            effects: event.effects,
            annotations: fromHistory.of({
              side: side,
              rest: rest,
              selection: selection
            }),
            filter: false,
            userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
            scrollIntoView: true
          });
        }
      }
    }]);
  }();
  HistoryState.empty = /*@__PURE__*/new HistoryState(none$1, none$1);
  /**
  Default key bindings for the undo history.
   - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
  - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
  - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
  - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
  */
  var historyKeymap = [{
    key: "Mod-z",
    run: undo,
    preventDefault: true
  }, {
    key: "Mod-y",
    mac: "Mod-Shift-z",
    run: redo,
    preventDefault: true
  }, {
    linux: "Ctrl-Shift-z",
    run: redo,
    preventDefault: true
  }, {
    key: "Mod-u",
    run: undoSelection,
    preventDefault: true
  }, {
    key: "Alt-u",
    mac: "Mod-Shift-u",
    run: redoSelection,
    preventDefault: true
  }];
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
    return state.update({
      selection: selection,
      scrollIntoView: true,
      userEvent: "select"
    });
  }
  function moveSel(_ref19, how) {
    var state = _ref19.state,
      dispatch = _ref19.dispatch;
    var selection = updateSel(state.selection, how);
    if (selection.eq(state.selection, true)) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
    return moveSel(view, function (range) {
      return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
    });
  }
  function ltrAtCursor(view) {
    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  var cursorCharLeft = function cursorCharLeft(view) {
    return cursorByChar(view, !ltrAtCursor(view));
  };
  /**
  Move the selection one character to the right.
  */
  var cursorCharRight = function cursorCharRight(view) {
    return cursorByChar(view, ltrAtCursor(view));
  };
  function cursorByGroup(view, forward) {
    return moveSel(view, function (range) {
      return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
    });
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  var cursorGroupLeft = function cursorGroupLeft(view) {
    return cursorByGroup(view, !ltrAtCursor(view));
  };
  /**
  Move the selection one group to the right.
  */
  var cursorGroupRight = function cursorGroupRight(view) {
    return cursorByGroup(view, ltrAtCursor(view));
  };
  function interestingNode(state, node, bracketProp) {
    if (node.type.prop(bracketProp)) return true;
    var len = node.to - node.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
    var pos = syntaxTree(state).resolveInner(start.head);
    var bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    // Scan forward through child nodes to see if there's an interesting
    // node ahead.
    for (var at = start.head;;) {
      var next = forward ? pos.childAfter(at) : pos.childBefore(at);
      if (!next) break;
      if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
    }
    var bracket = pos.type.prop(bracketProp),
      match,
      newPos;
    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
    return moveSel(view, function (range) {
      return moveBySyntax(view.state, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the cursor over the next syntactic element to the right.
  */
  var cursorSyntaxRight = function cursorSyntaxRight(view) {
    return moveSel(view, function (range) {
      return moveBySyntax(view.state, range, ltrAtCursor(view));
    });
  };
  function cursorByLine(view, forward) {
    return moveSel(view, function (range) {
      if (!range.empty) return rangeEnd(range, forward);
      var moved = view.moveVertically(range, forward);
      return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
    });
  }
  /**
  Move the selection one line up.
  */
  var cursorLineUp = function cursorLineUp(view) {
    return cursorByLine(view, false);
  };
  /**
  Move the selection one line down.
  */
  var cursorLineDown = function cursorLineDown(view) {
    return cursorByLine(view, true);
  };
  function pageInfo(view) {
    var selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
    var marginTop = 0,
      marginBottom = 0,
      height;
    if (selfScroll) {
      var _iterator176 = _createForOfIteratorHelper(view.state.facet(EditorView.scrollMargins)),
        _step176;
      try {
        for (_iterator176.s(); !(_step176 = _iterator176.n()).done;) {
          var source = _step176.value;
          var margins = source(view);
          if (margins === null || margins === void 0 ? void 0 : margins.top) marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
          if (margins === null || margins === void 0 ? void 0 : margins.bottom) marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
        }
      } catch (err) {
        _iterator176.e(err);
      } finally {
        _iterator176.f();
      }
      height = view.scrollDOM.clientHeight - marginTop - marginBottom;
    } else {
      height = (view.dom.ownerDocument.defaultView || window).innerHeight;
    }
    return {
      marginTop: marginTop,
      marginBottom: marginBottom,
      selfScroll: selfScroll,
      height: Math.max(view.defaultLineHeight, height - 5)
    };
  }
  function cursorByPage(view, forward) {
    var page = pageInfo(view);
    var state = view.state,
      selection = updateSel(state.selection, function (range) {
        return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
      });
    if (selection.eq(state.selection)) return false;
    var effect;
    if (page.selfScroll) {
      var startPos = view.coordsAtPos(state.selection.main.head);
      var scrollRect = view.scrollDOM.getBoundingClientRect();
      var scrollTop = scrollRect.top + page.marginTop,
        scrollBottom = scrollRect.bottom - page.marginBottom;
      if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom) effect = EditorView.scrollIntoView(selection.main.head, {
        y: "start",
        yMargin: startPos.top - scrollTop
      });
    }
    view.dispatch(setSel(state, selection), {
      effects: effect
    });
    return true;
  }
  /**
  Move the selection one page up.
  */
  var cursorPageUp = function cursorPageUp(view) {
    return cursorByPage(view, false);
  };
  /**
  Move the selection one page down.
  */
  var cursorPageDown = function cursorPageDown(view) {
    return cursorByPage(view, true);
  };
  function moveByLineBoundary(view, start, forward) {
    var line = view.lineBlockAt(start.head),
      moved = view.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      var _space2 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (_space2 && start.head != line.from + _space2) moved = EditorSelection.cursor(line.from + _space2);
    }
    return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, true);
    });
  };
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, false);
    });
  };
  /**
  Move the selection one line wrap point to the left.
  */
  var cursorLineBoundaryLeft = function cursorLineBoundaryLeft(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection one line wrap point to the right.
  */
  var cursorLineBoundaryRight = function cursorLineBoundaryRight(view) {
    return moveSel(view, function (range) {
      return moveByLineBoundary(view, range, ltrAtCursor(view));
    });
  };
  /**
  Move the selection to the start of the line.
  */
  var cursorLineStart = function cursorLineStart(view) {
    return moveSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).from, 1);
    });
  };
  /**
  Move the selection to the end of the line.
  */
  var cursorLineEnd = function cursorLineEnd(view) {
    return moveSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).to, -1);
    });
  };
  function toMatchingBracket(state, dispatch, extend) {
    var found = false,
      selection = updateSel(state.selection, function (range) {
        var matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
        if (!matching || !matching.end) return range;
        found = true;
        var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
      });
    if (!found) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  var cursorMatchingBracket = function cursorMatchingBracket(_ref20) {
    var state = _ref20.state,
      dispatch = _ref20.dispatch;
    return toMatchingBracket(state, dispatch, false);
  };
  function extendSel(target, how) {
    var selection = updateSel(target.state.selection, function (range) {
      var head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
    });
    if (selection.eq(target.state.selection)) return false;
    target.dispatch(setSel(target.state, selection));
    return true;
  }
  function selectByChar(view, forward) {
    return extendSel(view, function (range) {
      return view.moveByChar(range, forward);
    });
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  var selectCharLeft = function selectCharLeft(view) {
    return selectByChar(view, !ltrAtCursor(view));
  };
  /**
  Move the selection head one character to the right.
  */
  var selectCharRight = function selectCharRight(view) {
    return selectByChar(view, ltrAtCursor(view));
  };
  function selectByGroup(view, forward) {
    return extendSel(view, function (range) {
      return view.moveByGroup(range, forward);
    });
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  var selectGroupLeft = function selectGroupLeft(view) {
    return selectByGroup(view, !ltrAtCursor(view));
  };
  /**
  Move the selection head one group to the right.
  */
  var selectGroupRight = function selectGroupRight(view) {
    return selectByGroup(view, ltrAtCursor(view));
  };
  /**
  Move the selection head over the next syntactic element to the left.
  */
  var selectSyntaxLeft = function selectSyntaxLeft(view) {
    return extendSel(view, function (range) {
      return moveBySyntax(view.state, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection head over the next syntactic element to the right.
  */
  var selectSyntaxRight = function selectSyntaxRight(view) {
    return extendSel(view, function (range) {
      return moveBySyntax(view.state, range, ltrAtCursor(view));
    });
  };
  function selectByLine(view, forward) {
    return extendSel(view, function (range) {
      return view.moveVertically(range, forward);
    });
  }
  /**
  Move the selection head one line up.
  */
  var selectLineUp = function selectLineUp(view) {
    return selectByLine(view, false);
  };
  /**
  Move the selection head one line down.
  */
  var selectLineDown = function selectLineDown(view) {
    return selectByLine(view, true);
  };
  function selectByPage(view, forward) {
    return extendSel(view, function (range) {
      return view.moveVertically(range, forward, pageInfo(view).height);
    });
  }
  /**
  Move the selection head one page up.
  */
  var selectPageUp = function selectPageUp(view) {
    return selectByPage(view, false);
  };
  /**
  Move the selection head one page down.
  */
  var selectPageDown = function selectPageDown(view) {
    return selectByPage(view, true);
  };
  /**
  Move the selection head to the next line boundary.
  */
  var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, true);
    });
  };
  /**
  Move the selection head to the previous line boundary.
  */
  var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, false);
    });
  };
  /**
  Move the selection head one line boundary to the left.
  */
  var selectLineBoundaryLeft = function selectLineBoundaryLeft(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, !ltrAtCursor(view));
    });
  };
  /**
  Move the selection head one line boundary to the right.
  */
  var selectLineBoundaryRight = function selectLineBoundaryRight(view) {
    return extendSel(view, function (range) {
      return moveByLineBoundary(view, range, ltrAtCursor(view));
    });
  };
  /**
  Move the selection head to the start of the line.
  */
  var selectLineStart = function selectLineStart(view) {
    return extendSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).from);
    });
  };
  /**
  Move the selection head to the end of the line.
  */
  var selectLineEnd = function selectLineEnd(view) {
    return extendSel(view, function (range) {
      return EditorSelection.cursor(view.lineBlockAt(range.head).to);
    });
  };
  /**
  Move the selection to the start of the document.
  */
  var cursorDocStart = function cursorDocStart(_ref21) {
    var state = _ref21.state,
      dispatch = _ref21.dispatch;
    dispatch(setSel(state, {
      anchor: 0
    }));
    return true;
  };
  /**
  Move the selection to the end of the document.
  */
  var cursorDocEnd = function cursorDocEnd(_ref22) {
    var state = _ref22.state,
      dispatch = _ref22.dispatch;
    dispatch(setSel(state, {
      anchor: state.doc.length
    }));
    return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  var selectDocStart = function selectDocStart(_ref23) {
    var state = _ref23.state,
      dispatch = _ref23.dispatch;
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: 0
    }));
    return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  var selectDocEnd = function selectDocEnd(_ref24) {
    var state = _ref24.state,
      dispatch = _ref24.dispatch;
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: state.doc.length
    }));
    return true;
  };
  /**
  Select the entire document.
  */
  var selectAll = function selectAll(_ref25) {
    var state = _ref25.state,
      dispatch = _ref25.dispatch;
    dispatch(state.update({
      selection: {
        anchor: 0,
        head: state.doc.length
      },
      userEvent: "select"
    }));
    return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  var selectLine = function selectLine(_ref26) {
    var state = _ref26.state,
      dispatch = _ref26.dispatch;
    var ranges = selectedLineBlocks(state).map(function (_ref27) {
      var from = _ref27.from,
        to = _ref27.to;
      return EditorSelection.range(from, Math.min(to + 1, state.doc.length));
    });
    dispatch(state.update({
      selection: EditorSelection.create(ranges),
      userEvent: "select"
    }));
    return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  var selectParentSyntax = function selectParentSyntax(_ref28) {
    var state = _ref28.state,
      dispatch = _ref28.dispatch;
    var selection = updateSel(state.selection, function (range) {
      var tree = syntaxTree(state),
        stack = tree.resolveStack(range.from, 1);
      if (range.empty) {
        var stackBefore = tree.resolveStack(range.from, -1);
        if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to) stack = stackBefore;
      }
      for (var _cur19 = stack; _cur19; _cur19 = _cur19.next) {
        var _cur20 = _cur19,
          node = _cur20.node;
        if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && _cur19.next) return EditorSelection.range(node.to, node.from);
      }
      return range;
    });
    if (selection.eq(state.selection)) return false;
    dispatch(setSel(state, selection));
    return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  var simplifySelection = function simplifySelection(_ref29) {
    var state = _ref29.state,
      dispatch = _ref29.dispatch;
    var cur = state.selection,
      selection = null;
    if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
    if (!selection) return false;
    dispatch(setSel(state, selection));
    return true;
  };
  function deleteBy(target, by) {
    if (target.state.readOnly) return false;
    var event = "delete.selection",
      state = target.state;
    var changes = state.changeByRange(function (range) {
      var from = range.from,
        to = range.to;
      if (from == to) {
        var towards = by(range);
        if (towards < from) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from = Math.min(from, towards);
        to = Math.max(to, towards);
      } else {
        from = skipAtomic(target, from, false);
        to = skipAtomic(target, to, true);
      }
      return from == to ? {
        range: range
      } : {
        changes: {
          from: from,
          to: to
        },
        range: EditorSelection.cursor(from, from < range.head ? -1 : 1)
      };
    });
    if (changes.changes.empty) return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
    }));
    return true;
  }
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView) {
      var _iterator177 = _createForOfIteratorHelper(target.state.facet(EditorView.atomicRanges).map(function (f) {
          return f(target);
        })),
        _step177;
      try {
        for (_iterator177.s(); !(_step177 = _iterator177.n()).done;) {
          var ranges = _step177.value;
          ranges.between(pos, pos, function (from, to) {
            if (from < pos && to > pos) pos = forward ? to : from;
          });
        }
      } catch (err) {
        _iterator177.e(err);
      } finally {
        _iterator177.f();
      }
    }
    return pos;
  }
  var deleteByChar = function deleteByChar(target, forward, byIndentUnit) {
    return deleteBy(target, function (range) {
      var pos = range.from,
        state = target.state,
        line = state.doc.lineAt(pos),
        before,
        targetPos;
      if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
        if (before[before.length - 1] == "\t") return pos - 1;
        var col = _countColumn(before, state.tabSize),
          drop = col % getIndentUnit(state) || getIndentUnit(state);
        for (var _i144 = 0; _i144 < drop && before[before.length - 1 - _i144] == " "; _i144++) pos--;
        targetPos = pos;
      } else {
        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from))) targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
      }
      return targetPos;
    });
  };
  /**
  Delete the selection, or, for cursor selections, the character or
  indentation unit before the cursor.
  */
  var deleteCharBackward = function deleteCharBackward(view) {
    return deleteByChar(view, false, true);
  };
  /**
  Delete the selection or the character after the cursor.
  */
  var deleteCharForward = function deleteCharForward(view) {
    return deleteByChar(view, true, false);
  };
  var deleteByGroup = function deleteByGroup(target, forward) {
    return deleteBy(target, function (range) {
      var pos = range.head,
        state = target.state,
        line = state.doc.lineAt(pos);
      var categorize = state.charCategorizer(pos);
      for (var cat = null;;) {
        if (pos == (forward ? line.to : line.from)) {
          if (pos == range.head && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
          break;
        }
        var next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
        var _nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
        var nextCat = categorize(_nextChar);
        if (cat != null && nextCat != cat) break;
        if (_nextChar != " " || pos != range.head) cat = nextCat;
        pos = next;
      }
      return pos;
    });
  };
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  var deleteGroupBackward = function deleteGroupBackward(target) {
    return deleteByGroup(target, false);
  };
  /**
  Delete the selection or forward until the end of the next group.
  */
  var deleteGroupForward = function deleteGroupForward(target) {
    return deleteByGroup(target, true);
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  var deleteToLineEnd = function deleteToLineEnd(view) {
    return deleteBy(view, function (range) {
      var lineEnd = view.lineBlockAt(range.head).to;
      return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
    });
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line or the next line wrap before the cursor.
  */
  var deleteLineBoundaryBackward = function deleteLineBoundaryBackward(view) {
    return deleteBy(view, function (range) {
      var lineStart = view.moveToLineBoundary(range, false).head;
      return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
    });
  };
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line or the next line wrap after the cursor.
  */
  var deleteLineBoundaryForward = function deleteLineBoundaryForward(view) {
    return deleteBy(view, function (range) {
      var lineStart = view.moveToLineBoundary(range, true).head;
      return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
    });
  };
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  var splitLine = function splitLine(_ref30) {
    var state = _ref30.state,
      dispatch = _ref30.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: Text.of(["", ""])
        },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  var transposeChars = function transposeChars(_ref31) {
    var state = _ref31.state,
      dispatch = _ref31.dispatch;
    if (state.readOnly) return false;
    var changes = state.changeByRange(function (range) {
      if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
        range: range
      };
      var pos = range.from,
        line = state.doc.lineAt(pos);
      var from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
      var to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
      return {
        changes: {
          from: from,
          to: to,
          insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
        },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty) return false;
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "move.character"
    }));
    return true;
  };
  function selectedLineBlocks(state) {
    var blocks = [],
      upto = -1;
    var _iterator178 = _createForOfIteratorHelper(state.selection.ranges),
      _step178;
    try {
      for (_iterator178.s(); !(_step178 = _iterator178.n()).done;) {
        var range = _step178.value;
        var startLine = state.doc.lineAt(range.from),
          endLine = state.doc.lineAt(range.to);
        if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
        if (upto >= startLine.number) {
          var prev = blocks[blocks.length - 1];
          prev.to = endLine.to;
          prev.ranges.push(range);
        } else {
          blocks.push({
            from: startLine.from,
            to: endLine.to,
            ranges: [range]
          });
        }
        upto = endLine.number + 1;
      }
    } catch (err) {
      _iterator178.e(err);
    } finally {
      _iterator178.f();
    }
    return blocks;
  }
  function moveLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    var changes = [],
      ranges = [];
    var _iterator179 = _createForOfIteratorHelper(selectedLineBlocks(state)),
      _step179;
    try {
      for (_iterator179.s(); !(_step179 = _iterator179.n()).done;) {
        var block = _step179.value;
        if (forward ? block.to == state.doc.length : block.from == 0) continue;
        var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
        var size = nextLine.length + 1;
        if (forward) {
          changes.push({
            from: block.to,
            to: nextLine.to
          }, {
            from: block.from,
            insert: nextLine.text + state.lineBreak
          });
          var _iterator180 = _createForOfIteratorHelper(block.ranges),
            _step180;
          try {
            for (_iterator180.s(); !(_step180 = _iterator180.n()).done;) {
              var _r1 = _step180.value;
              ranges.push(EditorSelection.range(Math.min(state.doc.length, _r1.anchor + size), Math.min(state.doc.length, _r1.head + size)));
            }
          } catch (err) {
            _iterator180.e(err);
          } finally {
            _iterator180.f();
          }
        } else {
          changes.push({
            from: nextLine.from,
            to: block.from
          }, {
            from: block.to,
            insert: state.lineBreak + nextLine.text
          });
          var _iterator181 = _createForOfIteratorHelper(block.ranges),
            _step181;
          try {
            for (_iterator181.s(); !(_step181 = _iterator181.n()).done;) {
              var _r10 = _step181.value;
              ranges.push(EditorSelection.range(_r10.anchor - size, _r10.head - size));
            }
          } catch (err) {
            _iterator181.e(err);
          } finally {
            _iterator181.f();
          }
        }
      }
    } catch (err) {
      _iterator179.e(err);
    } finally {
      _iterator179.f();
    }
    if (!changes.length) return false;
    dispatch(state.update({
      changes: changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  /**
  Move the selected lines up one line.
  */
  var moveLineUp = function moveLineUp(_ref32) {
    var state = _ref32.state,
      dispatch = _ref32.dispatch;
    return moveLine(state, dispatch, false);
  };
  /**
  Move the selected lines down one line.
  */
  var moveLineDown = function moveLineDown(_ref33) {
    var state = _ref33.state,
      dispatch = _ref33.dispatch;
    return moveLine(state, dispatch, true);
  };
  function copyLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    var changes = [];
    var _iterator182 = _createForOfIteratorHelper(selectedLineBlocks(state)),
      _step182;
    try {
      for (_iterator182.s(); !(_step182 = _iterator182.n()).done;) {
        var block = _step182.value;
        if (forward) changes.push({
          from: block.from,
          insert: state.doc.slice(block.from, block.to) + state.lineBreak
        });else changes.push({
          from: block.to,
          insert: state.lineBreak + state.doc.slice(block.from, block.to)
        });
      }
    } catch (err) {
      _iterator182.e(err);
    } finally {
      _iterator182.f();
    }
    dispatch(state.update({
      changes: changes,
      scrollIntoView: true,
      userEvent: "input.copyline"
    }));
    return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  var copyLineUp = function copyLineUp(_ref34) {
    var state = _ref34.state,
      dispatch = _ref34.dispatch;
    return copyLine(state, dispatch, false);
  };
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  var copyLineDown = function copyLineDown(_ref35) {
    var state = _ref35.state,
      dispatch = _ref35.dispatch;
    return copyLine(state, dispatch, true);
  };
  /**
  Delete selected lines.
  */
  var deleteLine = function deleteLine(view) {
    if (view.state.readOnly) return false;
    var state = view.state,
      changes = state.changes(selectedLineBlocks(state).map(function (_ref36) {
        var from = _ref36.from,
          to = _ref36.to;
        if (from > 0) from--;else if (to < state.doc.length) to++;
        return {
          from: from,
          to: to
        };
      }));
    var selection = updateSel(state.selection, function (range) {
      var dist = undefined;
      if (view.lineWrapping) {
        var block = view.lineBlockAt(range.head),
          pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (pos) dist = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
      }
      return view.moveVertically(range, true, dist);
    }).map(changes);
    view.dispatch({
      changes: changes,
      selection: selection,
      scrollIntoView: true,
      userEvent: "delete.line"
    });
    return true;
  };
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
      from: pos,
      to: pos
    };
    var context = syntaxTree(state).resolveInner(pos);
    var before = context.childBefore(pos),
      after = context.childAfter(pos),
      closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from))) return {
      from: before.to,
      to: after.from
    };
    return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  var insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  var insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return function (_ref37) {
      var state = _ref37.state,
        dispatch = _ref37.dispatch;
      if (state.readOnly) return false;
      var changes = state.changeByRange(function (range) {
        var from = range.from,
          to = range.to,
          line = state.doc.lineAt(from);
        var explode = !atEof && from == to && isBetweenBrackets(state, from);
        if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        var cx = new IndentContext(state, {
          simulateBreak: from,
          simulateDoubleBreak: !!explode
        });
        var indent = getIndentation(cx, from);
        if (indent == null) indent = _countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
        while (to < line.to && /\s/.test(line.text[to - line.from])) to++;
        if (explode) {
          from = explode.from;
          to = explode.to;
        } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
        var insert = ["", indentString(state, indent)];
        if (explode) insert.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: {
            from: from,
            to: to,
            insert: Text.of(insert)
          },
          range: EditorSelection.cursor(from + 1 + insert[1].length)
        };
      });
      dispatch(state.update(changes, {
        scrollIntoView: true,
        userEvent: "input"
      }));
      return true;
    };
  }
  function changeBySelectedLine(state, f) {
    var atLine = -1;
    return state.changeByRange(function (range) {
      var changes = [];
      for (var pos = range.from; pos <= range.to;) {
        var line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      var changeSet = state.changes(changes);
      return {
        changes: changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  var indentSelection = function indentSelection(_ref38) {
    var state = _ref38.state,
      dispatch = _ref38.dispatch;
    if (state.readOnly) return false;
    var updated = Object.create(null);
    var context = new IndentContext(state, {
      overrideIndentation: function overrideIndentation(start) {
        var found = updated[start];
        return found == null ? -1 : found;
      }
    });
    var changes = changeBySelectedLine(state, function (line, changes, range) {
      var indent = getIndentation(context, line.from);
      if (indent == null) return;
      if (!/\S/.test(line.text)) indent = 0;
      var cur = /^\s*/.exec(line.text)[0];
      var norm = indentString(state, indent);
      if (cur != norm || range.from < line.from + cur.length) {
        updated[line.from] = indent;
        changes.push({
          from: line.from,
          to: line.from + cur.length,
          insert: norm
        });
      }
    });
    if (!changes.changes.empty) dispatch(state.update(changes, {
      userEvent: "indent"
    }));
    return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  var indentMore = function indentMore(_ref39) {
    var state = _ref39.state,
      dispatch = _ref39.dispatch;
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
      changes.push({
        from: line.from,
        insert: state.facet(indentUnit)
      });
    }), {
      userEvent: "input.indent"
    }));
    return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  var indentLess = function indentLess(_ref40) {
    var state = _ref40.state,
      dispatch = _ref40.dispatch;
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
      var space = /^\s*/.exec(line.text)[0];
      if (!space) return;
      var col = _countColumn(space, state.tabSize),
        keep = 0;
      var insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;
      changes.push({
        from: line.from + keep,
        to: line.from + space.length,
        insert: insert.slice(keep)
      });
    }), {
      userEvent: "delete.dedent"
    }));
    return true;
  };
  /**
  Enables or disables
  [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
  prevents the editor's key bindings from capturing Tab or
  Shift-Tab, making it possible for the user to move focus out of
  the editor with the keyboard.
  */
  var toggleTabFocusMode = function toggleTabFocusMode(view) {
    view.setTabFocusMode();
    return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.
    - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  var emacsStyleKeymap = [{
    key: "Ctrl-b",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Ctrl-f",
    run: cursorCharRight,
    shift: selectCharRight
  }, {
    key: "Ctrl-p",
    run: cursorLineUp,
    shift: selectLineUp
  }, {
    key: "Ctrl-n",
    run: cursorLineDown,
    shift: selectLineDown
  }, {
    key: "Ctrl-a",
    run: cursorLineStart,
    shift: selectLineStart
  }, {
    key: "Ctrl-e",
    run: cursorLineEnd,
    shift: selectLineEnd
  }, {
    key: "Ctrl-d",
    run: deleteCharForward
  }, {
    key: "Ctrl-h",
    run: deleteCharBackward
  }, {
    key: "Ctrl-k",
    run: deleteToLineEnd
  }, {
    key: "Ctrl-Alt-h",
    run: deleteGroupBackward
  }, {
    key: "Ctrl-o",
    run: splitLine
  }, {
    key: "Ctrl-t",
    run: transposeChars
  }, {
    key: "Ctrl-v",
    run: cursorPageDown
  }];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)
    - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
   - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
  */
  var standardKeymap = /*@__PURE__*/[{
    key: "ArrowLeft",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Mod-ArrowLeft",
    mac: "Alt-ArrowLeft",
    run: cursorGroupLeft,
    shift: selectGroupLeft,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowLeft",
    run: cursorLineBoundaryLeft,
    shift: selectLineBoundaryLeft,
    preventDefault: true
  }, {
    key: "ArrowRight",
    run: cursorCharRight,
    shift: selectCharRight,
    preventDefault: true
  }, {
    key: "Mod-ArrowRight",
    mac: "Alt-ArrowRight",
    run: cursorGroupRight,
    shift: selectGroupRight,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowRight",
    run: cursorLineBoundaryRight,
    shift: selectLineBoundaryRight,
    preventDefault: true
  }, {
    key: "ArrowUp",
    run: cursorLineUp,
    shift: selectLineUp,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowUp",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    mac: "Ctrl-ArrowUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "ArrowDown",
    run: cursorLineDown,
    shift: selectLineDown,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowDown",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    mac: "Ctrl-ArrowDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "PageUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "PageDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "Home",
    run: cursorLineBoundaryBackward,
    shift: selectLineBoundaryBackward,
    preventDefault: true
  }, {
    key: "Mod-Home",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    key: "End",
    run: cursorLineBoundaryForward,
    shift: selectLineBoundaryForward,
    preventDefault: true
  }, {
    key: "Mod-End",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    key: "Enter",
    run: insertNewlineAndIndent,
    shift: insertNewlineAndIndent
  }, {
    key: "Mod-a",
    run: selectAll
  }, {
    key: "Backspace",
    run: deleteCharBackward,
    shift: deleteCharBackward
  }, {
    key: "Delete",
    run: deleteCharForward
  }, {
    key: "Mod-Backspace",
    mac: "Alt-Backspace",
    run: deleteGroupBackward
  }, {
    key: "Mod-Delete",
    mac: "Alt-Delete",
    run: deleteGroupForward
  }, {
    mac: "Mod-Backspace",
    run: deleteLineBoundaryBackward
  }, {
    mac: "Mod-Delete",
    run: deleteLineBoundaryForward
  }].concat(/*@__PURE__*/emacsStyleKeymap.map(function (b) {
    return {
      mac: b.key,
      run: b.run,
      shift: b.shift
    };
  }));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:
   - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
  */
  var defaultKeymap = /*@__PURE__*/[{
    key: "Alt-ArrowLeft",
    mac: "Ctrl-ArrowLeft",
    run: cursorSyntaxLeft,
    shift: selectSyntaxLeft
  }, {
    key: "Alt-ArrowRight",
    mac: "Ctrl-ArrowRight",
    run: cursorSyntaxRight,
    shift: selectSyntaxRight
  }, {
    key: "Alt-ArrowUp",
    run: moveLineUp
  }, {
    key: "Shift-Alt-ArrowUp",
    run: copyLineUp
  }, {
    key: "Alt-ArrowDown",
    run: moveLineDown
  }, {
    key: "Shift-Alt-ArrowDown",
    run: copyLineDown
  }, {
    key: "Escape",
    run: simplifySelection
  }, {
    key: "Mod-Enter",
    run: insertBlankLine
  }, {
    key: "Alt-l",
    mac: "Ctrl-l",
    run: selectLine
  }, {
    key: "Mod-i",
    run: selectParentSyntax,
    preventDefault: true
  }, {
    key: "Mod-[",
    run: indentLess
  }, {
    key: "Mod-]",
    run: indentMore
  }, {
    key: "Mod-Alt-\\",
    run: indentSelection
  }, {
    key: "Shift-Mod-k",
    run: deleteLine
  }, {
    key: "Shift-Mod-\\",
    run: cursorMatchingBracket
  }, {
    key: "Mod-/",
    run: toggleComment
  }, {
    key: "Alt-A",
    run: toggleBlockComment
  }, {
    key: "Ctrl-m",
    mac: "Shift-Alt-m",
    run: toggleTabFocusMode
  }].concat(standardKeymap);
  /**
  A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
  Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
  Please see the [Tab example](../../examples/tab/) before using
  this.
  */
  var indentWithTab = {
    key: "Tab",
    run: indentMore,
    shift: indentLess
  };

  /**
  An instance of this is passed to completion source functions.
  */
  var CompletionContext = /*#__PURE__*/function () {
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    function CompletionContext(
    /**
    The editor state that the completion happens in.
    */
    state,
    /**
    The position at which the completion is happening.
    */
    pos,
    /**
    Indicates whether completion was activated explicitly, or
    implicitly by typing. The usual way to respond to this is to
    only return completions when either there is part of a
    completable entity before the cursor, or `explicit` is true.
    */
    explicit,
    /**
    The editor view. May be undefined if the context was created
    in a situation where there is no such view available, such as
    in synchronous updates via
    [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
    or when called by test code.
    */
    view) {
      _classCallCheck(this, CompletionContext);
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      this.view = view;
      /**
      @internal
      */
      this.abortListeners = [];
      /**
      @internal
      */
      this.abortOnDocChange = false;
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    return _createClass(CompletionContext, [{
      key: "tokenBefore",
      value: function tokenBefore(types) {
        var token = syntaxTree(this.state).resolveInner(this.pos, -1);
        while (token && types.indexOf(token.name) < 0) token = token.parent;
        return token ? {
          from: token.from,
          to: this.pos,
          text: this.state.sliceDoc(token.from, this.pos),
          type: token.type
        } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
    }, {
      key: "matchBefore",
      value: function matchBefore(expr) {
        var line = this.state.doc.lineAt(this.pos);
        var start = Math.max(line.from, this.pos - 250);
        var str = line.text.slice(start - line.from, this.pos - line.from);
        var found = str.search(ensureAnchor(expr, false));
        return found < 0 ? null : {
          from: start + found,
          to: this.pos,
          text: str.slice(found)
        };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
    }, {
      key: "aborted",
      get: function get() {
        return this.abortListeners == null;
      }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener, options) {
        if (type == "abort" && this.abortListeners) {
          this.abortListeners.push(listener);
          if (options && options.onDocChange) this.abortOnDocChange = true;
        }
      }
    }]);
  }();
  function toSet(chars) {
    var flat = Object.keys(chars).join("");
    var words = /\w/.test(flat);
    if (words) flat = flat.replace(/\w/g, "");
    return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
  }
  function prefixMatch(options) {
    var first = Object.create(null),
      rest = Object.create(null);
    var _iterator183 = _createForOfIteratorHelper(options),
      _step183;
    try {
      for (_iterator183.s(); !(_step183 = _iterator183.n()).done;) {
        var label = _step183.value.label;
        first[label[0]] = true;
        for (var _i145 = 1; _i145 < label.length; _i145++) rest[label[_i145]] = true;
      }
    } catch (err) {
      _iterator183.e(err);
    } finally {
      _iterator183.f();
    }
    var source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
    var options = list.map(function (o) {
      return typeof o == "string" ? {
        label: o
      } : o;
    });
    var _ref41 = options.every(function (o) {
        return /^\w+$/.test(o.label);
      }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
      _ref42 = _slicedToArray(_ref41, 2),
      validFor = _ref42[0],
      match = _ref42[1];
    return function (context) {
      var token = context.matchBefore(match);
      return token || context.explicit ? {
        from: token ? token.from : context.pos,
        options: options,
        validFor: validFor
      } : null;
    };
  }
  /**
  Wrap the given completion source so that it will not fire when the
  cursor is in a syntax node with one of the given names.
  */
  function ifNotIn(nodes, source) {
    return function (context) {
      for (var pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1) return null;
        if (pos.type.isTop) break;
      }
      return source(context);
    };
  }
  var Option = /*#__PURE__*/_createClass(function Option(completion, source, match, score) {
    _classCallCheck(this, Option);
    this.completion = completion;
    this.source = source;
    this.match = match;
    this.score = score;
  });
  function cur(state) {
    return state.selection.main.from;
  }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
    var _a;
    var source = expr.source;
    var addStart = start && source[0] != "^",
      addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd) return expr;
    return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  var pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
    var main = state.selection.main,
      fromOff = from - main.from,
      toOff = to - main.from;
    return Object.assign(Object.assign({}, state.changeByRange(function (range) {
      if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to)) return {
        range: range
      };
      var lines = state.toText(text);
      return {
        changes: {
          from: range.from + fromOff,
          to: to == main.from ? range.to : range.from + toOff,
          insert: lines
        },
        range: EditorSelection.cursor(range.from + fromOff + lines.length)
      };
    })), {
      scrollIntoView: true,
      userEvent: "input.complete"
    });
  }
  var SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source)) return source;
    var known = SourceCache.get(source);
    if (!known) SourceCache.set(source, known = completeFromList(source));
    return known;
  }
  var startCompletionEffect = /*@__PURE__*/StateEffect.define();
  var closeCompletionEffect = /*@__PURE__*/StateEffect.define();

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  var FuzzyMatcher = /*#__PURE__*/function () {
    function FuzzyMatcher(pattern) {
      _classCallCheck(this, FuzzyMatcher);
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      // Buffers reused by calls to `match` to track matched character
      // positions.
      this.any = [];
      this.precise = [];
      this.byWord = [];
      this.score = 0;
      this.matched = [];
      for (var _p3 = 0; _p3 < pattern.length;) {
        var _char3 = codePointAt(pattern, _p3),
          size = codePointSize(_char3);
        this.chars.push(_char3);
        var part = pattern.slice(_p3, _p3 + size),
          upper = part.toUpperCase();
        this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
        _p3 += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    return _createClass(FuzzyMatcher, [{
      key: "ret",
      value: function ret(score, matched) {
        this.score = score;
        this.matched = matched;
        return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
    }, {
      key: "match",
      value: function match(word) {
        if (this.pattern.length == 0) return this.ret(-100 /* Penalty.NotFull */, []);
        if (word.length < this.pattern.length) return null;
        var chars = this.chars,
          folded = this.folded,
          any = this.any,
          precise = this.precise,
          byWord = this.byWord;
        // For single-character queries, only match when they occur right
        // at the start
        if (chars.length == 1) {
          var first = codePointAt(word, 0),
            firstSize = codePointSize(first);
          var _score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
          if (first == chars[0]) ;else if (first == folded[0]) _score += -200 /* Penalty.CaseFold */;else return null;
          return this.ret(_score, [0, firstSize]);
        }
        var direct = word.indexOf(this.pattern);
        if (direct == 0) return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
        var len = chars.length,
          anyTo = 0;
        if (direct < 0) {
          for (var _i146 = 0, e = Math.min(word.length, 200); _i146 < e && anyTo < len;) {
            var next = codePointAt(word, _i146);
            if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = _i146;
            _i146 += codePointSize(next);
          }
          // No match, exit immediately
          if (anyTo < len) return null;
        }
        // This tracks the extent of the precise (non-folded, not
        // necessarily adjacent) match
        var preciseTo = 0;
        // Tracks whether there is a match that hits only characters that
        // appear to be starting words. `byWordFolded` is set to true when
        // a case folded character is encountered in such a match
        var byWordTo = 0,
          byWordFolded = false;
        // If we've found a partial adjacent match, these track its state
        var adjacentTo = 0,
          adjacentStart = -1,
          adjacentEnd = -1;
        var hasLower = /[a-z]/.test(word),
          wordAdjacent = true;
        // Go over the option's text, scanning for the various kinds of matches
        for (var _i147 = 0, _e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; _i147 < _e && byWordTo < len;) {
          var _next4 = codePointAt(word, _i147);
          if (direct < 0) {
            if (preciseTo < len && _next4 == chars[preciseTo]) precise[preciseTo++] = _i147;
            if (adjacentTo < len) {
              if (_next4 == chars[adjacentTo] || _next4 == folded[adjacentTo]) {
                if (adjacentTo == 0) adjacentStart = _i147;
                adjacentEnd = _i147 + 1;
                adjacentTo++;
              } else {
                adjacentTo = 0;
              }
            }
          }
          var ch = void 0,
            type = _next4 < 0xff ? _next4 >= 48 && _next4 <= 57 || _next4 >= 97 && _next4 <= 122 ? 2 /* Tp.Lower */ : _next4 >= 65 && _next4 <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = fromCodePoint(_next4)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;
          if (!_i147 || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
            if (chars[byWordTo] == _next4 || folded[byWordTo] == _next4 && (byWordFolded = true)) byWord[byWordTo++] = _i147;else if (byWord.length) wordAdjacent = false;
          }
          prevType = type;
          _i147 += codePointSize(_next4);
        }
        if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
        if (adjacentTo == len && adjacentStart == 0) return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
        if (direct > -1) return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
        if (adjacentTo == len) return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
        if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
        return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
      }
    }, {
      key: "result",
      value: function result(score, positions, word) {
        var result = [],
          i = 0;
        var _iterator184 = _createForOfIteratorHelper(positions),
          _step184;
        try {
          for (_iterator184.s(); !(_step184 = _iterator184.n()).done;) {
            var pos = _step184.value;
            var to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
            if (i && result[i - 1] == pos) result[i - 1] = to;else {
              result[i++] = pos;
              result[i++] = to;
            }
          }
        } catch (err) {
          _iterator184.e(err);
        } finally {
          _iterator184.f();
        }
        return this.ret(score - word.length, result);
      }
    }]);
  }();
  var StrictMatcher = /*#__PURE__*/function () {
    function StrictMatcher(pattern) {
      _classCallCheck(this, StrictMatcher);
      this.pattern = pattern;
      this.matched = [];
      this.score = 0;
      this.folded = pattern.toLowerCase();
    }
    return _createClass(StrictMatcher, [{
      key: "match",
      value: function match(word) {
        if (word.length < this.pattern.length) return null;
        var start = word.slice(0, this.pattern.length);
        var match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
        if (match == null) return null;
        this.matched = [0, start.length];
        this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
        return this;
      }
    }]);
  }();
  var completionConfig = /*@__PURE__*/Facet.define({
    combine: function combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        activateOnCompletion: function activateOnCompletion() {
          return false;
        },
        activateOnTypingDelay: 100,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: function tooltipClass() {
          return "";
        },
        optionClass: function optionClass() {
          return "";
        },
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        positionInfo: defaultPositionInfo,
        filterStrict: false,
        compareCompletions: function compareCompletions(a, b) {
          return a.label.localeCompare(b.label);
        },
        interactionDelay: 75,
        updateSyncTime: 100
      }, {
        defaultKeymap: function defaultKeymap(a, b) {
          return a && b;
        },
        closeOnBlur: function closeOnBlur(a, b) {
          return a && b;
        },
        icons: function icons(a, b) {
          return a && b;
        },
        tooltipClass: function tooltipClass(a, b) {
          return function (c) {
            return joinClass(a(c), b(c));
          };
        },
        optionClass: function optionClass(a, b) {
          return function (c) {
            return joinClass(a(c), b(c));
          };
        },
        addToOptions: function addToOptions(a, b) {
          return a.concat(b);
        },
        filterStrict: function filterStrict(a, b) {
          return a || b;
        }
      });
    }
  });
  function joinClass(a, b) {
    return a ? b ? a + " " + b : a : b;
  }
  function defaultPositionInfo(view, list, option, info, space, tooltip) {
    var rtl = view.textDirection == Direction.RTL,
      left = rtl,
      narrow = false;
    var side = "top",
      offset,
      maxWidth;
    var spaceLeft = list.left - space.left,
      spaceRight = space.right - list.right;
    var infoWidth = info.right - info.left,
      infoHeight = info.bottom - info.top;
    if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;
    if (infoWidth <= (left ? spaceLeft : spaceRight)) {
      offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
      maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
    } else {
      narrow = true;
      maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
      var spaceBelow = space.bottom - list.bottom;
      if (spaceBelow >= infoHeight || spaceBelow > list.top) {
        // Below the completion
        offset = option.bottom - list.top;
      } else {
        // Above it
        side = "bottom";
        offset = list.bottom - option.top;
      }
    }
    var scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
    var scaleX = (list.right - list.left) / tooltip.offsetWidth;
    return {
      style: "".concat(side, ": ").concat(offset / scaleY, "px; max-width: ").concat(maxWidth / scaleX, "px"),
      "class": "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
    };
  }
  function optionContent(config) {
    var content = config.addToOptions.slice();
    if (config.icons) content.push({
      render: function render(completion) {
        var _icon$classList;
        var icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
          return "cm-completionIcon-" + cls;
        })));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
    content.push({
      render: function render(completion, _s, _v, match) {
        var labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        var label = completion.displayLabel || completion.label,
          off = 0;
        for (var j = 0; j < match.length;) {
          var from = match[j++],
            to = match[j++];
          if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
          var span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label.slice(from, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render: function render(completion) {
        if (!completion.detail) return null;
        var detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content.sort(function (a, b) {
      return a.position - b.position;
    }).map(function (a) {
      return a.render;
    });
  }
  function rangeAroundSelected(total, selected, max) {
    if (total <= max) return {
      from: 0,
      to: total
    };
    if (selected < 0) selected = 0;
    if (selected <= total >> 1) {
      var _off = Math.floor(selected / max);
      return {
        from: _off * max,
        to: (_off + 1) * max
      };
    }
    var off = Math.floor((total - selected) / max);
    return {
      from: total - (off + 1) * max,
      to: total - off * max
    };
  }
  var CompletionTooltip = /*#__PURE__*/function () {
    function CompletionTooltip(view, stateField, applyCompletion) {
      var _this78 = this;
      _classCallCheck(this, CompletionTooltip);
      this.view = view;
      this.stateField = stateField;
      this.applyCompletion = applyCompletion;
      this.info = null;
      this.infoDestroy = null;
      this.placeInfoReq = {
        read: function read() {
          return _this78.measureInfo();
        },
        write: function write(pos) {
          return _this78.placeInfo(pos);
        },
        key: this
      };
      this.space = null;
      this.currentClass = "";
      var cState = view.state.field(stateField);
      var _cState$open = cState.open,
        options = _cState$open.options,
        selected = _cState$open.selected;
      var config = view.state.facet(completionConfig);
      this.optionContent = optionContent(config);
      this.optionClass = config.optionClass;
      this.tooltipClass = config.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view.state);
      this.dom.addEventListener("mousedown", function (e) {
        var options = view.state.field(stateField).open.options;
        for (var dom = e.target, match; dom && dom != _this78.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
            _this78.applyCompletion(view, options[+match[1]]);
            e.preventDefault();
            return;
          }
        }
      });
      this.dom.addEventListener("focusout", function (e) {
        var state = view.state.field(_this78.stateField, false);
        if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
      });
      this.showOptions(options, cState.id);
    }
    return _createClass(CompletionTooltip, [{
      key: "mount",
      value: function mount() {
        this.updateSel();
      }
    }, {
      key: "showOptions",
      value: function showOptions(options, id) {
        var _this79 = this;
        if (this.list) this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
        this.list.addEventListener("scroll", function () {
          if (_this79.info) _this79.view.requestMeasure(_this79.placeInfoReq);
        });
      }
    }, {
      key: "update",
      value: function update(_update20) {
        var _a;
        var cState = _update20.state.field(this.stateField);
        var prevState = _update20.startState.field(this.stateField);
        this.updateTooltipClass(_update20.state);
        if (cState != prevState) {
          var _cState$open2 = cState.open,
            options = _cState$open2.options,
            selected = _cState$open2.selected,
            disabled = _cState$open2.disabled;
          if (!prevState.open || prevState.open.options != options) {
            this.range = rangeAroundSelected(options.length, selected, _update20.state.facet(completionConfig).maxRenderedOptions);
            this.showOptions(options, cState.id);
          }
          this.updateSel();
          if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled)) this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
        }
      }
    }, {
      key: "updateTooltipClass",
      value: function updateTooltipClass(state) {
        var cls = this.tooltipClass(state);
        if (cls != this.currentClass) {
          var _iterator185 = _createForOfIteratorHelper(this.currentClass.split(" ")),
            _step185;
          try {
            for (_iterator185.s(); !(_step185 = _iterator185.n()).done;) {
              var c = _step185.value;
              if (c) this.dom.classList.remove(c);
            }
          } catch (err) {
            _iterator185.e(err);
          } finally {
            _iterator185.f();
          }
          var _iterator186 = _createForOfIteratorHelper(cls.split(" ")),
            _step186;
          try {
            for (_iterator186.s(); !(_step186 = _iterator186.n()).done;) {
              var _c2 = _step186.value;
              if (_c2) this.dom.classList.add(_c2);
            }
          } catch (err) {
            _iterator186.e(err);
          } finally {
            _iterator186.f();
          }
          this.currentClass = cls;
        }
      }
    }, {
      key: "positioned",
      value: function positioned(space) {
        this.space = space;
        if (this.info) this.view.requestMeasure(this.placeInfoReq);
      }
    }, {
      key: "updateSel",
      value: function updateSel() {
        var _this80 = this;
        var cState = this.view.state.field(this.stateField),
          open = cState.open;
        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
          this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(open.options, cState.id);
        }
        if (this.updateSelectedOption(open.selected)) {
          this.destroyInfo();
          var completion = open.options[open.selected].completion;
          var info = completion.info;
          if (!info) return;
          var infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
          if (!infoResult) return;
          if ("then" in infoResult) {
            infoResult.then(function (obj) {
              if (obj && _this80.view.state.field(_this80.stateField, false) == cState) _this80.addInfoPane(obj, completion);
            })["catch"](function (e) {
              return logException(_this80.view.state, e, "completion info");
            });
          } else {
            this.addInfoPane(infoResult, completion);
          }
        }
      }
    }, {
      key: "addInfoPane",
      value: function addInfoPane(content, completion) {
        this.destroyInfo();
        var wrap = this.info = document.createElement("div");
        wrap.className = "cm-tooltip cm-completionInfo";
        if (content.nodeType != null) {
          wrap.appendChild(content);
          this.infoDestroy = null;
        } else {
          var dom = content.dom,
            destroy = content.destroy;
          wrap.appendChild(dom);
          this.infoDestroy = destroy || null;
        }
        this.dom.appendChild(wrap);
        this.view.requestMeasure(this.placeInfoReq);
      }
    }, {
      key: "updateSelectedOption",
      value: function updateSelectedOption(selected) {
        var set = null;
        for (var opt = this.list.firstChild, _i148 = this.range.from; opt; opt = opt.nextSibling, _i148++) {
          if (opt.nodeName != "LI" || !opt.id) {
            _i148--; // A section header
          } else if (_i148 == selected) {
            if (!opt.hasAttribute("aria-selected")) {
              opt.setAttribute("aria-selected", "true");
              set = opt;
            }
          } else {
            if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
          }
        }
        if (set) scrollIntoView(this.list, set);
        return set;
      }
    }, {
      key: "measureInfo",
      value: function measureInfo() {
        var sel = this.dom.querySelector("[aria-selected]");
        if (!sel || !this.info) return null;
        var listRect = this.dom.getBoundingClientRect();
        var infoRect = this.info.getBoundingClientRect();
        var selRect = sel.getBoundingClientRect();
        var space = this.space;
        if (!space) {
          var docElt = this.dom.ownerDocument.documentElement;
          space = {
            left: 0,
            top: 0,
            right: docElt.clientWidth,
            bottom: docElt.clientHeight
          };
        }
        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;
        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
      }
    }, {
      key: "placeInfo",
      value: function placeInfo(pos) {
        if (this.info) {
          if (pos) {
            if (pos.style) this.info.style.cssText = pos.style;
            this.info.className = "cm-tooltip cm-completionInfo " + (pos["class"] || "");
          } else {
            this.info.style.cssText = "top: -1e6px";
          }
        }
      }
    }, {
      key: "createListBox",
      value: function createListBox(options, id, range) {
        var ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
        ul.addEventListener("mousedown", function (e) {
          // Prevent focus change when clicking the scrollbar
          if (e.target == ul) e.preventDefault();
        });
        var curSection = null;
        for (var _i149 = range.from; _i149 < range.to; _i149++) {
          var _options$_i = options[_i149],
            completion = _options$_i.completion,
            match = _options$_i.match,
            section = completion.section;
          if (section) {
            var _name0 = typeof section == "string" ? section : section.name;
            if (_name0 != curSection && (_i149 > range.from || range.from == 0)) {
              curSection = _name0;
              if (typeof section != "string" && section.header) {
                ul.appendChild(section.header(section));
              } else {
                var header = ul.appendChild(document.createElement("completion-section"));
                header.textContent = _name0;
              }
            }
          }
          var li = ul.appendChild(document.createElement("li"));
          li.id = id + "-" + _i149;
          li.setAttribute("role", "option");
          var cls = this.optionClass(completion);
          if (cls) li.className = cls;
          var _iterator187 = _createForOfIteratorHelper(this.optionContent),
            _step187;
          try {
            for (_iterator187.s(); !(_step187 = _iterator187.n()).done;) {
              var source = _step187.value;
              var node = source(completion, this.view.state, this.view, match);
              if (node) li.appendChild(node);
            }
          } catch (err) {
            _iterator187.e(err);
          } finally {
            _iterator187.f();
          }
        }
        if (range.from) ul.classList.add("cm-completionListIncompleteTop");
        if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
        return ul;
      }
    }, {
      key: "destroyInfo",
      value: function destroyInfo() {
        if (this.info) {
          if (this.infoDestroy) this.infoDestroy();
          this.info.remove();
          this.info = null;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyInfo();
      }
    }]);
  }();
  function completionTooltip(stateField, applyCompletion) {
    return function (view) {
      return new CompletionTooltip(view, stateField, applyCompletion);
    };
  }
  function scrollIntoView(container, element) {
    var parent = container.getBoundingClientRect();
    var self = element.getBoundingClientRect();
    var scaleY = parent.height / container.offsetHeight;
    if (self.top < parent.top) container.scrollTop -= (parent.top - self.top) / scaleY;else if (self.bottom > parent.bottom) container.scrollTop += (self.bottom - parent.bottom) / scaleY;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
    var options = [];
    var sections = null;
    var addOption = function addOption(option) {
      options.push(option);
      var section = option.completion.section;
      if (section) {
        if (!sections) sections = [];
        var _name1 = typeof section == "string" ? section : section.name;
        if (!sections.some(function (s) {
          return s.name == _name1;
        })) sections.push(typeof section == "string" ? {
          name: _name1
        } : section);
      }
    };
    var conf = state.facet(completionConfig);
    var _iterator188 = _createForOfIteratorHelper(active),
      _step188;
    try {
      for (_iterator188.s(); !(_step188 = _iterator188.n()).done;) {
        var a = _step188.value;
        if (a.hasResult()) {
          var getMatch = a.result.getMatch;
          if (a.result.filter === false) {
            var _iterator192 = _createForOfIteratorHelper(a.result.options),
              _step192;
            try {
              for (_iterator192.s(); !(_step192 = _iterator192.n()).done;) {
                var _option = _step192.value;
                addOption(new Option(_option, a.source, getMatch ? getMatch(_option) : [], 1e9 - options.length));
              }
            } catch (err) {
              _iterator192.e(err);
            } finally {
              _iterator192.f();
            }
          } else {
            var pattern = state.sliceDoc(a.from, a.to),
              match = void 0;
            var matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
            var _iterator193 = _createForOfIteratorHelper(a.result.options),
              _step193;
            try {
              for (_iterator193.s(); !(_step193 = _iterator193.n()).done;) {
                var _option2 = _step193.value;
                if (match = matcher.match(_option2.label)) {
                  var matched = !_option2.displayLabel ? match.matched : getMatch ? getMatch(_option2, match.matched) : [];
                  addOption(new Option(_option2, a.source, matched, match.score + (_option2.boost || 0)));
                }
              }
            } catch (err) {
              _iterator193.e(err);
            } finally {
              _iterator193.f();
            }
          }
        }
      }
    } catch (err) {
      _iterator188.e(err);
    } finally {
      _iterator188.f();
    }
    if (sections) {
      var sectionOrder = Object.create(null),
        pos = 0;
      var cmp = function cmp(a, b) {
        var _a, _b;
        return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
      };
      var _iterator189 = _createForOfIteratorHelper(sections.sort(cmp)),
        _step189;
      try {
        for (_iterator189.s(); !(_step189 = _iterator189.n()).done;) {
          var s = _step189.value;
          pos -= 1e5;
          sectionOrder[s.name] = pos;
        }
      } catch (err) {
        _iterator189.e(err);
      } finally {
        _iterator189.f();
      }
      var _iterator190 = _createForOfIteratorHelper(options),
        _step190;
      try {
        for (_iterator190.s(); !(_step190 = _iterator190.n()).done;) {
          var option = _step190.value;
          var section = option.completion.section;
          if (section) option.score += sectionOrder[typeof section == "string" ? section : section.name];
        }
      } catch (err) {
        _iterator190.e(err);
      } finally {
        _iterator190.f();
      }
    }
    var result = [],
      prev = null;
    var compare = conf.compareCompletions;
    var _iterator191 = _createForOfIteratorHelper(options.sort(function (a, b) {
        return b.score - a.score || compare(a.completion, b.completion);
      })),
      _step191;
    try {
      for (_iterator191.s(); !(_step191 = _iterator191.n()).done;) {
        var opt = _step191.value;
        var _cur21 = opt.completion;
        if (!prev || prev.label != _cur21.label || prev.detail != _cur21.detail || prev.type != null && _cur21.type != null && prev.type != _cur21.type || prev.apply != _cur21.apply || prev.boost != _cur21.boost) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
        prev = opt.completion;
      }
    } catch (err) {
      _iterator191.e(err);
    } finally {
      _iterator191.f();
    }
    return result;
  }
  var CompletionDialog = /*#__PURE__*/function () {
    function CompletionDialog(options, attrs, tooltip, timestamp, selected, disabled) {
      _classCallCheck(this, CompletionDialog);
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    return _createClass(CompletionDialog, [{
      key: "setSelected",
      value: function setSelected(selected, id) {
        return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
    }, {
      key: "map",
      value: function map(changes) {
        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
          pos: changes.mapPos(this.tooltip.pos)
        }), this.timestamp, this.selected, this.disabled);
      }
    }, {
      key: "setDisabled",
      value: function setDisabled() {
        return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
    }], [{
      key: "build",
      value: function build(active, state, id, prev, conf, didSetActive) {
        if (prev && !didSetActive && active.some(function (s) {
          return s.isPending;
        })) return prev.setDisabled();
        var options = sortOptions(active, state);
        if (!options.length) return prev && active.some(function (a) {
          return a.isPending;
        }) ? prev.setDisabled() : null;
        var selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
        if (prev && prev.selected != selected && prev.selected != -1) {
          var selectedValue = prev.options[prev.selected].completion;
          for (var _i150 = 0; _i150 < options.length; _i150++) if (options[_i150].completion == selectedValue) {
            selected = _i150;
            break;
          }
        }
        return new CompletionDialog(options, makeAttrs(id, selected), {
          pos: active.reduce(function (a, b) {
            return b.hasResult() ? Math.min(a, b.from) : a;
          }, 1e8),
          create: createTooltip,
          above: conf.aboveCursor
        }, prev ? prev.timestamp : Date.now(), selected, false);
      }
    }]);
  }();
  var CompletionState = /*#__PURE__*/function () {
    function CompletionState(active, id, open) {
      _classCallCheck(this, CompletionState);
      this.active = active;
      this.id = id;
      this.open = open;
    }
    return _createClass(CompletionState, [{
      key: "update",
      value: function update(tr) {
        var _this81 = this;
        var state = tr.state,
          conf = state.facet(completionConfig);
        var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
        var active = sources.map(function (source) {
          var value = _this81.active.find(function (s) {
            return s.source == source;
          }) || new ActiveSource(source, _this81.active.some(function (a) {
            return a.state != 0;
          } /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
          return value.update(tr, conf);
        });
        if (active.length == this.active.length && active.every(function (a, i) {
          return a == _this81.active[i];
        })) active = this.active;
        var open = this.open,
          didSet = tr.effects.some(function (e) {
            return e.is(setActiveEffect);
          });
        if (open && tr.docChanged) open = open.map(tr.changes);
        if (tr.selection || active.some(function (a) {
          return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
        }) || !sameResults(active, this.active) || didSet) open = CompletionDialog.build(active, state, this.id, open, conf, didSet);else if (open && open.disabled && !active.some(function (a) {
          return a.isPending;
        })) open = null;
        if (!open && active.every(function (a) {
          return !a.isPending;
        }) && active.some(function (a) {
          return a.hasResult();
        })) active = active.map(function (a) {
          return a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a;
        });
        var _iterator194 = _createForOfIteratorHelper(tr.effects),
          _step194;
        try {
          for (_iterator194.s(); !(_step194 = _iterator194.n()).done;) {
            var effect = _step194.value;
            if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
          }
        } catch (err) {
          _iterator194.e(err);
        } finally {
          _iterator194.f();
        }
        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
    }, {
      key: "tooltip",
      get: function get() {
        return this.open ? this.open.tooltip : null;
      }
    }, {
      key: "attrs",
      get: function get() {
        return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs;
      }
    }], [{
      key: "start",
      value: function start() {
        return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
    }]);
  }();
  function sameResults(a, b) {
    if (a == b) return true;
    for (var iA = 0, iB = 0;;) {
      while (iA < a.length && !a[iA].hasResult()) iA++;
      while (iB < b.length && !b[iB].hasResult()) iB++;
      var endA = iA == a.length,
        endB = iB == b.length;
      if (endA || endB) return endA == endB;
      if (a[iA++].result != b[iB++].result) return false;
    }
  }
  var baseAttrs = {
    "aria-autocomplete": "list"
  };
  var noAttrs = {};
  function makeAttrs(id, selected) {
    var result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id
    };
    if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
    return result;
  }
  var none = [];
  function getUpdateType(tr, conf) {
    if (tr.isUserEvent("input.complete")) {
      var completion = tr.annotation(pickedCompletion);
      if (completion && conf.activateOnCompletion(completion)) return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
    }
    var typing = tr.isUserEvent("input.type");
    return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */ : typing ? 1 /* UpdateType.Typing */ : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */ : tr.selection ? 8 /* UpdateType.Reset */ : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
  }
  var ActiveSource = /*#__PURE__*/function () {
    function ActiveSource(source, state) {
      var explicit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      _classCallCheck(this, ActiveSource);
      this.source = source;
      this.state = state;
      this.explicit = explicit;
    }
    return _createClass(ActiveSource, [{
      key: "hasResult",
      value: function hasResult() {
        return false;
      }
    }, {
      key: "isPending",
      get: function get() {
        return this.state == 1 /* State.Pending */;
      }
    }, {
      key: "update",
      value: function update(tr, conf) {
        var type = getUpdateType(tr, conf),
          value = this;
        if (type & 8 /* UpdateType.Reset */ || type & 16 /* UpdateType.ResetIfTouching */ && this.touches(tr)) value = new ActiveSource(value.source, 0 /* State.Inactive */);
        if (type & 4 /* UpdateType.Activate */ && value.state == 0 /* State.Inactive */) value = new ActiveSource(this.source, 1 /* State.Pending */);
        value = value.updateFor(tr, type);
        var _iterator195 = _createForOfIteratorHelper(tr.effects),
          _step195;
        try {
          for (_iterator195.s(); !(_step195 = _iterator195.n()).done;) {
            var effect = _step195.value;
            if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) {
              var _iterator196 = _createForOfIteratorHelper(effect.value),
                _step196;
              try {
                for (_iterator196.s(); !(_step196 = _iterator196.n()).done;) {
                  var active = _step196.value;
                  if (active.source == value.source) value = active;
                }
              } catch (err) {
                _iterator196.e(err);
              } finally {
                _iterator196.f();
              }
            }
          }
        } catch (err) {
          _iterator195.e(err);
        } finally {
          _iterator195.f();
        }
        return value;
      }
    }, {
      key: "updateFor",
      value: function updateFor(tr, type) {
        return this.map(tr.changes);
      }
    }, {
      key: "map",
      value: function map(changes) {
        return this;
      }
    }, {
      key: "touches",
      value: function touches(tr) {
        return tr.changes.touchesRange(cur(tr.state));
      }
    }]);
  }();
  var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
    function ActiveResult(source, explicit, limit, result, from, to) {
      var _this82;
      _classCallCheck(this, ActiveResult);
      _this82 = _callSuper(this, ActiveResult, [source, 3 /* State.Result */, explicit]);
      _this82.limit = limit;
      _this82.result = result;
      _this82.from = from;
      _this82.to = to;
      return _this82;
    }
    _inherits(ActiveResult, _ActiveSource);
    return _createClass(ActiveResult, [{
      key: "hasResult",
      value: function hasResult() {
        return true;
      }
    }, {
      key: "updateFor",
      value: function updateFor(tr, type) {
        var _a;
        if (!(type & 3 /* UpdateType.SimpleInteraction */)) return this.map(tr.changes);
        var result = this.result;
        if (result.map && !tr.changes.empty) result = result.map(result, tr.changes);
        var from = tr.changes.mapPos(this.from),
          to = tr.changes.mapPos(this.to, 1);
        var pos = cur(tr.state);
        if (pos > to || !result || type & 2 /* UpdateType.Backspacing */ && (cur(tr.startState) == this.from || pos < this.limit)) return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
        var limit = tr.changes.mapPos(this.limit);
        if (checkValid(result.validFor, tr.state, from, to)) return new ActiveResult(this.source, this.explicit, limit, result, from, to);
        if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false)))) return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
        return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
      }
    }, {
      key: "map",
      value: function map(mapping) {
        if (mapping.empty) return this;
        var result = this.result.map ? this.result.map(this.result, mapping) : this.result;
        if (!result) return new ActiveSource(this.source, 0 /* State.Inactive */);
        return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
    }, {
      key: "touches",
      value: function touches(tr) {
        return tr.changes.touchesRange(this.from, this.to);
      }
    }]);
  }(ActiveSource);
  function checkValid(validFor, state, from, to) {
    if (!validFor) return false;
    var text = state.sliceDoc(from, to);
    return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  var setActiveEffect = /*@__PURE__*/StateEffect.define({
    map: function map(sources, mapping) {
      return sources.map(function (s) {
        return s.map(mapping);
      });
    }
  });
  var setSelectedEffect = /*@__PURE__*/StateEffect.define();
  var completionState = /*@__PURE__*/StateField.define({
    create: function create() {
      return CompletionState.start();
    },
    update: function update(value, tr) {
      return value.update(tr);
    },
    provide: function provide(f) {
      return [showTooltip.from(f, function (val) {
        return val.tooltip;
      }), EditorView.contentAttributes.from(f, function (state) {
        return state.attrs;
      })];
    }
  });
  function applyCompletion(view, option) {
    var apply = option.completion.apply || option.completion.label;
    var result = view.state.field(completionState).active.find(function (a) {
      return a.source == option.source;
    });
    if (!(result instanceof ActiveResult)) return false;
    if (typeof apply == "string") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {
      annotations: pickedCompletion.of(option.completion)
    }));else apply(view, option.completion, result.from, result.to);
    return true;
  }
  var createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward) {
    var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
    return function (view) {
      var cState = view.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
      var step = 1,
        tooltip;
      if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      var length = cState.open.options.length;
      var selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
      if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
      view.dispatch({
        effects: setSelectedEffect.of(selected)
      });
      return true;
    };
  }
  /**
  Accept the current completion.
  */
  var acceptCompletion = function acceptCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
    return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  /**
  Explicitly start autocompletion.
  */
  var startCompletion = function startCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (!cState) return false;
    view.dispatch({
      effects: startCompletionEffect.of(true)
    });
    return true;
  };
  /**
  Close the currently active completion.
  */
  var closeCompletion = function closeCompletion(view) {
    var cState = view.state.field(completionState, false);
    if (!cState || !cState.active.some(function (a) {
      return a.state != 0;
    } /* State.Inactive */)) return false;
    view.dispatch({
      effects: closeCompletionEffect.of(null)
    });
    return true;
  };
  var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
    _classCallCheck(this, RunningQuery);
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = [];
    // Note that 'undefined' means 'not done yet', whereas 'null' means
    // 'query returned null'.
    this.done = undefined;
  });
  var MaxUpdateCount = 50,
    MinAbortTime = 1000;
  var completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(/*#__PURE__*/function () {
    function _class0(view) {
      _classCallCheck(this, _class0);
      this.view = view;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.pendingStart = false;
      this.composing = 0 /* CompositionState.None */;
      var _iterator197 = _createForOfIteratorHelper(view.state.field(completionState).active),
        _step197;
      try {
        for (_iterator197.s(); !(_step197 = _iterator197.n()).done;) {
          var active = _step197.value;
          if (active.isPending) this.startQuery(active);
        }
      } catch (err) {
        _iterator197.e(err);
      } finally {
        _iterator197.f();
      }
    }
    return _createClass(_class0, [{
      key: "update",
      value: function update(_update21) {
        var _this83 = this;
        var cState = _update21.state.field(completionState);
        var conf = _update21.state.facet(completionConfig);
        if (!_update21.selectionSet && !_update21.docChanged && _update21.startState.field(completionState) == cState) return;
        var doesReset = _update21.transactions.some(function (tr) {
          var type = getUpdateType(tr, conf);
          return type & 8 /* UpdateType.Reset */ || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
        });
        for (var _i151 = 0; _i151 < this.running.length; _i151++) {
          var query = this.running[_i151];
          if (doesReset || query.context.abortOnDocChange && _update21.docChanged || query.updates.length + _update21.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
            var _iterator198 = _createForOfIteratorHelper(query.context.abortListeners),
              _step198;
            try {
              for (_iterator198.s(); !(_step198 = _iterator198.n()).done;) {
                var handler = _step198.value;
                try {
                  handler();
                } catch (e) {
                  logException(this.view.state, e);
                }
              }
            } catch (err) {
              _iterator198.e(err);
            } finally {
              _iterator198.f();
            }
            query.context.abortListeners = null;
            this.running.splice(_i151--, 1);
          } else {
            var _query$updates;
            (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update21.transactions));
          }
        }
        if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
        if (_update21.transactions.some(function (tr) {
          return tr.effects.some(function (e) {
            return e.is(startCompletionEffect);
          });
        })) this.pendingStart = true;
        var delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
        this.debounceUpdate = cState.active.some(function (a) {
          return a.isPending && !_this83.running.some(function (q) {
            return q.active.source == a.source;
          });
        }) ? setTimeout(function () {
          return _this83.startUpdate();
        }, delay) : -1;
        if (this.composing != 0 /* CompositionState.None */) {
          var _iterator199 = _createForOfIteratorHelper(_update21.transactions),
            _step199;
          try {
            for (_iterator199.s(); !(_step199 = _iterator199.n()).done;) {
              var tr = _step199.value;
              if (tr.isUserEvent("input.type")) this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;
            }
          } catch (err) {
            _iterator199.e(err);
          } finally {
            _iterator199.f();
          }
        }
      }
    }, {
      key: "startUpdate",
      value: function startUpdate() {
        var _this84 = this;
        this.debounceUpdate = -1;
        this.pendingStart = false;
        var state = this.view.state,
          cState = state.field(completionState);
        var _iterator200 = _createForOfIteratorHelper(cState.active),
          _step200;
        try {
          var _loop13 = function _loop13() {
            var active = _step200.value;
            if (active.isPending && !_this84.running.some(function (r) {
              return r.active.source == active.source;
            })) _this84.startQuery(active);
          };
          for (_iterator200.s(); !(_step200 = _iterator200.n()).done;) {
            _loop13();
          }
        } catch (err) {
          _iterator200.e(err);
        } finally {
          _iterator200.f();
        }
        if (this.running.length && cState.open && cState.open.disabled) this.debounceAccept = setTimeout(function () {
          return _this84.accept();
        }, this.view.state.facet(completionConfig).updateSyncTime);
      }
    }, {
      key: "startQuery",
      value: function startQuery(active) {
        var _this85 = this;
        var state = this.view.state,
          pos = cur(state);
        var context = new CompletionContext(state, pos, active.explicit, this.view);
        var pending = new RunningQuery(active, context);
        this.running.push(pending);
        Promise.resolve(active.source(context)).then(function (result) {
          if (!pending.context.aborted) {
            pending.done = result || null;
            _this85.scheduleAccept();
          }
        }, function (err) {
          _this85.view.dispatch({
            effects: closeCompletionEffect.of(null)
          });
          logException(_this85.view.state, err);
        });
      }
    }, {
      key: "scheduleAccept",
      value: function scheduleAccept() {
        var _this86 = this;
        if (this.running.every(function (q) {
          return q.done !== undefined;
        })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
          return _this86.accept();
        }, this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
    }, {
      key: "accept",
      value: function accept() {
        var _this87 = this;
        var _a;
        if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
        this.debounceAccept = -1;
        var updated = [];
        var conf = this.view.state.facet(completionConfig),
          cState = this.view.state.field(completionState);
        var _loop14 = function _loop14(_i153) {
            var query = _this87.running[_i153];
            if (query.done === undefined) {
              _i152 = _i153;
              return 0;
            } // continue
            _this87.running.splice(_i153--, 1);
            if (query.done) {
              var pos = cur(query.updates.length ? query.updates[0].startState : _this87.view.state);
              var limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
              var active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
              // Replay the transactions that happened since the start of
              // the request and see if that preserves the result
              var _iterator201 = _createForOfIteratorHelper(query.updates),
                _step201;
              try {
                for (_iterator201.s(); !(_step201 = _iterator201.n()).done;) {
                  var tr = _step201.value;
                  active = active.update(tr, conf);
                }
              } catch (err) {
                _iterator201.e(err);
              } finally {
                _iterator201.f();
              }
              if (active.hasResult()) {
                updated.push(active);
                _i152 = _i153;
                return 0; // continue
              }
            }
            var current = cState.active.find(function (a) {
              return a.source == query.active.source;
            });
            if (current && current.isPending) {
              if (query.done == null) {
                // Explicitly failed. Should clear the pending status if it
                // hasn't been re-set in the meantime.
                var _active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                var _iterator202 = _createForOfIteratorHelper(query.updates),
                  _step202;
                try {
                  for (_iterator202.s(); !(_step202 = _iterator202.n()).done;) {
                    var _tr2 = _step202.value;
                    _active = _active.update(_tr2, conf);
                  }
                } catch (err) {
                  _iterator202.e(err);
                } finally {
                  _iterator202.f();
                }
                if (!_active.isPending) updated.push(_active);
              } else {
                // Cleared by subsequent transactions. Restart.
                _this87.startQuery(current);
              }
            }
            _i152 = _i153;
          },
          _ret2;
        for (var _i152 = 0; _i152 < this.running.length; _i152++) {
          _ret2 = _loop14(_i152);
          if (_ret2 === 0) continue;
        }
        if (updated.length || cState.open && cState.open.disabled) this.view.dispatch({
          effects: setActiveEffect.of(updated)
        });
      }
    }]);
  }(), {
    eventHandlers: {
      blur: function blur(event) {
        var _this88 = this;
        var state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
          var dialog = state.open && getTooltip(this.view, state.open.tooltip);
          if (!dialog || !dialog.dom.contains(event.relatedTarget)) setTimeout(function () {
            return _this88.view.dispatch({
              effects: closeCompletionEffect.of(null)
            });
          }, 10);
        }
      },
      compositionstart: function compositionstart() {
        this.composing = 1 /* CompositionState.Started */;
      },
      compositionend: function compositionend() {
        var _this89 = this;
        if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
          // Safari fires compositionend events synchronously, possibly
          // from inside an update, so dispatch asynchronously to avoid reentrancy
          setTimeout(function () {
            return _this89.view.dispatch({
              effects: startCompletionEffect.of(false)
            });
          }, 20);
        }
        this.composing = 0 /* CompositionState.None */;
      }
    }
  });
  var windows = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && /*@__PURE__*//Win/.test(navigator.platform);
  var commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
    keydown: function keydown(event, view) {
      var field = view.state.field(completionState, false);
      if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey) return false;
      var option = field.open.options[field.open.selected];
      var result = field.active.find(function (a) {
        return a.source == option.source;
      });
      var commitChars = option.completion.commitCharacters || result.result.commitCharacters;
      if (commitChars && commitChars.indexOf(event.key) > -1) applyCompletion(view, option);
      return false;
    }
  }));
  var baseTheme = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li, & > completion-section": {
          padding: "1px 3px",
          lineHeight: 1.2
        },
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer"
        },
        "& > completion-section": {
          display: "list-item",
          borderBottom: "1px solid silver",
          paddingLeft: "0.5em",
          opacity: 0.7
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"···"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: "".concat(400 /* Info.Width */, "px"),
      boxSizing: "border-box",
      whiteSpace: "pre-line"
    },
    ".cm-completionInfo.cm-completionInfo-left": {
      right: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-right": {
      left: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-left-narrow": {
      right: "".concat(30 /* Info.Margin */, "px")
    },
    ".cm-completionInfo.cm-completionInfo-right-narrow": {
      left: "".concat(30 /* Info.Margin */, "px")
    },
    "&light .cm-snippetField": {
      backgroundColor: "#00000022"
    },
    "&dark .cm-snippetField": {
      backgroundColor: "#ffffff22"
    },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": {
        content: "'ƒ'"
      }
    },
    ".cm-completionIcon-class": {
      "&:after": {
        content: "'○'"
      }
    },
    ".cm-completionIcon-interface": {
      "&:after": {
        content: "'◌'"
      }
    },
    ".cm-completionIcon-variable": {
      "&:after": {
        content: "'𝑥'"
      }
    },
    ".cm-completionIcon-constant": {
      "&:after": {
        content: "'𝐶'"
      }
    },
    ".cm-completionIcon-type": {
      "&:after": {
        content: "'𝑡'"
      }
    },
    ".cm-completionIcon-enum": {
      "&:after": {
        content: "'∪'"
      }
    },
    ".cm-completionIcon-property": {
      "&:after": {
        content: "'□'"
      }
    },
    ".cm-completionIcon-keyword": {
      "&:after": {
        content: "'\uD83D\uDD11\uFE0E'"
      } // Disable emoji rendering
    },
    ".cm-completionIcon-namespace": {
      "&:after": {
        content: "'▢'"
      }
    },
    ".cm-completionIcon-text": {
      "&:after": {
        content: "'abc'",
        fontSize: "50%",
        verticalAlign: "middle"
      }
    }
  });
  var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
    _classCallCheck(this, FieldPos);
    this.field = field;
    this.line = line;
    this.from = from;
    this.to = to;
  });
  var FieldRange = /*#__PURE__*/function () {
    function FieldRange(field, from, to) {
      _classCallCheck(this, FieldRange);
      this.field = field;
      this.from = from;
      this.to = to;
    }
    return _createClass(FieldRange, [{
      key: "map",
      value: function map(changes) {
        var from = changes.mapPos(this.from, -1, MapMode.TrackDel);
        var to = changes.mapPos(this.to, 1, MapMode.TrackDel);
        return from == null || to == null ? null : new FieldRange(this.field, from, to);
      }
    }]);
  }();
  var Snippet = /*#__PURE__*/function () {
    function Snippet(lines, fieldPositions) {
      _classCallCheck(this, Snippet);
      this.lines = lines;
      this.fieldPositions = fieldPositions;
    }
    return _createClass(Snippet, [{
      key: "instantiate",
      value: function instantiate(state, pos) {
        var text = [],
          lineStart = [pos];
        var lineObj = state.doc.lineAt(pos),
          baseIndent = /^\s*/.exec(lineObj.text)[0];
        var _iterator203 = _createForOfIteratorHelper(this.lines),
          _step203;
        try {
          for (_iterator203.s(); !(_step203 = _iterator203.n()).done;) {
            var line = _step203.value;
            if (text.length) {
              var indent = baseIndent,
                tabs = /^\t*/.exec(line)[0].length;
              for (var _i154 = 0; _i154 < tabs; _i154++) indent += state.facet(indentUnit);
              lineStart.push(pos + indent.length - tabs);
              line = indent + line.slice(tabs);
            }
            text.push(line);
            pos += line.length + 1;
          }
        } catch (err) {
          _iterator203.e(err);
        } finally {
          _iterator203.f();
        }
        var ranges = this.fieldPositions.map(function (pos) {
          return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
        });
        return {
          text: text,
          ranges: ranges
        };
      }
    }], [{
      key: "parse",
      value: function parse(template) {
        var fields = [];
        var lines = [],
          positions = [],
          m;
        var _iterator204 = _createForOfIteratorHelper(template.split(/\r\n?|\n/)),
          _step204;
        try {
          for (_iterator204.s(); !(_step204 = _iterator204.n()).done;) {
            var line = _step204.value;
            while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
              var seq = m[1] ? +m[1] : null,
                rawName = m[2] || m[3] || "",
                found = -1;
              var _name10 = rawName.replace(/\\[{}]/g, function (m) {
                return m[1];
              });
              for (var _i155 = 0; _i155 < fields.length; _i155++) {
                if (seq != null ? fields[_i155].seq == seq : _name10 ? fields[_i155].name == _name10 : false) found = _i155;
              }
              if (found < 0) {
                var _i156 = 0;
                while (_i156 < fields.length && (seq == null || fields[_i156].seq != null && fields[_i156].seq < seq)) _i156++;
                fields.splice(_i156, 0, {
                  seq: seq,
                  name: _name10
                });
                found = _i156;
                var _iterator205 = _createForOfIteratorHelper(positions),
                  _step205;
                try {
                  for (_iterator205.s(); !(_step205 = _iterator205.n()).done;) {
                    var pos = _step205.value;
                    if (pos.field >= found) pos.field++;
                  }
                } catch (err) {
                  _iterator205.e(err);
                } finally {
                  _iterator205.f();
                }
              }
              positions.push(new FieldPos(found, lines.length, m.index, m.index + _name10.length));
              line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
            }
            line = line.replace(/\\([{}])/g, function (_, brace, index) {
              var _iterator206 = _createForOfIteratorHelper(positions),
                _step206;
              try {
                for (_iterator206.s(); !(_step206 = _iterator206.n()).done;) {
                  var _pos3 = _step206.value;
                  if (_pos3.line == lines.length && _pos3.from > index) {
                    _pos3.from--;
                    _pos3.to--;
                  }
                }
              } catch (err) {
                _iterator206.e(err);
              } finally {
                _iterator206.f();
              }
              return brace;
            });
            lines.push(line);
          }
        } catch (err) {
          _iterator204.e(err);
        } finally {
          _iterator204.f();
        }
        return new Snippet(lines, positions);
      }
    }]);
  }();
  var fieldMarker = /*@__PURE__*/Decoration.widget({
    widget: /*@__PURE__*/new (/*#__PURE__*/function (_WidgetType8) {
      function _class1() {
        _classCallCheck(this, _class1);
        return _callSuper(this, _class1, arguments);
      }
      _inherits(_class1, _WidgetType8);
      return _createClass(_class1, [{
        key: "toDOM",
        value: function toDOM() {
          var span = document.createElement("span");
          span.className = "cm-snippetFieldPosition";
          return span;
        }
      }, {
        key: "ignoreEvent",
        value: function ignoreEvent() {
          return false;
        }
      }]);
    }(WidgetType))()
  });
  var fieldRange = /*@__PURE__*/Decoration.mark({
    "class": "cm-snippetField"
  });
  var ActiveSnippet = /*#__PURE__*/function () {
    function ActiveSnippet(ranges, active) {
      _classCallCheck(this, ActiveSnippet);
      this.ranges = ranges;
      this.active = active;
      this.deco = Decoration.set(ranges.map(function (r) {
        return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
      }));
    }
    return _createClass(ActiveSnippet, [{
      key: "map",
      value: function map(changes) {
        var ranges = [];
        var _iterator207 = _createForOfIteratorHelper(this.ranges),
          _step207;
        try {
          for (_iterator207.s(); !(_step207 = _iterator207.n()).done;) {
            var _r11 = _step207.value;
            var mapped = _r11.map(changes);
            if (!mapped) return null;
            ranges.push(mapped);
          }
        } catch (err) {
          _iterator207.e(err);
        } finally {
          _iterator207.f();
        }
        return new ActiveSnippet(ranges, this.active);
      }
    }, {
      key: "selectionInsideField",
      value: function selectionInsideField(sel) {
        var _this90 = this;
        return sel.ranges.every(function (range) {
          return _this90.ranges.some(function (r) {
            return r.field == _this90.active && r.from <= range.from && r.to >= range.to;
          });
        });
      }
    }]);
  }();
  var setActive = /*@__PURE__*/StateEffect.define({
    map: function map(value, changes) {
      return value && value.map(changes);
    }
  });
  var moveToField = /*@__PURE__*/StateEffect.define();
  var snippetState = /*@__PURE__*/StateField.define({
    create: function create() {
      return null;
    },
    update: function update(value, tr) {
      var _iterator208 = _createForOfIteratorHelper(tr.effects),
        _step208;
      try {
        for (_iterator208.s(); !(_step208 = _iterator208.n()).done;) {
          var effect = _step208.value;
          if (effect.is(setActive)) return effect.value;
          if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
        }
      } catch (err) {
        _iterator208.e(err);
      } finally {
        _iterator208.f();
      }
      if (value && tr.docChanged) value = value.map(tr.changes);
      if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
      return value;
    },
    provide: function provide(f) {
      return EditorView.decorations.from(f, function (val) {
        return val ? val.deco : Decoration.none;
      });
    }
  });
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter(function (r) {
      return r.field == field;
    }).map(function (r) {
      return EditorSelection.range(r.from, r.to);
    }));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:
       "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"
   Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.
   When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.
   On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.
   The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.
   To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
    var snippet = Snippet.parse(template);
    return function (editor, completion, from, to) {
      var _snippet$instantiate = snippet.instantiate(editor.state, from),
        text = _snippet$instantiate.text,
        ranges = _snippet$instantiate.ranges;
      var main = editor.state.selection.main;
      var spec = {
        changes: {
          from: from,
          to: to == main.from ? main.to : to,
          insert: Text.of(text)
        },
        scrollIntoView: true,
        annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
      };
      if (ranges.length) spec.selection = fieldSelection(ranges, 0);
      if (ranges.some(function (r) {
        return r.field > 0;
      })) {
        var active = new ActiveSnippet(ranges, 0);
        var effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === undefined) effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return function (_ref43) {
      var state = _ref43.state,
        dispatch = _ref43.dispatch;
      var active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0) return false;
      var next = active.active + dir,
        last = dir > 0 && !active.ranges.some(function (r) {
          return r.field == next + dir;
        });
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
        scrollIntoView: true
      }));
      return true;
    };
  }
  /**
  A command that clears the active snippet, if any.
  */
  var clearSnippet = function clearSnippet(_ref44) {
    var state = _ref44.state,
      dispatch = _ref44.dispatch;
    var active = state.field(snippetState, false);
    if (!active) return false;
    dispatch(state.update({
      effects: setActive.of(null)
    }));
    return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  var nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  var prevSnippetField = /*@__PURE__*/moveField(-1);
  var defaultSnippetKeymap = [{
    key: "Tab",
    run: nextSnippetField,
    shift: prevSnippetField
  }, {
    key: "Escape",
    run: clearSnippet
  }];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  var snippetKeymap = /*@__PURE__*/Facet.define({
    combine: function combine(maps) {
      return maps.length ? maps[0] : defaultSnippetKeymap;
    }
  });
  var addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], function (state) {
    return state.facet(snippetKeymap);
  }));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), {
      apply: snippet(template)
    });
  }
  var snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
    mousedown: function mousedown(event, view) {
      var active = view.state.field(snippetState, false),
        pos;
      if (!active || (pos = view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      })) == null) return false;
      var match = active.ranges.find(function (r) {
        return r.from <= pos && r.to >= pos;
      });
      if (!match || match.field == active.active) return false;
      view.dispatch({
        selection: fieldSelection(active.ranges, match.field),
        effects: setActive.of(active.ranges.some(function (r) {
          return r.field > match.field;
        }) ? new ActiveSnippet(active.ranges, match.field) : null),
        scrollIntoView: true
      });
      return true;
    }
  });
  var defaults = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  var closeBracketEffect = /*@__PURE__*/StateEffect.define({
    map: function map(value, mapping) {
      var mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? undefined : mapped;
    }
  });
  var closedBracket = /*@__PURE__*/new (/*#__PURE__*/function (_RangeValue3) {
    function _class10() {
      _classCallCheck(this, _class10);
      return _callSuper(this, _class10, arguments);
    }
    _inherits(_class10, _RangeValue3);
    return _createClass(_class10);
  }(RangeValue))();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  var bracketState = /*@__PURE__*/StateField.define({
    create: function create() {
      return RangeSet.empty;
    },
    update: function update(value, tr) {
      value = value.map(tr.changes);
      if (tr.selection) {
        var line = tr.state.doc.lineAt(tr.selection.main.head);
        value = value.update({
          filter: function filter(from) {
            return from >= line.from && from <= line.to;
          }
        });
      }
      var _iterator209 = _createForOfIteratorHelper(tr.effects),
        _step209;
      try {
        for (_iterator209.s(); !(_step209 = _iterator209.n()).done;) {
          var effect = _step209.value;
          if (effect.is(closeBracketEffect)) value = value.update({
            add: [closedBracket.range(effect.value, effect.value + 1)]
          });
        }
      } catch (err) {
        _iterator209.e(err);
      } finally {
        _iterator209.f();
      }
      return value;
    }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
    return [inputHandler, bracketState];
  }
  var definedClosing = "()[]{}<>«»»«［］｛｝";
  function closing(ch) {
    for (var _i157 = 0; _i157 < definedClosing.length; _i157 += 2) if (definedClosing.charCodeAt(_i157) == ch) return definedClosing.charAt(_i157 + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  var android$1 = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  var inputHandler = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, insert) {
    if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
    var sel = view.state.selection.main;
    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
    var tr = insertBracket(view.state, insert);
    if (!tr) return false;
    view.dispatch(tr);
    return true;
  });
  /**
  Command that implements deleting a pair of matching brackets when
  the cursor is between them.
  */
  var deleteBracketPair = function deleteBracketPair(_ref45) {
    var state = _ref45.state,
      dispatch = _ref45.dispatch;
    if (state.readOnly) return false;
    var conf = config(state, state.selection.main.head);
    var tokens = conf.brackets || defaults.brackets;
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (range.empty) {
          var before = prevChar(state.doc, range.head);
          var _iterator210 = _createForOfIteratorHelper(tokens),
            _step210;
          try {
            for (_iterator210.s(); !(_step210 = _iterator210.n()).done;) {
              var token = _step210.value;
              if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0))) return {
                changes: {
                  from: range.head - token.length,
                  to: range.head + token.length
                },
                range: EditorSelection.cursor(range.head - token.length)
              };
            }
          } catch (err) {
            _iterator210.e(err);
          } finally {
            _iterator210.f();
          }
        }
        return {
          range: dont = range
        };
      });
    if (!dont) dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "delete.backward"
    }));
    return !dont;
  };
  /**
  Close-brackets related key bindings. Binds Backspace to
  [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
  */
  var closeBracketsKeymap = [{
    key: "Backspace",
    run: deleteBracketPair
  }];
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
    var conf = config(state, state.selection.main.head);
    var tokens = conf.brackets || defaults.brackets;
    var _iterator211 = _createForOfIteratorHelper(tokens),
      _step211;
    try {
      for (_iterator211.s(); !(_step211 = _iterator211.n()).done;) {
        var tok = _step211.value;
        var closed = closing(codePointAt(tok, 0));
        if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
        if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
      }
    } catch (err) {
      _iterator211.e(err);
    } finally {
      _iterator211.f();
    }
    return null;
  }
  function closedBracketAt(state, pos) {
    var found = false;
    state.field(bracketState).between(0, state.doc.length, function (from) {
      if (from == pos) found = true;
    });
    return found;
  }
  function nextChar(doc, pos) {
    var next = doc.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function prevChar(doc, pos) {
    var prev = doc.sliceString(pos - 2, pos);
    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close, closeBefore) {
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (!range.empty) return {
          changes: [{
            insert: open,
            from: range.from
          }, {
            insert: close,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
        var next = nextChar(state.doc, range.head);
        if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
          changes: {
            insert: open + close,
            from: range.head
          },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleClose(state, _open, close) {
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (range.empty && nextChar(state.doc, range.head) == close) return {
          changes: {
            from: range.head,
            to: range.head + close.length,
            insert: close
          },
          range: EditorSelection.cursor(range.head + close.length)
        };
        return dont = {
          range: range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
    var stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
    var dont = null,
      changes = state.changeByRange(function (range) {
        if (!range.empty) return {
          changes: [{
            insert: token,
            from: range.from
          }, {
            insert: token,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
        var pos = range.head,
          next = nextChar(state.doc, pos),
          start;
        if (next == token) {
          if (nodeStart(state, pos)) {
            return {
              changes: {
                insert: token + token,
                from: pos
              },
              effects: closeBracketEffect.of(pos + token.length),
              range: EditorSelection.cursor(pos + token.length)
            };
          } else if (closedBracketAt(state, pos)) {
            var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
            var _content5 = isTriple ? token + token + token : token;
            return {
              changes: {
                from: pos,
                to: pos + _content5.length,
                insert: _content5
              },
              range: EditorSelection.cursor(pos + _content5.length)
            };
          }
        } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
          return {
            changes: {
              insert: token + token + token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
          if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        }
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function nodeStart(state, pos) {
    var tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
    var node = syntaxTree(state).resolveInner(pos, -1);
    var maxPrefix = prefixes.reduce(function (m, p) {
      return Math.max(m, p.length);
    }, 0);
    for (var _i158 = 0; _i158 < 5; _i158++) {
      var start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
      var quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        var first = node.firstChild;
        while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
          first = first.firstChild;
        }
        return true;
      }
      var parent = node.to == pos && node.parent;
      if (!parent) break;
      node = parent;
    }
    return false;
  }
  function canStartStringAt(state, pos, prefixes) {
    var charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word) return pos;
    var _iterator212 = _createForOfIteratorHelper(prefixes),
      _step212;
    try {
      for (_iterator212.s(); !(_step212 = _iterator212.n()).done;) {
        var prefix = _step212.value;
        var start = pos - prefix.length;
        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word) return start;
      }
    } catch (err) {
      _iterator212.e(err);
    } finally {
      _iterator212.f();
    }
    return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return [commitCharacters, completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];
  }
  /**
  Basic keybindings for autocompletion.
    - Ctrl-Space (and Alt-\` on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  var completionKeymap = [{
    key: "Ctrl-Space",
    run: startCompletion
  }, {
    mac: "Alt-`",
    run: startCompletion
  }, {
    key: "Escape",
    run: closeCompletion
  }, {
    key: "ArrowDown",
    run: /*@__PURE__*/moveCompletionSelection(true)
  }, {
    key: "ArrowUp",
    run: /*@__PURE__*/moveCompletionSelection(false)
  }, {
    key: "PageDown",
    run: /*@__PURE__*/moveCompletionSelection(true, "page")
  }, {
    key: "PageUp",
    run: /*@__PURE__*/moveCompletionSelection(false, "page")
  }, {
    key: "Enter",
    run: acceptCompletion
  }];
  var completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], function (state) {
    return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
  }));

  /**
  A parse stack. These are used internally by the parser to track
  parsing progress. They also provide some properties and methods
  that external code such as a tokenizer can use to get information
  about the parse state.
  */
  var Stack = /*#__PURE__*/function () {
    /**
    @internal
    */
    function Stack(
    /**
    The parse that this stack is part of @internal
    */
    p,
    /**
    Holds state, input pos, buffer index triplets for all but the
    top state @internal
    */
    stack,
    /**
    The current parse state @internal
    */
    state,
    // The position at which the next reduce should take place. This
    // can be less than `this.pos` when skipped expressions have been
    // added to the stack (which should be moved outside of the next
    // reduction)
    /**
    @internal
    */
    reducePos,
    /**
    The input position up to which this stack has parsed.
    */
    pos,
    /**
    The dynamic score of the stack, including dynamic precedence
    and error-recovery penalties
    @internal
    */
    score,
    // The output buffer. Holds (type, start, end, size) quads
    // representing nodes created by the parser, where `size` is
    // amount of buffer array entries covered by this node.
    /**
    @internal
    */
    buffer,
    // The base offset of the buffer. When stacks are split, the split
    // instance shared the buffer history with its parent up to
    // `bufferBase`, which is the absolute offset (including the
    // offset of previous splits) into the buffer at which this stack
    // starts writing.
    /**
    @internal
    */
    bufferBase,
    /**
    @internal
    */
    curContext) {
      var lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /**
      @internal
      */
      parent = arguments.length > 10 ? arguments[10] : undefined;
      _classCallCheck(this, Stack);
      this.p = p;
      this.stack = stack;
      this.state = state;
      this.reducePos = reducePos;
      this.pos = pos;
      this.score = score;
      this.buffer = buffer;
      this.bufferBase = bufferBase;
      this.curContext = curContext;
      this.lookAhead = lookAhead;
      this.parent = parent;
    }
    /**
    @internal
    */
    return _createClass(Stack, [{
      key: "toString",
      value: function toString() {
        return "[".concat(this.stack.filter(function (_, i) {
          return i % 3 == 0;
        }).concat(this.state), "]@").concat(this.pos).concat(this.score ? "!" + this.score : "");
      }
      // Start an empty stack
      /**
      @internal
      */
    }, {
      key: "context",
      get:
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      function get() {
        return this.curContext ? this.curContext.context : null;
      }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
    }, {
      key: "pushState",
      value: function pushState(state, start) {
        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
        this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
    }, {
      key: "reduce",
      value: function reduce(action) {
        var _a;
        var depth = action >> 19 /* Action.ReduceDepthShift */,
          type = action & 65535 /* Action.ValueMask */;
        var parser = this.p.parser;
        var lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
        if (lookaheadRecord) this.setLookAhead(this.pos);
        var dPrec = parser.dynamicPrecedence(type);
        if (dPrec) this.score += dPrec;
        if (depth == 0) {
          this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
          // Zero-depth reductions are a special case—they add stuff to
          // the stack without popping anything off.
          if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
          this.reduceContext(type, this.reducePos);
          return;
        }
        // Find the base index into `this.stack`, content after which will
        // be dropped. Note that with `StayFlag` reductions we need to
        // consume two extra frames (the dummy parent node for the skipped
        // expression and the state that we'll be staying in, which should
        // be moved to `this.state`).
        var base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
        var start = base ? this.stack[base - 2] : this.p.ranges[0].from,
          size = this.reducePos - start;
        // This is a kludge to try and detect overly deep left-associative
        // trees, which will not increase the parse stack depth and thus
        // won't be caught by the regular stack-depth limit check.
        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
          if (start == this.p.lastBigReductionStart) {
            this.p.bigReductionCount++;
            this.p.lastBigReductionSize = size;
          } else if (this.p.lastBigReductionSize < size) {
            this.p.bigReductionCount = 1;
            this.p.lastBigReductionStart = start;
            this.p.lastBigReductionSize = size;
          }
        }
        var bufferBase = base ? this.stack[base - 1] : 0,
          count = this.bufferBase + this.buffer.length - bufferBase;
        // Store normal terms or `R -> R R` repeat reductions
        if (type < parser.minRepeatTerm || action & 131072 /* Action.RepeatFlag */) {
          var pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
          this.storeNode(type, start, pos, count + 4, true);
        }
        if (action & 262144 /* Action.StayFlag */) {
          this.state = this.stack[base];
        } else {
          var baseStateID = this.stack[base - 3];
          this.state = parser.getGoto(baseStateID, type, true);
        }
        while (this.stack.length > base) this.stack.pop();
        this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
    }, {
      key: "storeNode",
      value: function storeNode(term, start, end) {
        var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
        var mustSink = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        if (term == 0 /* Term.Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
          // Try to omit/merge adjacent error nodes
          var _cur22 = this,
            _top9 = this.buffer.length;
          if (_top9 == 0 && _cur22.parent) {
            _top9 = _cur22.bufferBase - _cur22.parent.bufferBase;
            _cur22 = _cur22.parent;
          }
          if (_top9 > 0 && _cur22.buffer[_top9 - 4] == 0 /* Term.Err */ && _cur22.buffer[_top9 - 1] > -1) {
            if (start == end) return;
            if (_cur22.buffer[_top9 - 2] >= start) {
              _cur22.buffer[_top9 - 2] = end;
              return;
            }
          }
        }
        if (!mustSink || this.pos == end) {
          // Simple case, just append
          this.buffer.push(term, start, end, size);
        } else {
          // There may be skipped nodes that have to be moved forward
          var index = this.buffer.length;
          if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
            var mustMove = false;
            for (var scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
              if (this.buffer[scan - 1] >= 0) {
                mustMove = true;
                break;
              }
            }
            if (mustMove) while (index > 0 && this.buffer[index - 2] > end) {
              // Move this record forward
              this.buffer[index] = this.buffer[index - 4];
              this.buffer[index + 1] = this.buffer[index - 3];
              this.buffer[index + 2] = this.buffer[index - 2];
              this.buffer[index + 3] = this.buffer[index - 1];
              index -= 4;
              if (size > 4) size -= 4;
            }
          }
          this.buffer[index] = term;
          this.buffer[index + 1] = start;
          this.buffer[index + 2] = end;
          this.buffer[index + 3] = size;
        }
      }
      // Apply a shift action
      /**
      @internal
      */
    }, {
      key: "shift",
      value: function shift(action, type, start, end) {
        if (action & 131072 /* Action.GotoFlag */) {
          this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
        } else if ((action & 262144 /* Action.StayFlag */) == 0) {
          // Regular shift
          var nextState = action,
            _parser = this.p.parser;
          if (end > this.pos || type <= _parser.maxNode) {
            this.pos = end;
            if (!_parser.stateFlag(nextState, 1 /* StateFlag.Skipped */)) this.reducePos = end;
          }
          this.pushState(nextState, start);
          this.shiftContext(type, start);
          if (type <= _parser.maxNode) this.buffer.push(type, start, end, 4);
        } else {
          // Shift-and-stay, which means this is a skipped token
          this.pos = end;
          this.shiftContext(type, start);
          if (type <= this.p.parser.maxNode) this.buffer.push(type, start, end, 4);
        }
      }
      // Apply an action
      /**
      @internal
      */
    }, {
      key: "apply",
      value: function apply(action, next, nextStart, nextEnd) {
        if (action & 65536 /* Action.ReduceFlag */) this.reduce(action);else this.shift(action, next, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
    }, {
      key: "useNode",
      value: function useNode(value, next) {
        var index = this.p.reused.length - 1;
        if (index < 0 || this.p.reused[index] != value) {
          this.p.reused.push(value);
          index++;
        }
        var start = this.pos;
        this.reducePos = this.pos = start + value.length;
        this.pushState(next, start);
        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
        if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
    }, {
      key: "split",
      value: function split() {
        var parent = this;
        var off = parent.buffer.length;
        // Because the top of the buffer (after this.pos) may be mutated
        // to reorder reductions and skipped tokens, and shared buffers
        // should be immutable, this copies any outstanding skipped tokens
        // to the new buffer, and puts the base pointer before them.
        while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;
        var buffer = parent.buffer.slice(off),
          base = parent.bufferBase + off;
        // Make sure parent points to an actual parent with content, if there is such a parent.
        while (parent && base == parent.bufferBase) parent = parent.parent;
        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
    }, {
      key: "recoverByDelete",
      value: function recoverByDelete(next, nextEnd) {
        var isNode = next <= this.p.parser.maxNode;
        if (isNode) this.storeNode(next, this.pos, nextEnd, 4);
        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
        this.pos = this.reducePos = nextEnd;
        this.score -= 190 /* Recover.Delete */;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
    }, {
      key: "canShift",
      value: function canShift(term) {
        for (var sim = new SimulatedStack(this);;) {
          var action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
          if (action == 0) return false;
          if ((action & 65536 /* Action.ReduceFlag */) == 0) return true;
          sim.reduce(action);
        }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
    }, {
      key: "recoverByInsert",
      value: function recoverByInsert(next) {
        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */) return [];
        var nextStates = this.p.parser.nextStates(this.state);
        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
          var best = [];
          for (var _i159 = 0, s; _i159 < nextStates.length; _i159 += 2) {
            if ((s = nextStates[_i159 + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[_i159], s);
          }
          if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */) {
            var _loop15 = function _loop15() {
              var s = nextStates[_i160 + 1];
              if (!best.some(function (v, i) {
                return i & 1 && v == s;
              })) best.push(nextStates[_i160], s);
            };
            for (var _i160 = 0; best.length < 4 /* Recover.MaxNext */ << 1 && _i160 < nextStates.length; _i160 += 2) {
              _loop15();
            }
          }
          nextStates = best;
        }
        var result = [];
        for (var _i161 = 0; _i161 < nextStates.length && result.length < 4 /* Recover.MaxNext */; _i161 += 2) {
          var _s2 = nextStates[_i161 + 1];
          if (_s2 == this.state) continue;
          var stack = this.split();
          stack.pushState(_s2, this.pos);
          stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
          stack.shiftContext(nextStates[_i161], this.pos);
          stack.reducePos = this.pos;
          stack.score -= 200 /* Recover.Insert */;
          result.push(stack);
        }
        return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
    }, {
      key: "forceReduce",
      value: function forceReduce() {
        var parser = this.p.parser;
        var reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
        if ((reduce & 65536 /* Action.ReduceFlag */) == 0) return false;
        if (!parser.validAction(this.state, reduce)) {
          var depth = reduce >> 19 /* Action.ReduceDepthShift */,
            term = reduce & 65535 /* Action.ValueMask */;
          var target = this.stack.length - depth * 3;
          if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
            var backup = this.findForcedReduction();
            if (backup == null) return false;
            reduce = backup;
          }
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          this.score -= 100 /* Recover.Reduce */;
        }
        this.reducePos = this.pos;
        this.reduce(reduce);
        return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
    }, {
      key: "findForcedReduction",
      value: function findForcedReduction() {
        var _this91 = this;
        var parser = this.p.parser,
          seen = [];
        var _explore2 = function explore(state, depth) {
          if (seen.includes(state)) return;
          seen.push(state);
          return parser.allActions(state, function (action) {
            if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;else if (action & 65536 /* Action.ReduceFlag */) {
              var rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
              if (rDepth > 1) {
                var term = action & 65535 /* Action.ValueMask */,
                  target = _this91.stack.length - rDepth * 3;
                if (target >= 0 && parser.getGoto(_this91.stack[target], term, false) >= 0) return rDepth << 19 /* Action.ReduceDepthShift */ | 65536 /* Action.ReduceFlag */ | term;
              }
            } else {
              var found = _explore2(action, depth + 1);
              if (found != null) return found;
            }
          });
        };
        return _explore2(this.state, 0);
      }
      /**
      @internal
      */
    }, {
      key: "forceAll",
      value: function forceAll() {
        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
          if (!this.forceReduce()) {
            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
            break;
          }
        }
        return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
    }, {
      key: "deadEnd",
      get: function get() {
        if (this.stack.length != 3) return false;
        var parser = this.p.parser;
        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ && !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
    }, {
      key: "restart",
      value: function restart() {
        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
        this.state = this.stack[0];
        this.stack.length = 0;
      }
      /**
      @internal
      */
    }, {
      key: "sameState",
      value: function sameState(other) {
        if (this.state != other.state || this.stack.length != other.stack.length) return false;
        for (var _i162 = 0; _i162 < this.stack.length; _i162 += 3) if (this.stack[_i162] != other.stack[_i162]) return false;
        return true;
      }
      /**
      Get the parser used by this stack.
      */
    }, {
      key: "parser",
      get: function get() {
        return this.p.parser;
      }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
    }, {
      key: "dialectEnabled",
      value: function dialectEnabled(dialectID) {
        return this.p.parser.dialect.flags[dialectID];
      }
    }, {
      key: "shiftContext",
      value: function shiftContext(term, start) {
        if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
    }, {
      key: "reduceContext",
      value: function reduceContext(term, start) {
        if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /**
      @internal
      */
    }, {
      key: "emitContext",
      value: function emitContext() {
        var last = this.buffer.length - 1;
        if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
    }, {
      key: "emitLookAhead",
      value: function emitLookAhead() {
        var last = this.buffer.length - 1;
        if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
    }, {
      key: "updateContext",
      value: function updateContext(context) {
        if (context != this.curContext.context) {
          var newCx = new StackContext(this.curContext.tracker, context);
          if (newCx.hash != this.curContext.hash) this.emitContext();
          this.curContext = newCx;
        }
      }
      /**
      @internal
      */
    }, {
      key: "setLookAhead",
      value: function setLookAhead(lookAhead) {
        if (lookAhead > this.lookAhead) {
          this.emitLookAhead();
          this.lookAhead = lookAhead;
        }
      }
      /**
      @internal
      */
    }, {
      key: "close",
      value: function close() {
        if (this.curContext && this.curContext.tracker.strict) this.emitContext();
        if (this.lookAhead > 0) this.emitLookAhead();
      }
    }], [{
      key: "start",
      value: function start(p, state) {
        var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var cx = p.parser.context;
        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
    }]);
  }();
  var StackContext = /*#__PURE__*/_createClass(function StackContext(tracker, context) {
    _classCallCheck(this, StackContext);
    this.tracker = tracker;
    this.context = context;
    this.hash = tracker.strict ? tracker.hash(context) : 0;
  }); // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  var SimulatedStack = /*#__PURE__*/function () {
    function SimulatedStack(start) {
      _classCallCheck(this, SimulatedStack);
      this.start = start;
      this.state = start.state;
      this.stack = start.stack;
      this.base = this.stack.length;
    }
    return _createClass(SimulatedStack, [{
      key: "reduce",
      value: function reduce(action) {
        var term = action & 65535 /* Action.ValueMask */,
          depth = action >> 19 /* Action.ReduceDepthShift */;
        if (depth == 0) {
          if (this.stack == this.start.stack) this.stack = this.stack.slice();
          this.stack.push(this.state, 0, 0);
          this.base += 3;
        } else {
          this.base -= (depth - 1) * 3;
        }
        var _goto4 = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
        this.state = _goto4;
      }
    }]);
  }(); // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  var StackBufferCursor = /*#__PURE__*/function () {
    function StackBufferCursor(stack, pos, index) {
      _classCallCheck(this, StackBufferCursor);
      this.stack = stack;
      this.pos = pos;
      this.index = index;
      this.buffer = stack.buffer;
      if (this.index == 0) this.maybeNext();
    }
    return _createClass(StackBufferCursor, [{
      key: "maybeNext",
      value: function maybeNext() {
        var next = this.stack.parent;
        if (next != null) {
          this.index = this.stack.bufferBase - next.bufferBase;
          this.stack = next;
          this.buffer = next.buffer;
        }
      }
    }, {
      key: "id",
      get: function get() {
        return this.buffer[this.index - 4];
      }
    }, {
      key: "start",
      get: function get() {
        return this.buffer[this.index - 3];
      }
    }, {
      key: "end",
      get: function get() {
        return this.buffer[this.index - 2];
      }
    }, {
      key: "size",
      get: function get() {
        return this.buffer[this.index - 1];
      }
    }, {
      key: "next",
      value: function next() {
        this.index -= 4;
        this.pos -= 4;
        if (this.index == 0) this.maybeNext();
      }
    }, {
      key: "fork",
      value: function fork() {
        return new StackBufferCursor(this.stack, this.pos, this.index);
      }
    }], [{
      key: "create",
      value: function create(stack) {
        var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;
        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
    }]);
  }(); // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input) {
    var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;
    if (typeof input != "string") return input;
    var array = null;
    for (var pos = 0, out = 0; pos < input.length;) {
      var value = 0;
      for (;;) {
        var next = input.charCodeAt(pos++),
          stop = false;
        if (next == 126 /* Encode.BigValCode */) {
          value = 65535 /* Encode.BigVal */;
          break;
        }
        if (next >= 92 /* Encode.Gap2 */) next--;
        if (next >= 34 /* Encode.Gap1 */) next--;
        var digit = next - 32 /* Encode.Start */;
        if (digit >= 46 /* Encode.Base */) {
          digit -= 46 /* Encode.Base */;
          stop = true;
        }
        value += digit;
        if (stop) break;
        value *= 46 /* Encode.Base */;
      }
      if (array) array[out++] = value;else array = new Type(value);
    }
    return array;
  }
  var CachedToken = /*#__PURE__*/_createClass(function CachedToken() {
    _classCallCheck(this, CachedToken);
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  });
  var nullToken = new CachedToken();
  /**
  [Tokenizers](#lr.ExternalTokenizer) interact with the input
  through this interface. It presents the input as a stream of
  characters, tracking lookahead and hiding the complexity of
  [ranges](#common.Parser.parse^ranges) from tokenizer code.
  */
  var InputStream = /*#__PURE__*/function () {
    /**
    @internal
    */
    function InputStream(
    /**
    @internal
    */
    input,
    /**
    @internal
    */
    ranges) {
      _classCallCheck(this, InputStream);
      this.input = input;
      this.ranges = ranges;
      /**
      @internal
      */
      this.chunk = "";
      /**
      @internal
      */
      this.chunkOff = 0;
      /**
      Backup chunk
      */
      this.chunk2 = "";
      this.chunk2Pos = 0;
      /**
      The character code of the next code unit in the input, or -1
      when the stream is at the end of the input.
      */
      this.next = -1;
      /**
      @internal
      */
      this.token = nullToken;
      this.rangeIndex = 0;
      this.pos = this.chunkPos = ranges[0].from;
      this.range = ranges[0];
      this.end = ranges[ranges.length - 1].to;
      this.readNext();
    }
    /**
    @internal
    */
    return _createClass(InputStream, [{
      key: "resolveOffset",
      value: function resolveOffset(offset, assoc) {
        var range = this.range,
          index = this.rangeIndex;
        var pos = this.pos + offset;
        while (pos < range.from) {
          if (!index) return null;
          var next = this.ranges[--index];
          pos -= range.from - next.to;
          range = next;
        }
        while (assoc < 0 ? pos > range.to : pos >= range.to) {
          if (index == this.ranges.length - 1) return null;
          var _next5 = this.ranges[++index];
          pos += _next5.from - range.to;
          range = _next5;
        }
        return pos;
      }
      /**
      @internal
      */
    }, {
      key: "clipPos",
      value: function clipPos(pos) {
        if (pos >= this.range.from && pos < this.range.to) return pos;
        var _iterator213 = _createForOfIteratorHelper(this.ranges),
          _step213;
        try {
          for (_iterator213.s(); !(_step213 = _iterator213.n()).done;) {
            var range = _step213.value;
            if (range.to > pos) return Math.max(pos, range.from);
          }
        } catch (err) {
          _iterator213.e(err);
        } finally {
          _iterator213.f();
        }
        return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
    }, {
      key: "peek",
      value: function peek(offset) {
        var idx = this.chunkOff + offset,
          pos,
          result;
        if (idx >= 0 && idx < this.chunk.length) {
          pos = this.pos + offset;
          result = this.chunk.charCodeAt(idx);
        } else {
          var resolved = this.resolveOffset(offset, 1);
          if (resolved == null) return -1;
          pos = resolved;
          if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
            result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
          } else {
            var _i163 = this.rangeIndex,
              range = this.range;
            while (range.to <= pos) range = this.ranges[++_i163];
            this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
            if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);
            result = this.chunk2.charCodeAt(0);
          }
        }
        if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;
        return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
    }, {
      key: "acceptToken",
      value: function acceptToken(token) {
        var endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
        if (end == null || end < this.token.start) throw new RangeError("Token end out of bounds");
        this.token.value = token;
        this.token.end = end;
      }
      /**
      Accept a token ending at a specific given position.
      */
    }, {
      key: "acceptTokenTo",
      value: function acceptTokenTo(token, endPos) {
        this.token.value = token;
        this.token.end = endPos;
      }
    }, {
      key: "getChunk",
      value: function getChunk() {
        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
          var chunk = this.chunk,
            chunkPos = this.chunkPos;
          this.chunk = this.chunk2;
          this.chunkPos = this.chunk2Pos;
          this.chunk2 = chunk;
          this.chunk2Pos = chunkPos;
          this.chunkOff = this.pos - this.chunkPos;
        } else {
          this.chunk2 = this.chunk;
          this.chunk2Pos = this.chunkPos;
          var nextChunk = this.input.chunk(this.pos);
          var end = this.pos + nextChunk.length;
          this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
          this.chunkPos = this.pos;
          this.chunkOff = 0;
        }
      }
    }, {
      key: "readNext",
      value: function readNext() {
        if (this.chunkOff >= this.chunk.length) {
          this.getChunk();
          if (this.chunkOff == this.chunk.length) return this.next = -1;
        }
        return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
    }, {
      key: "advance",
      value: function advance() {
        var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        this.chunkOff += n;
        while (this.pos + n >= this.range.to) {
          if (this.rangeIndex == this.ranges.length - 1) return this.setDone();
          n -= this.range.to - this.pos;
          this.range = this.ranges[++this.rangeIndex];
          this.pos = this.range.from;
        }
        this.pos += n;
        if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;
        return this.readNext();
      }
    }, {
      key: "setDone",
      value: function setDone() {
        this.pos = this.chunkPos = this.end;
        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
        this.chunk = "";
        return this.next = -1;
      }
      /**
      @internal
      */
    }, {
      key: "reset",
      value: function reset(pos, token) {
        if (token) {
          this.token = token;
          token.start = pos;
          token.lookAhead = pos + 1;
          token.value = token.extended = -1;
        } else {
          this.token = nullToken;
        }
        if (this.pos != pos) {
          this.pos = pos;
          if (pos == this.end) {
            this.setDone();
            return this;
          }
          while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];
          while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];
          if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
            this.chunkOff = pos - this.chunkPos;
          } else {
            this.chunk = "";
            this.chunkOff = 0;
          }
          this.readNext();
        }
        return this;
      }
      /**
      @internal
      */
    }, {
      key: "read",
      value: function read(from, to) {
        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
        if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);
        var result = "";
        var _iterator214 = _createForOfIteratorHelper(this.ranges),
          _step214;
        try {
          for (_iterator214.s(); !(_step214 = _iterator214.n()).done;) {
            var _r12 = _step214.value;
            if (_r12.from >= to) break;
            if (_r12.to > from) result += this.input.read(Math.max(_r12.from, from), Math.min(_r12.to, to));
          }
        } catch (err) {
          _iterator214.e(err);
        } finally {
          _iterator214.f();
        }
        return result;
      }
    }]);
  }();
  /**
  @internal
  */
  var TokenGroup = /*#__PURE__*/function () {
    function TokenGroup(data, id) {
      _classCallCheck(this, TokenGroup);
      this.data = data;
      this.id = id;
    }
    return _createClass(TokenGroup, [{
      key: "token",
      value: function token(input, stack) {
        var parser = stack.p.parser;
        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
      }
    }]);
  }();
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /**
  @hide
  */
  var LocalTokenGroup = /*#__PURE__*/function () {
    function LocalTokenGroup(data, precTable, elseToken) {
      _classCallCheck(this, LocalTokenGroup);
      this.precTable = precTable;
      this.elseToken = elseToken;
      this.data = typeof data == "string" ? decodeArray(data) : data;
    }
    return _createClass(LocalTokenGroup, [{
      key: "token",
      value: function token(input, stack) {
        var start = input.pos,
          skipped = 0;
        for (;;) {
          var atEof = input.next < 0,
            nextPos = input.resolveOffset(1, 1);
          readToken(this.data, input, stack, 0, this.data, this.precTable);
          if (input.token.value > -1) break;
          if (this.elseToken == null) return;
          if (!atEof) skipped++;
          if (nextPos == null) break;
          input.reset(nextPos, input.token);
        }
        if (skipped) {
          input.reset(start, input.token);
          input.acceptToken(this.elseToken, skipped);
        }
      }
    }]);
  }();
  LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /**
  `@external tokens` declarations in the grammar should resolve to
  an instance of this class.
  */
  var ExternalTokenizer = /*#__PURE__*/_createClass(
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  function ExternalTokenizer(
  /**
  @internal
  */
  token) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ExternalTokenizer);
    this.token = token;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }); // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group, precTable, precOffset) {
    var state = 0,
      groupMask = 1 << group,
      dialect = stack.p.parser.dialect;
    scan: for (;;) {
      if ((groupMask & data[state]) == 0) break;
      var accEnd = data[state + 1];
      // Check whether this state can lead to a token in the current group
      // Accept tokens in this state, possibly overwriting
      // lower-precedence / shorter tokens
      for (var _i164 = state + 3; _i164 < accEnd; _i164 += 2) if ((data[_i164 + 1] & groupMask) > 0) {
        var term = data[_i164];
        if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
          input.acceptToken(term);
          break;
        }
      }
      var next = input.next,
        low = 0,
        high = data[state + 2];
      // Special case for EOF
      if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
        state = data[accEnd + high * 3 - 1];
        continue scan;
      }
      // Do a binary search on the state's edges
      for (; low < high;) {
        var mid = low + high >> 1;
        var index = accEnd + mid + (mid << 1);
        var from = data[index],
          to = data[index + 1] || 0x10000;
        if (next < from) high = mid;else if (next >= to) low = mid + 1;else {
          state = data[index + 2];
          input.advance();
          continue scan;
        }
      }
      break;
    }
  }
  function findOffset(data, start, term) {
    for (var _i165 = start, next; (next = data[_i165]) != 65535 /* Seq.End */; _i165++) if (next == term) return _i165 - start;
    return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
    var iPrev = findOffset(tableData, tableOffset, prev);
    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }

  // Environment variable used to control console output
  var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  var stackIDs = null;
  function cutAt(tree, pos, side) {
    var cursor = tree.cursor(IterMode.IncludeAnonymous);
    cursor.moveTo(pos);
    for (;;) {
      if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {
        if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
        if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;
        if (!cursor.parent()) return side < 0 ? 0 : tree.length;
      }
    }
  }
  var FragmentCursor = /*#__PURE__*/function () {
    function FragmentCursor(fragments, nodeSet) {
      _classCallCheck(this, FragmentCursor);
      this.fragments = fragments;
      this.nodeSet = nodeSet;
      this.i = 0;
      this.fragment = null;
      this.safeFrom = -1;
      this.safeTo = -1;
      this.trees = [];
      this.start = [];
      this.index = [];
      this.nextFragment();
    }
    return _createClass(FragmentCursor, [{
      key: "nextFragment",
      value: function nextFragment() {
        var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
        if (fr) {
          this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
          this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
          while (this.trees.length) {
            this.trees.pop();
            this.start.pop();
            this.index.pop();
          }
          this.trees.push(fr.tree);
          this.start.push(-fr.offset);
          this.index.push(0);
          this.nextStart = this.safeFrom;
        } else {
          this.nextStart = 1e9;
        }
      }
      // `pos` must be >= any previously given `pos` for this cursor
    }, {
      key: "nodeAt",
      value: function nodeAt(pos) {
        if (pos < this.nextStart) return null;
        while (this.fragment && this.safeTo <= pos) this.nextFragment();
        if (!this.fragment) return null;
        for (;;) {
          var last = this.trees.length - 1;
          if (last < 0) {
            // End of tree
            this.nextFragment();
            return null;
          }
          var _top0 = this.trees[last],
            index = this.index[last];
          if (index == _top0.children.length) {
            this.trees.pop();
            this.start.pop();
            this.index.pop();
            continue;
          }
          var next = _top0.children[index];
          var start = this.start[last] + _top0.positions[index];
          if (start > pos) {
            this.nextStart = start;
            return null;
          }
          if (next instanceof Tree) {
            if (start == pos) {
              if (start < this.safeFrom) return null;
              var end = start + next.length;
              if (end <= this.safeTo) {
                var lookAhead = next.prop(NodeProp.lookAhead);
                if (!lookAhead || end + lookAhead < this.fragment.to) return next;
              }
            }
            this.index[last]++;
            if (start + next.length >= Math.max(this.safeFrom, pos)) {
              // Enter this node
              this.trees.push(next);
              this.start.push(start);
              this.index.push(0);
            }
          } else {
            this.index[last]++;
            this.nextStart = start + next.length;
          }
        }
      }
    }]);
  }();
  var TokenCache = /*#__PURE__*/function () {
    function TokenCache(parser, stream) {
      _classCallCheck(this, TokenCache);
      this.stream = stream;
      this.tokens = [];
      this.mainToken = null;
      this.actions = [];
      this.tokens = parser.tokenizers.map(function (_) {
        return new CachedToken();
      });
    }
    return _createClass(TokenCache, [{
      key: "getActions",
      value: function getActions(stack) {
        var actionIndex = 0;
        var main = null;
        var parser = stack.p.parser,
          tokenizers = parser.tokenizers;
        var mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
        var context = stack.curContext ? stack.curContext.hash : 0;
        var lookAhead = 0;
        for (var _i166 = 0; _i166 < tokenizers.length; _i166++) {
          if ((1 << _i166 & mask) == 0) continue;
          var tokenizer = tokenizers[_i166],
            token = this.tokens[_i166];
          if (main && !tokenizer.fallback) continue;
          if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
            this.updateCachedToken(token, tokenizer, stack);
            token.mask = mask;
            token.context = context;
          }
          if (token.lookAhead > token.end + 25 /* Lookahead.Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);
          if (token.value != 0 /* Term.Err */) {
            var startIndex = actionIndex;
            if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
            actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
            if (!tokenizer.extend) {
              main = token;
              if (actionIndex > startIndex) break;
            }
          }
        }
        while (this.actions.length > actionIndex) this.actions.pop();
        if (lookAhead) stack.setLookAhead(lookAhead);
        if (!main && stack.pos == this.stream.end) {
          main = new CachedToken();
          main.value = stack.p.parser.eofTerm;
          main.start = main.end = stack.pos;
          actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
        }
        this.mainToken = main;
        return this.actions;
      }
    }, {
      key: "getMainToken",
      value: function getMainToken(stack) {
        if (this.mainToken) return this.mainToken;
        var main = new CachedToken(),
          pos = stack.pos,
          p = stack.p;
        main.start = pos;
        main.end = Math.min(pos + 1, p.stream.end);
        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
        return main;
      }
    }, {
      key: "updateCachedToken",
      value: function updateCachedToken(token, tokenizer, stack) {
        var start = this.stream.clipPos(stack.pos);
        tokenizer.token(this.stream.reset(start, token), stack);
        if (token.value > -1) {
          var _parser2 = stack.p.parser;
          for (var _i167 = 0; _i167 < _parser2.specialized.length; _i167++) if (_parser2.specialized[_i167] == token.value) {
            var result = _parser2.specializers[_i167](this.stream.read(token.start, token.end), stack);
            if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
              if ((result & 1) == 0 /* Specialize.Specialize */) token.value = result >> 1;else token.extended = result >> 1;
              break;
            }
          }
        } else {
          token.value = 0 /* Term.Err */;
          token.end = this.stream.clipPos(start + 1);
        }
      }
    }, {
      key: "putAction",
      value: function putAction(action, token, end, index) {
        // Don't add duplicate actions
        for (var _i168 = 0; _i168 < index; _i168 += 3) if (this.actions[_i168] == action) return index;
        this.actions[index++] = action;
        this.actions[index++] = token;
        this.actions[index++] = end;
        return index;
      }
    }, {
      key: "addActions",
      value: function addActions(stack, token, end, index) {
        var state = stack.state,
          parser = stack.p.parser,
          data = parser.data;
        for (var set = 0; set < 2; set++) {
          for (var _i169 = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; _i169 += 3) {
            if (data[_i169] == 65535 /* Seq.End */) {
              if (data[_i169 + 1] == 1 /* Seq.Next */) {
                _i169 = pair(data, _i169 + 2);
              } else {
                if (index == 0 && data[_i169 + 1] == 2 /* Seq.Other */) index = this.putAction(pair(data, _i169 + 2), token, end, index);
                break;
              }
            }
            if (data[_i169] == token) index = this.putAction(pair(data, _i169 + 1), token, end, index);
          }
        }
        return index;
      }
    }]);
  }();
  var Parse = /*#__PURE__*/function () {
    function Parse(parser, input, fragments, ranges) {
      _classCallCheck(this, Parse);
      this.parser = parser;
      this.input = input;
      this.ranges = ranges;
      this.recovering = 0;
      this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
      this.minStackPos = 0;
      this.reused = [];
      this.stoppedAt = null;
      this.lastBigReductionStart = -1;
      this.lastBigReductionSize = 0;
      this.bigReductionCount = 0;
      this.stream = new InputStream(input, ranges);
      this.tokens = new TokenCache(parser, this.stream);
      this.topTerm = parser.top[1];
      var from = ranges[0].from;
      this.stacks = [Stack.start(this, parser.top[0], from)];
      this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
    }
    return _createClass(Parse, [{
      key: "parsedPos",
      get: function get() {
        return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
    }, {
      key: "advance",
      value: function advance() {
        var stacks = this.stacks,
          pos = this.minStackPos;
        // This will hold stacks beyond `pos`.
        var newStacks = this.stacks = [];
        var stopped, stoppedTokens;
        // If a large amount of reductions happened with the same start
        // position, force the stack out of that production in order to
        // avoid creating a tree too deep to recurse through.
        // (This is an ugly kludge, because unfortunately there is no
        // straightforward, cheap way to check for this happening, due to
        // the history of reductions only being available in an
        // expensive-to-access format in the stack buffers.)
        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
          var _stacks = _slicedToArray(stacks, 1),
            s = _stacks[0];
          while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {}
          this.bigReductionCount = this.lastBigReductionSize = 0;
        }
        // Keep advancing any stacks at `pos` until they either move
        // forward or can't be advanced. Gather stacks that can't be
        // advanced further in `stopped`.
        for (var _i170 = 0; _i170 < stacks.length; _i170++) {
          var stack = stacks[_i170];
          for (;;) {
            this.tokens.mainToken = null;
            if (stack.pos > pos) {
              newStacks.push(stack);
            } else if (this.advanceStack(stack, newStacks, stacks)) {
              continue;
            } else {
              if (!stopped) {
                stopped = [];
                stoppedTokens = [];
              }
              stopped.push(stack);
              var tok = this.tokens.getMainToken(stack);
              stoppedTokens.push(tok.value, tok.end);
            }
            break;
          }
        }
        if (!newStacks.length) {
          var finished = stopped && findFinished(stopped);
          if (finished) {
            if (verbose) console.log("Finish with " + this.stackID(finished));
            return this.stackToTree(finished);
          }
          if (this.parser.strict) {
            if (verbose && stopped) console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
            throw new SyntaxError("No parse at " + pos);
          }
          if (!this.recovering) this.recovering = 5 /* Rec.Distance */;
        }
        if (this.recovering && stopped) {
          var _finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
          if (_finished) {
            if (verbose) console.log("Force-finish " + this.stackID(_finished));
            return this.stackToTree(_finished.forceAll());
          }
        }
        if (this.recovering) {
          var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
          if (newStacks.length > maxRemaining) {
            newStacks.sort(function (a, b) {
              return b.score - a.score;
            });
            while (newStacks.length > maxRemaining) newStacks.pop();
          }
          if (newStacks.some(function (s) {
            return s.reducePos > pos;
          })) this.recovering--;
        } else if (newStacks.length > 1) {
          // Prune stacks that are in the same state, or that have been
          // running without splitting for a while, to avoid getting stuck
          // with multiple successful stacks running endlessly on.
          outer: for (var _i171 = 0; _i171 < newStacks.length - 1; _i171++) {
            var _stack = newStacks[_i171];
            for (var j = _i171 + 1; j < newStacks.length; j++) {
              var other = newStacks[j];
              if (_stack.sameState(other) || _stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                if ((_stack.score - other.score || _stack.buffer.length - other.buffer.length) > 0) {
                  newStacks.splice(j--, 1);
                } else {
                  newStacks.splice(_i171--, 1);
                  continue outer;
                }
              }
            }
          }
          if (newStacks.length > 12 /* Rec.MaxStackCount */) newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
        }
        this.minStackPos = newStacks[0].pos;
        for (var _i172 = 1; _i172 < newStacks.length; _i172++) if (newStacks[_i172].pos < this.minStackPos) this.minStackPos = newStacks[_i172].pos;
        return null;
      }
    }, {
      key: "stopAt",
      value: function stopAt(pos) {
        if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
        this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
    }, {
      key: "advanceStack",
      value: function advanceStack(stack, stacks, split) {
        var start = stack.pos,
          parser = this.parser;
        var base = verbose ? this.stackID(stack) + " -> " : "";
        if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;
        if (this.fragments) {
          var strictCx = stack.curContext && stack.curContext.tracker.strict,
            cxHash = strictCx ? stack.curContext.hash : 0;
          for (var cached = this.fragments.nodeAt(start); cached;) {
            var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
            if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
              stack.useNode(cached, match);
              if (verbose) console.log(base + this.stackID(stack) + " (via reuse of ".concat(parser.getName(cached.type.id), ")"));
              return true;
            }
            if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;
            var inner = cached.children[0];
            if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;
          }
        }
        var defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
        if (defaultReduce > 0) {
          stack.reduce(defaultReduce);
          if (verbose) console.log(base + this.stackID(stack) + " (via always-reduce ".concat(parser.getName(defaultReduce & 65535 /* Action.ValueMask */), ")"));
          return true;
        }
        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
          while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) {}
        }
        var actions = this.tokens.getActions(stack);
        for (var _i173 = 0; _i173 < actions.length;) {
          var action = actions[_i173++],
            term = actions[_i173++],
            end = actions[_i173++];
          var last = _i173 == actions.length || !split;
          var localStack = last ? stack : stack.split();
          var main = this.tokens.mainToken;
          localStack.apply(action, term, main ? main.start : localStack.pos, end);
          if (verbose) console.log(base + this.stackID(localStack) + " (via ".concat((action & 65536 /* Action.ReduceFlag */) == 0 ? "shift" : "reduce of ".concat(parser.getName(action & 65535 /* Action.ValueMask */)), " for ").concat(parser.getName(term), " @ ").concat(start).concat(localStack == stack ? "" : ", split", ")"));
          if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);
        }
        return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
    }, {
      key: "advanceFully",
      value: function advanceFully(stack, newStacks) {
        var pos = stack.pos;
        for (;;) {
          if (!this.advanceStack(stack, null, null)) return false;
          if (stack.pos > pos) {
            pushStackDedup(stack, newStacks);
            return true;
          }
        }
      }
    }, {
      key: "runRecovery",
      value: function runRecovery(stacks, tokens, newStacks) {
        var finished = null,
          restarted = false;
        for (var _i174 = 0; _i174 < stacks.length; _i174++) {
          var stack = stacks[_i174],
            token = tokens[_i174 << 1],
            tokenEnd = tokens[(_i174 << 1) + 1];
          var _base4 = verbose ? this.stackID(stack) + " -> " : "";
          if (stack.deadEnd) {
            if (restarted) continue;
            restarted = true;
            stack.restart();
            if (verbose) console.log(_base4 + this.stackID(stack) + " (restarted)");
            var done = this.advanceFully(stack, newStacks);
            if (done) continue;
          }
          var force = stack.split(),
            forceBase = _base4;
          for (var j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
            if (verbose) console.log(forceBase + this.stackID(force) + " (via force-reduce)");
            var _done = this.advanceFully(force, newStacks);
            if (_done) break;
            if (verbose) forceBase = this.stackID(force) + " -> ";
          }
          var _iterator215 = _createForOfIteratorHelper(stack.recoverByInsert(token)),
            _step215;
          try {
            for (_iterator215.s(); !(_step215 = _iterator215.n()).done;) {
              var _insert2 = _step215.value;
              if (verbose) console.log(_base4 + this.stackID(_insert2) + " (via recover-insert)");
              this.advanceFully(_insert2, newStacks);
            }
          } catch (err) {
            _iterator215.e(err);
          } finally {
            _iterator215.f();
          }
          if (this.stream.end > stack.pos) {
            if (tokenEnd == stack.pos) {
              tokenEnd++;
              token = 0 /* Term.Err */;
            }
            stack.recoverByDelete(token, tokenEnd);
            if (verbose) console.log(_base4 + this.stackID(stack) + " (via recover-delete ".concat(this.parser.getName(token), ")"));
            pushStackDedup(stack, newStacks);
          } else if (!finished || finished.score < stack.score) {
            finished = stack;
          }
        }
        return finished;
      }
      // Convert the stack's buffer to a syntax tree.
    }, {
      key: "stackToTree",
      value: function stackToTree(stack) {
        stack.close();
        return Tree.build({
          buffer: StackBufferCursor.create(stack),
          nodeSet: this.parser.nodeSet,
          topID: this.topTerm,
          maxBufferLength: this.parser.bufferLength,
          reused: this.reused,
          start: this.ranges[0].from,
          length: stack.pos - this.ranges[0].from,
          minRepeatType: this.parser.minRepeatTerm
        });
      }
    }, {
      key: "stackID",
      value: function stackID(stack) {
        var id = (stackIDs || (stackIDs = new WeakMap())).get(stack);
        if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
        return id + stack;
      }
    }]);
  }();
  function pushStackDedup(stack, newStacks) {
    for (var _i175 = 0; _i175 < newStacks.length; _i175++) {
      var other = newStacks[_i175];
      if (other.pos == stack.pos && other.sameState(stack)) {
        if (newStacks[_i175].score < stack.score) newStacks[_i175] = stack;
        return;
      }
    }
    newStacks.push(stack);
  }
  var Dialect = /*#__PURE__*/function () {
    function Dialect(source, flags, disabled) {
      _classCallCheck(this, Dialect);
      this.source = source;
      this.flags = flags;
      this.disabled = disabled;
    }
    return _createClass(Dialect, [{
      key: "allows",
      value: function allows(term) {
        return !this.disabled || this.disabled[term] == 0;
      }
    }]);
  }();
  var id = function id(x) {
    return x;
  };
  /**
  Context trackers are used to track stateful context (such as
  indentation in the Python grammar, or parent elements in the XML
  grammar) needed by external tokenizers. You declare them in a
  grammar file as `@context exportName from "module"`.
   Context values should be immutable, and can be updated (replaced)
  on shift or reduce actions.
   The export used in a `@context` declaration should be of this
  type.
  */
  var ContextTracker = /*#__PURE__*/_createClass(
  /**
  Define a context tracker.
  */
  function ContextTracker(spec) {
    _classCallCheck(this, ContextTracker);
    this.start = spec.start;
    this.shift = spec.shift || id;
    this.reduce = spec.reduce || id;
    this.reuse = spec.reuse || id;
    this.hash = spec.hash || function () {
      return 0;
    };
    this.strict = spec.strict !== false;
  });
  /**
  Holds the parse tables for a given grammar, as generated by
  `lezer-generator`, and provides [methods](#common.Parser) to parse
  content with.
  */
  var LRParser = /*#__PURE__*/function (_Parser2) {
    /**
    @internal
    */
    function LRParser(spec) {
      var _this92$nodeSet;
      var _this92;
      _classCallCheck(this, LRParser);
      _this92 = _callSuper(this, LRParser);
      /**
      @internal
      */
      _this92.wrappers = [];
      if (spec.version != 14 /* File.Version */) throw new RangeError("Parser version (".concat(spec.version, ") doesn't match runtime version (", 14 /* File.Version */, ")"));
      var nodeNames = spec.nodeNames.split(" ");
      _this92.minRepeatTerm = nodeNames.length;
      for (var _i176 = 0; _i176 < spec.repeatNodeCount; _i176++) nodeNames.push("");
      var topTerms = Object.keys(spec.topRules).map(function (r) {
        return spec.topRules[r][1];
      });
      var nodeProps = [];
      for (var _i177 = 0; _i177 < nodeNames.length; _i177++) nodeProps.push([]);
      function setProp(nodeID, prop, value) {
        nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
      }
      if (spec.nodeProps) {
        var _iterator216 = _createForOfIteratorHelper(spec.nodeProps),
          _step216;
        try {
          for (_iterator216.s(); !(_step216 = _iterator216.n()).done;) {
            var propSpec = _step216.value;
            var prop = propSpec[0];
            if (typeof prop == "string") prop = NodeProp[prop];
            for (var _i178 = 1; _i178 < propSpec.length;) {
              var next = propSpec[_i178++];
              if (next >= 0) {
                setProp(next, prop, propSpec[_i178++]);
              } else {
                var value = propSpec[_i178 + -next];
                for (var j = -next; j > 0; j--) setProp(propSpec[_i178++], prop, value);
                _i178++;
              }
            }
          }
        } catch (err) {
          _iterator216.e(err);
        } finally {
          _iterator216.f();
        }
      }
      _this92.nodeSet = new NodeSet(nodeNames.map(function (name, i) {
        return NodeType.define({
          name: i >= _this92.minRepeatTerm ? undefined : name,
          id: i,
          props: nodeProps[i],
          top: topTerms.indexOf(i) > -1,
          error: i == 0,
          skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
        });
      }));
      if (spec.propSources) _this92.nodeSet = (_this92$nodeSet = _this92.nodeSet).extend.apply(_this92$nodeSet, _toConsumableArray(spec.propSources));
      _this92.strict = false;
      _this92.bufferLength = DefaultBufferLength;
      var tokenArray = decodeArray(spec.tokenData);
      _this92.context = spec.context;
      _this92.specializerSpecs = spec.specialized || [];
      _this92.specialized = new Uint16Array(_this92.specializerSpecs.length);
      for (var _i179 = 0; _i179 < _this92.specializerSpecs.length; _i179++) _this92.specialized[_i179] = _this92.specializerSpecs[_i179].term;
      _this92.specializers = _this92.specializerSpecs.map(getSpecializer);
      _this92.states = decodeArray(spec.states, Uint32Array);
      _this92.data = decodeArray(spec.stateData);
      _this92["goto"] = decodeArray(spec["goto"]);
      _this92.maxTerm = spec.maxTerm;
      _this92.tokenizers = spec.tokenizers.map(function (value) {
        return typeof value == "number" ? new TokenGroup(tokenArray, value) : value;
      });
      _this92.topRules = spec.topRules;
      _this92.dialects = spec.dialects || {};
      _this92.dynamicPrecedences = spec.dynamicPrecedences || null;
      _this92.tokenPrecTable = spec.tokenPrec;
      _this92.termNames = spec.termNames || null;
      _this92.maxNode = _this92.nodeSet.types.length - 1;
      _this92.dialect = _this92.parseDialect();
      _this92.top = _this92.topRules[Object.keys(_this92.topRules)[0]];
      return _this92;
    }
    _inherits(LRParser, _Parser2);
    return _createClass(LRParser, [{
      key: "createParse",
      value: function createParse(input, fragments, ranges) {
        var parse = new Parse(this, input, fragments, ranges);
        var _iterator217 = _createForOfIteratorHelper(this.wrappers),
          _step217;
        try {
          for (_iterator217.s(); !(_step217 = _iterator217.n()).done;) {
            var w = _step217.value;
            parse = w(parse, input, fragments, ranges);
          }
        } catch (err) {
          _iterator217.e(err);
        } finally {
          _iterator217.f();
        }
        return parse;
      }
      /**
      Get a goto table entry @internal
      */
    }, {
      key: "getGoto",
      value: function getGoto(state, term) {
        var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var table = this["goto"];
        if (term >= table[0]) return -1;
        for (var pos = table[term + 1];;) {
          var groupTag = table[pos++],
            last = groupTag & 1;
          var target = table[pos++];
          if (last && loose) return target;
          for (var end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;
          if (last) return -1;
        }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
    }, {
      key: "hasAction",
      value: function hasAction(state, terminal) {
        var data = this.data;
        for (var set = 0; set < 2; set++) {
          for (var _i180 = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; _i180 += 3) {
            if ((next = data[_i180]) == 65535 /* Seq.End */) {
              if (data[_i180 + 1] == 1 /* Seq.Next */) next = data[_i180 = pair(data, _i180 + 2)];else if (data[_i180 + 1] == 2 /* Seq.Other */) return pair(data, _i180 + 2);else break;
            }
            if (next == terminal || next == 0 /* Term.Err */) return pair(data, _i180 + 1);
          }
        }
        return 0;
      }
      /**
      @internal
      */
    }, {
      key: "stateSlot",
      value: function stateSlot(state, slot) {
        return this.states[state * 6 /* ParseState.Size */ + slot];
      }
      /**
      @internal
      */
    }, {
      key: "stateFlag",
      value: function stateFlag(state, flag) {
        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
      }
      /**
      @internal
      */
    }, {
      key: "validAction",
      value: function validAction(state, action) {
        return !!this.allActions(state, function (a) {
          return a == action ? true : null;
        });
      }
      /**
      @internal
      */
    }, {
      key: "allActions",
      value: function allActions(state, action) {
        var deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
        var result = deflt ? action(deflt) : undefined;
        for (var _i181 = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; _i181 += 3) {
          if (this.data[_i181] == 65535 /* Seq.End */) {
            if (this.data[_i181 + 1] == 1 /* Seq.Next */) _i181 = pair(this.data, _i181 + 2);else break;
          }
          result = action(pair(this.data, _i181 + 1));
        }
        return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
    }, {
      key: "nextStates",
      value: function nextStates(state) {
        var _this93 = this;
        var result = [];
        var _loop16 = function _loop16(_i183) {
          if (_this93.data[_i183] == 65535 /* Seq.End */) {
            if (_this93.data[_i183 + 1] == 1 /* Seq.Next */) _i183 = pair(_this93.data, _i183 + 2);else {
              _i182 = _i183;
              return 1;
            } // break
          }
          if ((_this93.data[_i183 + 2] & 65536 /* Action.ReduceFlag */ >> 16) == 0) {
            var value = _this93.data[_i183 + 1];
            if (!result.some(function (v, i) {
              return i & 1 && v == value;
            })) result.push(_this93.data[_i183], value);
          }
          _i182 = _i183;
        };
        for (var _i182 = this.stateSlot(state, 1 /* ParseState.Actions */);; _i182 += 3) {
          if (_loop16(_i182)) break;
        }
        return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
    }, {
      key: "configure",
      value: function configure(config) {
        var _this$nodeSet;
        // Hideous reflection-based kludge to make it easy to create a
        // slightly modified copy of a parser.
        var copy = Object.assign(Object.create(LRParser.prototype), this);
        if (config.props) copy.nodeSet = (_this$nodeSet = this.nodeSet).extend.apply(_this$nodeSet, _toConsumableArray(config.props));
        if (config.top) {
          var info = this.topRules[config.top];
          if (!info) throw new RangeError("Invalid top rule name ".concat(config.top));
          copy.top = info;
        }
        if (config.tokenizers) copy.tokenizers = this.tokenizers.map(function (t) {
          var found = config.tokenizers.find(function (r) {
            return r.from == t;
          });
          return found ? found.to : t;
        });
        if (config.specializers) {
          copy.specializers = this.specializers.slice();
          copy.specializerSpecs = this.specializerSpecs.map(function (s, i) {
            var found = config.specializers.find(function (r) {
              return r.from == s.external;
            });
            if (!found) return s;
            var spec = Object.assign(Object.assign({}, s), {
              external: found.to
            });
            copy.specializers[i] = getSpecializer(spec);
            return spec;
          });
        }
        if (config.contextTracker) copy.context = config.contextTracker;
        if (config.dialect) copy.dialect = this.parseDialect(config.dialect);
        if (config.strict != null) copy.strict = config.strict;
        if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);
        if (config.bufferLength != null) copy.bufferLength = config.bufferLength;
        return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
    }, {
      key: "hasWrappers",
      value: function hasWrappers() {
        return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
    }, {
      key: "getName",
      value: function getName(term) {
        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
    }, {
      key: "eofTerm",
      get: function get() {
        return this.maxNode + 1;
      }
      /**
      The type of top node produced by the parser.
      */
    }, {
      key: "topNode",
      get: function get() {
        return this.nodeSet.types[this.top[1]];
      }
      /**
      @internal
      */
    }, {
      key: "dynamicPrecedence",
      value: function dynamicPrecedence(term) {
        var prec = this.dynamicPrecedences;
        return prec == null ? 0 : prec[term] || 0;
      }
      /**
      @internal
      */
    }, {
      key: "parseDialect",
      value: function parseDialect(dialect) {
        var values = Object.keys(this.dialects),
          flags = values.map(function () {
            return false;
          });
        if (dialect) {
          var _iterator218 = _createForOfIteratorHelper(dialect.split(" ")),
            _step218;
          try {
            for (_iterator218.s(); !(_step218 = _iterator218.n()).done;) {
              var part = _step218.value;
              var _id4 = values.indexOf(part);
              if (_id4 >= 0) flags[_id4] = true;
            }
          } catch (err) {
            _iterator218.e(err);
          } finally {
            _iterator218.f();
          }
        }
        var disabled = null;
        for (var _i184 = 0; _i184 < values.length; _i184++) if (!flags[_i184]) {
          for (var j = this.dialects[values[_i184]], _id5; (_id5 = this.data[j++]) != 65535 /* Seq.End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[_id5] = 1;
        }
        return new Dialect(dialect, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
    }], [{
      key: "deserialize",
      value: function deserialize(spec) {
        return new LRParser(spec);
      }
    }]);
  }(Parser);
  function pair(data, off) {
    return data[off] | data[off + 1] << 16;
  }
  function findFinished(stacks) {
    var best = null;
    var _iterator219 = _createForOfIteratorHelper(stacks),
      _step219;
    try {
      for (_iterator219.s(); !(_step219 = _iterator219.n()).done;) {
        var stack = _step219.value;
        var stopped = stack.p.stoppedAt;
        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) && (!best || best.score < stack.score)) best = stack;
      }
    } catch (err) {
      _iterator219.e(err);
    } finally {
      _iterator219.f();
    }
    return best;
  }
  function getSpecializer(spec) {
    if (spec.external) {
      var mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
      return function (value, stack) {
        return spec.external(value, stack) << 1 | mask;
      };
    }
    return spec.get;
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  var noSemi = 315,
    noSemiType = 316,
    incdec = 1,
    incdecPrefix = 2,
    questionDot = 3,
    JSXStartTag = 4,
    insertSemi = 317,
    spaces = 319,
    newline = 320,
    LineComment = 5,
    BlockComment = 6,
    Dialect_jsx = 0;

  /* Hand-written tokenizers for JavaScript tokens that can't be
     expressed by lezer's built-in tokenizer. */

  var space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
  var braceR = 125,
    semicolon = 59,
    slash = 47,
    star = 42,
    plus = 43,
    minus = 45,
    lt = 60,
    comma = 44,
    question = 63,
    dot = 46,
    bracketL = 91;
  var trackNewline = new ContextTracker({
    start: false,
    shift: function shift(context, term) {
      return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
    },
    strict: false
  });
  var insertSemicolon = new ExternalTokenizer(function (input, stack) {
    var next = input.next;
    if (next == braceR || next == -1 || stack.context) input.acceptToken(insertSemi);
  }, {
    contextual: true,
    fallback: true
  });
  var noSemicolon = new ExternalTokenizer(function (input, stack) {
    var next = input.next,
      after;
    if (space.indexOf(next) > -1) return;
    if (next == slash && ((after = input.peek(1)) == slash || after == star)) return;
    if (next != braceR && next != semicolon && next != -1 && !stack.context) input.acceptToken(noSemi);
  }, {
    contextual: true
  });
  var noSemicolonType = new ExternalTokenizer(function (input, stack) {
    if (input.next == bracketL && !stack.context) input.acceptToken(noSemiType);
  }, {
    contextual: true
  });
  var operatorToken = new ExternalTokenizer(function (input, stack) {
    var next = input.next;
    if (next == plus || next == minus) {
      input.advance();
      if (next == input.next) {
        input.advance();
        var mayPostfix = !stack.context && stack.canShift(incdec);
        input.acceptToken(mayPostfix ? incdec : incdecPrefix);
      }
    } else if (next == question && input.peek(1) == dot) {
      input.advance();
      input.advance();
      if (input.next < 48 || input.next > 57)
        // No digit after
        input.acceptToken(questionDot);
    }
  }, {
    contextual: true
  });
  function identifierChar(ch, start) {
    return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 || !start && ch >= 48 && ch <= 57;
  }
  var jsx = new ExternalTokenizer(function (input, stack) {
    if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return;
    input.advance();
    if (input.next == slash) return;
    // Scan for an identifier followed by a comma or 'extends', don't
    // treat this as a start tag if present.
    var back = 0;
    while (space.indexOf(input.next) > -1) {
      input.advance();
      back++;
    }
    if (identifierChar(input.next, true)) {
      input.advance();
      back++;
      while (identifierChar(input.next, false)) {
        input.advance();
        back++;
      }
      while (space.indexOf(input.next) > -1) {
        input.advance();
        back++;
      }
      if (input.next == comma) return;
      for (var _i185 = 0;; _i185++) {
        if (_i185 == 7) {
          if (!identifierChar(input.next, true)) return;
          break;
        }
        if (input.next != "extends".charCodeAt(_i185)) break;
        input.advance();
        back++;
      }
    }
    input.acceptToken(JSXStartTag, -back);
  });
  var jsHighlight = styleTags({
    "get set async static": tags.modifier,
    "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
    "in of await yield void typeof delete instanceof as satisfies": tags.operatorKeyword,
    "let var const using function class extends": tags.definitionKeyword,
    "import export from": tags.moduleKeyword,
    "with debugger new": tags.keyword,
    TemplateString: tags.special(tags.string),
    "super": tags.atom,
    BooleanLiteral: tags.bool,
    "this": tags.self,
    "null": tags["null"],
    Star: tags.modifier,
    VariableName: tags.variableName,
    "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags["function"](tags.variableName),
    VariableDefinition: tags.definition(tags.variableName),
    Label: tags.labelName,
    PropertyName: tags.propertyName,
    PrivatePropertyName: tags.special(tags.propertyName),
    "CallExpression/MemberExpression/PropertyName": tags["function"](tags.propertyName),
    "FunctionDeclaration/VariableDefinition": tags["function"](tags.definition(tags.variableName)),
    "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
    "NewExpression/VariableName": tags.className,
    PropertyDefinition: tags.definition(tags.propertyName),
    PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
    UpdateOp: tags.updateOperator,
    "LineComment Hashbang": tags.lineComment,
    BlockComment: tags.blockComment,
    Number: tags.number,
    String: tags.string,
    Escape: tags.escape,
    ArithOp: tags.arithmeticOperator,
    LogicOp: tags.logicOperator,
    BitOp: tags.bitwiseOperator,
    CompareOp: tags.compareOperator,
    RegExp: tags.regexp,
    Equals: tags.definitionOperator,
    Arrow: tags["function"](tags.punctuation),
    ": Spread": tags.punctuation,
    "( )": tags.paren,
    "[ ]": tags.squareBracket,
    "{ }": tags.brace,
    "InterpolationStart InterpolationEnd": tags.special(tags.brace),
    ".": tags.derefOperator,
    ", ;": tags.separator,
    "@": tags.meta,
    TypeName: tags.typeName,
    TypeDefinition: tags.definition(tags.typeName),
    "type enum interface implements namespace module declare": tags.definitionKeyword,
    "abstract global Privacy readonly override": tags.modifier,
    "is keyof unique infer asserts": tags.operatorKeyword,
    JSXAttributeValue: tags.attributeValue,
    JSXText: tags.content,
    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
    "JSXIdentifier JSXNameSpacedName": tags.tagName,
    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
    "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  var spec_identifier = {
    __proto__: null,
    "export": 20,
    as: 25,
    from: 33,
    "default": 36,
    async: 41,
    "function": 42,
    "in": 52,
    out: 55,
    "const": 56,
    "extends": 60,
    "this": 64,
    "true": 72,
    "false": 72,
    "null": 84,
    "void": 88,
    "typeof": 92,
    "super": 108,
    "new": 142,
    "delete": 154,
    "yield": 163,
    "await": 167,
    "class": 172,
    "public": 235,
    "private": 235,
    "protected": 235,
    readonly: 237,
    "instanceof": 256,
    satisfies: 259,
    "import": 292,
    keyof: 349,
    unique: 353,
    infer: 359,
    asserts: 395,
    is: 397,
    "abstract": 417,
    "implements": 419,
    type: 421,
    "let": 424,
    "var": 426,
    using: 429,
    "interface": 435,
    "enum": 439,
    namespace: 445,
    module: 447,
    declare: 451,
    global: 455,
    "for": 474,
    of: 483,
    "while": 486,
    "with": 490,
    "do": 494,
    "if": 498,
    "else": 500,
    "switch": 504,
    "case": 510,
    "try": 516,
    "catch": 520,
    "finally": 524,
    "return": 528,
    "throw": 532,
    "break": 536,
    "continue": 540,
    "debugger": 544
  };
  var spec_word = {
    __proto__: null,
    async: 129,
    get: 131,
    set: 133,
    declare: 195,
    "public": 197,
    "private": 197,
    "protected": 197,
    "static": 199,
    "abstract": 201,
    override: 203,
    readonly: 209,
    accessor: 211,
    "new": 401
  };
  var spec_LessThan = {
    __proto__: null,
    "<": 193
  };
  var parser = LRParser.deserialize({
    version: 14,
    states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
    stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
    "goto": "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
    nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
    maxTerm: 379,
    context: trackNewline,
    nodeProps: [["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""], ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"], ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"], ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]],
    propSources: [jsHighlight],
    skippedNodes: [0, 5, 6, 277],
    repeatNodeCount: 37,
    tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
    tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new LocalTokenGroup("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
    topRules: {
      "Script": [0, 7],
      "SingleExpression": [1, 275],
      "SingleClassItem": [2, 276]
    },
    dialects: {
      jsx: 0,
      ts: 15098
    },
    dynamicPrecedences: {
      "80": 1,
      "82": 1,
      "94": 1,
      "169": 1,
      "199": 1
    },
    specialized: [{
      term: 326,
      get: function get(value) {
        return spec_identifier[value] || -1;
      }
    }, {
      term: 342,
      get: function get(value) {
        return spec_word[value] || -1;
      }
    }, {
      term: 95,
      get: function get(value) {
        return spec_LessThan[value] || -1;
      }
    }],
    tokenPrec: 15124
  });

  /**
  A collection of JavaScript-related
  [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
  */
  var snippets = [/*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
    label: "import",
    detail: "named",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
    label: "import",
    detail: "default",
    type: "keyword"
  })];
  /**
  A collection of snippet completions for TypeScript. Includes the
  JavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).
  */
  var typescriptSnippets = /*@__PURE__*/snippets.concat([/*@__PURE__*/snippetCompletion("interface ${name} {\n\t${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }), /*@__PURE__*/snippetCompletion("enum ${name} {\n\t${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })]);
  var cache = /*@__PURE__*/new NodeWeakMap();
  var ScopeNodes = /*@__PURE__*/new Set(["Script", "Block", "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration", "ForStatement"]);
  function defID(type) {
    return function (node, def) {
      var id = node.node.getChild("VariableDefinition");
      if (id) def(id, type);
      return true;
    };
  }
  var functionContext = ["FunctionDeclaration"];
  var gatherCompletions = {
    FunctionDeclaration: /*@__PURE__*/defID("function"),
    ClassDeclaration: /*@__PURE__*/defID("class"),
    ClassExpression: function ClassExpression() {
      return true;
    },
    EnumDeclaration: /*@__PURE__*/defID("constant"),
    TypeAliasDeclaration: /*@__PURE__*/defID("type"),
    NamespaceDeclaration: /*@__PURE__*/defID("namespace"),
    VariableDefinition: function VariableDefinition(node, def) {
      if (!node.matchContext(functionContext)) def(node, "variable");
    },
    TypeDefinition: function TypeDefinition(node, def) {
      def(node, "type");
    },
    __proto__: null
  };
  function getScope(doc, node) {
    var cached = cache.get(node);
    if (cached) return cached;
    var completions = [],
      top = true;
    function def(node, type) {
      var name = doc.sliceString(node.from, node.to);
      completions.push({
        label: name,
        type: type
      });
    }
    node.cursor(IterMode.IncludeAnonymous).iterate(function (node) {
      if (top) {
        top = false;
      } else if (node.name) {
        var gather = gatherCompletions[node.name];
        if (gather && gather(node, def) || ScopeNodes.has(node.name)) return false;
      } else if (node.to - node.from > 8192) {
        // Allow caching for bigger internal nodes
        var _iterator220 = _createForOfIteratorHelper(getScope(doc, node.node)),
          _step220;
        try {
          for (_iterator220.s(); !(_step220 = _iterator220.n()).done;) {
            var c = _step220.value;
            completions.push(c);
          }
        } catch (err) {
          _iterator220.e(err);
        } finally {
          _iterator220.f();
        }
        return false;
      }
    });
    cache.set(node, completions);
    return completions;
  }
  var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
  var dontComplete = ["TemplateString", "String", "RegExp", "LineComment", "BlockComment", "VariableDefinition", "TypeDefinition", "Label", "PropertyDefinition", "PropertyName", "PrivatePropertyDefinition", "PrivatePropertyName", "JSXText", "JSXAttributeValue", "JSXOpenTag", "JSXCloseTag", "JSXSelfClosingTag", ".", "?."];
  /**
  Completion source that looks up locally defined names in
  JavaScript code.
  */
  function localCompletionSource(context) {
    var inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (dontComplete.indexOf(inner.name) > -1) return null;
    var isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context.explicit) return null;
    var options = [];
    for (var pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes.has(pos.name)) options = options.concat(getScope(context.state.doc, pos));
    }
    return {
      options: options,
      from: isWord ? inner.from : context.pos,
      validFor: Identifier
    };
  }

  /**
  A language provider based on the [Lezer JavaScript
  parser](https://github.com/lezer-parser/javascript), extended with
  highlighting and indentation information.
  */
  var javascriptLanguage = /*@__PURE__*/LRLanguage.define({
    name: "javascript",
    parser: /*@__PURE__*/parser.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        IfStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|else\b)/
        }),
        TryStatement: /*@__PURE__*/continuedIndent({
          except: /^\s*({|catch\b|finally\b)/
        }),
        LabeledStatement: flatIndent,
        SwitchBody: function SwitchBody(context) {
          var after = context.textAfter,
            closed = /^\s*\}/.test(after),
            isCase = /^\s*(case|default)\b/.test(after);
          return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: /*@__PURE__*/delimitedIndent({
          closing: "}"
        }),
        ArrowFunction: function ArrowFunction(cx) {
          return cx.baseIndent + cx.unit;
        },
        "TemplateString BlockComment": function TemplateString_BlockComment() {
          return null;
        },
        "Statement Property": /*@__PURE__*/continuedIndent({
          except: /^\s*{/
        }),
        JSXElement: function JSXElement(context) {
          var closed = /^\s*<\//.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        JSXEscape: function JSXEscape(context) {
          var closed = /\s*\}/.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        "JSXOpenTag JSXSelfClosingTag": function JSXOpenTag_JSXSelfClosingTag(context) {
          return context.column(context.node.from) + context.unit;
        }
      }), /*@__PURE__*/foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
        BlockComment: function BlockComment(tree) {
          return {
            from: tree.from + 2,
            to: tree.to - 2
          };
        }
      })]
    }),
    languageData: {
      closeBrackets: {
        brackets: ["(", "[", "{", "'", '"', "`"]
      },
      commentTokens: {
        line: "//",
        block: {
          open: "/*",
          close: "*/"
        }
      },
      indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
      wordChars: "$"
    }
  });
  var jsxSublanguage = {
    test: function test(node) {
      return /^JSX/.test(node.name);
    },
    facet: /*@__PURE__*/defineLanguageFacet({
      commentTokens: {
        block: {
          open: "{/*",
          close: "*/}"
        }
      }
    })
  };
  /**
  A language provider for TypeScript.
  */
  var typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "ts"
  }, "typescript");
  /**
  Language provider for JSX.
  */
  var jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "jsx",
    props: [/*@__PURE__*/sublanguageProp.add(function (n) {
      return n.isTop ? [jsxSublanguage] : undefined;
    })]
  });
  /**
  Language provider for JSX + TypeScript.
  */
  var tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
    dialect: "jsx ts",
    props: [/*@__PURE__*/sublanguageProp.add(function (n) {
      return n.isTop ? [jsxSublanguage] : undefined;
    })]
  }, "typescript");
  var kwCompletion = function kwCompletion(name) {
    return {
      label: name,
      type: "keyword"
    };
  };
  var keywords = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
  var typescriptKeywords = /*@__PURE__*/keywords.concat(/*@__PURE__*/["declare", "implements", "private", "protected", "public"].map(kwCompletion));
  /**
  JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
  and local variable completion.
  */
  function javascript() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;
    var completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
    return new LanguageSupport(lang, [javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(completions))
    }), javascriptLanguage.data.of({
      autocomplete: localCompletionSource
    }), config.jsx ? autoCloseTags : []]);
  }
  function findOpenTag(node) {
    for (;;) {
      if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag") return node;
      if (node.name == "JSXEscape" || !node.parent) return null;
      node = node.parent;
    }
  }
  function elementName(doc, tree) {
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
    for (var ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
      if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" || ch.name == "JSXMemberExpression") return doc.sliceString(ch.from, Math.min(ch.to, max));
    }
    return "";
  }
  var android = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  /**
  Extension that will automatically insert JSX close tags when a `>` or
  `/` is typed.
  */
  var autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of(function (view, from, to, text, defaultInsert) {
    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from, -1)) return false;
    var base = defaultInsert(),
      state = base.state;
    var closeTags = state.changeByRange(function (range) {
      var _a;
      var head = range.head,
        around = syntaxTree(state).resolveInner(head - 1, -1),
        name;
      if (around.name == "JSXStartTag") around = around.parent;
      if (state.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;else if (text == ">" && around.name == "JSXFragmentTag") {
        return {
          range: range,
          changes: {
            from: head,
            insert: "</>"
          }
        };
      } else if (text == "/" && around.name == "JSXStartCloseTag") {
        var empty = around.parent,
          _base5 = empty.parent;
        if (_base5 && empty.from == head - 2 && ((name = elementName(state.doc, _base5.firstChild, head)) || ((_a = _base5.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "JSXFragmentTag")) {
          var _insert3 = "".concat(name, ">");
          return {
            range: EditorSelection.cursor(head + _insert3.length, -1),
            changes: {
              from: head,
              insert: _insert3
            }
          };
        }
      } else if (text == ">") {
        var openTag = findOpenTag(around);
        if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name = elementName(state.doc, openTag, head))) return {
          range: range,
          changes: {
            from: head,
            insert: "</".concat(name, ">")
          }
        };
      }
      return {
        range: range
      };
    });
    if (closeTags.changes.empty) return false;
    view.dispatch([base, state.update(closeTags, {
      userEvent: "input.complete",
      scrollIntoView: true
    })]);
    return true;
  });
  function createEditorState(initialContents) {
    var onchange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var extensions = [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), indentUnit.of("    "), EditorState.allowMultipleSelections.of(true), indentOnInput(), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), keymap.of([indentWithTab].concat(closeBracketsKeymap, _toConsumableArray(defaultKeymap), historyKeymap, foldKeymap, completionKeymap)), javascript(), syntaxHighlighting(defaultHighlightStyle, {
      fallback: true
    })];
    if (onchange) {
      extensions.push(EditorView.updateListener.of(function (e) {
        if (e.docChanged) {
          onchange(e);
        }
      }));
    }
    return EditorState.create({
      doc: initialContents,
      extensions: extensions
    });
  }
  function createEditorView(state, parent) {
    return new EditorView({
      state: state,
      parent: parent
    });
  }
  exports.createEditorState = createEditorState;
  exports.createEditorView = createEditorView;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  return exports;
}({});
